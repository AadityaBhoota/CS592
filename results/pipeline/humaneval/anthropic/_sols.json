{
    "HumanEval/0": [
        "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
        "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False\n",
        "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    numbers.sort()\n    has_close = False\n    for i in range(1, len(numbers)):\n        if abs(numbers[i] - numbers[i-1]) < threshold:\n            has_close = True\n            break\n    return has_close\n",
        "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
        "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    min_diff = float('inf')\n    \n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            min_diff = min(min_diff, diff)\n    \n    return min_diff <= threshold\n"
    ],
    "HumanEval/1": [
        "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    start = 0\n    stack = []\n\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            stack.append(i)\n        elif char == ')':\n            if stack:\n                if len(stack) == 1:\n                    result.append(paren_string[stack[0]:i+1])\n                    start = i + 1\n                stack.pop()\n\n    return result\n",
        "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_group = \"\"\n    open_count = 0\n    close_count = 0\n\n    for char in paren_string:\n        if char == '(':\n            open_count += 1\n            current_group += char\n        elif char == ')':\n            close_count += 1\n            current_group += char\n        else:  # Ignore spaces\n            continue\n\n        if open_count == close_count:\n            result.append(current_group)\n            current_group = \"\"\n            open_count = 0\n            close_count = 0\n\n    if current_group:\n        result.append(current_group)\n\n    return result\n",
        "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_group = \"\"\n    nesting_level = 0\n\n    for char in paren_string.replace(\" \", \"\"):\n        if char == \"(\":\n            nesting_level += 1\n            current_group += char\n        elif char == \")\":\n            nesting_level -= 1\n            current_group += char\n            if nesting_level == 0:\n                result.append(current_group)\n                current_group = \"\"\n\n    return result\n",
        "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    current_group = \"\"\n    nesting_level = 0\n    \n    for char in paren_string:\n        if char == '(':\n            nesting_level += 1\n            current_group += char\n        elif char == ')':\n            nesting_level -= 1\n            current_group += char\n            if nesting_level == 0:\n                groups.append(current_group)\n                current_group = \"\"\n        elif char != ' ':\n            current_group += char\n    \n    return groups\n",
        "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    stack = []\n    current_group = \"\"\n\n    for char in paren_string:\n        if char == \"(\":\n            stack.append(char)\n            current_group += char\n        elif char == \")\":\n            if stack:\n                stack.pop()\n                current_group += char\n                if not stack:\n                    result.append(current_group)\n                    current_group = \"\"\n        elif char == \" \":\n            continue\n\n    return result\n"
    ],
    "HumanEval/2": [
        "import math\n\ndef truncate_number(number: float) -> float:\n    return math.modf(number)[0]\n",
        "def truncate_number(number: float) -> float:\n    \"\"\"\n    Given a positive floating point number, it can be decomposed into\n    an integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    \n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part\n",
        "def truncate_number(number: float) -> float:\n    \"\"\"\n    Given a positive floating point number, it can be decomposed into\n    an integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    \n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part\n",
        "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part\n",
        "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part\n"
    ],
    "HumanEval/3": [
        "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
        "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
        "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
        "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n",
        "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n"
    ],
    "HumanEval/4": [
        "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    absolute_differences = [abs(num - mean) for num in numbers]\n    mad = sum(absolute_differences) / len(numbers)\n    return mad\n",
        "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    absolute_diffs = [abs(num - mean) for num in numbers]\n    mad = sum(absolute_diffs) / len(numbers)\n    return mad\n",
        "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    abs_diffs = [abs(num - mean) for num in numbers]\n    mad = sum(abs_diffs) / len(abs_diffs)\n    return mad\n",
        "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    abs_diffs = [abs(num - mean) for num in numbers]\n    mad = sum(abs_diffs) / len(numbers)\n    return mad\n",
        "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    abs_diffs = [abs(num - mean) for num in numbers]\n    mad = sum(abs_diffs) / len(abs_diffs)\n    return mad\n"
    ],
    "HumanEval/5": [
        "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result\n",
        "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"Insert a number 'delimeter' between every two consecutive elements of input list `numbers`\"\"\"\n    result = [num for i, num in enumerate(numbers) if i == 0 or i > 0]\n    return result\n",
        "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers`.\n    \n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n    \n    result = [numbers[0]]\n    result.extend([delimeter, num] for num in numbers[1:])\n    return result\n",
        "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers`.\n    \n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    if not numbers:\n        return result\n    \n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    \n    return result\n",
        "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result\n"
    ],
    "HumanEval/6": [
        "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    groups = paren_string.split()\n    \n    for group in groups:\n        current_level = 0\n        max_level = 0\n        \n        for char in group:\n            if char == '(':\n                current_level += 1\n            elif char == ')':\n                current_level -= 1\n            \n            max_level = max(max_level, current_level)\n        \n        result.append(max_level)\n    \n    return result\n",
        "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    output = []\n    for group in paren_string.split():\n        max_nesting = 0\n        current_nesting = 0\n        for char in group:\n            if char == '(':\n                current_nesting += 1\n                max_nesting = max(max_nesting, current_nesting)\n            elif char == ')':\n                current_nesting -= 1\n        output.append(max_nesting)\n    return output\n",
        "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    stack = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(len(stack))\n        elif char == ')':\n            result.append(len(stack))\n            stack.pop()\n    return result\n",
        "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    output = []\n    for group in paren_string.split():\n        max_depth = 0\n        depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        output.append(max_depth)\n    return output\n",
        "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        stack = []\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if stack:\n                    stack.pop()\n            max_depth = max(max_depth, len(stack))\n        result.append(max_depth)\n    return result\n"
    ],
    "HumanEval/7": [
        "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    filtered_strings = [s for s in strings if substring in s]\n    return filtered_strings\n",
        "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    filtered_strings = [s for s in strings if substring in s]\n    return filtered_strings\n",
        "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    result = [s for s in strings if substring in s]\n    return result\n",
        "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]\n",
        "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    filtered = []\n    for s in strings:\n        if substring in s:\n            filtered.append(s)\n    return filtered\n"
    ],
    "HumanEval/8": [
        "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_of_numbers = 0\n    product_of_numbers = 1\n\n    for number in numbers:\n        sum_of_numbers += number\n        product_of_numbers *= number\n\n    return sum_of_numbers, product_of_numbers\n",
        "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    total_sum = 0\n    total_product = 1\n    \n    for num in numbers:\n        total_sum += num\n        total_product *= num\n    \n    return total_sum, total_product\n",
        "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_value = 0\n    product = 1\n    \n    for num in numbers:\n        sum_value += num\n        product *= num\n    \n    return sum_value, product\n",
        "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_of_numbers = 0\n    product_of_numbers = 1\n    \n    for num in numbers:\n        sum_of_numbers += num\n        product_of_numbers *= num\n    \n    return (sum_of_numbers, product_of_numbers)\n",
        "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    total_sum = 0\n    total_product = 1\n    \n    for num in numbers:\n        total_sum += num\n        total_product *= num\n    \n    return (total_sum, total_product)\n"
    ],
    "HumanEval/9": [
        "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n    current_max = float('-inf')\n\n    for num in numbers:\n        current_max = max(current_max, num)\n        result.append(current_max)\n\n    return result\n",
        "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    \n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list = []\n    for num in numbers:\n        if not rolling_max_list:\n            rolling_max_list.append(num)\n        elif num > rolling_max_list[-1]:\n            rolling_max_list.append(num)\n        else:\n            rolling_max_list.append(rolling_max_list[-1])\n    return rolling_max_list\n",
        "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    \n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list = []\n    current_max = float(\"-inf\")\n    \n    for num in numbers:\n        current_max = max(current_max, num)\n        rolling_max_list.append(current_max)\n    \n    return rolling_max_list\n",
        "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n    current_max = float('-inf')\n\n    for num in numbers:\n        current_max = max(current_max, num)\n        result.append(current_max)\n\n    return result\n",
        "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    current_max = float('-inf')\n    \n    for num in numbers:\n        current_max = max(current_max, num)\n        result.append(current_max)\n    \n    return result\n"
    ],
    "HumanEval/10": [
        "def make_palindrome(string: str) -> str:\n    if not string:\n        return \"\"\n\n    s = string + \"#\" + string[::-1]\n    prefix_table = build_prefix_table(s)\n    longest_palindromic_prefix = s[: prefix_table[-1]]\n    return string + longest_palindromic_prefix[len(string):]\n\ndef build_prefix_table(s: str) -> list[int]:\n    prefix_table = [0] * len(s)\n    j = 0\n    for i in range(1, len(s)):\n        while j > 0 and s[i] != s[j]:\n            j = prefix_table[j - 1]\n        if s[i] == s[j]:\n            j += 1\n        prefix_table[i] = j\n    return prefix_table\n",
        "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string. \"\"\"\n    palindrome = ''\n    for i in range(len(string), -1, -1):\n        if is_palindrome(string[:i]):\n            palindrome = string[i:][::-1] + string\n            break\n    return palindrome\n",
        "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string. \"\"\"\n    # If the string is already a palindrome, return it\n    if is_palindrome(string):\n        return string\n\n    # Find the longest palindromic suffix\n    for i in range(len(string), -1, -1):\n        if is_palindrome(string[:i]):\n            suffix = string[i:]\n            break\n    else:\n        suffix = ''\n\n    # Get the prefix that comes before the palindromic suffix\n    prefix = string[:-len(suffix)]\n\n    # Append the reversed prefix to the original string\n    return string + prefix[::-1]\n",
        "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n\n    for i in range(len(string), -1, -1):\n        if is_palindrome(string[i:]):\n            palindromic_suffix = string[i:]\n            break\n    else:\n        palindromic_suffix = string\n\n    prefix = string[:-len(palindromic_suffix)]\n    return string + prefix[::-1]\n",
        "def make_palindrome(string: str) -> str:\n    \"\"\"\n    Find the shortest palindrome that begins with a supplied string.\n    \"\"\"\n    if not string:\n        return \"\"\n    \n    longest_palindromic_suffix = find_longest_palindromic_suffix(string)\n    prefix_to_reverse = string[:-len(longest_palindromic_suffix)]\n    reversed_prefix = prefix_to_reverse[::-1]\n    \n    return string + reversed_prefix\n\ndef find_longest_palindromic_suffix(string: str) -> str:\n    \"\"\"\n    Find the longest palindromic suffix of the given string.\n    \"\"\"\n    n = len(string)\n    s = \"#\" + \"#\".join(string) + \"#\"\n    length = len(s)\n    p = [0] * length\n    \n    center, right_boundary = 0, 0\n    for i in range(1, length):\n        if i <= right_boundary:\n            p[i] = min(right_boundary - i + 1, p[2 * center - i])\n        \n        while i - p[i] >= 0 and i + p[i] < length and s[i - p[i]] == s[i + p[i]]:\n            p[i] += 1\n        \n        if i + p[i] - 1 > right_boundary:\n            center, right_boundary = i, i + p[i] - 1\n    \n    max_len = max(p)\n    center_index = p.index(max_len)\n    start = (center_index - max_len) // 2\n    end = start + max_len\n    return string[start:end]\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\"\n    Test if given string is a palindrome.\n    \"\"\"\n    return string == string[::-1]\n"
    ],
    "HumanEval/11": [
        "def string_xor(a: str, b: str) -> str:\n    \"\"\"\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    \n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n",
        "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    \n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    \n    # Check input\n    if not all(c in '01' for c in a) or not all(c in '01' for c in b):\n        raise ValueError(\"Input strings must consist only of '0' and '1'\")\n    \n    # Perform XOR using zip() and a list comprehension\n    result = ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n    \n    return result\n",
        "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    # Convert the input strings to lists of integers\n    a_list = [int(char) for char in a]\n    b_list = [int(char) for char in b]\n\n    # Perform the XOR operation on the corresponding elements\n    result_list = [a_elem ^ b_elem for a_elem, b_elem in zip(a_list, b_list)]\n\n    # Convert the resulting list of integers back to a string\n    return ''.join(str(x) for x in result_list)\n",
        "def string_xor(a: str, b: str) -> str:\n    if len(a) != len(b):\n        raise ValueError(\"Input strings must have the same length.\")\n    \n    result = \"\"\n    for i in range(len(a)):\n        result += str(int(a[i]) ^ int(b[i]))\n    \n    return result\n",
        "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    if not all(c in '01' for c in a) or not all(c in '01' for c in b):\n        raise ValueError(\"Input strings must contain only '1's and '0's.\")\n\n    result = ''.join('1' if a_char != b_char else '0' for a_char, b_char in zip(a, b))\n    return result\n"
    ],
    "HumanEval/12": [
        "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    \n    longest_str = strings[0]\n    for s in strings:\n        if len(s) > len(longest_str):\n            longest_str = s\n    \n    return longest_str\n",
        "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n\n    longest_str = strings[0]\n    for s in strings:\n        if len(s) > len(longest_str):\n            longest_str = s\n\n    return longest_str\n",
        "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    \n    longest_str = strings[0]\n    for s in strings:\n        if len(s) > len(longest_str):\n            longest_str = s\n    \n    return longest_str\n",
        "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n\n    longest_str = strings[0]\n    for s in strings[1:]:\n        if len(s) > len(longest_str):\n            longest_str = s\n        elif len(s) == len(longest_str):\n            # Keep longest_str as is to preserve the first longest string\n            pass\n\n    return longest_str\n",
        "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n\n    longest_str = strings[0]\n    for string in strings:\n        if len(string) > len(longest_str):\n            longest_str = string\n\n    return longest_str\n"
    ],
    "HumanEval/13": [
        "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Return a greatest common divisor of two integers a and b.\n    \n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    if b == 0:\n        return a\n    return greatest_common_divisor(b, a % b)\n",
        "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Return a greatest common divisor of two integers a and b.\n    \n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return a\n",
        "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"Return the greatest common divisor of two integers a and b.\n    \n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return a\n",
        "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
        "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Return the greatest common divisor of two integers a and b.\n\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return a\n"
    ],
    "HumanEval/14": [
        "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes\n",
        "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes\n",
        "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]\n",
        "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(1, len(string)+1):\n        prefixes.append(string[:i])\n    return prefixes\n",
        "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes\n"
    ],
    "HumanEval/15": [
        "def string_sequence(n: int) -> str:\n    output = \"\"\n    for i in range(n+1):\n        output += str(i) + \" \"\n    return output.strip()\n",
        "def string_sequence(n: int) -> str:\n    result = \"\"\n    for i in range(n + 1):\n        result += str(i)\n        if i < n:\n            result += \" \"\n    return result\n",
        "def string_sequence(n: int) -> str:\n    result = \"\"\n    for i in range(n + 1):\n        result += str(i)\n        if i < n:\n            result += \" \"\n    return result\n",
        "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n+1))\n",
        "def string_sequence(n: int) -> str:\n    sequence = \"\"\n    for i in range(n+1):\n        sequence += str(i)\n        if i < n:\n            sequence += \" \"\n    return sequence\n"
    ],
    "HumanEval/16": [
        "def count_distinct_characters(string: str) -> int:\n    distinct_chars = set()\n    for char in string:\n        distinct_chars.add(char.lower())\n    return len(distinct_chars)\n",
        "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))\n",
        "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))\n",
        "def count_distinct_characters(string: str) -> int:\n    char_set = set(char.lower() for char in string)\n    return len(char_set)\n",
        "def count_distinct_characters(string: str) -> int:\n    return len(set(string))\n"
    ],
    "HumanEval/17": [
        "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    note_map = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        beats.append(note_map[note])\n    return beats\n",
        "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    beats = []\n    current_beat = 0\n    for char in music_string:\n        if char == 'o':\n            current_beat = 4\n        elif char == '|':\n            if current_beat == 4:\n                current_beat = 2\n            else:\n                raise ValueError(\"Invalid note format: {}\".format(music_string))\n        elif char == '.':\n            current_beat = 1\n        elif char == ' ':\n            if current_beat > 0:\n                beats.append(current_beat)\n                current_beat = 0\n        else:\n            raise ValueError(\"Invalid character in input string: {}\".format(char))\n    if current_beat > 0:\n        beats.append(current_beat)\n    return beats\n",
        "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    durations = []\n    for note in music_string.split():\n        if note == 'o':\n            durations.append(4)\n        elif note == 'o|':\n            durations.append(2)\n        elif note == '.|':\n            durations.append(1)\n    return durations\n",
        "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    note_durations = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    \n    notes = music_string.split()\n    result = []\n    for note in notes:\n        result.append(note_durations[note])\n    \n    return result\n",
        "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    note_durations = []\n    for char in music_string:\n        if char == 'o':\n            note_durations.append(4)\n        elif char == 'o|':\n            note_durations.append(2)\n        elif char == '.|':\n            note_durations.append(1)\n        elif char == ' ':\n            pass\n    return note_durations\n"
    ],
    "HumanEval/18": [
        "def how_many_times(string: str, substring: str) -> int:\n    if not string or not substring:\n        return 0\n    return string.count(substring)\n",
        "def how_many_times(string: str, substring: str) -> int:\n    if not substring:\n        return len(string)\n    if not string:\n        return 0\n    return string.count(substring)\n",
        "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n",
        "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n",
        "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            count += 1\n    return count\n"
    ],
    "HumanEval/19": [
        "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest.\n    \n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    \n    word_list = numbers.split()\n    \n    word_to_num = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    \n    sorted_words = sorted(word_list, key=lambda x: word_to_num[x])\n    \n    return ' '.join(sorted_words)\n",
        "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest.\n\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    word_list = numbers.split()\n    number_dict = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    sorted_words = sorted(word_list, key=lambda x: number_dict[x])\n    sorted_numbers = ' '.join(sorted_words)\n    return sorted_numbers\n",
        "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    word_list = numbers.split()\n    word_to_int = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    sorted_words = sorted(word_list, key=lambda x: word_to_int[x])\n    return ' '.join(sorted_words)\n",
        "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Input is a space-delimited string of numerals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest.\n\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    \n    # Step 1: Split the input string into a list of words\n    word_list = numbers.split()\n    \n    # Step 2: Convert the words to their integer values using a dictionary\n    number_dict = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    number_list = [number_dict[word] for word in word_list]\n    \n    # Step 3: Sort the list of integers\n    number_list.sort()\n    \n    # Step 4: Join the sorted words back into a new string\n    sorted_words = [list(number_dict.keys())[list(number_dict.values()).index(num)] for num in number_list]\n    return ' '.join(sorted_words)\n",
        "from typing import List\n\nWORD_TO_INT = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n}\n\ndef sort_numbers(numbers: str) -> str:\n    word_list = numbers.split()\n    int_list = [WORD_TO_INT[word] for word in word_list]\n    int_list.sort()\n    sorted_words = [next(k for k, v in WORD_TO_INT.items() if v == num) for num in int_list]\n    return ' '.join(sorted_words)\n"
    ],
    "HumanEval/20": [
        "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    if len(numbers) < 2:\n        raise ValueError(\"Input list must have at least two elements\")\n\n    numbers.sort()\n    min_diff = float('inf')\n    num1 = num2 = 0\n\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            num1 = numbers[i]\n            num2 = numbers[i + 1]\n\n    return (num1, num2)\n",
        "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    \n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"At least two numbers are required.\")\n    \n    numbers.sort()\n    \n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(closest_pair[1] - closest_pair[0])\n    \n    for i in range(1, len(numbers)):\n        diff = abs(numbers[i] - numbers[i-1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i-1], numbers[i])\n    \n    return closest_pair\n",
        "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    \n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (numbers[0], numbers[1])\n    \n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    \n    return closest_pair\n",
        "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    if len(numbers) < 2:\n        raise ValueError(\"Input list must have at least 2 elements.\")\n    \n    numbers.sort()\n    \n    min_diff = float('inf')\n    closest_pair = (numbers[0], numbers[1])\n    \n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    \n    return closest_pair\n",
        "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    \n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[0] - numbers[1])\n    \n    for i in range(1, len(numbers)):\n        diff = abs(numbers[i] - numbers[i-1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i-1], numbers[i])\n    \n    return closest_pair\n"
    ],
    "HumanEval/21": [
        "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1.\n    \n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"Input list must have at least two elements.\")\n    \n    min_value = min(numbers)\n    max_value = max(numbers)\n    \n    transformed_numbers = [(x - min_value) / (max_value - min_value) for x in numbers]\n    \n    return transformed_numbers\n",
        "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    a = 1 / (max_val - min_val)\n    b = -min_val / (max_val - min_val)\n    transformed = [(x * a + b) for x in numbers]\n    return transformed\n",
        "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements\")\n\n    min_value = min(numbers)\n    max_value = max(numbers)\n\n    return [(x - min_value) / (max_value - min_value) for x in numbers]\n",
        "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_value = min(numbers)\n    max_value = max(numbers)\n    transformed_numbers = [(x - min_value) / (max_value - min_value) for x in numbers]\n    return transformed_numbers\n",
        "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1.\n\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_val = min(numbers)\n    max_val = max(numbers)\n    a = 1 / (max_val - min_val)\n    b = -min_val / (max_val - min_val)\n    return [a * x + b for x in numbers]\n"
    ],
    "HumanEval/22": [
        "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\"Filter given list of any python values only for integers.\n\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]\n",
        "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    output = [value for value in values if isinstance(value, int)]\n    return output\n",
        "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    filtered_integers = [value for value in values if isinstance(value, int)]\n    return filtered_integers\n",
        "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\"Filter given list of any python values only for integers\"\"\"\n    return [value for value in values if isinstance(value, int)]\n",
        "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    filtered_ints = []\n    for value in values:\n        if isinstance(value, int):\n            filtered_ints.append(value)\n    return filtered_ints\n"
    ],
    "HumanEval/23": [
        "def strlen(string: str) -> int:\n    \"\"\"\n    Return length of given string.\n\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n",
        "def strlen(string: str) -> int:\n    length = 0\n    for _ in string:\n        length += 1\n    return length\n",
        "def strlen(string: str) -> int:\n    \"\"\"Return length of given string\"\"\"\n    if not string:\n        return 0\n    else:\n        return len(string)\n",
        "def strlen(string: str) -> int:\n    \"\"\"\n    Return length of given string.\n    \n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n",
        "def strlen(string: str) -> int:\n    return len(string)\n"
    ],
    "HumanEval/24": [
        "import math\n\ndef largest_divisor(n: int) -> int:\n    \"\"\"\n    For a given number n, find the largest number that divides n evenly, smaller than n.\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    sqrt_n = int(math.sqrt(n))\n    for i in range(sqrt_n, 0, -1):\n        if n % i == 0:\n            return i\n    return 1\n",
        "def largest_divisor(n: int) -> int:\n    \"\"\"\n    For a given number n, find the largest number that divides n evenly, smaller than n.\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    max_divisor = 1\n    for i in range(n//2, 1, -1):\n        if n % i == 0:\n            max_divisor = i\n            break\n    return max_divisor\n",
        "def largest_divisor(n: int) -> int:\n    \"\"\"\n    For a given number n, find the largest number that divides n evenly, smaller than n.\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1\n",
        "def largest_divisor(n: int) -> int:\n    return n // 2\n",
        "import math\n\ndef largest_divisor(n: int) -> int:\n    for i in range(int(math.sqrt(n)), 0, -1):\n        if n % i == 0:\n            return i\n    return 1\n"
    ],
    "HumanEval/25": [
        "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while n > 1:\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            i += 1\n    return factors\n",
        "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n    Input number should be equal to the product of all factors.\n    \n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    i = 2\n    while n > 1:\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            i += 1\n    return factors\n",
        "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n    Input number should be equal to the product of all factors.\n\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    i = 2\n    while n > 1:\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            i += 1\n    return factors\n",
        "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n    Input number should be equal to the product of all factors.\n    \n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    i = 2\n    while n > 1:\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            i += 1\n    return factors\n",
        ""
    ],
    "HumanEval/26": [
        "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    unique_elements = set()\n    result = []\n\n    for num in numbers:\n        if num not in unique_elements:\n            unique_elements.add(num)\n            result.append(num)\n\n    return result\n",
        "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    unique_numbers = []\n    for num in numbers:\n        if num not in unique_numbers:\n            unique_numbers.append(num)\n    return unique_numbers\n",
        "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    unique_elements = []\n    seen = set()\n\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            unique_elements.append(num)\n\n    return unique_elements\n",
        "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    unique_numbers = []\n    seen = set()\n\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            unique_numbers.append(num)\n\n    return unique_numbers\n",
        "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    unique_nums = []\n    seen = set()\n    \n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            unique_nums.append(num)\n    \n    return unique_nums\n"
    ],
    "HumanEval/27": [
        "def flip_case(string: str) -> str:\n    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result\n",
        "def flip_case(string: str) -> str:\n    \"\"\"\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    \n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()\n",
        "def flip_case(string: str) -> str:\n    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result\n",
        "def flip_case(string: str) -> str:\n    \"\"\"\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    \n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return ''.join(char.swapcase() for char in string)\n",
        "def flip_case(string: str) -> str:\n    \"\"\"\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    \n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()\n"
    ],
    "HumanEval/28": [
        "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)\n",
        "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\"Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n",
        "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\"Concatenate list of strings into a single string\"\"\"\n    result = \"\"\n    for s in strings:\n        result += s\n    return result\n",
        "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    result = ''\n    for s in strings:\n        result += s\n    return result\n",
        "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    if not strings:\n        return ''\n    return ''.join(strings)\n"
    ],
    "HumanEval/29": [
        "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    filtered_strings = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered_strings.append(string)\n    return filtered_strings\n",
        "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    filtered_strings = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered_strings.append(string)\n    return filtered_strings\n",
        "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    filtered = [s for s in strings if s.startswith(prefix)]\n    return filtered\n",
        "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    filtered = [s for s in strings if s.startswith(prefix)]\n    return filtered\n",
        "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    filtered_strings = []\n    \n    for string in strings:\n        if string.startswith(prefix):\n            filtered_strings.append(string)\n    \n    return filtered_strings\n"
    ],
    "HumanEval/30": [
        "def get_positive(l: list):\n    positive_numbers = []\n    for num in l:\n        if num > 0:\n            positive_numbers.append(num)\n    return positive_numbers\n",
        "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    positive_list = []\n    for num in l:\n        if num > 0:\n            positive_list.append(num)\n    return positive_list\n",
        "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    positive_list = [num for num in l if num > 0]\n    return positive_list\n",
        "def get_positive(l: list):\n    positive_nums = []\n    for num in l:\n        if num > 0:\n            positive_nums.append(num)\n    return positive_nums\n",
        "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    positive_numbers = []\n    for num in l:\n        if num > 0:\n            positive_numbers.append(num)\n    return positive_numbers\n"
    ],
    "HumanEval/31": [
        "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    \n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    \n    return True\n",
        "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
        "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n in [2, 3]:\n        return True\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    \n    return True\n",
        "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    if n in (2, 3):\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
        "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    \n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    \n    return True\n"
    ],
    "HumanEval/32": [
        "import math\n\ndef find_zero(xs: list):\n    \"\"\"\n    Finds the zero point of a polynomial given its coefficients.\n    The polynomial must have an even number of coefficients, and the largest non-zero\n    coefficient must be the first one.\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"The number of coefficients must be even.\")\n    \n    for i in range(0, len(xs), 2):\n        a = xs[i]\n        b = xs[i+1]\n        \n        discriminant = b**2 - 4 * a * xs[i+2]\n        if discriminant >= 0:\n            x = (-b + math.sqrt(discriminant)) / (2 * a)\n            return x\n    \n    raise ValueError(\"No zero point found.\")\n",
        "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 != 0 or max(xs) == 0:\n        raise ValueError(\"Invalid input: xs must have an even number of coefficients and the largest coefficient must be non-zero.\")\n    \n    left = -10\n    right = 10\n    while abs(right - left) > 1e-6:\n        mid = (left + right) / 2\n        if abs(poly(xs, mid)) < 1e-6:\n            return mid\n        elif poly(xs, left) * poly(xs, mid) < 0:\n            right = mid\n        else:\n            left = mid\n    \n    return (left + right) / 2\n",
        "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list, tol=1e-6):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"Number of coefficients must be even\")\n    \n    if max(xs) == 0:\n        raise ValueError(\"Largest coefficient must be non-zero\")\n    \n    a, b = -1, 1\n    while abs(poly(xs, a) * poly(xs, b)) > tol**2:\n        c = (a + b) / 2\n        if poly(xs, a) * poly(xs, c) < 0:\n            b = c\n        else:\n            a = c\n    \n    return (a + b) / 2\n",
        "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list, tol: float = 1e-8):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 8) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 8) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"Polynomial must have even number of coefficients\")\n\n    if max(xs) == 0:\n        raise ValueError(\"Largest coefficient must be non-zero\")\n\n    a = -10.0  # initial lower bound\n    b = 10.0   # initial upper bound\n    while abs(b - a) > tol:\n        c = (a + b) / 2\n        if abs(poly(xs, c)) < tol:\n            return c\n        if poly(xs, a) * poly(xs, c) < 0:\n            b = c\n        else:\n            a = c\n    raise ValueError(\"No root found within the given tolerance\")\n",
        "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 != 0 or xs[-1] == 0:\n        raise ValueError(\"Invalid input: the list of coefficients must have an even number of elements, and the largest coefficient must be non-zero.\")\n\n    a = xs[-2]\n    b = xs[-3]\n    c = xs[-4]\n\n    discriminant = b**2 - 4 * a * c\n    if discriminant < 0:\n        raise ValueError(\"The polynomial has no real roots.\")\n\n    root1 = (-b + math.sqrt(discriminant)) / (2 * a)\n    root2 = (-b - math.sqrt(discriminant)) / (2 * a)\n\n    return root1\n"
    ],
    "HumanEval/33": [
        "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [5, 6, 3, 4, 8, 9, 2]\n    \"\"\"\n    result = l.copy()\n    for i in range(0, len(result), 3):\n        result[i:i+3] = sorted(result[i:i+3])\n    return result\n",
        "def sort_third(l: list):\n    result = []\n    divisible_by_three = []\n\n    for i, value in enumerate(l):\n        if i % 3 == 0:\n            divisible_by_three.append(value)\n        else:\n            result.append(value)\n\n    divisible_by_three.sort()\n\n    for i, value in enumerate(result):\n        if i % 3 == 0:\n            result[i] = divisible_by_three.pop(0)\n\n    return result\n",
        "def sort_third(l: list):\n    l_sorted = [value for i, value in enumerate(l) if i % 3 == 0]\n    l_sorted.sort()\n    result = []\n    j = 0\n    for i, value in enumerate(l):\n        if i % 3 == 0:\n            result.append(l_sorted[j])\n            j += 1\n        else:\n            result.append(value)\n    return result\n",
        "def sort_third(l: list):\n    result = []\n    div_by_three = []\n    \n    for i, item in enumerate(l):\n        if i % 3 != 0:\n            result.append(item)\n        else:\n            div_by_three.append(item)\n    \n    div_by_three.sort()\n    \n    for i, item in enumerate(l):\n        if i % 3 == 0:\n            result.append(div_by_three.pop(0))\n        else:\n            result.append(item)\n    \n    return result\n",
        "def sort_third(l: list):\n    result = l[:]\n    divisible_by_three = [result[i] for i in range(len(result)) if i % 3 == 0]\n    divisible_by_three.sort()\n    for i in range(len(result)):\n        if i % 3 == 0:\n            result[i] = divisible_by_three.pop(0)\n    return result\n"
    ],
    "HumanEval/34": [
        "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n",
        "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(list(set(l)))\n",
        "def unique(l: list) -> list:\n    return sorted(list(set(l)))\n",
        "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n",
        "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n"
    ],
    "HumanEval/35": [
        "def max_element(l: list):\n    if not l:\n        return None\n    \n    max_val = l[0]\n    for x in l[1:]:\n        if x > max_val:\n            max_val = x\n    \n    return max_val\n",
        "def max_element(l: list):\n    max_val = l[0]\n    for x in l:\n        if x > max_val:\n            max_val = x\n    return max_val\n",
        "def max_element(l: list):\n    max_val = l[0]\n    for element in l:\n        if element > max_val:\n            max_val = element\n    return max_val\n",
        "def max_element(l: list):\n    if not l:\n        return None\n    max_val = l[0]\n    for num in l[1:]:\n        if num > max_val:\n            max_val = num\n    return max_val\n",
        "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    if not l:\n        return None\n    \n    max_val = l[0]\n    for x in l:\n        if x > max_val:\n            max_val = x\n    \n    return max_val\n"
    ],
    "HumanEval/36": [
        "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if '7' in str(i) and (i % 11 == 0 or i % 13 == 0):\n            count += 1\n    return count\n",
        "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if (i < 11 or i % 11 != 0) and (i < 13 or i % 13 != 0):\n            continue\n        if '7' in str(i):\n            count += 1\n    return count\n",
        "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(11, n, 11):\n        if '7' in str(i):\n            count += 1\n    for i in range(13, n, 13):\n        if '7' in str(i):\n            count += 1\n    return count\n",
        "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(11, n, 11):\n        if '7' in str(i) or any('7' in str(j) for j in range(i, n, i)):\n            count += 1\n    for i in range(13, n, 13):\n        if '7' in str(i) or any('7' in str(j) for j in range(i, n, i)):\n            count += 1\n    return count\n",
        "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count\n"
    ],
    "HumanEval/37": [
        "def sort_even(l: list):\n    sorted_list = []\n    even_values = []\n    \n    for i, value in enumerate(l):\n        if i % 2 == 0:\n            even_values.append(value)\n        else:\n            sorted_list.append(value)\n    \n    even_values.sort()\n    \n    for i, value in enumerate(sorted_list):\n        if i % 2 == 0:\n            sorted_list[i] = even_values[i // 2]\n    \n    return sorted_list\n",
        "def sort_even(l: list):\n    l_new = []\n    even_values = sorted([l[i] for i in range(len(l)) if i % 2 == 0])\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_new.append(even_values.pop(0))\n        else:\n            l_new.append(l[i])\n    return l_new\n",
        "def sort_even(l: list):\n    new_list = []\n    even_values = []\n    \n    for i, value in enumerate(l):\n        if i % 2 == 0:\n            even_values.append(value)\n        else:\n            new_list.append(value)\n    \n    even_values.sort()\n    \n    for i in range(len(l)):\n        if i % 2 == 0:\n            new_list.insert(i, even_values.pop(0))\n        else:\n            continue\n    \n    return new_list\n",
        "def sort_even(l: list):\n    result = []\n    even_values = []\n    for i, value in enumerate(l):\n        if i % 2 == 0:\n            even_values.append(value)\n        else:\n            result.append(value)\n    even_values.sort()\n    even_index = 0\n    for i in range(len(result)):\n        if i % 2 == 0:\n            result[i] = even_values[even_index]\n            even_index += 1\n    return result\n",
        "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indices, while its values at the even indices are equal\n    to the values of the even indices of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [5, 4, 3, 6]\n    \"\"\"\n    result = []\n    even_elements = []\n\n    for i, x in enumerate(l):\n        if i % 2 == 0:\n            even_elements.append(x)\n        else:\n            result.append(x)\n\n    even_elements.sort()\n\n    for i in range(0, len(l), 2):\n        result.insert(i, even_elements.pop(0))\n\n    return result\n"
    ],
    "HumanEval/38": [
        "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    \n    # reverse the cyclic shift for each group\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    \n    return \"\".join(groups)\n",
        "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
        "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # Split the input string into groups of 3 characters\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    \n    # Rotate the characters in each group to the right by 1 position\n    decoded_groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    \n    # Join all the groups back together to form the final decoded string\n    return \"\".join(decoded_groups)\n",
        "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # Split the string into groups of 3 characters\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    \n    # Rotate each group of 3 characters to the right\n    decoded_groups = []\n    for group in groups:\n        if len(group) == 3:\n            decoded_groups.append(group[-1] + group[:-1])\n        else:\n            decoded_groups.append(group)\n    \n    # Join the decoded groups back into a single string\n    return ''.join(decoded_groups)\n",
        "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"
    ],
    "HumanEval/39": [
        "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    i = 0\n    fib = 0\n    num = 1\n    prev_num = 0\n    while i < n:\n        if is_prime(fib):\n            i += 1\n        prev_num, num = num, num + prev_num\n        fib = num\n    return fib\n",
        "def prime_fib(n: int) -> int:\n    \"\"\"\n    Returns the nth number that is a Fibonacci number and also prime.\n    \"\"\"\n    primes = [2, 3, 5, 13, 89, 233, 1597, 28657, 514229, 6765121]\n    return primes[n-1]\n",
        "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_fib(n: int):\n    fib1, fib2 = 0, 1\n    count = 0\n    while count < n:\n        fib3 = fib1 + fib2\n        if is_prime(fib3):\n            count += 1\n        fib1, fib2 = fib2, fib3\n    return fib3\n",
        "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_fib(n: int) -> int:\n    fib = [0, 1]\n    i = 2\n    while True:\n        next_fib = fib[i-1] + fib[i-2]\n        fib.append(next_fib)\n        if is_prime(next_fib):\n            if n == 1:\n                return next_fib\n            n -= 1\n        i += 1\n",
        "def is_prime(n: int) -> bool:\n    \"\"\"\n    Checks if a given number is prime.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_fibonacci(n: int) -> bool:\n    \"\"\"\n    Checks if a given number is a Fibonacci number.\n    \"\"\"\n    a, b = 0, 1\n    while b <= n:\n        if b == n:\n            return True\n        a, b = b, a + b\n    return False\n\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    Returns the n-th number that is a Fibonacci number and is also prime.\n    \"\"\"\n    fib_nums = [0, 1]\n    i = 2\n    while len(fib_nums) < n:\n        fib_num = fib_nums[i-1] + fib_nums[i-2]\n        if is_prime(fib_num):\n            fib_nums.append(fib_num)\n        i += 1\n    return fib_nums[n-1]\n\ndef fibonacci(n: int) -> int:\n    \"\"\"\n    Calculates the n-th Fibonacci number.\n    \"\"\"\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)\n"
    ],
    "HumanEval/40": [
        "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    if len(l) < 3:\n        return False\n    \n    l.sort()\n    \n    for i in range(len(l) - 2):\n        if i > 0 and l[i] == l[i-1]:\n            continue\n        \n        left = i + 1\n        right = len(l) - 1\n        \n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    \n    return False\n",
        "def triples_sum_to_zero(l: list):\n    result = False\n    length = len(l)\n    \n    if length < 3:\n        return result\n    \n    for i in range(length - 2):\n        for j in range(i + 1, length - 1):\n            for k in range(j + 1, length):\n                if l[i] + l[j] + l[k] == 0:\n                    result = True\n                    return result\n    \n    return result\n",
        "def triples_sum_to_zero(l: list):\n    l.sort()\n    found_triple = False\n    for i in range(len(l) - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        j = i + 1\n        k = len(l) - 1\n        while j < k:\n            total = l[i] + l[j] + l[k]\n            if total == 0:\n                found_triple = True\n                break\n            elif total < 0:\n                j += 1\n            else:\n                k -= 1\n    return found_triple\n",
        "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    l.sort()\n    for i in range(len(l) - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False\n",
        "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    l.sort()\n    n = len(l)\n\n    for i in range(n-2):\n        if i > 0 and l[i] == l[i-1]:\n            continue  # Skip duplicates\n        left = i + 1\n        right = n - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    \n    return False\n"
    ],
    "HumanEval/41": [
        "def car_race_collision(n: int) -> int:\n    return n * (n - 1)\n",
        "def car_race_collision(n: int) -> int:\n    return (n * (n - 1)) // 2\n",
        "def car_race_collision(n: int) -> int:\n    collisions = 0\n    for i in range(-n + 1, n):\n        left_to_right = i\n        right_to_left = -i\n        if left_to_right >= 0 and right_to_left < 0:\n            collisions += 1\n    return collisions\n",
        "def car_race_collision(n: int) -> int:\n    collision_count = 0\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                # Calculate the time when the cars collide\n                collision_time = (i + j) / (i + j)\n                # Check if the collision time is positive (i.e., the cars haven't passed each other yet)\n                if collision_time > 0:\n                    collision_count += 1\n    return collision_count\n",
        "def car_race_collision(n: int) -> int:\n    total_collisions = 0\n    for i in range(n):\n        time_to_center = i / 2\n        collisions_at_center = n - int(time_to_center)\n        total_collisions += collisions_at_center\n    return total_collisions\n"
    ],
    "HumanEval/42": [
        "def incr_list(l: list):\n    new_list = []\n    for x in l:\n        new_list.append(x + 1)\n    return new_list\n",
        "def incr_list(l: list):\n    new_list = []\n    for x in l:\n        new_list.append(x + 1)\n    return new_list\n",
        "def incr_list(l: list):\n    new_list = []\n    for num in l:\n        new_list.append(num + 1)\n    return new_list\n",
        "def incr_list(l: list):\n    new_list = []\n    for element in l:\n        new_list.append(element + 1)\n    return new_list\n",
        "def incr_list(l: list) -> list:\n    new_list = []\n    for num in l:\n        new_list.append(num + 1)\n    return new_list\n"
    ],
    "HumanEval/43": [
        "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    l.sort()\n    left, right = 0, len(l) - 1\n\n    while left < right:\n        total = l[left] + l[right]\n        if total == 0:\n            return True\n        elif total < 0:\n            left += 1\n        else:\n            right -= 1\n\n    return False\n",
        "def pairs_sum_to_zero(l):\n    seen = set()\n    for a in l:\n        if -a in seen:\n            return True\n        seen.add(a)\n    return False\n",
        "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n",
        "def pairs_sum_to_zero(l):\n    s = set(l)\n    for i in s:\n        if -i in s and i != -i:\n            return True\n    return False\n",
        "def pairs_sum_to_zero(l):\n    unique_elements = set()\n    for num in l:\n        if -num in unique_elements:\n            return True\n        unique_elements.add(num)\n    return False\n"
    ],
    "HumanEval/44": [
        "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    result = \"\"\n    while x > 0:\n        remainder = str(x % base)\n        result = remainder + result\n        x //= base\n    return result or \"0\"\n",
        "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return \"0\"\n\n    result = \"\"\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x //= base\n\n    return result\n",
        "def change_base(x: int, base: int):\n    result = ''\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x //= base\n    return result or '0'\n",
        "def change_base(x: int, base: int) -> str:\n    if base < 2 or base > 9:\n        raise ValueError(\"Base must be between 2 and 9 (inclusive)\")\n\n    result = \"\"\n    while x > 0:\n        digit = x % base\n        result = str(digit) + result\n        x //= base\n\n    return result if result else \"0\"\n",
        "def change_base(x: int, base: int):\n    result = ''\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result or '0'\n"
    ],
    "HumanEval/45": [
        "",
        "def triangle_area(a, h):\n    return 0.5 * a * h\n",
        "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    area = 0.5 * a * h\n    return area\n",
        "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h\n",
        "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h\n"
    ],
    "HumanEval/46": [
        "def fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 0\n    elif n == 3:\n        return 2\n    \n    fib4_list = [0, 0, 2, 0]\n    \n    for i in range(4, n+1):\n        fib4_i = fib4_list[i-1] + fib4_list[i-2] + fib4_list[i-3] + fib4_list[i-4]\n        fib4_list.append(fib4_i)\n    \n    return fib4_list[n]\n",
        "def fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n\n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n+1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d\n",
        "def fib4(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    \n    if n < 4:\n        return [0, 0, 2, 0][n]\n    \n    fib4_list = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        next_fib4 = sum(fib4_list[-4:])\n        fib4_list.append(next_fib4)\n    \n    return fib4_list[n]\n",
        "",
        "def fib4(n: int):\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n\n    fib4_list = [0, 0, 2, 0]  # Initialize the first four elements\n\n    if n < 4:\n        return fib4_list[n]\n\n    for i in range(4, n + 1):\n        fib4_list.append(fib4_list[i - 1] + fib4_list[i - 2] + fib4_list[i - 3] + fib4_list[i - 4])\n\n    return fib4_list[n]\n"
    ],
    "HumanEval/47": [
        "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if not l:\n        raise ValueError(\"Input list cannot be empty\")\n\n    sorted_l = sorted(l)\n    length = len(sorted_l)\n\n    if length % 2 == 1:\n        return sorted_l[length // 2]\n    else:\n        middle1 = sorted_l[length // 2 - 1]\n        middle2 = sorted_l[length // 2]\n        return (middle1 + middle2) / 2\n",
        "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if not l:\n        return None\n    \n    sorted_list = sorted(l)\n    length = len(sorted_list)\n    \n    if length % 2 == 1:\n        return sorted_list[length // 2]\n    else:\n        middle1 = sorted_list[length // 2 - 1]\n        middle2 = sorted_list[length // 2]\n        return (middle1 + middle2) / 2\n",
        "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    n = len(l)\n    if n % 2 != 0:\n        return l[n // 2]\n    else:\n        mid1 = l[n // 2 - 1]\n        mid2 = l[n // 2]\n        return (mid1 + mid2) / 2\n",
        "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if not l:\n        raise ValueError(\"Input list is empty.\")\n\n    l_sorted = sorted(l)\n    n = len(l_sorted)\n\n    if n % 2 == 1:\n        return l_sorted[n // 2]\n    else:\n        middle1 = l_sorted[n // 2 - 1]\n        middle2 = l_sorted[n // 2]\n        return (middle1 + middle2) / 2\n",
        "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    length = len(l)\n    if length % 2 == 1:\n        return l[length // 2]\n    else:\n        middle1 = l[length // 2 - 1]\n        middle2 = l[length // 2]\n        return (middle1 + middle2) / 2\n"
    ],
    "HumanEval/48": [
        "def is_palindrome(text: str):\n    left = 0\n    right = len(text) - 1\n\n    while left < right:\n        if text[left] != text[right]:\n            return False\n        left += 1\n        right -= 1\n\n    return True\n",
        "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    if not text:\n        return True\n\n    text = text.lower()\n\n    for i in range(len(text) // 2):\n        if text[i] != text[-1 - i]:\n            return False\n\n    return True\n",
        "def is_palindrome(text: str) -> bool:\n    left = 0\n    right = len(text) - 1\n\n    while left < right:\n        if text[left] != text[right]:\n            return False\n        left += 1\n        right -= 1\n\n    return True\n",
        "def is_palindrome(text: str) -> bool:\n    left = 0\n    right = len(text) - 1\n    \n    while left < right:\n        if text[left] != text[right]:\n            return False\n        left += 1\n        right -= 1\n    \n    return True\n",
        "def is_palindrome(text: str):\n    left = 0\n    right = len(text) - 1\n    \n    while left < right:\n        if text[left] != text[right]:\n            return False\n        left += 1\n        right -= 1\n    \n    return True\n"
    ],
    "HumanEval/49": [
        "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    result = 1\n    base = 2\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * base) % p\n        base = (base * base) % p\n        n = n // 2\n    return result\n",
        "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    result = 1\n    while n > 0:\n        if n & 1:  # Check if the least significant bit is set\n            result = (result * 2) % p\n        n >>= 1  # Shift n one bit to the right\n    return result\n",
        "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    if n == 0:\n        return 1\n    \n    result = 1\n    for _ in range(n):\n        result = (result * 2) % p\n    \n    return result\n",
        "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    if n == 0:\n        return 1\n    \n    result = 1\n    x = 2 % p\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * x) % p\n        x = (x * x) % p\n        n //= 2\n    \n    return result\n",
        "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if p == 1:\n        return 0\n\n    result = 1\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * 2) % p\n        n //= 2\n        p = (2 * p) % p\n\n    return result\n"
    ],
    "HumanEval/50": [
        "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr((ord(ch) - 5 - ord(\"a\")) % 26 + ord(\"a\")) for ch in s])\n",
        "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
        "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr((ord(ch) - 5 - ord(\"a\")) % 26 + ord(\"a\")) for ch in s])\n"
    ],
    "HumanEval/51": [
        "def remove_vowels(text):\n    result = \"\"\n    for char in text:\n        if char.lower() not in \"aeiou\":\n            result += char\n    return result\n",
        "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = set('aeiouAEIOU')\n    result = ''\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result\n",
        "def remove_vowels(text):\n    result = \"\"\n    for char in text:\n        if char.lower() not in 'aeiou':\n            result += char\n    return result\n",
        "def remove_vowels(text):\n    result = \"\"\n    for char in text:\n        if char.lower() not in \"aeiou\":\n            result += char\n    return result\n",
        "def remove_vowels(text):\n    result = \"\"\n    for char in text:\n        if char.lower() not in 'aeiou':\n            result += char\n    return result\n"
    ],
    "HumanEval/52": [
        "def below_threshold(l: list, t: int):\n    is_below = True\n    for num in l:\n        if num >= t:\n            is_below = False\n            break\n    return is_below\n",
        "def below_threshold(l: list, t: int):\n    for num in l:\n        if num >= t:\n            return False\n    return True\n",
        "def below_threshold(l: list, t: int):\n    result = True\n    for x in l:\n        if x >= t:\n            result = False\n            break\n    return result\n",
        "def below_threshold(l: list, t: int):\n    for num in l:\n        if num >= t:\n            return False\n    return True\n",
        "def below_threshold(l: list, t: int) -> bool:\n    for num in l:\n        if num >= t:\n            return False\n    return True\n"
    ],
    "HumanEval/53": [
        "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    \n    Args:\n        x (int): The first number to be added.\n        y (int): The second number to be added.\n    \n    Returns:\n        int: The sum of x and y.\n    \n    Examples:\n        >>> add(2, 3)\n        5\n        >>> add(5, 7)\n        12\n    \"\"\"\n    return x + y\n",
        "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    \n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n",
        "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    \n    Args:\n        x (int): The first number to add.\n        y (int): The second number to add.\n    \n    Returns:\n        int: The sum of x and y.\n    \n    Examples:\n        >>> add(2, 3)\n        5\n        >>> add(5, 7)\n        12\n    \"\"\"\n    return x + y\n",
        "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n",
        "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y.\n\n    Args:\n        x (int): The first number to add.\n        y (int): The second number to add.\n\n    Returns:\n        int: The sum of x and y.\n\n    Examples:\n        >>> add(2, 3)\n        5\n        >>> add(5, 7)\n        12\n    \"\"\"\n    return x + y\n"
    ],
    "HumanEval/54": [
        "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n",
        "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n",
        "def same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)\n",
        "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n",
        "def same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)\n"
    ],
    "HumanEval/55": [
        "def fib(n: int) -> int:\n    if n < 2:\n        return n\n    \n    fib_0 = 0\n    fib_1 = 1\n    for i in range(2, n+1):\n        fib_0, fib_1 = fib_1, fib_0 + fib_1\n    return fib_1\n",
        "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\n    \n    Args:\n        n (int): The position of the Fibonacci number to return.\n    \n    Returns:\n        int: The nth Fibonacci number.\n    \n    Examples:\n        >>> fib(10)\n        55\n        >>> fib(1)\n        1\n        >>> fib(8)\n        21\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for i in range(2, n+1):\n            c = a + b\n            a, b = b, c\n        return b\n",
        "def fib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        fib_list = [0, 1]\n        for i in range(2, n+1):\n            fib_list.append(fib_list[i-1] + fib_list[i-2])\n        return fib_list[n]\n",
        "def fib(n: int) -> int:\n    \"\"\"Return the n-th Fibonacci number.\"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    fib_list = [0, 1]\n    for i in range(2, n+1):\n        fib_list.append(fib_list[i-1] + fib_list[i-2])\n\n    return fib_list[n]\n",
        "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\n    \n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"
    ],
    "HumanEval/56": [
        "def correct_bracketing(brackets: str):\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n",
        "def correct_bracketing(brackets: str):\n    open_brackets = 0\n    for char in brackets:\n        if char == \"<\":\n            open_brackets += 1\n        elif char == \">\":\n            if open_brackets == 0:\n                return False\n            open_brackets -= 1\n    return open_brackets == 0\n",
        "def correct_bracketing(brackets: str):\n    count = 0\n    for char in brackets:\n        if char == \"<\":\n            count += 1\n        elif char == \">\":\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0\n",
        "def correct_bracketing(brackets: str):\n    balance = 0\n    for char in brackets:\n        if char == \"<\":\n            balance += 1\n        elif char == \">\":\n            balance -= 1\n            if balance < 0:\n                return False\n    return balance == 0\n",
        "def correct_bracketing(brackets: str):\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"
    ],
    "HumanEval/57": [
        "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] < l[i-1]:\n            increasing = False\n        if l[i] > l[i-1]:\n            decreasing = False\n    \n    return increasing or decreasing\n",
        "",
        "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    increasing = False\n    decreasing = False\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i-1]:\n            increasing = True\n        elif l[i] < l[i-1]:\n            decreasing = True\n    \n    return (increasing and not decreasing) or (not increasing and decreasing)\n",
        "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    increasing = False\n    decreasing = False\n    \n    for i in range(len(l) - 1):\n        if l[i] <= l[i+1]:\n            increasing = True\n        if l[i] >= l[i+1]:\n            decreasing = True\n    \n    return increasing or decreasing\n",
        "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    is_increasing = None\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i-1]:\n            if is_increasing is False:\n                return False\n            is_increasing = True\n        elif l[i] < l[i-1]:\n            if is_increasing is True:\n                return False\n            is_increasing = False\n    \n    return True\n"
    ],
    "HumanEval/58": [
        "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    result = []\n    for num in l1:\n        if num in l2:\n            result.append(num)\n    return sorted(list(set(result)))\n",
        "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    set1 = set(l1)\n    set2 = set(l2)\n    common_elements = sorted(list(set1 & set2))\n    return common_elements\n",
        "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    common_dict = {}\n    for item in l1:\n        if item in common_dict:\n            common_dict[item] += 1\n        else:\n            common_dict[item] = 1\n    for item in l2:\n        if item in common_dict:\n            common_dict[item] += 1\n    return sorted(common_dict.keys())\n",
        "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    l1.sort()\n    l2.sort()\n\n    result = []\n    i, j = 0, 0\n\n    while i < len(l1) and j < len(l2):\n        if l1[i] == l2[j]:\n            result.append(l1[i])\n            i += 1\n            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n        else:\n            j += 1\n\n    return result\n",
        "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    element_count = {}\n    for elem in l1:\n        element_count[elem] = element_count.get(elem, 0) + 1\n\n    result = []\n    for elem in l2:\n        if elem in element_count:\n            result.append(elem)\n            element_count[elem] -= 1\n            if element_count[elem] == 0:\n                del element_count[elem]\n\n    return sorted(result)\n"
    ],
    "HumanEval/59": [
        "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    max_prime = 2\n    i = 2\n    \n    while i * i <= n:\n        if n % i == 0:\n            max_prime = max(max_prime, i)\n        i += 1\n    \n    if max_prime == 2:\n        return n\n    else:\n        return max_prime\n",
        "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    largest_factor = 2\n    while n > 1:\n        if n % largest_factor == 0:\n            n //= largest_factor\n        else:\n            largest_factor += 2\n    return largest_factor\n",
        "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            n //= i\n        else:\n            i += 1\n    return n\n",
        "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    largest_prime = 1\n    prime = 2\n    \n    while n > 1:\n        if n % prime == 0:\n            largest_prime = prime\n            n //= prime\n        else:\n            if prime == 2:\n                prime = 3\n            else:\n                prime += 2\n    \n    return largest_prime\n",
        "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    largest_factor = 1\n    while n % 2 == 0:\n        largest_factor = 2\n        n //= 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            largest_factor = i\n            n //= i\n    if n > 2:\n        largest_factor = n\n    return largest_factor\n"
    ],
    "HumanEval/60": [
        "def sum_to_n(n: int) -> int:\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total\n",
        "def sum_to_n(n: int):\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total\n",
        "def sum_to_n(n: int) -> int:\n    \"\"\"\n    sum_to_n is a function that sums numbers from 1 to n.\n    \n    Args:\n        n (int): The upper limit of the sum.\n    \n    Returns:\n        int: The sum of all numbers from 1 to n.\n    \n    Examples:\n        >>> sum_to_n(30)\n        465\n        >>> sum_to_n(100)\n        5050\n        >>> sum_to_n(5)\n        15\n        >>> sum_to_n(10)\n        55\n        >>> sum_to_n(1)\n        1\n    \"\"\"\n    return (n * (n + 1)) // 2\n",
        "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2\n",
        "def sum_to_n(n: int):\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total\n"
    ],
    "HumanEval/61": [
        "def correct_bracketing(brackets: str):\n    count = 0\n    for char in brackets:\n        if char == '(':\n            count += 1\n        elif char == ')':\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0\n",
        "def correct_bracketing(brackets: str):\n    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n",
        "def correct_bracketing(brackets: str):\n    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n",
        "def correct_bracketing(brackets: str):\n    counter = 0\n    for char in brackets:\n        if char == '(':\n            counter += 1\n        elif char == ')':\n            counter -= 1\n            if counter < 0:\n                return False\n    return counter == 0\n",
        "def correct_bracketing(brackets: str):\n    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack or stack.pop() != '(':\n                return False\n    return len(stack) == 0\n"
    ],
    "HumanEval/62": [
        "def derivative(xs: list):\n    \"\"\"\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    result = []\n    for i, coeff in enumerate(xs):\n        if i == 0:\n            result.append(0)  # Derivative of constant term is 0\n        else:\n            result.append(i * coeff)\n    return result\n",
        "def derivative(xs: list):\n    result = []\n    for i, coeff in enumerate(xs[1:]):\n        result.append(coeff * (i+1))\n    return result\n",
        "def derivative(xs: list):\n    result = []\n    for i, x in enumerate(xs):\n        if i > 0:\n            result.append(i * x)\n    return result\n",
        "def derivative(xs: list):\n    result = []\n    for i in range(1, len(xs)):\n        result.append(i * xs[i])\n    return result\n",
        "def derivative(xs: list):\n    \"\"\"\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    result = [xs[i] * i for i in range(1, len(xs))]\n    return result\n"
    ],
    "HumanEval/63": [
        "def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    memo = {0: 0, 1: 0, 2: 1}\n\n    def helper(n):\n        if n in memo:\n            return memo[n]\n        memo[n] = helper(n-1) + helper(n-2) + helper(n-3)\n        return memo[n]\n\n    return helper(n)\n",
        "def fibfib(n: int) -> int:\n    \"\"\"\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequence that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    \"\"\"\n    memo = {0: 0, 1: 0, 2: 1}  # memoization dictionary\n\n    def helper(n: int) -> int:\n        if n in memo:\n            return memo[n]\n        \n        memo[n] = helper(n-1) + helper(n-2) + helper(n-3)\n        return memo[n]\n\n    return helper(n)\n",
        "def fibfib(n: int) -> int:\n    \"\"\"\n    Compute the n-th element of the FibFib number sequence.\n    \"\"\"\n    memo = {0: 0, 1: 0, 2: 1}  # base cases\n\n    def helper(n: int) -> int:\n        if n in memo:\n            return memo[n]\n        memo[n] = helper(n-1) + helper(n-2) + helper(n-3)\n        return memo[n]\n\n    return helper(n)\n",
        "def fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n\n    a, b, c = 0, 0, 1\n    for i in range(3, n+1):\n        a, b, c = b, c, a + b + c\n    return c\n",
        "def fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n\n    fibfib_list = [0, 0, 1]\n    for i in range(3, n+1):\n        fibfib_list.append(sum(fibfib_list[-3:]))\n    return fibfib_list[n]\n"
    ],
    "HumanEval/64": [
        "def vowels_count(s):\n    count = 0\n    for char in s:\n        if char.lower() in 'aeiou':\n            count += 1\n        elif char.lower() == 'y' and s.endswith(char):\n            count += 1\n    return count\n",
        "def vowels_count(s):\n    count = 0\n    for char in s:\n        if char.lower() in 'aeiou':\n            count += 1\n        elif char.lower() == 'y' and s[-1] == char:\n            count += 1\n    return count\n",
        "def vowels_count(s):\n    count = 0\n    for char in s:\n        if char.lower() in 'aeiou':\n            count += 1\n        elif char.lower() == 'y' and char == s[-1]:\n            count += 1\n    return count\n",
        "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    count = 0\n    vowels = 'aeiou'\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n        elif char.lower() == 'y' and s[-1].lower() == 'y':\n            count += 1\n    return count\n",
        "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    >>> vowels_count(\"rhythm\")\n    0\n    >>> vowels_count(\"sky\")\n    1\n    >>> vowels_count(\"aeiou\")\n    5\n    \"\"\"\n    count = 0\n    vowels = 'aeiou'\n    for char in s.lower():\n        if char in vowels:\n            count += 1\n        elif char == 'y' and s.lower().endswith('y'):\n            count += 1\n    return count\n"
    ],
    "HumanEval/65": [
        "def circular_shift(x, shift):\n    num_str = str(x)\n    num_digits = len(num_str)\n    if shift < num_digits:\n        shifted_digits = num_str[-shift:] + num_str[:-shift]\n    else:\n        shifted_digits = num_str[::-1]\n    return shifted_digits\n",
        "def circular_shift(x, shift):\n    x_str = str(x)\n    length = len(x_str)\n    \n    if shift < length:\n        return x_str[-shift:] + x_str[:-shift]\n    else:\n        return x_str[::-1]\n",
        "def circular_shift(x, shift):\n    x_str = str(x)\n    length = len(x_str)\n    \n    if shift > length:\n        return x_str[::-1]\n    \n    right_part = x_str[-shift:]\n    left_part = x_str[:-shift]\n    return right_part + left_part\n",
        "def circular_shift(x, shift):\n    x_str = str(x)\n    num_digits = len(x_str)\n    if shift < num_digits:\n        return x_str[-shift:] + x_str[:-shift]\n    else:\n        return x_str[::-1]\n",
        "def circular_shift(x, shift):\n    digits = str(x)\n    length = len(digits)\n    if shift < length:\n        return digits[-shift:] + digits[:-shift]\n    else:\n        return digits[::-1]\n"
    ],
    "HumanEval/66": [
        "def digitSum(s):\n    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total\n",
        "def digitSum(s):\n    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total\n",
        "def digitSum(s):\n    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total\n",
        "def digitSum(s):\n    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total\n",
        "def digitSum(s):\n    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total\n"
    ],
    "HumanEval/67": [
        "def fruit_distribution(s, n):\n    words = s.split()\n    apples = 0\n    oranges = 0\n    for i in range(len(words)):\n        if words[i] == \"apples\":\n            apples = int(words[i-1])\n        elif words[i] == \"oranges\":\n            oranges = int(words[i-1])\n    mangos = n - apples - oranges\n    return mangos\n",
        "def fruit_distribution(s, n):\n    parts = s.split(\" and \")\n    apples = int(parts[0].split()[0])\n    oranges = int(parts[1].split()[0])\n    mangoes = n - apples - oranges\n    return mangoes\n",
        "def fruit_distribution(s, n):\n    words = s.split()\n    apples_index = words.index(\"apples\")\n    oranges_index = words.index(\"oranges\")\n    num_apples = int(words[apples_index - 1])\n    num_oranges = int(words[oranges_index - 1])\n    num_mangoes = n - num_apples - num_oranges\n    return num_mangoes\n",
        "def fruit_distribution(s, n):\n    parts = s.split(\" \")\n    apples = int(parts[0])\n    oranges = int(parts[4])\n    mangoes = n - apples - oranges\n    return mangoes\n",
        "def fruit_distribution(s, n):\n    parts = s.split()\n    apples = int(parts[0]) if parts else 0\n    oranges = int(parts[-1]) if len(parts) > 2 else 0\n    mangoes = n - apples - oranges\n    return mangoes\n"
    ],
    "HumanEval/68": [
        "def pluck(arr):\n    if not arr:\n        return []\n    \n    smallest_even = float('inf')\n    smallest_even_index = None\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_even:\n            smallest_even = num\n            smallest_even_index = i\n    \n    if smallest_even_index is None:\n        return []\n    \n    return [smallest_even, smallest_even_index]\n",
        "def pluck(arr):\n    smallest_even = float('inf')\n    smallest_index = -1\n\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_even:\n            smallest_even = num\n            smallest_index = i\n        elif num % 2 == 0 and num == smallest_even and i < smallest_index:\n            smallest_index = i\n\n    if smallest_index >= 0:\n        return [smallest_even, smallest_index]\n    else:\n        return []\n",
        "def pluck(arr):\n    if not arr:\n        return []\n    \n    smallest_even = float('inf')\n    smallest_index = None\n    \n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_even:\n            smallest_even = num\n            smallest_index = i\n    \n    if smallest_index is None:\n        return []\n    else:\n        return [smallest_even, smallest_index]\n",
        "def pluck(arr):\n    if not arr:\n        return []\n\n    smallest_even = float('inf')\n    smallest_even_index = None\n\n    for i, node in enumerate(arr):\n        if node % 2 == 0 and node < smallest_even:\n            smallest_even = node\n            smallest_even_index = i\n\n    if smallest_even_index is None:\n        return []\n\n    return [smallest_even, smallest_even_index]\n",
        "def pluck(arr):\n    if not arr:\n        return []\n    \n    smallest_even = float('inf')\n    smallest_index = None\n    \n    for i, num in enumerate(arr):\n        if num % 2 == 0:\n            if num < smallest_even or (num == smallest_even and i < smallest_index):\n                smallest_even = num\n                smallest_index = i\n    \n    if smallest_index is None:\n        return []\n    else:\n        return [smallest_even, smallest_index]\n"
    ],
    "HumanEval/69": [
        "def search(lst):\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    result = -1\n    for num, count in freq.items():\n        if count >= num and num > result:\n            result = num\n\n    return result\n",
        "def search(lst):\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    max_num = -1\n    for num, count in freq.items():\n        if count >= num and num > max_num:\n            max_num = num\n    \n    return max_num\n",
        "def search(lst):\n    \"\"\"\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    \"\"\"\n    max_freq = 0\n    for num in set(lst):\n        freq = lst.count(num)\n        if freq >= num and freq > max_freq:\n            max_freq = freq\n    return max_freq if max_freq > 0 else -1\n",
        "def search(lst):\n    \"\"\"\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    \"\"\"\n    freq = {}\n    for num in lst:\n        freq[num] = freq.get(num, 0) + 1\n    \n    for num in sorted(freq.keys(), reverse=True):\n        if freq[num] >= num:\n            return num\n    \n    return -1\n",
        "def search(lst):\n    freq = {}\n    for num in lst:\n        freq[num] = freq.get(num, 0) + 1\n    \n    for num in reversed(range(1, max(freq.keys()) + 1)):\n        if num in freq and freq[num] >= num:\n            return num\n    \n    return -1\n"
    ],
    "HumanEval/70": [
        "def strange_sort_list(lst):\n    sorted_list = []\n    while lst:\n        sorted_list.append(min(lst))\n        lst.remove(min(lst))\n        if lst:\n            sorted_list.append(max(lst))\n            lst.remove(max(lst))\n    return sorted_list\n",
        "def strange_sort_list(lst):\n    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    \"\"\"\n    if not lst:\n        return []\n\n    sorted_lst = sorted(lst)\n    result = []\n\n    for i in range(len(sorted_lst) // 2):\n        result.append(sorted_lst[i])\n        if i < len(sorted_lst) - 1 - i:\n            result.append(sorted_lst[len(sorted_lst) - 1 - i])\n\n    return result\n",
        "def strange_sort_list(lst):\n    if not lst:\n        return []\n\n    result = []\n    while lst:\n        result.append(min(lst))\n        lst.remove(min(lst))\n        if lst:\n            result.append(max(lst))\n            lst.remove(max(lst))\n    return result\n",
        "def strange_sort_list(lst):\n    result = []\n    while lst:\n        result.append(min(lst))\n        lst.remove(min(lst))\n        if lst:\n            result.append(max(lst))\n            lst.remove(max(lst))\n    return result\n",
        "def strange_sort_list(lst):\n    result = []\n    while lst:\n        result.append(min(lst))\n        lst.remove(min(lst))\n        if lst:\n            result.append(min(lst))\n            lst.remove(min(lst))\n    return result\n"
    ],
    "HumanEval/71": [
        "import math\n\ndef triangle_area(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    return round(area, 2)\n",
        "import math\n\ndef triangle_area(a, b, c):\n    \"\"\"\n    Given the lengths of the three sides of a triangle, return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise, return -1.\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    # Check if the three sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n\n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n\n    # Calculate the area using Heron's formula\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n\n    # Round the result to 2 decimal places\n    return round(area, 2)\n",
        "def triangle_area(a, b, c):\n    if a + b <= c or b + c <= a or a + c <= b:\n        return -1\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return round(area, 2)\n",
        "import math\n\ndef triangle_area(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n\n    s = (a + b + c) / 2\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    return round(area, 2)\n",
        "import math\n\ndef triangle_area(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    return round(area, 2)\n"
    ],
    "HumanEval/72": [
        "def will_it_fly(q, w):\n    total = sum(q)\n    return total <= w\n",
        "def will_it_fly(q, w):\n    total_weight = 0\n    for i in range(len(q)):\n        if q[i] != q[len(q) - 1 - i]:\n            return False\n        total_weight += q[i]\n    return total_weight <= w\n",
        "def will_it_fly(q, w):\n    total_weight = 0\n    for i in range(len(q)):\n        total_weight += q[i]\n        if q[i] != q[len(q) - 1 - i]:\n            return False\n    \n    if total_weight <= w:\n        return True\n    else:\n        return False\n",
        "def will_it_fly(q, w):\n    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False\n",
        "def will_it_fly(q, w):\n    if q == q[::-1] and sum(q) <= w:\n        return True\n    return False\n"
    ],
    "HumanEval/73": [
        "def smallest_change(arr):\n    n = len(arr)\n    dp = [[1 for _ in range(n)] for _ in range(n)]\n\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if arr[i] == arr[j]:\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n    return n - dp[0][n - 1]\n",
        "def smallest_change(arr):\n    changes = 0\n    n = len(arr)\n\n    for i in range(n // 2):\n        changes += min(abs(arr[i] - arr[n - 1 - i]), 2)\n\n    if n % 2 != 0 and arr[n // 2] != arr[n // 2]:\n        changes += 1\n\n    return changes\n",
        "def smallest_change(arr):\n    n = len(arr)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for length in range(2, n+1):\n        for i in range(n-length+1):\n            j = i + length - 1\n            if arr[i] == arr[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    return n - dp[0][n-1]\n",
        "def smallest_change(arr):\n    n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            changes += 1\n    return changes\n",
        "def smallest_change(arr):\n    left = 0\n    right = len(arr) - 1\n    changes = 0\n\n    while left < right:\n        if arr[left] == arr[right]:\n            left += 1\n            right -= 1\n        else:\n            changes += 1\n            if arr[left + 1] == arr[right]:\n                left += 2\n                right -= 1\n            elif arr[left] == arr[right - 1]:\n                left += 1\n                right -= 2\n            else:\n                left += 1\n                right -= 1\n\n    return changes\n"
    ],
    "HumanEval/74": [
        "def total_match(lst1, lst2):\n    total1 = sum(len(s) for s in lst1)\n    total2 = sum(len(s) for s in lst2)\n    if total1 <= total2:\n        return lst1\n    else:\n        return lst2\n",
        "def total_match(lst1, lst2):\n    if not lst1 or not lst2:\n        return []\n\n    total1 = sum(len(s) for s in lst1)\n    total2 = sum(len(s) for s in lst2)\n\n    if total1 <= total2:\n        return lst1\n    else:\n        return lst2\n",
        "def total_match(lst1, lst2):\n    total1 = sum(len(s) for s in lst1)\n    total2 = sum(len(s) for s in lst2)\n    \n    if total1 < total2:\n        return lst1\n    elif total2 < total1:\n        return lst2\n    else:\n        return lst1\n    \n    if not lst1 or not lst2:\n        return []\n",
        "def total_match(lst1, lst2):\n    if not lst1 and not lst2:\n        return []\n\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n\n    if total_chars_lst1 <= total_chars_lst2:\n        return lst1\n    else:\n        return lst2\n",
        "def total_match(lst1, lst2):\n    total1 = 0\n    total2 = 0\n\n    if not lst1 and not lst2:\n        return []\n\n    for string in lst1:\n        total1 += len(string)\n\n    for string in lst2:\n        total2 += len(string)\n\n    if total1 < total2:\n        return lst1\n    elif total2 < total1:\n        return lst2\n    else:\n        return lst1\n"
    ],
    "HumanEval/75": [
        "def is_prime(n):\n    \"\"\"Checks if a number is prime\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a):\n    \"\"\"Checks if a number is the multiplication of 3 prime numbers\"\"\"\n    if a < 100:\n        for i in range(2, int(a ** 0.5) + 1):\n            if a % i == 0:\n                j = a // i\n                if is_prime(i) and is_prime(j) and is_prime(a // (i * j)):\n                    return True\n    return False\n",
        "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a):\n    \"\"\"Returns True if the given number is the multiplication of 3 prime numbers, False otherwise.\"\"\"\n    if a < 100:\n        for i in range(2, int(a ** 0.5) + 1):\n            if a % i == 0 and not is_prime(i) and not is_prime(a // i):\n                return False\n        return True\n    else:\n        return False\n",
        "def is_multiply_prime(a):\n    \"\"\"Return True if the given number is the multiplication of 3 prime numbers, False otherwise.\"\"\"\n    if a < 100:\n        prime_factors = find_prime_factors(a)\n        return len(prime_factors) == 3\n\ndef find_prime_factors(n):\n    \"\"\"Find all the prime factors of a given number.\"\"\"\n    prime_factors = []\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            prime_factors.append(i)\n            n //= i\n        else:\n            i += 1\n    if n > 2:\n        prime_factors.append(n)\n    return prime_factors\n",
        "def is_prime(n):\n    \"\"\"Returns True if n is a prime number, False otherwise.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a):\n    \"\"\"Returns True if the given number is the multiplication of 3 prime numbers, False otherwise.\"\"\"\n    if a < 100:\n        primes = [p for p in range(2, 100) if is_prime(p)]\n        for i in range(len(primes)):\n            for j in range(i, len(primes)):\n                for k in range(j, len(primes)):\n                    if primes[i] * primes[j] * primes[k] == a:\n                        return True\n    return False\n",
        "def is_prime(n):\n    \"\"\"Checks if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_of_three_primes(n):\n    \"\"\"Checks if a number is the multiplication of 3 prime numbers.\"\"\"\n    for i in range(2, int(n ** (1/3)) + 1):\n        if n % i == 0:\n            for j in range(2, int(n ** (1/3)) + 1):\n                if i != j and n % j == 0:\n                    for k in range(2, int(n ** (1/3)) + 1):\n                        if i != k and j != k and n % k == 0 and is_prime(i) and is_prime(j) and is_prime(k):\n                            return True\n    return False\n\ndef is_multiply_prime(a):\n    \"\"\"Checks if a number is the multiplication of 3 prime numbers.\"\"\"\n    if a < 100 and is_multiply_of_three_primes(a):\n        return True\n    return False\n"
    ],
    "HumanEval/76": [
        "import math\n\ndef is_simple_power(x, n):\n    \"\"\"\n    Returns True if x is a simple power of n, False otherwise.\n    \"\"\"\n    # Base case: if x is 1, it is a simple power of any n\n    if x == 1:\n        return True\n\n    # Calculate the logarithm of x with base n\n    log_x_n = math.log(x, n)\n\n    # Check if the logarithm is an integer\n    return log_x_n.is_integer()\n",
        "import math\n\ndef is_simple_power(x, n):\n    \"\"\"\n    Returns True if x is a simple power of n, and False otherwise.\n    \"\"\"\n    if n == 1:\n        return x == 1\n    \n    m = math.log(x, n)\n    return m.is_integer()\n",
        "def is_simple_power(x, n):\n    power = 0\n    while True:\n        result = n ** power\n        if result == x:\n            return True\n        elif result > x:\n            return False\n        power += 1\n",
        "def is_simple_power(x, n):\n    if x == 1:\n        return True\n    \n    temp = x\n    while temp % n == 0:\n        temp //= n\n    \n    return temp == 1\n",
        "def is_simple_power(x, n):\n    int_value = 1\n    while x % n == 0:\n        x //= n\n        int_value += 1\n    return x == 1\n"
    ],
    "HumanEval/77": [
        "import math\n\ndef iscube(a):\n    abs_a = abs(a)\n    cube_root = abs_a ** (1/3)\n    return cube_root.is_integer()\n",
        "import math\n\ndef iscube(a):\n    if a == 0:\n        return True\n    elif a < 0:\n        return math.floor(a ** (1/3)) ** 3 == a\n    else:\n        return math.floor(a ** (1/3)) ** 3 == a\n",
        "import math\n\ndef iscube(a):\n    \"\"\"\n    Write a function that takes an integer a and returns True \n    if this integer is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    \"\"\"\n    if a == 0:\n        return True\n    if a < 0:\n        a = -a\n    cube_root = a ** (1/3)\n    if cube_root.is_integer():\n        return True\n    else:\n        return False\n",
        "def iscube(a):\n    if a == 0:\n        return True\n    cube_root = a ** (1/3)\n    if cube_root.is_integer():\n        return True\n    else:\n        return False\n",
        "def iscube(a):\n    if a == 0 or a == -1:\n        return True\n    cube_root = a ** (1/3)\n    if cube_root.is_integer():\n        return True\n    else:\n        return False\n"
    ],
    "HumanEval/78": [
        "def hex_key(num):\n    prime_digits = [2, 3, 5, 7, 11, 13]\n    count = 0\n    \n    for char in num:\n        if char.isdigit():\n            digit = int(char)\n        else:\n            digit = ord(char.upper()) - ord('A') + 10\n        \n        if digit in prime_digits:\n            count += 1\n    \n    return count\n",
        "def hex_key(num):\n    prime_digits = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in prime_digits:\n            count += 1\n    return count\n",
        "def hex_key(num):\n    prime_hex_digits = [2, 3, 5, 7, 'B', 'D']\n    count = 0\n\n    for digit in num:\n        if digit.upper() in [str(d) for d in prime_hex_digits]:\n            count += 1\n\n    return count\n",
        "def hex_key(num):\n    prime_hex_digits = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    \n    for digit in num:\n        if digit in prime_hex_digits:\n            count += 1\n    \n    return count\n",
        "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef hex_key(num):\n    \"\"\"\n    Counts the number of hexadecimal digits that are primes in the given hexadecimal number.\n    \"\"\"\n    digits = list(num)\n    count = 0\n    for digit in digits:\n        if digit in ['2', '3', '5', '7', 'B', 'D']:\n            if is_prime(int(digit, 16)):\n                count += 1\n    return count\n"
    ],
    "HumanEval/79": [
        "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return f\"db{binary}db\"\n",
        "def decimal_to_binary(decimal):\n    binary_str = \"\"\n    while decimal > 0:\n        binary_str = str(decimal % 2) + binary_str\n        decimal //= 2\n    return \"db\" + binary_str + \"db\"\n",
        "def decimal_to_binary(decimal):\n    binary_str = \"\"\n    \n    while decimal > 0:\n        binary_str = str(decimal % 2) + binary_str\n        decimal //= 2\n    \n    return \"db\" + binary_str + \"db\"\n",
        "def decimal_to_binary(decimal):\n    return \"db\" + bin(decimal)[2:] + \"db\"\n",
        "def decimal_to_binary(decimal):\n    binary_str = bin(decimal)[2:]\n    return f\"db{binary_str}db\"\n"
    ],
    "HumanEval/80": [
        "",
        "def is_happy(s):\n    if len(s) < 3:\n        return False\n    \n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    \n    return True\n",
        "def is_happy(s):\n    if len(s) < 3:\n        return False\n\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n\n    return True\n",
        "def is_happy(s):\n    if len(s) < 3:\n        return False\n    \n    unique_chars = set()\n    \n    for char in s:\n        if char in unique_chars:\n            return False\n        unique_chars.add(char)\n    \n    return True\n",
        "def is_happy(s):\n    \"\"\"\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct.\n    \"\"\"\n    if len(s) < 3:\n        return False\n\n    unique_letters = set(s[:3])\n    if len(unique_letters) < 3:\n        return False\n\n    for i in range(3, len(s)):\n        unique_letters.remove(s[i-3])\n        unique_letters.add(s[i])\n        if len(unique_letters) < 3:\n            return False\n\n    return True\n"
    ],
    "HumanEval/81": [
        "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade = 'A+'\n        elif gpa > 3.7:\n            letter_grade = 'A'\n        elif gpa > 3.3:\n            letter_grade = 'A-'\n        elif gpa > 3.0:\n            letter_grade = 'B+'\n        elif gpa > 2.7:\n            letter_grade = 'B'\n        elif gpa > 2.3:\n            letter_grade = 'B-'\n        elif gpa > 2.0:\n            letter_grade = 'C+'\n        elif gpa > 1.7:\n            letter_grade = 'C'\n        elif gpa > 1.3:\n            letter_grade = 'C-'\n        elif gpa > 1.0:\n            letter_grade = 'D+'\n        elif gpa > 0.7:\n            letter_grade = 'D'\n        elif gpa > 0.0:\n            letter_grade = 'D-'\n        else:\n            letter_grade = 'E'\n        letter_grades.append(letter_grade)\n    return letter_grades\n",
        "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade = 'A+'\n        elif gpa > 3.7:\n            letter_grade = 'A'\n        elif gpa > 3.3:\n            letter_grade = 'A-'\n        elif gpa > 3.0:\n            letter_grade = 'B+'\n        elif gpa > 2.7:\n            letter_grade = 'B'\n        elif gpa > 2.3:\n            letter_grade = 'B-'\n        elif gpa > 2.0:\n            letter_grade = 'C+'\n        elif gpa > 1.7:\n            letter_grade = 'C'\n        elif gpa > 1.3:\n            letter_grade = 'C-'\n        elif gpa > 1.0:\n            letter_grade = 'D+'\n        elif gpa > 0.7:\n            letter_grade = 'D'\n        elif gpa > 0.0:\n            letter_grade = 'D-'\n        else:\n            letter_grade = 'E'\n        letter_grades.append(letter_grade)\n    return letter_grades\n",
        "def numerical_letter_grade(grades):\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grade = 'A+'\n        elif grade > 3.7:\n            letter_grade = 'A'\n        elif grade > 3.3:\n            letter_grade = 'A-'\n        elif grade > 3.0:\n            letter_grade = 'B+'\n        elif grade > 2.7:\n            letter_grade = 'B'\n        elif grade > 2.3:\n            letter_grade = 'B-'\n        elif grade > 2.0:\n            letter_grade = 'C+'\n        elif grade > 1.7:\n            letter_grade = 'C'\n        elif grade > 1.3:\n            letter_grade = 'C-'\n        elif grade > 1.0:\n            letter_grade = 'D+'\n        elif grade > 0.7:\n            letter_grade = 'D'\n        elif grade > 0.0:\n            letter_grade = 'D-'\n        else:\n            letter_grade = 'E'\n        letter_grades.append(letter_grade)\n    return letter_grades\n",
        "def numerical_letter_grade(grades):\n    \"\"\"\n    Converts a list of numerical GPAs to a list of letter grades.\n    \n    Args:\n        grades (list): A list of numerical GPAs.\n    \n    Returns:\n        list: A list of letter grades corresponding to the input GPAs.\n    \"\"\"\n    letter_grades = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            letter_grade = 'A+'\n        elif gpa > 3.7:\n            letter_grade = 'A'\n        elif gpa > 3.3:\n            letter_grade = 'A-'\n        elif gpa > 3.0:\n            letter_grade = 'B+'\n        elif gpa > 2.7:\n            letter_grade = 'B'\n        elif gpa > 2.3:\n            letter_grade = 'B-'\n        elif gpa > 2.0:\n            letter_grade = 'C+'\n        elif gpa > 1.7:\n            letter_grade = 'C'\n        elif gpa > 1.3:\n            letter_grade = 'C-'\n        elif gpa > 1.0:\n            letter_grade = 'D+'\n        elif gpa > 0.7:\n            letter_grade = 'D'\n        elif gpa > 0.0:\n            letter_grade = 'D-'\n        else:\n            letter_grade = 'E'\n        letter_grades.append(letter_grade)\n    return letter_grades\n",
        "def numerical_letter_grade(grades):\n    grade_mapping = {\n        4.0: 'A+',\n        3.7: 'A',\n        3.3: 'A-',\n        3.0: 'B+',\n        2.7: 'B',\n        2.3: 'B-',\n        2.0: 'C+',\n        1.7: 'C',\n        1.3: 'C-',\n        1.0: 'D+',\n        0.7: 'D',\n        0.0: 'D-',\n        -0.1: 'E'\n    }\n    \n    letter_grades = []\n    for grade in grades:\n        for cutoff, letter in grade_mapping.items():\n            if grade >= cutoff:\n                letter_grades.append(letter)\n                break\n    \n    return letter_grades\n"
    ],
    "HumanEval/82": [
        "def is_prime(n):\n    \"\"\"\n    Helper function to check if a number is prime.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    \"\"\"\n    Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise.\n    \"\"\"\n    length = len(string)\n    return is_prime(length)\n",
        "def prime_length(string):\n    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True\n",
        "def is_prime(num):\n    \"\"\"Helper function to check if a number is prime.\"\"\"\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise.\"\"\"\n    length = len(string)\n    return is_prime(length)\n",
        "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    length = len(string)\n    return is_prime(length)\n",
        "def is_prime(n):\n    \"\"\"\n    Helper function to check if a number is prime.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    \"\"\"\n    Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise.\n    \"\"\"\n    length = len(string)\n    return is_prime(length)\n"
    ],
    "HumanEval/83": [
        "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    total = 10 ** n\n    starts_with_1 = 10 ** (n - 1)\n    ends_with_1 = 10 ** (n - 1)\n    both_1 = 1\n    return starts_with_1 + ends_with_1 - both_1\n",
        "def starts_one_ends(n):\n    return 9 * 10**(n-1) + 10**(n-1) - 10**(n-2)\n",
        "def starts_one_ends(n):\n    return 2 * 10**(n-1) - 10**(n-2)\n",
        "def starts_one_ends(n):\n    return 1 + 9 * 10 ** (n - 1)\n",
        "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    return 9 * 10**(n-1)\n"
    ],
    "HumanEval/84": [
        "def solve(N):\n    binary_digits = [bin(int(digit))[2:] for digit in str(N)]\n    binary_sum = \"\".join(binary_digits)\n    return binary_sum\n",
        "def solve(N):\n    digit_sum = 0\n    while N > 0:\n        digit_sum += N % 10\n        N //= 10\n    return bin(digit_sum)[2:]\n",
        "def solve(N):\n    digits_sum = sum(int(digit) for digit in str(N))\n    return bin(digits_sum)[2:]\n",
        "def solve(N):\n    N_str = str(N)\n    total_sum = 0\n    for digit in N_str:\n        total_sum += int(digit)\n    return bin(total_sum)[2:]\n",
        "def solve(N):\n    total_sum = 0\n    for digit in str(N):\n        total_sum += int(digit)\n    return bin(total_sum)[2:]\n"
    ],
    "HumanEval/85": [
        "def add(lst):\n    \"\"\"Given a non-empty list of integers lst, add the even elements that are at odd indices.\"\"\"\n    total = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            total += lst[i]\n    return total\n",
        "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices.\"\"\"\n    total = 0\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 == 0:\n            total += lst[i]\n    return total\n",
        "def add(lst):\n    \"\"\"\n    Given a non-empty list of integers lst, add the even elements that are at odd indices.\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2\n    \"\"\"\n    total = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            total += lst[i]\n    return total\n",
        "def add(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 2 == 1 and lst[i] % 2 == 0:\n            total += lst[i]\n    return total\n",
        "def add(lst):\n    total = 0\n    for i, num in enumerate(lst):\n        if i % 2 == 1 and num % 2 == 0:\n            total += num\n    return total\n"
    ],
    "HumanEval/86": [
        "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = []\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        ordered_words.append(sorted_word)\n    return ' '.join(ordered_words)\n",
        "def anti_shuffle(s):\n    words = s.split()\n    sorted_words = []\n    for word in words:\n        sorted_chars = ''.join(sorted(word))\n        sorted_words.append(sorted_chars)\n    result = ' '.join(sorted_words)\n    return result\n",
        "def anti_shuffle(s):\n    words = s.split()\n    sorted_words = []\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        sorted_words.append(sorted_word)\n    result = ' '.join(sorted_words)\n    return result\n",
        "def anti_shuffle(s):\n    words = s.split()\n    sorted_words = []\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        sorted_words.append(sorted_word)\n    return ' '.join(sorted_words)\n",
        "def anti_shuffle(s):\n    words = s.split()\n    new_words = [''.join(sorted(word)) for word in words]\n    result = ' '.join(new_words)\n    return result\n"
    ],
    "HumanEval/87": [
        "def get_row(lst, x):\n    coordinates = []\n\n    for row, row_items in enumerate(lst):\n        for col, item in enumerate(row_items):\n            if item == x:\n                coordinates.append((row, col))\n\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coordinates\n",
        "def get_row(lst, x):\n    coordinates = []\n    for row_idx, row in enumerate(lst):\n        for col_idx, val in enumerate(row):\n            if val == x:\n                coordinates.append((row_idx, col_idx))\n    \n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coordinates\n",
        "def get_row(lst, x):\n    coordinates = []\n    for row_idx, row in enumerate(lst):\n        if x in row:\n            col_idx = row.index(x)\n            coordinates.append((row_idx, col_idx))\n            # No need to continue searching the current row\n            continue\n    return coordinates\n",
        "def get_row(lst, x):\n    coordinates = []\n    \n    for row_idx, row in enumerate(lst):\n        for col_idx, val in enumerate(row):\n            if val == x:\n                coordinates.append((row_idx, col_idx))\n    \n    coordinates.sort(key=lambda c: (c[0], -c[1]))\n    \n    return coordinates\n",
        "def get_row(lst, x):\n    coordinates = []\n    for row_index, row in enumerate(lst):\n        for col_index, value in enumerate(row):\n            if value == x:\n                coordinates.append((row_index, col_index))\n    \n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coordinates\n"
    ],
    "HumanEval/88": [
        "def sort_array(array):\n    if not array:\n        return []\n    \n    if len(array) == 1:\n        return array.copy()\n    \n    first = array[0]\n    last = array[-1]\n    total = first + last\n    \n    if total % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n",
        "def sort_array(array):\n    if not array or len(array) == 1:\n        return array.copy()\n\n    first_element = array[0]\n    last_element = array[-1]\n    total_sum = first_element + last_element\n\n    sorted_array = sorted(array, reverse=(total_sum % 2 == 0))\n    return sorted_array.copy()\n",
        "def sort_array(array):\n    arr_copy = array[:]\n    first_element = arr_copy[0] if arr_copy else 0\n    last_element = arr_copy[-1] if arr_copy else 0\n    sum_of_first_last = first_element + last_element\n\n    if sum_of_first_last % 2 != 0:\n        arr_copy.sort()\n    else:\n        arr_copy.sort(reverse=True)\n\n    return arr_copy\n",
        "def sort_array(array):\n    sorted_array = array.copy()\n    if len(sorted_array) <= 1:\n        return sorted_array\n    sum_first_last = sorted_array[0] + sorted_array[-1]\n    if sum_first_last % 2 == 1:\n        sorted_array.sort()\n    else:\n        sorted_array.sort(reverse=True)\n    return sorted_array\n",
        "def sort_array(array):\n    if not array:\n        return []\n    \n    if len(array) == 1:\n        return array\n    \n    first = array[0]\n    last = array[-1]\n    sum_of_first_and_last = first + last\n    \n    sorted_array = sorted(array.copy())\n    \n    if sum_of_first_and_last % 2 == 1:\n        return sorted_array\n    else:\n        return sorted_array[::-1]\n"
    ],
    "HumanEval/89": [
        "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    \n    # Define the alphabet mapping\n    alphabet_lower = 'abcdefghijklmnopqrstuvwxyz'\n    alphabet_upper = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    \n    # Iterate through each character in the input string\n    encrypted_chars = []\n    for char in s:\n        # Check if the character is a letter\n        if char.isalpha():\n            # Find the position of the character in the alphabet\n            if char.islower():\n                pos = alphabet_lower.index(char)\n            else:\n                pos = alphabet_upper.index(char)\n            \n            # Shift the position by 4 places\n            new_pos = (pos + 4) % len(alphabet_lower)\n            \n            # Replace the character with the new shifted character\n            if char.islower():\n                encrypted_chars.append(alphabet_lower[new_pos])\n            else:\n                encrypted_chars.append(alphabet_upper[new_pos])\n        else:\n            # Keep non-alphabetic characters as-is\n            encrypted_chars.append(char)\n    \n    # Return the encrypted string\n    return ''.join(encrypted_chars)\n",
        "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            # Shift the character by 4 places\n            new_char = chr(ord(char) + 4)\n            # Wrap around if the new character goes beyond 'z'\n            if char.islower() and new_char > 'z':\n                new_char = chr(ord(new_char) - 26)\n            elif char.isupper() and new_char > 'Z':\n                new_char = chr(ord(new_char) - 26)\n            result += new_char\n        else:\n            result += char\n    return result\n",
        "def encrypt(s):\n    alphabet = {\n        'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8,\n        'j': 9, 'k': 10, 'l': 11, 'm': 12, 'n': 13, 'o': 14, 'p': 15, 'q': 16,\n        'r': 17, 's': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24, 'z': 25\n    }\n    result = ''\n    for char in s:\n        if char.lower() in alphabet:\n            index = alphabet[char.lower()]\n            new_index = (index + 4) % 26\n            for letter, i in alphabet.items():\n                if i == new_index:\n                    result += letter if char.isupper() else letter.lower()\n                    break\n    return result\n",
        "def encrypt(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    rotated_alphabet = alphabet[4:] + alphabet[:4]\n    encrypted = ''\n    for char in s:\n        if char.lower() in alphabet:\n            index = alphabet.index(char.lower())\n            encrypted += rotated_alphabet[index]\n        else:\n            encrypted += char\n    return encrypted\n",
        "def encrypt(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    shifted_alphabet = ''.join(chr((ord(c) - 97 + 4) % 26 + 97) for c in alphabet)\n    result = ''\n    for c in s:\n        index = alphabet.index(c)\n        result += shifted_alphabet[index]\n    return result\n"
    ],
    "HumanEval/90": [
        "def next_smallest(lst):\n    if not lst:\n        return None\n    \n    sorted_lst = sorted(lst)\n    if len(sorted_lst) < 2:\n        return None\n    \n    return sorted_lst[1]\n",
        "def next_smallest(lst):\n    if not lst:\n        return None\n    \n    sorted_lst = sorted(lst)\n    \n    if len(sorted_lst) == 1:\n        return None\n    \n    return sorted_lst[1]\n",
        "def next_smallest(lst):\n    if not lst:\n        return None\n    \n    sorted_lst = sorted(lst)\n    \n    if len(sorted_lst) < 2:\n        return None\n    \n    return sorted_lst[1]\n",
        "def next_smallest(lst):\n    if not lst:\n        return None\n    \n    sorted_lst = sorted(lst)\n    if len(sorted_lst) == 1:\n        return None\n    \n    return sorted_lst[1]\n",
        "def next_smallest(lst):\n    if not lst or len(set(lst)) < 2:\n        return None\n    return sorted(lst)[1]\n"
    ],
    "HumanEval/91": [
        "def is_bored(S):\n    boredom_count = 0\n    sentences = S.split(\". \")\n    sentences.extend(S.split(\"? \"))\n    sentences.extend(S.split(\"! \"))\n    \n    for sentence in sentences:\n        if sentence.startswith(\"I \"):\n            boredom_count += 1\n    \n    return boredom_count\n",
        "def is_bored(S):\n    boredom_count = 0\n    sentences = S.split(\".\")\n    sentences = [sentence.strip() for sentence in sentences]\n    sentences = [sentence for sentence in sentences if sentence]\n    \n    for sentence in sentences:\n        if sentence.startswith(\"I \") or sentence == \"I\":\n            boredom_count += 1\n    \n    return boredom_count\n",
        "def is_bored(S):\n    count = 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        sentence = sentence.strip()\n        if sentence.startswith('I '):\n            count += 1\n    return count\n",
        "def is_bored(S):\n    boredom_count = 0\n    sentences = re.split(r\"[.?!]\", S)\n    for sentence in sentences:\n        sentence = sentence.strip()\n        if sentence.startswith(\"I \"):\n            boredom_count += 1\n    return boredom_count\n",
        "def is_bored(S):\n    if not S:\n        return 0\n\n    boredom_count = 0\n    sentences = S.split('.') + S.split('?') + S.split('!')\n    for sentence in sentences:\n        sentence = sentence.strip()\n        if sentence.startswith(\"I\"):\n            boredom_count += 1\n    return boredom_count\n"
    ],
    "HumanEval/92": [
        "def any_int(x, y, z):\n    return all(isinstance(num, int) for num in (x, y, z)) and (x + y == z)\n",
        "def any_int(x, y, z):\n    if not all(isinstance(num, int) for num in (x, y, z)):\n        return False\n    return x + y == z or x + z == y or y + z == x\n",
        "def any_int(x, y, z):\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    total = x + y + z\n    return x == total - x or y == total - y or z == total - z\n",
        "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        total = x + y + z\n        return total == x or total == y or total == z\n    return False\n",
        "def any_int(x, y, z):\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    if x == y + z or y == x + z or z == x + y:\n        return True\n    else:\n        return False\n"
    ],
    "HumanEval/93": [
        "def encode(message):\n    vowels = 'aeiou'\n    encoded_message = ''\n    \n    for char in message:\n        if char.isalpha():\n            encoded_message += char.swapcase()\n        elif char.lower() in vowels:\n            encoded_message += '*'\n        else:\n            encoded_message += char\n    \n    return encoded_message\n",
        "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'tGST'\n    >>> encode('This is a message')\n    'tHkS kS c mGSSCgG'\n    \"\"\"\n    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in \"aeiou\":\n                # Replace vowels with the letter 2 places ahead in the alphabet, and swap case\n                encoded_message += chr(ord(char.lower()) + 2).swapcase()\n            else:\n                # Swap case for consonants\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message\n",
        "def encode(message):\n    vowels = 'aeiou'\n    vowel_map = {v: chr(ord(v) + 2) for v in vowels}\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += vowel_map.get(char.lower(), '?')\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += ' '\n    return encoded_message\n",
        "def encode(message):\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                new_char = chr((ord(char.lower()) - 'a' + 2) % 26 + 'a')\n                encoded_message += new_char.upper() if char.isupper() else new_char\n            else:\n                encoded_message += char.swapcase()\n    return encoded_message\n",
        "def encode(message):\n    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n                encoded_char = char.lower()\n            else:\n                encoded_char = char.upper()\n            encoded_message += encoded_char\n        else:\n            encoded_message += char\n    return encoded_message\n"
    ],
    "HumanEval/94": [
        "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef skjkasdkd(lst):\n    largest_prime = 0\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n\n    digit_sum = 0\n    while largest_prime > 0:\n        digit_sum += largest_prime % 10\n        largest_prime //= 10\n\n    return digit_sum\n",
        "def skjkasdkd(lst):\n    max_value = max(lst)\n    is_prime = [True] * (max_value + 1)\n    is_prime[0] = is_prime[1] = False\n    for i in range(2, int(max_value ** 0.5) + 1):\n        if is_prime[i]:\n            for j in range(i * i, max_value + 1, i):\n                is_prime[j] = False\n    largest_prime = 0\n    for num in lst:\n        if is_prime[num]:\n            largest_prime = max(largest_prime, num)\n    digits_sum = 0\n    while largest_prime > 0:\n        digits_sum += largest_prime % 10\n        largest_prime //= 10\n    return digits_sum\n",
        "def skjkasdkd(lst):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    largest_prime = 0\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n    \n    digit_sum = 0\n    while largest_prime > 0:\n        digit_sum += largest_prime % 10\n        largest_prime //= 10\n    \n    return digit_sum\n",
        "def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n    \"\"\"\n    if not lst:\n        return 0\n\n    max_num = max(lst)\n    is_prime = [True] * (max_num + 1)\n    is_prime[0] = is_prime[1] = False\n\n    for i in range(2, int(max_num ** 0.5) + 1):\n        if is_prime[i]:\n            for j in range(i * i, max_num + 1, i):\n                is_prime[j] = False\n\n    largest_prime = max(num for num in lst if is_prime[num])\n\n    if largest_prime == 0:\n        return 0\n\n    digit_sum = sum(int(d) for d in str(largest_prime))\n    return digit_sum\n",
        "import heapq\n\ndef is_prime(n):\n    \"\"\"Helper function to check if a number is prime\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef skjkasdkd(lst):\n    \"\"\"Find the largest prime value in the list and return the sum of its digits\"\"\"\n    primes = []\n    for num in lst:\n        if isinstance(num, int) and is_prime(num):\n            heapq.heappush(primes, -num)\n            if len(primes) > 10:\n                heapq.heappop(primes)\n\n    if not primes:\n        return 0\n\n    largest_prime = -heapq.heappop(primes)\n    digit_sum = 0\n    while largest_prime > 0:\n        digit_sum += largest_prime % 10\n        largest_prime //= 10\n    return digit_sum\n"
    ],
    "HumanEval/95": [
        "def check_dict_case(dict_):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict_:\n        return False\n\n    all_lower = True\n    all_upper = True\n\n    for key in dict_:\n        if not isinstance(key, str):\n            return False\n        if not key.islower():\n            all_lower = False\n        if not key.isupper():\n            all_upper = False\n\n    return all_lower or all_upper\n",
        "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    \"\"\"\n    if not dict:\n        return False\n    \n    all_lower = True\n    all_upper = True\n    \n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if not key.islower():\n            all_lower = False\n        if not key.isupper():\n            all_upper = False\n    \n    return all_lower or all_upper\n",
        "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    \n    # Check if the dictionary is empty\n    if not dict:\n        return False\n    \n    # Initialize a flag to keep track of the case\n    is_lower = None\n    \n    # Iterate through the keys\n    for key in dict:\n        # Check if the key is a string\n        if not isinstance(key, str):\n            return False\n        \n        # Set the initial case flag\n        if is_lower is None:\n            is_lower = key.islower()\n        \n        # Check if the current key is consistent with the initial case\n        if is_lower != key.islower():\n            return False\n    \n    # If we made it this far, all keys are either all lowercase or all uppercase\n    return True\n",
        "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    \"\"\"\n    if not dict:\n        return False\n    \n    all_lower = True\n    all_upper = True\n    \n    for key in dict:\n        if not isinstance(key, str):\n            all_lower = False\n            all_upper = False\n            break\n        elif not key.islower():\n            all_lower = False\n        elif not key.isupper():\n            all_upper = False\n    \n    return all_lower or all_upper\n",
        "def check_dict_case(d):\n    if not d:\n        return False\n    \n    case = None\n    for key in d:\n        if not isinstance(key, str):\n            return False\n        if case is None:\n            case = all(c.isupper() for c in key)\n        elif all(c.isupper() for c in key) != case:\n            return False\n    \n    return True\n"
    ],
    "HumanEval/96": [
        "def count_up_to(n):\n    primes = []\n    if n <= 1:\n        return primes\n\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n\n    return primes\n",
        "def count_up_to(n):\n    if n <= 1:\n        return []\n\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n",
        "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    \"\"\"\n    prime_numbers = []\n    for i in range(2, n):\n        if is_prime(i):\n            prime_numbers.append(i)\n    return prime_numbers\n",
        "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\"\"\"\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n\ndef is_prime(n):\n    \"\"\"Checks if a given number is prime.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
        "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    \"\"\"\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n"
    ],
    "HumanEval/97": [
        "def multiply(a, b):\n    a_unit = abs(a) % 10\n    b_unit = abs(b) % 10\n    return a_unit * b_unit\n",
        "def multiply(a, b):\n    a_unit = abs(a) % 10\n    b_unit = abs(b) % 10\n    return a_unit * b_unit\n",
        "",
        "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    a_unit = abs(a) % 10\n    b_unit = abs(b) % 10\n    return a_unit * b_unit\n",
        "def multiply(a, b):\n    a_unit = abs(a) % 10\n    b_unit = abs(b) % 10\n    return a_unit * b_unit\n"
    ],
    "HumanEval/98": [
        "def count_upper(s):\n    count = 0\n    for i, char in enumerate(s):\n        if i % 2 == 0 and char.upper() in 'AEIOU':\n            count += 1\n    return count\n",
        "def count_upper(s):\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in 'AEIOU':\n            count += 1\n    return count\n",
        "def count_upper(s):\n    count = 0\n    for i, char in enumerate(s):\n        if i % 2 == 0 and char.upper() in 'AEIOU':\n            count += 1\n    return count\n",
        "def count_upper(s):\n    count = 0\n    for i, char in enumerate(s):\n        if char.isupper() and char in 'AEIOU' and i % 2 == 0:\n            count += 1\n    return count\n",
        "def count_upper(s):\n    count = 0\n    for i, char in enumerate(s):\n        if i % 2 == 0 and char.isupper() and char in 'AEIOU':\n            count += 1\n    return count\n"
    ],
    "HumanEval/99": [
        "import math\n\ndef closest_integer(value):\n    num = float(value)\n    rounded = round(num)\n\n    # Handle the case where the number is equidistant from two integers\n    if abs(num - rounded) < 0.5:\n        if num > 0:\n            rounded = math.ceil(num)\n        else:\n            rounded = math.floor(num)\n\n    return int(rounded)\n",
        "def closest_integer(value):\n    float_value = float(value)\n    rounded = round(float_value)\n    \n    if abs(float_value - rounded) < 0.5:\n        if float_value > 0:\n            return rounded + 1\n        else:\n            return rounded - 1\n    else:\n        return rounded\n",
        "def closest_integer(value):\n    num = float(value)\n    rounded_num = round(num)\n    if abs(num - rounded_num) == 0.5:\n        if num > 0:\n            rounded_num = int(rounded_num + 0.5)\n        else:\n            rounded_num = int(rounded_num - 0.5)\n    return rounded_num\n",
        "def closest_integer(value):\n    if not isinstance(value, str):\n        raise TypeError(\"Input must be a string\")\n\n    try:\n        num = float(value)\n    except ValueError:\n        raise ValueError(\"Input must be a valid number\")\n\n    return round(num)\n",
        "def closest_integer(value):\n    num = float(value)\n    if num.is_integer():\n        return int(num)\n    else:\n        return round(num, 0, flag=1)\n"
    ],
    "HumanEval/100": [
        "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    pile = []\n    for i in range(n):\n        pile.append(n - i if i == 0 else pile[-1] + (2 if n % 2 == 1 else 1))\n    return pile\n",
        "def make_a_pile(n):\n    stones = []\n    stones.append(n)\n    for i in range(n - 1):\n        if n % 2 == 0:\n            stones.append(n + 1)\n            n += 1\n        else:\n            stones.append(n + 2)\n            n += 2\n    return stones\n",
        "def make_a_pile(n):\n    levels = [n]\n    for _ in range(n-1):\n        if n % 2 == 1:\n            levels.append(levels[-1] + 2)\n        else:\n            levels.append(levels[-1] + 2)\n    return levels\n",
        "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    pile = [n]\n    start = n + (1 if n % 2 == 0 else 2)\n    for i in range(1, n):\n        pile.append(start + 2 * i)\n    return pile\n",
        "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the same as the previous level if n is odd.\n        - the previous odd number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 3, 3]\n    >>> make_a_pile(5)\n    [5, 5, 5, 5, 5]\n    \"\"\"\n    pile = [n]\n    while n > 1:\n        if n % 2 == 0:\n            pile.append(n - 1)\n        else:\n            pile.append(n)\n        n -= 1\n    return pile\n"
    ],
    "HumanEval/101": [
        "def words_string(s):\n    return s.split(\",\")\n",
        "def words_string(s):\n    return s.split(\", \") if \", \" in s else s.split()\n",
        "def words_string(s):\n    words = s.split(',')\n    words = [word.strip() for word in words]\n    words = [word for word in words if word]\n    return words\n",
        "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    return s.split(\", \") if \",\" in s else s.split()\n",
        "def words_string(s):\n    words = s.split(', ') + s.split(' ')\n    words = [word for word in words if word]\n    return words\n"
    ],
    "HumanEval/102": [
        "def choose_num(x, y):\n    if x > y:\n        return -1\n    \n    largest_even = -1\n    for num in range(x, y + 1):\n        if num % 2 == 0 and num > largest_even:\n            largest_even = num\n    \n    return largest_even\n",
        "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x <= 0 or y <= 0:\n        return -1\n\n    result = -1\n    for num in range(x, y+1):\n        if num % 2 == 0 and num > result:\n            result = num\n\n    return result\n",
        "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # Check if x and y are positive numbers\n    if x <= 0 or y <= 0:\n        return -1\n\n    # Check if y is even and greater than or equal to x\n    if y % 2 == 0 and y >= x:\n        return y\n    # Check if x is even\n    elif x % 2 == 0:\n        return x\n    else:\n        return -1\n",
        "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x < 0 or y < 0:\n        return -1\n\n    min_num = min(x, y)\n    max_num = max(x, y)\n\n    biggest_even = -1\n    for num in range(min_num, max_num + 1):\n        if num % 2 == 0 and num > biggest_even:\n            biggest_even = num\n\n    return biggest_even if biggest_even != -1 else -1\n",
        "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x < 0 or y < 0:\n        return -1\n\n    if x <= y:\n        num_range = range(x, y+1)\n    else:\n        num_range = range(y, x+1)\n\n    largest_even = -1\n    for num in num_range:\n        if num % 2 == 0 and num > largest_even:\n            largest_even = num\n\n    if largest_even == -1:\n        return -1\n\n    return largest_even\n"
    ],
    "HumanEval/103": [
        "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = sum(range(n, m+1))\n    avg = total / (m - n + 1)\n    rounded = round(avg)\n    return f\"0b{bin(rounded)[2:]}\"\n",
        "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    sum_of_nums = sum(range(n, m+1))\n    count_of_nums = m - n + 1\n    average = sum_of_nums / count_of_nums\n    rounded_average = round(average)\n    binary_average = bin(rounded_average)\n    return binary_average\n",
        "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    total = (n + m) * (m - n + 1) // 2\n    avg = total / (m - n + 1)\n    rounded = round(avg)\n    binary = bin(rounded)[2:]\n    return f\"0b{binary}\"\n",
        "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = sum(range(n, m+1))\n    avg = total / (m - n + 1)\n    rounded_avg = round(avg)\n    return bin(rounded_avg)\n",
        "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = round((n + m) / 2)\n    return bin(avg)\n"
    ],
    "HumanEval/104": [
        "def unique_digits(x):\n    unique_list = []\n    for num in x:\n        has_even_digit = False\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                has_even_digit = True\n                break\n        if not has_even_digit:\n            unique_list.append(num)\n    unique_list.sort()\n    return unique_list\n",
        "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for num in x:\n        digits = set(str(num))\n        if all(int(d) % 2 != 0 for d in digits):\n            result.append(num)\n    return sorted(result)\n",
        "def unique_digits(x):\n    result = []\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            result.append(num)\n    return sorted(result)\n",
        "def unique_digits(x):\n    unique_nums = []\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            unique_nums.append(num)\n    return sorted(unique_nums)\n",
        "def unique_digits(x):\n    result = []\n    for num in x:\n        has_even_digit = False\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                has_even_digit = True\n                break\n        if not has_even_digit:\n            result.append(num)\n    return sorted(result)\n"
    ],
    "HumanEval/105": [
        "def by_length(arr):\n    if not arr:\n        return []\n\n    valid_nums = [num for num in arr if 1 <= num <= 9]\n    valid_nums.sort()\n    valid_nums.reverse()\n\n    num_to_name = {\n        1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\",\n        6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"\n    }\n\n    result = [num_to_name[num] for num in valid_nums]\n    return result\n",
        "def by_length(arr):\n    result = []\n    temp = []\n    \n    for num in arr:\n        if 1 <= num <= 9:\n            temp.append(num)\n    \n    temp.sort()\n    \n    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    for num in temp:\n        result.append(names[num - 1])\n    \n    return result\n",
        "def by_length(arr):\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    valid_digits = [d for d in arr if 1 <= d <= 9]\n    valid_digits.sort()\n    valid_digits.reverse()\n    transformed_digits = [digit_names[d-1] for d in valid_digits]\n    return transformed_digits\n",
        "def by_length(arr):\n    valid_nums = [num for num in arr if 1 <= num <= 9]\n    valid_nums.sort()\n    valid_nums = valid_nums[::-1]\n    name_map = {\n        1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\",\n        6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"\n    }\n    result = [name_map[num] for num in valid_nums]\n    return result\n",
        "def by_length(arr):\n    result = []\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    for num in reversed_arr:\n        result.append([\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][num - 1])\n    return result\n"
    ],
    "HumanEval/106": [
        "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n\ndef factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n",
        "def f(n):\n    result = []\n    for i in range(n):\n        if i % 2 == 0:\n            result.append(factorial(i+1))\n        else:\n            result.append(sum(range(1, i+2)))\n    return result\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n",
        "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            factorial = 1\n            for j in range(1, i+1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            total = 0\n            for j in range(1, i+1):\n                total += j\n            result.append(total)\n    return result\n",
        "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            factorial = 1\n            for j in range(1, i+1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            sum_of_numbers = 0\n            for j in range(1, i+1):\n                sum_of_numbers += j\n            result.append(sum_of_numbers)\n    return result\n",
        "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_of_numbers(i))\n    return result\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef sum_of_numbers(n):\n    return n * (n + 1) // 2\n"
    ],
    "HumanEval/107": [
        "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n\n    for num in range(1, n+1):\n        if str(num) == str(num)[::-1]:\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)\n",
        "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)\n",
        "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    seen = set()\n\n    for i in range(1, int(n**0.5) + 1):\n        # Check if the current number is a palindrome\n        if str(i) == str(i)[::-1]:\n            if i not in seen:\n                seen.add(i)\n                if i % 2 == 0:\n                    even_count += 1\n                else:\n                    odd_count += 1\n\n        # Check the reverse of the current number\n        reverse_i = int(str(i)[::-1])\n        if reverse_i not in seen:\n            seen.add(reverse_i)\n            if reverse_i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)\n",
        "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n\n    for num in range(1, n+1):\n        if str(num) == str(num)[::-1]:\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)\n",
        "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    \n    for i in range(1, int(n**0.5) + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    return (even_count, odd_count)\n"
    ],
    "HumanEval/108": [
        "def count_nums(arr):\n    return sum(sum(int(digit) for digit in str(abs(num))) > 0 for num in arr)\n",
        "def count_nums(arr):\n    return sum(1 for num in arr if sum(int(digit) for digit in str(abs(num))) > 0)\n",
        "def count_nums(arr):\n    count = 0\n    for num in arr:\n        digit_sum = 0\n        num = abs(num)\n        while num > 0:\n            digit_sum += num % 10\n            num //= 10\n        if digit_sum > 0:\n            count += 1\n    return count\n",
        "def count_nums(arr):\n    count = 0\n    for num in arr:\n        digit_sum = 0\n        abs_num = abs(num)\n        while abs_num > 0:\n            digit_sum += abs_num % 10\n            abs_num //= 10\n        if digit_sum > 0:\n            count += 1\n    return count\n",
        "def count_nums(arr):\n    count = 0\n    for num in arr:\n        digit_sum = 0\n        for digit in str(abs(num)):\n            digit_sum += int(digit)\n        if digit_sum > 0:\n            count += 1\n    return count\n"
    ],
    "HumanEval/109": [
        "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            if i == len(arr) - 1 and arr[0] >= arr[i]:\n                return True\n            return False\n    \n    return True\n",
        "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    sorted_arr = sorted(arr)\n    \n    while True:\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    \n    return False\n",
        "def move_one_ball(arr):\n    \"\"\"\n    Given an array of integers, determine if it is possible to get the array\n    sorted in non-decreasing order by performing right shift operations.\n    \"\"\"\n    if not arr:\n        return True\n    \n    sorted_arr = sorted(arr)\n    \n    for _ in range(len(arr)):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    \n    return False\n",
        "def move_one_ball(arr):\n    if not arr:\n        return True\n\n    # Find the index of the smallest element\n    min_idx = 0\n    for i in range(1, len(arr)):\n        if arr[i] < arr[min_idx]:\n            min_idx = i\n\n    # Check if the array can be rotated\n    for i in range(len(arr)):\n        if arr[(i + min_idx) % len(arr)] != arr[i]:\n            return False\n\n    return True\n",
        "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i+1]:\n            arr = arr[1:] + [arr[0]]\n            if all(arr[j] <= arr[j+1] for j in range(len(arr) - 1)):\n                return True\n    \n    return False\n"
    ],
    "HumanEval/110": [
        "def exchange(lst1, lst2):\n    odd_sum = 0\n    even_sum = 0\n    \n    for num in lst1:\n        if num % 2 != 0:\n            odd_sum += num\n    \n    for num in lst2:\n        if num % 2 == 0:\n            even_sum += num\n    \n    if odd_sum <= even_sum:\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "def exchange(lst1, lst2):\n    odd_count_lst1 = 0\n    odd_count_lst2 = 0\n\n    for num in lst1:\n        if num % 2 != 0:\n            odd_count_lst1 += 1\n\n    for num in lst2:\n        if num % 2 != 0:\n            odd_count_lst2 += 1\n\n    if (odd_count_lst1 + odd_count_lst2) % 2 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "def exchange(lst1, lst2):\n    even_lst1 = [num for num in lst1 if num % 2 == 0]\n    for num in lst2:\n        if num % 2 == 0:\n            even_lst1.append(num)\n    return \"YES\" if len(even_lst1) == len(lst1) else \"NO\"\n",
        "def exchange(lst1, lst2):\n    can_exchange = True\n    \n    for num in lst1:\n        if num % 2 != 0:\n            can_exchange = False\n            break\n    \n    if can_exchange:\n        return \"YES\"\n    \n    for i in range(len(lst1)):\n        if lst1[i] % 2 != 0:\n            for j in range(len(lst2)):\n                if lst2[j] % 2 != 0:\n                    lst1[i], lst2[j] = lst2[j], lst1[i]\n                    can_exchange = True\n                    break\n            if can_exchange:\n                break\n    \n    if can_exchange:\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "def exchange(lst1, lst2):\n    odd_sum_lst1 = 0\n    odd_sum_lst2 = 0\n    \n    # Count the number of odd elements and their sum in lst1\n    for num in lst1:\n        if num % 2 != 0:\n            odd_sum_lst1 += num\n    \n    # Count the number of odd elements and their sum in lst2\n    for num in lst2:\n        if num % 2 != 0:\n            odd_sum_lst2 += num\n    \n    # Check if the sums of odd elements are equal\n    if odd_sum_lst1 == odd_sum_lst2:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    ],
    "HumanEval/111": [
        "def histogram(test):\n    if not test:\n        return {}\n    \n    letters = test.split()\n    counts = {}\n    \n    for letter in letters:\n        if letter in counts:\n            counts[letter] += 1\n        else:\n            counts[letter] = 1\n    \n    max_count = max(counts.values())\n    \n    result = {k: v for k, v in counts.items() if v == max_count}\n    \n    return result\n",
        "def histogram(test):\n    words = test.split()\n    letter_count = {}\n    for word in words:\n        for letter in word:\n            if letter in letter_count:\n                letter_count[letter] += 1\n            else:\n                letter_count[letter] = 1\n    max_count = max(letter_count.values())\n    most_repeated = [letter for letter, count in letter_count.items() if count == max_count]\n    return {letter: max_count for letter in most_repeated}\n",
        "from collections import defaultdict\n\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    letter_counts = defaultdict(int)\n    \n    for char in test:\n        letter_counts[char] += 1\n    \n    max_count = max(letter_counts.values())\n    \n    return {k: v for k, v in letter_counts.items() if v == max_count}\n",
        "def histogram(test):\n    letter_counts = {}\n    words = test.split()\n    for word in words:\n        for letter in word:\n            if letter in letter_counts:\n                letter_counts[letter] += 1\n            else:\n                letter_counts[letter] = 1\n    max_count = max(letter_counts.values())\n    result = {k: v for k, v in letter_counts.items() if v == max_count}\n    return result\n",
        "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    words = test.split()\n    letter_counts = {}\n    \n    for word in words:\n        for letter in word:\n            if letter in letter_counts:\n                letter_counts[letter] += 1\n            else:\n                letter_counts[letter] = 1\n    \n    return letter_counts\n"
    ],
    "HumanEval/112": [
        "def reverse_delete(s, c):\n    result = \"\"\n    for char in s:\n        if char not in c:\n            result += char\n    \n    is_palindrome = result == result[::-1]\n    return (result, is_palindrome)\n",
        "def reverse_delete(s, c):\n    c_set = set(c)\n    new_s = ''.join(char for char in s if char not in c_set)\n    is_palindrome = new_s == new_s[::-1]\n    return (new_s, is_palindrome)\n",
        "def reverse_delete(s, c):\n    result = \"\"\n    for char in s:\n        if char not in c:\n            result += char\n    is_palindrome = result == result[::-1]\n    return (result, is_palindrome)\n",
        "def reverse_delete(s, c):\n    result = \"\"\n    for char in s:\n        if char not in c:\n            result += char\n    return (result, result == result[::-1])\n",
        "def reverse_delete(s, c):\n    c_set = set(c)\n    result = \"\"\n    for char in s:\n        if char not in c_set:\n            result += char\n    return (result, result == result[::-1])\n"
    ],
    "HumanEval/113": [
        "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    output = []\n    for i, string in enumerate(lst):\n        odd_count = sum(1 for digit in string if int(digit) % 2 != 0)\n        output.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return output\n",
        "def odd_count(lst):\n    output = []\n    for string in lst:\n        odd_count = sum(1 for digit in string if int(digit) % 2 != 0)\n        output.append(f\"the number of odd elements {odd_count} in the string {odd_count} of the input.\")\n    return output\n",
        "def odd_count(lst):\n    output = []\n    for string in lst:\n        odd_count = len([digit for digit in string if int(digit) % 2 == 1])\n        output.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return output\n",
        "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4 in the string 0 of the input.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1 in the string 0 of the input.\",\n     \"the number of odd elements 8 in the string 1 of the input.\"]\n    \"\"\"\n    result = []\n    for i, string in enumerate(lst):\n        odd_count = sum(1 for digit in string if int(digit) % 2 != 0)\n        output_string = f\"the number of odd elements {odd_count} in the string {i} of the input.\"\n        result.append(output_string)\n    return result\n",
        "def odd_count(lst):\n    output = []\n    for string in lst:\n        count = sum(1 for digit in string if int(digit) % 2 != 0)\n        output.append(f\"The number of odd elements in the string is: {count}.\")\n    return output\n"
    ],
    "HumanEval/114": [
        "def minSubArraySum(nums):\n    min_sum = float('inf')\n    curr_sum = 0\n\n    for num in nums:\n        curr_sum += num\n        min_sum = min(min_sum, curr_sum)\n        if curr_sum < 0:\n            curr_sum = 0\n\n    return min_sum\n",
        "def minSubArraySum(nums):\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(nums[i], min_sum + nums[i])\n    return min_sum\n",
        "def minSubArraySum(nums):\n    if not nums:\n        return 0\n\n    min_so_far = nums[0]\n    min_ending_here = nums[0]\n\n    for i in range(1, len(nums)):\n        min_ending_here = min(nums[i], min_ending_here + nums[i])\n        min_so_far = min(min_so_far, min_ending_here)\n\n    return min_so_far\n",
        "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n\n    for num in nums:\n        current_sum += num\n        min_sum = min(min_sum, current_sum)\n        if current_sum > 0:\n            current_sum = 0\n\n    return min_sum\n",
        "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum += num\n        min_sum = min(min_sum, current_sum)\n        if current_sum < 0:\n            current_sum = 0\n    \n    return min_sum\n"
    ],
    "HumanEval/115": [
        "def max_fill(grid, capacity):\n    total_fills = 0\n    for col in range(len(grid[0])):\n        max_water_in_col = max(row[col] for row in grid)\n        fills_in_col = math.ceil(max_water_in_col / capacity)\n        total_fills += fills_in_col\n    return int(total_fills)\n",
        "import math\n\ndef max_fill(grid, capacity):\n    total_lowerings = 0\n    for row in grid:\n        water_units_in_row = sum(row)\n        lowerings_for_row = math.ceil(water_units_in_row / capacity)\n        total_lowerings += lowerings_for_row\n    return total_lowerings\n",
        "import math\n\ndef max_fill(grid, capacity):\n    total_fills = 0\n    for row in grid:\n        total_fills += math.ceil(sum(row) / capacity)\n    return int(total_fills)\n",
        "import math\n\ndef max_fill(grid, capacity):\n    total_water = 0\n    total_buckets = 0\n\n    for row in grid:\n        row_water = sum(row)\n        total_water += row_water\n        total_buckets += math.ceil(row_water / capacity)\n\n    return total_buckets\n",
        ""
    ],
    "HumanEval/116": [
        "def sort_array(arr):\n    def count_ones(num):\n        return bin(abs(num)).count('1')\n    \n    return sorted(arr, key=lambda x: (count_ones(x), x))\n",
        "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    def count_ones(num):\n        \"\"\"Helper function to count the number of ones in the binary representation of a number.\"\"\"\n        return bin(num).count(\"1\")\n\n    return sorted(arr, key=lambda x: (count_ones(abs(x)), x))\n",
        "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    sorted_arr = sorted((bin(abs(x)).count('1'), abs(x), i) for i, x in enumerate(arr))\n    return [arr[i] for _, _, i in sorted_arr]\n",
        "def count_ones(num):\n    \"\"\"\n    Helper function to count the number of 1's in the binary representation of a number.\n    \"\"\"\n    return bin(abs(num)).count('1')\n\ndef sort_array(arr):\n    \"\"\"\n    Sorts the input array 'arr' based on the number of 1's in the binary representation\n    of each number, and then by the decimal value of the number.\n    \"\"\"\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n",
        "def sort_array(arr):\n    result = []\n    binary_counts = []\n    for num in arr:\n        count_of_ones = bin(num).count('1')\n        binary_counts.append((count_of_ones, num))\n    binary_counts.sort()\n    for count, num in binary_counts:\n        result.append(num)\n    return result\n"
    ],
    "HumanEval/117": [
        "def count_consonants(word):\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    count = 0\n    for char in word.lower():\n        if char in consonants:\n            count += 1\n    return count\n\ndef select_words(s, n):\n    if not s:\n        return []\n    \n    result = []\n    for word in s.split():\n        if count_consonants(word) == n:\n            result.append(word)\n    \n    return result\n",
        "def select_words(s, n):\n    selected_words = []\n    words = s.split()\n    \n    for word in words:\n        consonants = sum(1 for char in word if char.isalpha() and char.lower() not in 'aeiou')\n        if consonants == n:\n            selected_words.append(word)\n    \n    return selected_words\n",
        "def select_words(s, n):\n    if not s:\n        return []\n\n    vowels = set('aeiou')\n    matching_words = []\n\n    for word in s.split():\n        consonants = sum(1 for char in word if char.isalpha() and char.lower() not in vowels)\n        if consonants == n:\n            matching_words.append(word)\n\n    return matching_words\n",
        "def select_words(s, n):\n    if not s:\n        return []\n\n    words = s.split()\n    result = []\n    for word in words:\n        consonants = ''.join(c for c in word.lower() if c not in 'aeiou')\n        if len(consonants) == n:\n            result.append(word)\n    return result\n",
        "def select_words(s, n):\n    words = []\n    word_list = s.split()\n    for word in word_list:\n        consonants = sum(1 for char in word if char.isalpha() and char.lower() not in 'aeiou')\n        if consonants == n:\n            words.append(word)\n    return words\n"
    ],
    "HumanEval/118": [
        "def get_closest_vowel(word):\n    closest_vowel = \"\"\n    in_between_consonants = False\n    \n    for char in word:\n        if char.isalpha() and char.lower() not in \"aeiou\":\n            in_between_consonants = True\n        elif char.lower() in \"aeiou\":\n            if in_between_consonants:\n                closest_vowel = char\n                in_between_consonants = False\n            else:\n                in_between_consonants = False\n    \n    return closest_vowel\n",
        "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    closest_vowel = \"\"\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels:\n            if (i == 0 or not word[i-1] in vowels) and (i == len(word)-1 or not word[i+1] in vowels):\n                continue\n            if i > 0 and i < len(word)-1 and word[i-1] not in vowels and word[i+1] not in vowels:\n                closest_vowel = word[i]\n                break\n    return closest_vowel\n",
        "def get_closest_vowel(word):\n    vowels = 'aeiou'\n    closest_vowel = ''\n    prev_char = ''\n    \n    for char in word:\n        if char in vowels and prev_char not in vowels:\n            closest_vowel = char\n        prev_char = char\n    \n    return closest_vowel\n",
        "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    last_consonant = -1\n\n    for i, char in enumerate(word):\n        if char in vowels:\n            if last_consonant >= 0 and i < len(word) - 1 and word[i+1] not in vowels:\n                return char\n        elif char not in vowels:\n            last_consonant = i\n\n    return \"\"\n",
        "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    last_consonant = None\n    \n    for i in range(len(word)-1, -1, -1):\n        if word[i] not in vowels:\n            last_consonant = i\n        elif last_consonant is not None and i < last_consonant:\n            return word[i]\n    \n    return \"\"\n"
    ],
    "HumanEval/119": [
        "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    stack = []\n    for s in lst:\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if not stack:\n                    return 'No'\n                stack.pop()\n        if stack:\n            stack.clear()\n        else:\n            return 'Yes'\n    return 'No'\n",
        "def is_balanced(s):\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\ndef match_parens(lst):\n    s = ''.join(lst)\n    return 'Yes' if is_balanced(s) else 'No'\n",
        "def is_balanced(s):\n    open_count = 0\n    for char in s:\n        if char == '(':\n            open_count += 1\n        else:\n            if open_count == 0:\n                return False\n            open_count -= 1\n    return open_count == 0\n\ndef match_parens(lst):\n    s1, s2 = lst\n    if is_balanced(s1 + s2) or is_balanced(s2 + s1):\n        return 'Yes'\n    else:\n        return 'No'\n",
        "def match_parens(lst):\n    if len(lst) != 2:\n        return 'No'\n\n    can_be_matched = False\n\n    for string in lst:\n        open_count = 0\n        close_count = 0\n        for char in string:\n            if char == '(':\n                open_count += 1\n            elif char == ')':\n                close_count += 1\n        if open_count == close_count:\n            can_be_matched = True\n            break\n\n    if can_be_matched:\n        return 'Yes'\n    else:\n        return 'No'\n",
        "def match_parens(lst):\n    for s in lst:\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if not stack:\n                    return 'No'\n                stack.pop()\n        if not stack:\n            continue\n        else:\n            return 'No'\n    return 'Yes'\n"
    ],
    "HumanEval/120": [
        "def maximum(arr, k):\n    arr.sort(reverse=True)\n    return arr[:k]\n",
        "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]\n",
        "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]\n",
        "def maximum(arr, k):\n    arr.sort(reverse=True)\n    return arr[:k]\n",
        "import heapq\n\ndef maximum(arr, k):\n    min_heap = []\n    for num in arr:\n        if len(min_heap) < k or num > min_heap[0]:\n            heapq.heappush(min_heap, num)\n            if len(min_heap) > k:\n                heapq.heappop(min_heap)\n    return sorted(min_heap, reverse=True)\n"
    ],
    "HumanEval/121": [
        "def solution(lst):\n    total_sum = 0\n    for i, num in enumerate(lst):\n        if i % 2 == 0 and num % 2 != 0:\n            total_sum += num\n    return total_sum\n",
        "def solution(lst):\n    total = 0\n    for i, num in enumerate(lst):\n        if i % 2 == 0 and num % 2 != 0:\n            total += num\n    return total\n",
        "def solution(lst):\n    total_sum = 0\n    for i, num in enumerate(lst):\n        if i % 2 == 0 and num % 2 != 0:\n            total_sum += num\n    return total_sum\n",
        "def solution(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            total += lst[i]\n    return total\n",
        "def solution(lst):\n    total = 0\n    for i, num in enumerate(lst):\n        if i % 2 == 0 and num % 2 != 0:\n            total += num\n    return total\n"
    ],
    "HumanEval/122": [
        "def add_elements(arr, k):\n    total_sum = 0\n    for i in range(k):\n        if abs(arr[i]) < 100:\n            total_sum += arr[i]\n    return total_sum\n",
        "def add_elements(arr, k):\n    total = 0\n    for i in range(k):\n        if abs(arr[i]) <= 99:\n            total += arr[i]\n    return total\n",
        "def add_elements(arr, k):\n    total = 0\n    \n    for i in range(min(k, len(arr))):\n        element = arr[i]\n        if 0 <= element < 100:\n            total += element\n    \n    return total\n",
        "def add_elements(arr, k):\n    total = 0\n    for i in range(k):\n        if abs(arr[i]) < 100:\n            total += arr[i]\n    return total\n",
        "def add_elements(arr, k):\n    sum_of_two_digits = 0\n    for i in range(min(k, len(arr))):\n        if 0 <= arr[i] < 100:\n            sum_of_two_digits += arr[i]\n    return sum_of_two_digits\n"
    ],
    "HumanEval/123": [
        "def get_odd_collatz(n):\n    odd_collatz = []\n    current = n\n    while current != 1:\n        if current % 2 != 0:\n            odd_collatz.append(current)\n        if current % 2 == 0:\n            current //= 2\n        else:\n            current = 3 * current + 1\n    if n == 1:\n        odd_collatz = [1]\n    return sorted(odd_collatz)\n",
        "def get_odd_collatz(n):\n    odd_nums = []\n\n    while n != 1:\n        if n % 2 != 0:\n            odd_nums.append(n)\n        n = 3 * n + 1 if n % 2 != 0 else n // 2\n\n    odd_nums.append(1)\n    odd_nums.sort()\n    return odd_nums\n",
        "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_collatz = []\n    \n    while n != 1:\n        if n % 2 == 0:  # If the current number is even\n            n = n // 2\n        else:  # If the current number is odd\n            n = 3 * n + 1\n            odd_collatz.append(n)\n    \n    odd_collatz.sort()\n    return odd_collatz\n",
        "def get_odd_collatz(n):\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    \n    odd_numbers = []\n    \n    while n != 1:\n        if n % 2 == 1:\n            odd_numbers.append(n)\n        n = 3 * n + 1 if n % 2 == 1 else n // 2\n    \n    odd_numbers.append(1)\n    \n    return sorted(odd_numbers)\n",
        "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    if n == 1:\n        return [1]\n    \n    odd_numbers = []\n    current_num = n\n    \n    while current_num != 1:\n        if current_num % 2 == 1:\n            odd_numbers.append(current_num)\n        \n        if current_num % 2 == 0:\n            current_num //= 2\n        else:\n            current_num = 3 * current_num + 1\n    \n    return sorted(odd_numbers)\n"
    ],
    "HumanEval/124": [
        "def valid_date(date):\n    if not date:\n        return False\n\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n\n    month = int(parts[0])\n    day = int(parts[1])\n    year = int(parts[2])\n\n    if month < 1 or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\n    return True\n",
        "def valid_date(date):\n    if not date:\n        return False\n\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n\n    month = int(parts[0])\n    day = int(parts[1])\n    year = int(parts[2])\n\n    if month < 1 or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    else:\n        if day < 1 or day > 30:\n            return False\n\n    if year <= 0:\n        return False\n\n    return True\n",
        "def valid_date(date):\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    month = int(parts[0])\n    day = int(parts[1])\n    year = int(parts[2])\n    if month < 1 or month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    return True\n",
        "import calendar\n\ndef valid_date(date):\n    if not isinstance(date, str) or len(date.split('-')) != 3:\n        return False\n\n    month_str, day_str, year_str = date.split('-')\n\n    try:\n        month = int(month_str)\n        day = int(day_str)\n        year = int(year_str)\n    except ValueError:\n        return False\n\n    max_days = calendar.monthrange(year, month)[1]\n\n    if day < 1 or day > max_days:\n        return False\n\n    return True\n",
        "def valid_date(date):\n    \"\"\"\n    Check if a given date string is valid.\n    \n    Args:\n        date (str): The date string in the format \"mm-dd-yyyy\".\n    \n    Returns:\n        bool: True if the date is valid, False otherwise.\n    \"\"\"\n    # Check if the input is empty\n    if not date:\n        return False\n    \n    # Split the date string into components\n    parts = date.split('-')\n    \n    # Check if the date is in the correct format\n    if len(parts) != 3:\n        return False\n    \n    # Convert the components to integers\n    month = int(parts[0])\n    day = int(parts[1])\n    year = int(parts[2])\n    \n    # Check the month value\n    if month < 1 or month > 12:\n        return False\n    \n    # Check the day value based on the month\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    \n    return True\n"
    ],
    "HumanEval/125": [
        "def split_words(txt):\n    if not txt:\n        return []\n    words = [word for word in txt.split() + txt.split(',') if word]\n    if not words:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)\n    return words\n",
        "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace.\n    If the input string contains no whitespace and no commas, return the count of lowercase letters with odd order in the alphabet.\n    Examples:\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3\n    '''\n    words = txt.split()\n    if len(words) == 1 and ',' not in words[0]:\n        return sum(1 for c in words[0].lower() if ord(c) % 2 == 1)\n    return words\n",
        "def split_words(txt):\n    if \",\" in txt:\n        return txt.split(\",\")\n    elif \" \" in txt:\n        return txt.split()\n    else:\n        count = 0\n        for char in txt:\n            if char.islower():\n                pos = ord(char) - ord('a')\n                if pos % 2 == 0:\n                    count += 1\n        return count\n",
        "def split_words(txt):\n    words = txt.split(',')\n    if len(words) > 1:\n        return words\n\n    words = txt.split()\n    if len(words) > 1:\n        return words\n\n    odd_count = 0\n    for char in txt:\n        if char.islower():\n            ord_value = ord(char) - ord('a')\n            if ord_value % 2 == 1:\n                odd_count += 1\n    return odd_count\n",
        "def split_words(txt):\n    \"\"\"\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ','. If no commas exist, you should return the number of lowercase letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25.\n    \n    Examples:\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    \"\"\"\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for char in txt:\n            if char.islower() and ord(char) % 2 == 1:\n                count += 1\n        return count\n"
    ],
    "HumanEval/126": [
        "def is_sorted(lst):\n    if len(lst) <= 1:\n        return True\n    if len(set(lst)) != len(lst):\n        return False\n    return lst == sorted(lst)\n",
        "def is_sorted(lst):\n    \"\"\"\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n    \"\"\"\n    # Create a copy of the input list\n    sorted_lst = sorted(lst)\n    \n    # Compare the original list with the sorted copy\n    return lst == sorted_lst\n",
        "def is_sorted(lst):\n    if len(lst) <= 1:\n        return True\n    \n    if len(set(lst)) < len(lst):\n        return False\n    \n    sorted_lst = sorted(lst)\n    return lst == sorted_lst\n",
        "def is_sorted(lst):\n    prev = None\n    unique_elements = set()\n\n    for num in lst:\n        if prev is not None and num < prev:\n            return False\n        unique_elements.add(num)\n        prev = num\n\n    return len(unique_elements) == len(lst)\n",
        "def is_sorted(lst):\n    if len(lst) <= 1:\n        return True\n    \n    prev = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] <= prev:\n            return False\n        if lst.count(lst[i]) > 1:\n            return False\n        prev = lst[i]\n    \n    return True\n"
    ],
    "HumanEval/127": [
        "def intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n\n    # Determine the intersection\n    start = max(start1, start2)\n    end = min(end1, end2)\n\n    if start > end:\n        return \"NO\"  # No intersection\n\n    # Calculate the length of the intersection\n    length = end - start + 1\n\n    # Determine the output based on the length of the intersection\n    if length == 1:\n        return \"NO\"\n    elif is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"\n\ndef is_prime(n):\n    \"\"\"\n    Helper function to check if a number is prime.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
        "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    \"\"\"Determine whether the length of intersection of two intervals is a prime number\"\"\"\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if end1 < start2 or end2 < start1:\n        return \"NO\"\n    \n    start = max(start1, start2)\n    end = min(end1, end2)\n    length = end - start + 1\n    \n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n\n    max_start = max(start1, start2)\n    min_end = min(end1, end2)\n\n    if max_start > min_end:\n        return \"NO\"\n\n    length = min_end - max_start + 1\n\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n\n    if end1 < start2 or end2 < start1:\n        return \"NO\"\n\n    start = max(start1, start2)\n    end = min(end1, end2)\n\n    length = end - start + 1\n\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    \"\"\"Determine if the length of the intersection of two intervals is a prime number.\"\"\"\n    # Determine the intersection of the two intervals\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    # If the intervals don't intersect, return \"NO\"\n    if start > end:\n        return \"NO\"\n    \n    # Calculate the length of the intersection\n    length = end - start + 1\n    \n    # Check if the length is a prime number\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    ],
    "HumanEval/128": [
        "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    product_of_signs = 1\n    sum_of_magnitudes = 0\n    \n    for num in arr:\n        if num > 0:\n            product_of_signs *= 1\n        elif num < 0:\n            product_of_signs *= -1\n        else:\n            product_of_signs *= 0\n        \n        sum_of_magnitudes += abs(num)\n    \n    return product_of_signs * sum_of_magnitudes\n",
        "def prod_signs(arr):\n    if not arr:\n        return None\n\n    product_of_signs = 1\n    sum_of_magnitudes = 0\n\n    for num in arr:\n        if num > 0:\n            product_of_signs *= 1\n        elif num < 0:\n            product_of_signs *= -1\n        else:\n            product_of_signs *= 0\n        sum_of_magnitudes += abs(num)\n\n    return product_of_signs * sum_of_magnitudes\n",
        "def prod_signs(arr):\n    if not arr:\n        return None\n\n    product_of_signs = 1\n    sum_of_magnitudes = 0\n\n    for num in arr:\n        if num > 0:\n            product_of_signs *= 1\n        elif num < 0:\n            product_of_signs *= -1\n        else:\n            product_of_signs *= 0\n\n        sum_of_magnitudes += abs(num)\n\n    return product_of_signs * sum_of_magnitudes\n",
        "def prod_signs(arr):\n    if not arr:\n        return None\n\n    product_of_signs = 1\n    sum_of_magnitudes = 0\n\n    for num in arr:\n        if num > 0:\n            product_of_signs *= 1\n        elif num < 0:\n            product_of_signs *= -1\n        else:\n            product_of_signs *= 0\n\n        sum_of_magnitudes += abs(num)\n\n    return product_of_signs * sum_of_magnitudes\n",
        "def prod_signs(arr):\n    if not arr:\n        return None\n\n    product_of_signs = 1\n    sum_of_magnitudes = 0\n\n    for num in arr:\n        if num == 0:\n            product_of_signs = 0\n            break\n        elif num > 0:\n            product_of_signs *= 1\n        else:\n            product_of_signs *= -1\n        sum_of_magnitudes += abs(num)\n\n    return product_of_signs * sum_of_magnitudes\n"
    ],
    "HumanEval/129": [
        "def minPath(grid, k):\n    n = len(grid)\n    min_path = None\n    \n    def dfs(i, j, path, length, visited):\n        nonlocal min_path\n        \n        if length == k:\n            if min_path is None or path < min_path:\n                min_path = path[:]\n            return\n        \n        if i < 0 or i >= n or j < 0 or j >= n or (i, j) in visited:\n            return\n        \n        visited.add((i, j))\n        path.append(grid[i][j])\n        \n        dfs(i-1, j, path, length+1, visited)\n        dfs(i+1, j, path, length+1, visited)\n        dfs(i, j-1, path, length+1, visited)\n        dfs(i, j+1, path, length+1, visited)\n        \n        visited.remove((i, j))\n        path.pop()\n    \n    for i in range(n):\n        for j in range(n):\n            dfs(i, j, [], 0, set())\n            if min_path is not None:\n                break\n    \n    return min_path\n",
        "from heapq import heappush, heappop\n\ndef minPath(grid, k):\n    N = len(grid)\n    start = min([(grid[i][j], i, j) for i in range(N) for j in range(N)])\n    pq = [(start[0], 0, start[1], start[2])]\n    visited = set()\n\n    while True:\n        _, steps, i, j = heappop(pq)\n        if steps == k:\n            return [grid[i][j]]\n\n        if (i, j) in visited:\n            continue\n        visited.add((i, j))\n\n        for di, dj in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            x, y = i + di, j + dj\n            if 0 <= x < N and 0 <= y < N:\n                heappush(pq, (grid[x][y], steps + 1, x, y))\n",
        "from heapq import heappush, heappop\n\ndef minPath(grid, k):\n    n = len(grid)\n    visited = [[False] * n for _ in range(n)]\n\n    def dijkstra(start):\n        pq = [(0, start, [start])]\n        while pq:\n            path_len, curr, path = heappop(pq)\n            if len(path) == k:\n                return path\n            if not visited[curr[0]][curr[1]]:\n                visited[curr[0]][curr[1]] = True\n                for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                    x, y = curr\n                    nx, ny = x + dx, y + dy\n                    if 0 <= nx < n and 0 <= ny < n:\n                        heappush(pq, (path_len + 1, (nx, ny), path + [grid[nx][ny]]))\n        return []\n\n    for i in range(n):\n        for j in range(n):\n            path = dijkstra((i, j))\n            if path:\n                return path\n\n    return []\n",
        "import heapq\n\ndef minPath(grid, k):\n    n = len(grid)\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    min_heap = []\n\n    def dfs(x, y, path, k):\n        if len(path) == k:\n            heapq.heappush(min_heap, path)\n            if len(min_heap) > 1 and path > min_heap[0]:\n                return\n        for dx, dy in directions:\n            new_x, new_y = x + dx, y + dy\n            if 0 <= new_x < n and 0 <= new_y < n and grid[new_x][new_y] not in path:\n                dfs(new_x, new_y, path + [grid[new_x][new_y]], k)\n\n    for i in range(n):\n        for j in range(n):\n            dfs(i, j, [grid[i][j]], k)\n\n    return min_heap[0]\n",
        "def minPath(grid, k):\n    result = []\n    n = len(grid)\n\n    def dfs(i, j, path):\n        if (i, j) in set(path):\n            return\n        path.append(grid[i][j])\n        if len(path) == k:\n            if not result or path < result:\n                result[:] = path[:]\n            return\n        for di, dj in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            ni, nj = i + di, j + dj\n            if 0 <= ni < n and 0 <= nj < n:\n                dfs(ni, nj, path)\n        path.pop()\n\n    for i in range(n):\n        for j in range(n):\n            dfs(i, j, [])\n    return result\n"
    ],
    "HumanEval/130": [
        "def tri(n):\n    result = [3]  # First Tribonacci number is 3\n    for i in range(2, n + 1):\n        if i == 2:\n            result.append(4)  # tri(2) = 4\n        else:\n            current = result[-1] + result[-2] + result[-3]\n            result.append(current)\n    return result\n",
        "def tri(n):\n    \"\"\"Returns the first n+1 numbers of the Tribonacci sequence.\"\"\"\n    tribonacci = [3]  # First Tribonacci number\n    \n    for i in range(2, n+1):\n        if i % 2 == 0:\n            # Even number\n            tribonacci.append(1 + i // 2)\n        else:\n            # Odd number\n            tribonacci.append(tribonacci[i-2] + tribonacci[i-3] + tribonacci[i-1])\n    \n    return tribonacci\n",
        "def tri(n):\n    tribonacci = [3]\n    \n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i // 2)\n        else:\n            tribonacci.append(tribonacci[-1] + tribonacci[-2] + tribonacci[i - 2])\n    \n    return tribonacci\n",
        "def tri(n):\n    \"\"\"\n    Returns a list of the first n+1 numbers in the Tribonacci sequence.\n    \"\"\"\n    tribonacci = [3]  # base case: tri(1) = 3\n    \n    for i in range(2, n+1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i//2)\n        else:\n            tribonacci.append(tribonacci[i-2] + tribonacci[i-3] + tribonacci[i-4])\n    \n    return tribonacci\n",
        "def tri(n):\n    result = [3, 0, 2]\n    for i in range(3, n+1):\n        tri_i = result[i-3] + result[i-2] + result[i-1]\n        result.append(tri_i)\n    return result[:n+1]\n"
    ],
    "HumanEval/131": [
        "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 == 1:\n            product *= int(digit)\n    if product == 1:\n        return 0\n    else:\n        return product\n",
        "def digits(n):\n    product = 1\n    for digit in str(n):\n        digit_int = int(digit)\n        if digit_int % 2 != 0:\n            product *= digit_int\n    if product == 1:\n        return 0\n    else:\n        return product\n",
        "def digits(n):\n    product = 1\n    for digit in str(n):\n        digit_int = int(digit)\n        if digit_int % 2 == 1:\n            product *= digit_int\n        if product == 0:\n            return 0\n    return product\n",
        "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return 0 if product == 1 else product\n",
        "import math\n\ndef digits(n):\n    \"\"\"Given an integer n, return the product of the odd digits.\n    Return 0 if all digits are even or n is negative.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n < 0:\n        return 0\n\n    product = 1\n    for digit in str(abs(n)):\n        if int(digit) % 2 != 0:\n            product = math.prod([product, int(digit)])\n\n    return product if product != 1 else 0\n"
    ],
    "HumanEval/132": [
        "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n",
        "def is_nested(string):\n    if not all(char in '[]' for char in string):\n        return False\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            if stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return bool(stack)\n",
        "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n",
        "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n",
        "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            if stack[-1] == '[':\n                stack.pop()\n            else:\n                return True\n    return len(stack) == 0\n"
    ],
    "HumanEval/133": [
        "import math\n\ndef sum_squares(lst):\n    total = 0\n    for num in lst:\n        rounded = math.ceil(num)\n        squared = rounded ** 2\n        total += squared\n    return total\n",
        "import math\n\ndef sum_squares(lst):\n    total = 0\n    for num in lst:\n        rounded = math.ceil(num)\n        squared = rounded ** 2\n        total += squared\n    return total\n",
        "import math\n\ndef sum_squares(lst):\n    result = 0\n    for num in lst:\n        rounded_num = math.ceil(num)\n        squared_num = rounded_num ** 2\n        result += squared_num\n    return result\n",
        "import math\n\ndef sum_squares(lst):\n    sum_of_squares = 0\n    for num in lst:\n        rounded_up = math.ceil(num)\n        squared = rounded_up ** 2\n        sum_of_squares += squared\n    return sum_of_squares\n",
        "import math\n\ndef sum_squares(lst):\n    squared_values = []\n    for num in lst:\n        rounded_up = math.ceil(num)\n        squared = rounded_up ** 2\n        squared_values.append(squared)\n    return sum(squared_values)\n"
    ],
    "HumanEval/134": [
        "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    last_char = txt[-1]\n    if not last_char.isalpha():\n        return False\n    if txt.endswith(\" \" + last_char):\n        return False\n    return True\n",
        "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    \n    words = txt.split()\n    if not words:\n        return False\n    \n    last_word = words[-1]\n    if last_word and last_word[-1].isalpha():\n        return True\n    else:\n        return False\n",
        "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    words = txt.split()\n    last_word = words[-1]\n    return last_word and last_word[-1].isalpha()\n",
        "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    \n    words = txt.split()\n    if not words:\n        return False\n    \n    last_word = words[-1]\n    if last_word and last_word[-1].isalpha():\n        return True\n    else:\n        return False\n",
        "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    \n    words = txt.split()\n    if not words:\n        return False\n    \n    last_word = words[-1]\n    if last_word and last_word[-1].isalpha():\n        return True\n    else:\n        return False\n"
    ],
    "HumanEval/135": [
        "def can_arrange(arr):\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            max_index = max(max_index, i)\n    return max_index\n",
        "def can_arrange(arr):\n    max_index = -1\n    \n    for i in range(len(arr) - 1, -1, -1):\n        if i == 0 or arr[i] < arr[i-1]:\n            max_index = i\n            break\n    \n    return max_index\n",
        "def can_arrange(arr):\n    max_idx = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            max_idx = i\n    return max_idx\n",
        "def can_arrange(arr):\n    max_index = -1\n    \n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i-1]:\n            max_index = i - 1\n            break\n    \n    return max_index\n",
        "def can_arrange(arr):\n    result = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            result = i-1\n    return result\n"
    ],
    "HumanEval/136": [
        "def largest_smallest_integers(lst):\n    largest_negative = None\n    smallest_positive = None\n\n    for num in lst:\n        if isinstance(num, int):\n            if num < 0 and (largest_negative is None or num > largest_negative):\n                largest_negative = num\n            elif num > 0 and (smallest_positive is None or num < smallest_positive):\n                smallest_positive = num\n    \n    if largest_negative is not None and smallest_positive is not None:\n        return (largest_negative, smallest_positive)\n    else:\n        raise ValueError(\"The list does not contain any negative or positive integers.\")\n",
        "def largest_smallest_integers(lst):\n    largest_negative = None\n    smallest_positive = None\n\n    for num in lst:\n        if num < 0 and (largest_negative is None or num > largest_negative):\n            largest_negative = num\n        elif num > 0 and (smallest_positive is None or num < smallest_positive):\n            smallest_positive = num\n\n    return (largest_negative, smallest_positive)\n",
        "def largest_smallest_integers(lst):\n    largest_negative = None\n    smallest_positive = None\n\n    for num in lst:\n        if num < 0 and (largest_negative is None or num > largest_negative):\n            largest_negative = num\n        elif num > 0 and (smallest_positive is None or num < smallest_positive):\n            smallest_positive = num\n\n    return (largest_negative, smallest_positive)\n",
        "def largest_smallest_integers(lst):\n    largest_negative = None\n    smallest_positive = None\n\n    for num in lst:\n        if num < 0 and (largest_negative is None or num > largest_negative):\n            largest_negative = num\n        elif num > 0 and (smallest_positive is None or num < smallest_positive):\n            smallest_positive = num\n\n    if largest_negative is None:\n        largest_negative = None\n    if smallest_positive is None:\n        smallest_positive = None\n\n    return (largest_negative, smallest_positive)\n",
        "def largest_smallest_integers(lst):\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    \"\"\"\n    largest_negative = None\n    smallest_positive = None\n\n    for num in lst:\n        if num < 0 and (largest_negative is None or num > largest_negative):\n            largest_negative = num\n        elif num > 0 and (smallest_positive is None or num < smallest_positive):\n            smallest_positive = num\n\n    return (largest_negative, smallest_positive)\n"
    ],
    "HumanEval/137": [
        "def compare_one(a, b):\n    try:\n        a_float = float(str(a).replace(\",\", \".\"))\n        b_float = float(str(b).replace(\",\", \".\"))\n        if a_float > b_float:\n            return a\n        elif a_float < b_float:\n            return b\n        else:\n            return None\n    except ValueError:\n        try:\n            a_str = str(a).replace(\",\", \"\")\n            b_str = str(b).replace(\",\", \"\")\n            if a_str > b_str:\n                return a\n            elif a_str < b_str:\n                return b\n            else:\n                return None\n        except ValueError:\n            return None\n",
        "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n    \"\"\"\n    try:\n        a_float = float(str(a).replace(',', '.'))\n        b_float = float(str(b).replace(',', '.'))\n        if a_float > b_float:\n            return a\n        elif b_float > a_float:\n            return b\n        else:\n            return None\n    except ValueError:\n        try:\n            a_str = str(a)\n            b_str = str(b)\n            if a_str > b_str:\n                return a\n            elif b_str > a_str:\n                return b\n            else:\n                return None\n        except:\n            return None\n",
        "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n    \"\"\"\n    try:\n        a_float = float(str(a).replace(\",\", \".\"))\n        b_float = float(str(b).replace(\",\", \".\"))\n        if a_float > b_float:\n            return a\n        elif b_float > a_float:\n            return b\n        else:\n            return None\n    except ValueError:\n        return None\n",
        "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n    \"\"\"\n    # Check the type of a and b individually\n    a_type = type(a)\n    b_type = type(b)\n\n    # If both are integers, compare the values and return the larger one\n    if a_type == int and b_type == int:\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n\n    # If both are floats, compare the values and return the larger one\n    elif a_type == float and b_type == float:\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n\n    # If both are strings, remove any commas, convert to floats, and then compare the values and return the larger one\n    elif a_type == str and b_type == str:\n        a_float = float(a.replace(\",\", \".\"))\n        b_float = float(b.replace(\",\", \".\"))\n        if a_float > b_float:\n            return a\n        elif b_float > a_float:\n            return b\n        else:\n            return None\n\n    # If the types are different, return None\n    else:\n        return None\n",
        "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n    \"\"\"\n    if type(a) == type(b):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    try:\n        a_float = float(str(a).replace(\",\", \".\"))\n        b_float = float(str(b).replace(\",\", \".\"))\n        if a_float > b_float:\n            return type(a)(a_float)\n        elif b_float > a_float:\n            return type(b)(b_float)\n        else:\n            return None\n    except ValueError:\n        return None\n"
    ],
    "HumanEval/138": [
        "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    if n < 8:\n        return False\n\n    for a in range(2, n - 4, 2):\n        for b in range(a + 2, n - 2, 2):\n            for c in range(b + 2, n, 2):\n                d = n - a - b - c\n                if d > 0 and d % 2 == 0:\n                    return True\n\n    return False\n",
        "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    if n % 4 != 0:\n        return False\n    even_number = n // 4\n    return even_number % 2 == 0\n",
        "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    if n < 8 or n % 2 != 0:\n        return False\n    return n % 4 == 0\n",
        "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    if n % 4 != 0:\n        return False\n    even_numbers = [2, 4, 6, 8]\n    sum_of_even_numbers = sum(even_numbers)\n    while sum_of_even_numbers < n:\n        even_numbers = [num + 2 for num in even_numbers]\n        sum_of_even_numbers = sum(even_numbers)\n    return sum_of_even_numbers == n\n",
        "def is_equal_to_sum_even(n):\n    if n % 4 != 0:\n        return False\n    \n    a = 2\n    while a <= n // 4:\n        if n - a - (a + 2) - (a + 4) == 0:\n            return True\n        a += 2\n    \n    return False\n"
    ],
    "HumanEval/139": [
        "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n\n    result = 1\n    for i in range(n, 0, -1):\n        result *= i\n        if i > 1:\n            result //= (i - 1)\n\n    return result\n",
        "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n\n    result = 1\n    for i in range(n, 0, -1):\n        result *= factorial(i)\n    return result\n\ndef factorial(n):\n    \"\"\"Calculates the factorial of a given number.\"\"\"\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    elif n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n",
        "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    result = 1\n    for i in range(n, 0, -1):\n        result *= i\n    return result\n",
        "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    result = 1\n    for i in range(n, 0, -1):\n        result *= factorial(i)\n    return result\n\ndef factorial(n):\n    \"\"\"Calculates the factorial of a number n.\"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n",
        "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    result = 1\n    for i in range(n, 0, -1):\n        result *= factorial(i)\n    return result\n\ndef factorial(n):\n    \"\"\"Calculates the factorial of a given number.\"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n"
    ],
    "HumanEval/140": [
        "def fix_spaces(text):\n    output = \"\"\n    prev_was_space = False\n    \n    for char in text:\n        if char == \" \":\n            if prev_was_space:\n                output += \"-\"\n            else:\n                output += \"_\"\n            prev_was_space = True\n        else:\n            output += char\n            prev_was_space = False\n    \n    return output\n",
        "def fix_spaces(text):\n    result = \"\"\n    text = text.strip()\n    prev_was_space = False\n    for char in text:\n        if char == \" \":\n            if not prev_was_space:\n                result += \"_\"\n            prev_was_space = True\n        else:\n            result += char\n            prev_was_space = False\n    return result.replace(\"  \", \"-\")\n",
        "def fix_spaces(text):\n    modified_text = \"\"\n    prev_char = None\n    for char in text:\n        if char == \" \":\n            if prev_char == \" \":\n                modified_text += \"-\"\n            else:\n                modified_text += \"_\"\n        else:\n            modified_text += char\n        prev_char = char\n    return modified_text\n",
        "def fix_spaces(text):\n    result = \"\"\n    prev_char = None\n    for char in text:\n        if char == \" \":\n            if prev_char == \" \":\n                result += \"-\"\n            else:\n                result += \"_\"\n        else:\n            result += char\n        prev_char = char\n    return result\n",
        "def fix_spaces(text):\n    result = \"\"\n    prev_char = \"\"\n    for char in text:\n        if char == \" \":\n            if prev_char == \" \":\n                result += \"-\"\n            else:\n                result += \"_\"\n        else:\n            result += char\n        prev_char = char\n\n    if result[0] == \"_\":\n        result = result[1:]\n    if result[-1] == \"_\":\n        result = result[:-1]\n\n    return result\n"
    ],
    "HumanEval/141": [
        "def file_name_check(file_name):\n    if sum(1 for char in file_name if char.isdigit()) > 3:\n        return \"No\"\n    \n    if file_name.count(\".\") != 1:\n        return \"No\"\n    \n    parts = file_name.split(\".\")\n    before_dot, after_dot = parts[0], parts[1]\n    \n    if not before_dot:\n        return \"No\"\n    \n    if not before_dot[0].isalpha():\n        return \"No\"\n    \n    valid_extensions = [\"txt\", \"exe\", \"dll\"]\n    if after_dot not in valid_extensions:\n        return \"No\"\n    \n    return \"Yes\"\n",
        "def file_name_check(file_name):\n    # 1. Check if the file name has more than 3 digits\n    if sum(c.isdigit() for c in file_name) > 3:\n        return 'No'\n    \n    # 2. Check if the file name contains exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # 3. Check if the file name is at least 2 characters long\n    if len(file_name) < 2:\n        return 'No'\n    \n    # 4. Check if the substring before the dot starts with a letter\n    before_dot, after_dot = file_name.split('.')\n    if not before_dot or not before_dot[0].isalpha():\n        return 'No'\n    \n    # 5. Check if the substring after the dot is a valid extension\n    valid_extensions = ['txt', 'exe', 'dll']\n    if after_dot not in valid_extensions:\n        return 'No'\n    \n    # 6. If all conditions are met, return 'Yes'\n    return 'Yes'\n",
        "def file_name_check(file_name):\n    # Check if the file name contains any digits\n    if any(char.isdigit() for char in file_name):\n        return 'No'\n    \n    # Check if the file name contains exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Check if the substring before the dot starts with a letter\n    before_dot = file_name.split('.')[0]\n    if not before_dot.isalpha():\n        return 'No'\n    \n    # Check if the substring after the dot is one of ['txt', 'exe', 'dll']\n    after_dot = file_name.split('.')[-1]\n    if after_dot not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'\n",
        "def file_name_check(file_name):\n    # Initialize the result\n    result = \"Yes\"\n\n    # Check for more than 3 digits\n    if sum(c.isdigit() for c in file_name) > 3:\n        result = \"No\"\n        return result\n\n    # Check for exactly one dot\n    if file_name.count(\".\") != 1:\n        result = \"No\"\n        return result\n\n    # Split the file name into two parts\n    parts = file_name.split(\".\")\n    before_dot, after_dot = parts[0], parts[1]\n\n    # Check if the part before the dot is empty\n    if not before_dot:\n        result = \"No\"\n        return result\n\n    # Check if the first character of the part before the dot is a letter\n    if not before_dot[0].isalpha():\n        result = \"No\"\n        return result\n\n    # Check if the part after the dot is a valid extension\n    valid_extensions = [\"txt\", \"exe\", \"dll\"]\n    if after_dot not in valid_extensions:\n        result = \"No\"\n        return result\n\n    return result\n",
        "def file_name_check(file_name):\n    # Step 3: Check if the file name contains exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n\n    # Step 4: Split the file name into two parts\n    parts = file_name.split('.')\n    before_dot = parts[0]\n    after_dot = parts[1]\n\n    # Step 5 and 7: Check if the substring before the dot is not empty, starts with a Latin alphabet letter, and has no more than 3 digits\n    if not before_dot or not before_dot[0].isalpha() or sum(1 for char in before_dot if char.isdigit()) > 3:\n        return 'No'\n\n    # Step 6: Check if the substring after the dot is a valid extension\n    valid_extensions = ['txt', 'exe', 'dll']\n    if after_dot not in valid_extensions:\n        return 'No'\n\n    # Step 8: If all checks pass, return 'Yes'\n    return 'Yes'\n"
    ],
    "HumanEval/142": [
        "def sum_squares(lst):\n    total = 0\n    for i, x in enumerate(lst):\n        if i % 3 == 0:\n            total += x ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            total += x ** 3\n        else:\n            total += x\n    return total\n",
        "def sum_squares(lst):\n    if not lst:\n        return 0\n\n    try:\n        return sum(num ** 2 if i % 3 == 0 else num ** 3 if i % 4 == 0 and i % 3 != 0 else num for i, num in enumerate(lst))\n    except TypeError:\n        raise TypeError(\"The input list must contain only integers.\")\n",
        "def sum_squares(lst):\n    total = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            total += num ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            total += num ** 3\n        else:\n            total += num\n    return total\n",
        "def sum_squares(lst):\n    result = 0\n    for i, x in enumerate(lst):\n        if i % 3 == 0:\n            result += x ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            result += x ** 3\n        else:\n            result += x\n    return result\n",
        "def sum_squares(lst):\n    total = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            total += num ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            total += num ** 3\n        else:\n            total += num\n    return total\n"
    ],
    "HumanEval/143": [
        "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n    \"\"\"\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(int(word))]\n    result = ' '.join(prime_words)\n    return result\n",
        "def words_in_sentence(sentence):\n    \"\"\"\n    Returns a string containing the words from the input sentence whose lengths are prime numbers.\n    \"\"\"\n    words = sentence.split()\n    max_word_len = max(len(word) for word in words)\n    prime_numbers = get_prime_numbers(max_word_len)\n    prime_words = [word for word in words if len(word) in prime_numbers]\n    return ' '.join(prime_words)\n\ndef get_prime_numbers(max_len):\n    \"\"\"Helper function to get all prime numbers up to max_len\"\"\"\n    primes = set()\n    for i in range(2, max_len + 1):\n        if is_prime(i):\n            primes.add(i)\n    return primes\n\ndef is_prime(n):\n    \"\"\"Helper function to check if a number is prime\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
        "def words_in_sentence(sentence):\n    words = sentence.split()\n    prime_words = []\n    for word in words:\n        word_length = len(word)\n        if is_prime(word_length):\n            prime_words.append(word)\n    return ' '.join(prime_words)\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
        "def words_in_sentence(sentence):\n    max_word_length = max(len(word) for word in sentence.split())\n    prime_lengths = get_prime_numbers(max_word_length)\n    return ' '.join(word for word in sentence.split() if len(word) in prime_lengths and word.isalpha())\n\ndef get_prime_numbers(max_length):\n    primes = set()\n    for i in range(2, max_length + 1):\n        if is_prime(i):\n            primes.add(i)\n    return primes\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
        "def words_in_sentence(sentence):\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"
    ],
    "HumanEval/144": [
        "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    result_num = x_num * n_num\n    result_den = x_den * n_den\n    return result_num % result_den == 0\n",
        "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    result_num = x_num * n_num\n    result_den = x_den * n_den\n    if result_den == 1 or result_num % result_den == 0:\n        return True\n    else:\n        return False\n",
        "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    product_num = x_num * n_num\n    product_den = x_den * n_den\n    return product_num % product_den == 0\n",
        "def simplify(x, n):\n    # Extract the numerators and denominators\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n\n    # Calculate the product of the numerators and denominators\n    product_num = x_num * n_num\n    product_den = x_den * n_den\n\n    # Check if the product of the numerators is divisible by the product of the denominators\n    return product_num % product_den == 0\n",
        "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    result_num = x_num * n_num\n    result_den = x_den * n_den\n    return result_den == 1\n"
    ],
    "HumanEval/145": [
        "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_of_digits(num):\n        \"\"\"\n        Helper function to calculate the sum of digits of a given integer.\n        \"\"\"\n        return sum(int(digit) for digit in str(abs(num)))\n\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))\n",
        "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))\n",
        "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))\n",
        "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))\n",
        "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), x))\n"
    ],
    "HumanEval/146": [
        "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        num_str = str(abs(num))\n        if num > 10 and int(num_str[0]) % 2 != 0 and int(num_str[-1]) % 2 != 0:\n            count += 1\n    return count\n",
        "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            first_digit = abs(num) // 10**((len(str(abs(num))) - 1))\n            last_digit = abs(num) % 10\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return count\n",
        "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            first_digit = abs(num) // 10 % 10\n            last_digit = abs(num) % 10\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return count\n",
        "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            first_digit = int(str(abs(num))[0])\n            last_digit = int(str(abs(num))[-1])\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return count\n",
        "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and abs(num) % 10 in [1, 3, 5, 7, 9] and abs(num // 10) % 10 in [1, 3, 5, 7, 9]:\n            count += 1\n    return count\n"
    ],
    "HumanEval/147": [
        "def get_max_triples(n):\n    a = []\n    for i in range(1, n+1):\n        a.append(i * i - i + 1)\n\n    divisible_by_3 = [x for x in a if x % 3 == 0]\n    count = 0\n\n    for i in range(len(divisible_by_3)):\n        for j in range(i+1, len(divisible_by_3)):\n            k = 3 - (divisible_by_3[i] + divisible_by_3[j]) % 3\n            if k in a:\n                count += 1\n\n    return count\n",
        "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    count = 0\n\n    a_mod_3 = [x for x in a if x % 3 == 0]\n    count += len(a_mod_3)\n\n    for x in a_mod_3:\n        count += a.count(3 * (x // 3) - x)\n\n    return count\n",
        "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    count = 0\n    \n    for i in range(n):\n        if a[i] % 3 == 0:\n            for j in range(i+1, n):\n                if (a[j] + a[i]) % 3 == 0:\n                    count += 1\n    \n    return count\n",
        "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    count_0 = count_1 = count_2 = 0\n    for x in a:\n        remainder = x % 3\n        if remainder == 0:\n            count_0 += 1\n        elif remainder == 1:\n            count_1 += 1\n        else:\n            count_2 += 1\n    return count_0 * count_1 * count_2\n",
        "def get_max_triples(n):\n    count = 0\n    for i in range(1, n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                a_i = i * i - i + 1\n                a_j = j * j - j + 1\n                a_k = k * k - k + 1\n                if (a_i + a_j + a_k) % 3 == 0:\n                    count += 1\n    return count\n"
    ],
    "HumanEval/148": [
        "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    # Check if planet1 and planet2 are valid planet names\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    # Find the indices of planet1 and planet2\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    \n    # Create the result list\n    result = []\n    start = min(index1, index2)\n    end = max(index1, index2)\n    for i in range(start, end+1):\n        result.append(planets[i])\n    \n    return tuple(sorted(result))\n",
        "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n\n    result = planets[min(index1, index2):max(index1, index2) + 1]\n\n    return tuple(result)\n",
        "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    p1_index = planets.index(planet1)\n    p2_index = planets.index(planet2)\n    \n    return tuple(planets[p1_index+1:p2_index])\n",
        "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    result = planets[min(index1, index2):max(index1, index2)+1]\n    return tuple(sorted(result))\n",
        "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    i1 = planets.index(planet1)\n    i2 = planets.index(planet2)\n    \n    if i1 < i2:\n        return tuple(planets[i1+1:i2])\n    else:\n        return tuple(planets[i2+1:i1])\n"
    ],
    "HumanEval/149": [
        "def sorted_list_sum(lst):\n    new_list = []\n    for word in lst:\n        if len(word) % 2 == 0:\n            new_list.append(word)\n    new_list.sort(key=lambda x: (len(x), x))\n    return new_list\n",
        "def sorted_list_sum(lst):\n    lst = [word for word in lst if len(word) % 2 == 0]\n    lst.sort(key=len)\n    lst.sort()\n    return lst\n",
        "def sorted_list_sum(lst):\n    new_list = []\n    for word in lst:\n        if len(word) % 2 == 0:\n            new_list.append(word)\n    new_list.sort(key=len)\n    new_list.sort()\n    return new_list\n",
        "def sorted_list_sum(lst):\n    filtered_sorted_lst = []\n    for word in lst:\n        if len(word) % 2 == 0:\n            filtered_sorted_lst.append(word)\n    filtered_sorted_lst.sort(key=lambda x: (len(x), x))\n    return filtered_sorted_lst\n",
        "def sorted_list_sum(lst):\n    if not lst:\n        return []\n    \n    new_list = [word for word in lst if len(word) % 2 == 0]\n    new_list.sort(key=lambda x: (len(x), x))\n    return new_list\n"
    ],
    "HumanEval/150": [
        "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y\n",
        "def is_prime(n):\n    \"\"\"Checks if a number is prime.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y\n",
        "def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \"\"\"\n    if n < 2:\n        return y\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
        "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y\n",
        "def x_or_y(n, x, y):\n    if n < 2:\n        return y\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return y\n    return x\n"
    ],
    "HumanEval/151": [
        "def double_the_difference(lst):\n    sum_of_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0 and num % 2 == 1:\n            sum_of_squares += num ** 2\n    return sum_of_squares\n",
        "def double_the_difference(lst):\n    result = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0:\n            if num % 2 != 0:\n                result += num ** 2\n    return result\n",
        "def double_the_difference(lst):\n    sum_of_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0 and num % 2 == 1:\n            sum_of_squares += num ** 2\n    return sum_of_squares\n",
        "def double_the_difference(lst):\n    sum_of_squares = 0\n    for num in lst:\n        if isinstance(num, int):\n            if num % 2 != 0:\n                sum_of_squares += 2 * (num ** 2 - num)\n    return sum_of_squares\n",
        "def double_the_difference(lst):\n    sum_of_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0:\n            if num % 2 == 1:\n                sum_of_squares += num ** 2\n    return sum_of_squares\n"
    ],
    "HumanEval/152": [
        "def compare(game, guess):\n    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result\n",
        "def compare(game, guess):\n    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result\n",
        "def compare(game, guess):\n    result = []\n    for i in range(len(game)):\n        diff = abs(game[i] - guess[i])\n        if diff == 0:\n            result.append(0)\n        else:\n            result.append(diff)\n    return result\n",
        "def compare(game, guess):\n    results = []\n    \n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            results.append(0)\n        else:\n            results.append(abs(game[i] - guess[i]))\n    \n    return results\n",
        "def compare(game, guess):\n    result = []\n    for i in range(len(game)):\n        diff = abs(game[i] - guess[i])\n        result.append(0 if diff == 0 else diff)\n    return result\n"
    ],
    "HumanEval/153": [
        "def Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    strongest_strength = float('-inf')\n    \n    for extension in extensions:\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n        strength = cap - sm\n        \n        if strength > strongest_strength:\n            strongest_extension = extension\n            strongest_strength = strength\n        elif strength == strongest_strength and extensions.index(extension) < extensions.index(strongest_extension):\n            strongest_extension = extension\n    \n    return f\"{class_name}.{strongest_extension}\"\n",
        "def Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    strongest_strength = float('-inf')\n    \n    for extension in extensions:\n        uppercase_count = sum(1 for char in extension if char.isupper())\n        lowercase_count = sum(1 for char in extension if char.islower())\n        strength = uppercase_count - lowercase_count\n        \n        if strength > strongest_strength:\n            strongest_extension = extension\n            strongest_strength = strength\n        elif strength == strongest_strength and extensions.index(extension) < extensions.index(strongest_extension):\n            strongest_extension = extension\n            strongest_strength = strength\n    \n    return f\"{class_name}.{strongest_extension}\"\n",
        "def Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    strongest_strength = float('-inf')\n\n    for extension in extensions:\n        cap = sum(1 for char in extension if char.isupper())\n        sm = sum(1 for char in extension if char.islower())\n        strength = cap - sm\n\n        if strength > strongest_strength:\n            strongest_strength = strength\n            strongest_extension = extension\n        elif strength == strongest_strength and extensions.index(extension) < extensions.index(strongest_extension):\n            strongest_extension = extension\n\n    return f\"{class_name}.{strongest_extension}\"\n",
        "def Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    strongest_strength = float('-inf')\n\n    for extension in extensions:\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n        strength = cap - sm\n\n        if strength > strongest_strength or (strength == strongest_strength and extensions.index(extension) < extensions.index(strongest_extension)):\n            strongest_extension = extension\n            strongest_strength = strength\n\n    return f\"{class_name}.{strongest_extension}\"\n",
        "def Strongest_Extension(class_name, extensions):\n    strongest_extension = \"\"\n    strongest_strength = float(\"-inf\")\n\n    for extension in extensions:\n        cap = sum(1 for char in extension if char.isupper())\n        sm = sum(1 for char in extension if char.islower())\n        strength = cap - sm\n\n        if strength > strongest_strength or (strength == strongest_strength and extension < strongest_extension):\n            strongest_extension = extension\n            strongest_strength = strength\n\n    return f\"{class_name}.{strongest_extension}\"\n"
    ],
    "HumanEval/154": [
        "def cycpattern_check(a, b):\n    concat_b = b + b\n    return a in concat_b\n",
        "def cycpattern_check(a, b):\n    if len(b) > len(a):\n        return False\n    \n    rotations = [b[i:] + b[:i] for i in range(len(b))]\n    \n    return any(rotation in a for rotation in rotations)\n",
        "def cycpattern_check(a, b):\n    double_a = a + a\n    return b in double_a\n",
        "def cycpattern_check(a, b):\n    n = len(b)\n    rotated_words = [b[i:] + b[:i] for i in range(n)]\n    for word in rotated_words:\n        if word in a:\n            return True\n    return False\n",
        "def cycpattern_check(a, b):\n    for i in range(len(b)):\n        rotated_b = b[i:] + b[:i]\n        if rotated_b in a:\n            return True\n    return False\n"
    ],
    "HumanEval/155": [
        "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    \n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    return (even_count, odd_count)\n",
        "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    \n    while num != 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    \n    return (even_count, odd_count)\n",
        "def even_odd_count(num):\n    num = abs(num)\n    num_str = str(num)\n    even_count = 0\n    odd_count = 0\n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n",
        "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n\n    num_str = str(abs(num))\n\n    for digit in num_str:\n        digit_int = int(digit)\n        if digit_int % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    return (even_count, odd_count)\n",
        "def even_odd_count(num):\n    \"\"\"Given an integer, return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num_str = str(abs(num))\n    even_count = 0\n    odd_count = 0\n\n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    return (even_count, odd_count)\n"
    ],
    "HumanEval/156": [
        "def int_to_mini_roman(number):\n    roman_symbols = [('m', 1000), ('cm', 900), ('d', 500), ('cd', 400), ('c', 100), ('xc', 90),\n                     ('l', 50), ('xl', 40), ('x', 10), ('ix', 9), ('v', 5), ('iv', 4), ('i', 1)]\n\n    result = \"\"\n    for symbol, value in roman_symbols:\n        count = number // value\n        result += symbol * count\n        number -= value * count\n\n    return result\n",
        "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    mini_roman = \"\"\n    \n    # Handle the cases for 1 to 9\n    ones = [\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"ix\"]\n    mini_roman += ones[number % 10]\n    \n    # Handle the cases for 10 to 90\n    tens = [\"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"]\n    mini_roman = tens[number // 10] + mini_roman\n    \n    # Handle the cases for 100 to 900\n    hundreds = [\"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"]\n    mini_roman = hundreds[number // 100] + mini_roman\n    \n    return mini_roman\n",
        "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if not 1 <= number <= 1000:\n        raise ValueError(\"Number must be between 1 and 1000 inclusive.\")\n\n    roman_numerals = {\n        1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c',\n        90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'\n    }\n\n    result = ''\n    for key in sorted(roman_numerals.keys(), reverse=True):\n        while number >= key:\n            result += roman_numerals[key]\n            number -= key\n\n    return result\n",
        "def int_to_mini_roman(number):\n    if not 1 <= number <= 1000:\n        raise ValueError(\"Number must be between 1 and 1000 (inclusive)\")\n\n    roman_numeral = \"\"\n\n    roman_values = {\n        1000: \"m\",\n        900: \"cm\",\n        500: \"d\",\n        400: \"cd\",\n        100: \"c\",\n        90: \"xc\",\n        50: \"l\",\n        40: \"xl\",\n        10: \"x\",\n        9: \"ix\",\n        5: \"v\",\n        4: \"iv\",\n        1: \"i\"\n    }\n\n    for value in sorted(roman_values, reverse=True):\n        count = number // value\n        roman_numeral += (roman_values[value] * count)\n        number -= value * count\n\n    return roman_numeral\n",
        "def int_to_mini_roman(number):\n    mini_roman_map = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l',\n        90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n\n    mini_roman = ''\n\n    for value in [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]:\n        count = int(number / value)\n        mini_roman += (mini_roman_map[value] * count)\n        number -= value * count\n\n    return mini_roman\n"
    ],
    "HumanEval/157": [
        "import math\n\ndef right_angle_triangle(a, b, c):\n    longest_side = max(a, b, c)\n    return math.isclose(math.sqrt(a**2 + b**2), longest_side) or \\\n           math.isclose(math.sqrt(a**2 + c**2), longest_side) or \\\n           math.isclose(math.sqrt(b**2 + c**2), longest_side)\n",
        "def right_angle_triangle(a, b, c):\n    hypotenuse = max(a, b, c)\n    other_sides = a**2 + b**2 + c**2 - hypotenuse**2\n    return other_sides == 0\n",
        "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[2]**2 == sides[0]**2 + sides[1]**2\n",
        "def right_angle_triangle(a, b, c):\n    # Determine the longest side (hypotenuse)\n    hypotenuse = max(a, b, c)\n    \n    # Calculate the squares of the other two sides\n    a_squared = a ** 2\n    b_squared = b ** 2\n    c_squared = c ** 2\n    \n    # Check if the square of the hypotenuse is equal to the sum of the squares of the other two sides\n    if hypotenuse ** 2 == a_squared + b_squared or hypotenuse ** 2 == a_squared + c_squared or hypotenuse ** 2 == b_squared + c_squared:\n        return True\n    else:\n        return False\n",
        "def right_angle_triangle(a, b, c):\n    hypotenuse = max(a, b, c)\n    other_sides_squared = a**2 + b**2 + c**2 - hypotenuse**2\n    return other_sides_squared == hypotenuse**2\n"
    ],
    "HumanEval/158": [
        "def find_max(words):\n    max_word = \"\"\n    max_unique_chars = 0\n    \n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_word = word\n            max_unique_chars = unique_chars\n        elif unique_chars == max_unique_chars and word < max_word:\n            max_word = word\n    \n    return max_word\n",
        "def find_max(words):\n    max_word = \"\"\n    max_count = 0\n    \n    for word in words:\n        unique_chars = set(word)\n        if len(unique_chars) > max_count:\n            max_count = len(unique_chars)\n            max_word = word\n        elif len(unique_chars) == max_count:\n            if word < max_word:\n                max_word = word\n    \n    return max_word\n",
        "def find_max(words):\n    max_unique_chars = 0\n    max_word = \"\"\n\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word\n        elif unique_chars == max_unique_chars and word < max_word:\n            max_word = word\n\n    return max_word\n",
        "def find_max(words):\n    max_unique = 0\n    max_word = \"\"\n    \n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique:\n            max_unique = unique_chars\n            max_word = word\n        elif unique_chars == max_unique and word < max_word:\n            max_word = word\n    \n    return max_word\n",
        "def find_max(words):\n    max_word = \"\"\n    max_count = 0\n    \n    for word in words:\n        unique_chars = set(word)\n        if len(unique_chars) > max_count:\n            max_word = word\n            max_count = len(unique_chars)\n        elif len(unique_chars) == max_count and word < max_word:\n            max_word = word\n    \n    return max_word\n"
    ],
    "HumanEval/159": [
        "def eat(number, need, remaining):\n    if not (0 <= number <= 1000 and 0 <= need <= 1000 and 0 <= remaining <= 1000):\n        raise ValueError(\"Input values are out of range.\")\n    \n    total_eaten = min(number + need, number + remaining)\n    remaining_carrots = max(0, remaining - need)\n    \n    return [total_eaten, remaining_carrots]\n",
        "def eat(number, need, remaining):\n    if not (0 <= number <= 1000 and 0 <= need <= 1000 and 0 <= remaining <= 1000):\n        raise ValueError(\"Invalid input: number, need, and remaining must be between 0 and 1000 (inclusive)\")\n\n    total_eaten = min(need, remaining) + number\n    remaining_carrots = max(0, remaining - need)\n\n    return [total_eaten, remaining_carrots]\n",
        "def eat(number, need, remaining):\n    if not (0 <= number <= 1000 and 0 <= need <= 1000 and 0 <= remaining <= 1000):\n        raise ValueError(\"Input values must be between 0 and 1000 (inclusive)\")\n    \n    total_eaten = number + min(need, remaining)\n    carrots_left = max(0, remaining - need)\n    \n    return [total_eaten, carrots_left]\n",
        "def eat(number, need, remaining):\n    if not (0 <= number <= 1000 and 0 <= need <= 1000 and 0 <= remaining <= 1000):\n        raise ValueError(\"Input values must be within the given constraints.\")\n\n    total_eaten = min(number + need, number + remaining)\n    remaining_carrots = max(remaining - need, 0)\n\n    return [total_eaten, remaining_carrots]\n",
        "def eat(number, need, remaining):\n    if not (0 <= number <= 1000 and 0 <= need <= 1000 and 0 <= remaining <= 1000):\n        raise ValueError(\"Input values must be within the given constraints.\")\n\n    total_need = number + need\n\n    if remaining >= need:\n        return [total_need, remaining - need]\n    else:\n        return [total_need, 0]\n"
    ],
    "HumanEval/160": [
        "import operator\n\ndef do_algebra(operator, operand):\n    if len(operator) != len(operand) - 1:\n        raise ValueError(\"The length of the operator list must be one less than the length of the operand list.\")\n    for op in operand:\n        if not isinstance(op, int) or op < 0:\n            raise ValueError(\"The operand list must contain only non-negative integers.\")\n    if len(operator) < 1 or len(operand) < 2:\n        raise ValueError(\"The operator list must have at least one operator and the operand list must have at least two operands.\")\n\n    def evaluate(ops, ops_):\n        if len(ops) == 0:\n            return ops_[0]\n        \n        op = ops.pop(0)\n        op1 = ops_.pop(0)\n        op2 = ops_.pop(0)\n        \n        try:\n            if op == '+':\n                return evaluate(ops, [operator.add(op1, op2)] + ops_)\n            elif op == '-':\n                return evaluate(ops, [operator.sub(op1, op2)] + ops_)\n            elif op == '*':\n                return evaluate(ops, [operator.mul(op1, op2)] + ops_)\n            elif op == '//':\n                if op2 == 0:\n                    raise ZeroDivisionError(\"Division by zero.\")\n                return evaluate(ops, [operator.floordiv(op1, op2)] + ops_)\n            elif op == '**':\n                return evaluate(ops, [operator.pow(op1, op2)] + ops_)\n            else:\n                raise ValueError(f\"Invalid operator: {op}\")\n        except ZeroDivisionError as e:\n            raise e\n        except Exception as e:\n            raise ValueError(f\"Error evaluating expression: {e}\")\n\n    return evaluate(operator, operand)\n",
        "def do_algebra(operator, operand):\n    if len(operator) != len(operand) - 1:\n        raise ValueError(\"Length of operator list should be equal to length of operand list minus one.\")\n    if len(operator) < 1:\n        raise ValueError(\"Operator list should have at least one operator.\")\n    if len(operand) < 2:\n        raise ValueError(\"Operand list should have at least two operands.\")\n    if any(not isinstance(x, int) or x < 0 for x in operand):\n        raise ValueError(\"Operand list should contain only non-negative integers.\")\n\n    result = operand[0]\n\n    for i, op in enumerate(operator):\n        if op == \"+\":\n            result += operand[i + 1]\n        elif op == \"-\":\n            result -= operand[i + 1]\n        elif op == \"*\":\n            result *= operand[i + 1]\n        elif op == \"//\":\n            result //= operand[i + 1]\n        elif op == \"**\":\n            result **= operand[i + 1]\n        else:\n            raise ValueError(f\"Invalid operator: {op}\")\n\n    return result\n",
        "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result\n",
        "def do_algebra(operator, operand):\n    if len(operator) != len(operand) - 1:\n        raise ValueError(\"The length of the operator list must be equal to the length of the operand list minus one.\")\n    \n    for op in operand:\n        if op < 0:\n            raise ValueError(\"The operand list must contain only non-negative integers.\")\n    \n    if len(operator) < 1 or len(operand) < 2:\n        raise ValueError(\"The operator list must have at least one operator, and the operand list must have at least two operands.\")\n    \n    result = operand[0]\n    \n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n        else:\n            raise ValueError(f\"Unknown operator: {operator[i]}\")\n    \n    return result\n",
        "def do_algebra(operator, operand):\n    if len(operator) != len(operand) - 1:\n        raise ValueError(\"The length of the operator list must be equal to the length of the operand list minus one.\")\n    if any(x < 0 for x in operand):\n        raise ValueError(\"The operand list must contain only non-negative integers.\")\n    if len(operator) < 1 or len(operand) < 2:\n        raise ValueError(\"The operator list must have at least one operator, and the operand list must have at least two operands.\")\n\n    result = operand[0]\n\n    for i in range(len(operator)):\n        op = operator[i]\n        next_operand = operand[i + 1]\n        if op == '+':\n            result += next_operand\n        elif op == '-':\n            result -= next_operand\n        elif op == '*':\n            result *= next_operand\n        elif op == '//':\n            result //= next_operand\n        elif op == '**':\n            result **= next_operand\n        else:\n            raise ValueError(f\"Invalid operator: {op}\")\n\n    return result\n"
    ],
    "HumanEval/161": [
        "def solve(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    \n    if not result:\n        return s[::-1]\n    else:\n        return result\n",
        "def solve(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    \n    if not any(char.isalpha() for char in s):\n        return result[::-1]\n    else:\n        return result\n",
        "def solve(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    if not result:\n        return s[::-1]\n    return result\n",
        "def solve(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    \n    if not result:\n        return s[::-1]\n    \n    return result\n",
        "def solve(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    if not result:\n        return s[::-1]\n    return result\n"
    ],
    "HumanEval/162": [
        "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    md5_hash = hashlib.md5(text.encode())\n    return md5_hash.hexdigest()\n",
        "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n\n    md5_hash = hashlib.md5(text.encode())\n    return md5_hash.hexdigest()\n",
        "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n\n    md5_hash = hashlib.md5(text.encode())\n    return md5_hash.hexdigest()\n",
        "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    text_bytes = text.encode('utf-8')\n    md5_hash = hashlib.md5(text_bytes)\n    md5_string = md5_hash.hexdigest()\n    return md5_string\n",
        "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    hash_obj = hashlib.md5(text.encode())\n    return hash_obj.hexdigest()\n"
    ],
    "HumanEval/163": [
        "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    even_digits = [num for num in range(min(a, b), max(a, b) + 1) if num % 2 == 0]\n    even_digits.sort()\n    return even_digits\n",
        "def generate_integers(a, b):\n    even_digits = [num for num in range(max(a, b), min(a, b) - 1, -1) if num % 2 == 0]\n    even_digits.sort()\n    return even_digits\n",
        "def generate_integers(a, b):\n    even_digits = []\n    for num in range(a, b+1):\n        if num % 2 == 0:\n            even_digits.append(num)\n    even_digits.sort()\n    return even_digits\n",
        "def generate_integers(a, b):\n    even_digits = []\n    for num in (a, b):\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                even_digits.append(int(digit))\n    return sorted(set(even_digits))\n",
        "def generate_integers(a, b):\n    even_digits = []\n\n    # Make sure a is less than or equal to b\n    if a > b:\n        a, b = b, a\n\n    # Iterate through the range and append even digits to the list\n    for num in range(a, b + 1):\n        if num % 2 == 0:\n            even_digits.append(num)\n\n    # Sort the list in ascending order\n    even_digits.sort()\n\n    return even_digits\n"
    ]
}