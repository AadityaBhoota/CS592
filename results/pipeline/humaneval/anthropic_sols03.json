{
    "HumanEval/0": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    numbers.sort()\n    has_close = False\n    for i in range(1, len(numbers)):\n        if abs(numbers[i] - numbers[i-1]) < threshold:\n            has_close = True\n            break\n    return has_close\n",
    "HumanEval/1": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_group = \"\"\n    nesting_level = 0\n\n    for char in paren_string.replace(\" \", \"\"):\n        if char == \"(\":\n            nesting_level += 1\n            current_group += char\n        elif char == \")\":\n            nesting_level -= 1\n            current_group += char\n            if nesting_level == 0:\n                result.append(current_group)\n                current_group = \"\"\n\n    return result\n",
    "HumanEval/2": "def truncate_number(number: float) -> float:\n    \"\"\"\n    Given a positive floating point number, it can be decomposed into\n    an integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    \n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part\n",
    "HumanEval/3": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
    "HumanEval/4": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    abs_diffs = [abs(num - mean) for num in numbers]\n    mad = sum(abs_diffs) / len(abs_diffs)\n    return mad\n",
    "HumanEval/5": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers`.\n    \n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n    \n    result = [numbers[0]]\n    result.extend([delimeter, num] for num in numbers[1:])\n    return result\n",
    "HumanEval/6": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    stack = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(len(stack))\n        elif char == ')':\n            result.append(len(stack))\n            stack.pop()\n    return result\n",
    "HumanEval/7": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    result = [s for s in strings if substring in s]\n    return result\n",
    "HumanEval/8": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_value = 0\n    product = 1\n    \n    for num in numbers:\n        sum_value += num\n        product *= num\n    \n    return sum_value, product\n",
    "HumanEval/9": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    \n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list = []\n    current_max = float(\"-inf\")\n    \n    for num in numbers:\n        current_max = max(current_max, num)\n        rolling_max_list.append(current_max)\n    \n    return rolling_max_list\n",
    "HumanEval/10": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string. \"\"\"\n    # If the string is already a palindrome, return it\n    if is_palindrome(string):\n        return string\n\n    # Find the longest palindromic suffix\n    for i in range(len(string), -1, -1):\n        if is_palindrome(string[:i]):\n            suffix = string[i:]\n            break\n    else:\n        suffix = ''\n\n    # Get the prefix that comes before the palindromic suffix\n    prefix = string[:-len(suffix)]\n\n    # Append the reversed prefix to the original string\n    return string + prefix[::-1]\n",
    "HumanEval/11": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    # Convert the input strings to lists of integers\n    a_list = [int(char) for char in a]\n    b_list = [int(char) for char in b]\n\n    # Perform the XOR operation on the corresponding elements\n    result_list = [a_elem ^ b_elem for a_elem, b_elem in zip(a_list, b_list)]\n\n    # Convert the resulting list of integers back to a string\n    return ''.join(str(x) for x in result_list)\n",
    "HumanEval/12": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    \n    longest_str = strings[0]\n    for s in strings:\n        if len(s) > len(longest_str):\n            longest_str = s\n    \n    return longest_str\n",
    "HumanEval/13": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"Return the greatest common divisor of two integers a and b.\n    \n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return a\n",
    "HumanEval/14": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]\n",
    "HumanEval/15": "def string_sequence(n: int) -> str:\n    result = \"\"\n    for i in range(n + 1):\n        result += str(i)\n        if i < n:\n            result += \" \"\n    return result\n",
    "HumanEval/16": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))\n",
    "HumanEval/17": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    durations = []\n    for note in music_string.split():\n        if note == 'o':\n            durations.append(4)\n        elif note == 'o|':\n            durations.append(2)\n        elif note == '.|':\n            durations.append(1)\n    return durations\n",
    "HumanEval/18": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n",
    "HumanEval/19": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    word_list = numbers.split()\n    word_to_int = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    sorted_words = sorted(word_list, key=lambda x: word_to_int[x])\n    return ' '.join(sorted_words)\n",
    "HumanEval/20": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    \n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (numbers[0], numbers[1])\n    \n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    \n    return closest_pair\n",
    "HumanEval/21": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements\")\n\n    min_value = min(numbers)\n    max_value = max(numbers)\n\n    return [(x - min_value) / (max_value - min_value) for x in numbers]\n",
    "HumanEval/22": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    filtered_integers = [value for value in values if isinstance(value, int)]\n    return filtered_integers\n",
    "HumanEval/23": "def strlen(string: str) -> int:\n    \"\"\"Return length of given string\"\"\"\n    if not string:\n        return 0\n    else:\n        return len(string)\n",
    "HumanEval/24": "def largest_divisor(n: int) -> int:\n    \"\"\"\n    For a given number n, find the largest number that divides n evenly, smaller than n.\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1\n",
    "HumanEval/25": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n    Input number should be equal to the product of all factors.\n\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    i = 2\n    while n > 1:\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            i += 1\n    return factors\n",
    "HumanEval/26": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    unique_elements = []\n    seen = set()\n\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            unique_elements.append(num)\n\n    return unique_elements\n",
    "HumanEval/27": "def flip_case(string: str) -> str:\n    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result\n",
    "HumanEval/28": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\"Concatenate list of strings into a single string\"\"\"\n    result = \"\"\n    for s in strings:\n        result += s\n    return result\n",
    "HumanEval/29": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    filtered = [s for s in strings if s.startswith(prefix)]\n    return filtered\n",
    "HumanEval/30": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    positive_list = [num for num in l if num > 0]\n    return positive_list\n",
    "HumanEval/31": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n in [2, 3]:\n        return True\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    \n    return True\n",
    "HumanEval/32": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list, tol=1e-6):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"Number of coefficients must be even\")\n    \n    if max(xs) == 0:\n        raise ValueError(\"Largest coefficient must be non-zero\")\n    \n    a, b = -1, 1\n    while abs(poly(xs, a) * poly(xs, b)) > tol**2:\n        c = (a + b) / 2\n        if poly(xs, a) * poly(xs, c) < 0:\n            b = c\n        else:\n            a = c\n    \n    return (a + b) / 2\n",
    "HumanEval/33": "def sort_third(l: list):\n    l_sorted = [value for i, value in enumerate(l) if i % 3 == 0]\n    l_sorted.sort()\n    result = []\n    j = 0\n    for i, value in enumerate(l):\n        if i % 3 == 0:\n            result.append(l_sorted[j])\n            j += 1\n        else:\n            result.append(value)\n    return result\n",
    "HumanEval/34": "def unique(l: list) -> list:\n    return sorted(list(set(l)))\n",
    "HumanEval/35": "def max_element(l: list):\n    max_val = l[0]\n    for element in l:\n        if element > max_val:\n            max_val = element\n    return max_val\n",
    "HumanEval/36": "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(11, n, 11):\n        if '7' in str(i):\n            count += 1\n    for i in range(13, n, 13):\n        if '7' in str(i):\n            count += 1\n    return count\n",
    "HumanEval/37": "def sort_even(l: list):\n    new_list = []\n    even_values = []\n    \n    for i, value in enumerate(l):\n        if i % 2 == 0:\n            even_values.append(value)\n        else:\n            new_list.append(value)\n    \n    even_values.sort()\n    \n    for i in range(len(l)):\n        if i % 2 == 0:\n            new_list.insert(i, even_values.pop(0))\n        else:\n            continue\n    \n    return new_list\n",
    "HumanEval/38": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # Split the input string into groups of 3 characters\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    \n    # Rotate the characters in each group to the right by 1 position\n    decoded_groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    \n    # Join all the groups back together to form the final decoded string\n    return \"\".join(decoded_groups)\n",
    "HumanEval/39": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_fib(n: int):\n    fib1, fib2 = 0, 1\n    count = 0\n    while count < n:\n        fib3 = fib1 + fib2\n        if is_prime(fib3):\n            count += 1\n        fib1, fib2 = fib2, fib3\n    return fib3\n",
    "HumanEval/40": "def triples_sum_to_zero(l: list):\n    l.sort()\n    found_triple = False\n    for i in range(len(l) - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        j = i + 1\n        k = len(l) - 1\n        while j < k:\n            total = l[i] + l[j] + l[k]\n            if total == 0:\n                found_triple = True\n                break\n            elif total < 0:\n                j += 1\n            else:\n                k -= 1\n    return found_triple\n",
    "HumanEval/41": "def car_race_collision(n: int) -> int:\n    collisions = 0\n    for i in range(-n + 1, n):\n        left_to_right = i\n        right_to_left = -i\n        if left_to_right >= 0 and right_to_left < 0:\n            collisions += 1\n    return collisions\n",
    "HumanEval/42": "def incr_list(l: list):\n    new_list = []\n    for num in l:\n        new_list.append(num + 1)\n    return new_list\n",
    "HumanEval/43": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n",
    "HumanEval/44": "def change_base(x: int, base: int):\n    result = ''\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x //= base\n    return result or '0'\n",
    "HumanEval/45": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    area = 0.5 * a * h\n    return area\n",
    "HumanEval/46": "def fib4(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    \n    if n < 4:\n        return [0, 0, 2, 0][n]\n    \n    fib4_list = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        next_fib4 = sum(fib4_list[-4:])\n        fib4_list.append(next_fib4)\n    \n    return fib4_list[n]\n",
    "HumanEval/47": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    n = len(l)\n    if n % 2 != 0:\n        return l[n // 2]\n    else:\n        mid1 = l[n // 2 - 1]\n        mid2 = l[n // 2]\n        return (mid1 + mid2) / 2\n",
    "HumanEval/48": "def is_palindrome(text: str) -> bool:\n    left = 0\n    right = len(text) - 1\n\n    while left < right:\n        if text[left] != text[right]:\n            return False\n        left += 1\n        right -= 1\n\n    return True\n",
    "HumanEval/49": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    if n == 0:\n        return 1\n    \n    result = 1\n    for _ in range(n):\n        result = (result * 2) % p\n    \n    return result\n",
    "HumanEval/50": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
    "HumanEval/51": "def remove_vowels(text):\n    result = \"\"\n    for char in text:\n        if char.lower() not in 'aeiou':\n            result += char\n    return result\n",
    "HumanEval/52": "def below_threshold(l: list, t: int):\n    result = True\n    for x in l:\n        if x >= t:\n            result = False\n            break\n    return result\n",
    "HumanEval/53": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    \n    Args:\n        x (int): The first number to add.\n        y (int): The second number to add.\n    \n    Returns:\n        int: The sum of x and y.\n    \n    Examples:\n        >>> add(2, 3)\n        5\n        >>> add(5, 7)\n        12\n    \"\"\"\n    return x + y\n",
    "HumanEval/54": "def same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)\n",
    "HumanEval/55": "def fib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        fib_list = [0, 1]\n        for i in range(2, n+1):\n            fib_list.append(fib_list[i-1] + fib_list[i-2])\n        return fib_list[n]\n",
    "HumanEval/56": "def correct_bracketing(brackets: str):\n    count = 0\n    for char in brackets:\n        if char == \"<\":\n            count += 1\n        elif char == \">\":\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0\n",
    "HumanEval/57": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    increasing = False\n    decreasing = False\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i-1]:\n            increasing = True\n        elif l[i] < l[i-1]:\n            decreasing = True\n    \n    return (increasing and not decreasing) or (not increasing and decreasing)\n",
    "HumanEval/58": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    common_dict = {}\n    for item in l1:\n        if item in common_dict:\n            common_dict[item] += 1\n        else:\n            common_dict[item] = 1\n    for item in l2:\n        if item in common_dict:\n            common_dict[item] += 1\n    return sorted(common_dict.keys())\n",
    "HumanEval/59": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            n //= i\n        else:\n            i += 1\n    return n\n",
    "HumanEval/60": "def sum_to_n(n: int) -> int:\n    \"\"\"\n    sum_to_n is a function that sums numbers from 1 to n.\n    \n    Args:\n        n (int): The upper limit of the sum.\n    \n    Returns:\n        int: The sum of all numbers from 1 to n.\n    \n    Examples:\n        >>> sum_to_n(30)\n        465\n        >>> sum_to_n(100)\n        5050\n        >>> sum_to_n(5)\n        15\n        >>> sum_to_n(10)\n        55\n        >>> sum_to_n(1)\n        1\n    \"\"\"\n    return (n * (n + 1)) // 2\n",
    "HumanEval/61": "def correct_bracketing(brackets: str):\n    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n",
    "HumanEval/62": "def derivative(xs: list):\n    result = []\n    for i, x in enumerate(xs):\n        if i > 0:\n            result.append(i * x)\n    return result\n",
    "HumanEval/63": "def fibfib(n: int) -> int:\n    \"\"\"\n    Compute the n-th element of the FibFib number sequence.\n    \"\"\"\n    memo = {0: 0, 1: 0, 2: 1}  # base cases\n\n    def helper(n: int) -> int:\n        if n in memo:\n            return memo[n]\n        memo[n] = helper(n-1) + helper(n-2) + helper(n-3)\n        return memo[n]\n\n    return helper(n)\n",
    "HumanEval/64": "def vowels_count(s):\n    count = 0\n    for char in s:\n        if char.lower() in 'aeiou':\n            count += 1\n        elif char.lower() == 'y' and char == s[-1]:\n            count += 1\n    return count\n",
    "HumanEval/65": "def circular_shift(x, shift):\n    x_str = str(x)\n    length = len(x_str)\n    \n    if shift > length:\n        return x_str[::-1]\n    \n    right_part = x_str[-shift:]\n    left_part = x_str[:-shift]\n    return right_part + left_part\n",
    "HumanEval/66": "def digitSum(s):\n    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total\n",
    "HumanEval/67": "def fruit_distribution(s, n):\n    words = s.split()\n    apples_index = words.index(\"apples\")\n    oranges_index = words.index(\"oranges\")\n    num_apples = int(words[apples_index - 1])\n    num_oranges = int(words[oranges_index - 1])\n    num_mangoes = n - num_apples - num_oranges\n    return num_mangoes\n",
    "HumanEval/68": "def pluck(arr):\n    if not arr:\n        return []\n    \n    smallest_even = float('inf')\n    smallest_index = None\n    \n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_even:\n            smallest_even = num\n            smallest_index = i\n    \n    if smallest_index is None:\n        return []\n    else:\n        return [smallest_even, smallest_index]\n",
    "HumanEval/69": "def search(lst):\n    \"\"\"\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    \"\"\"\n    max_freq = 0\n    for num in set(lst):\n        freq = lst.count(num)\n        if freq >= num and freq > max_freq:\n            max_freq = freq\n    return max_freq if max_freq > 0 else -1\n",
    "HumanEval/70": "def strange_sort_list(lst):\n    if not lst:\n        return []\n\n    result = []\n    while lst:\n        result.append(min(lst))\n        lst.remove(min(lst))\n        if lst:\n            result.append(max(lst))\n            lst.remove(max(lst))\n    return result\n",
    "HumanEval/71": "def triangle_area(a, b, c):\n    if a + b <= c or b + c <= a or a + c <= b:\n        return -1\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return round(area, 2)\n",
    "HumanEval/72": "def will_it_fly(q, w):\n    total_weight = 0\n    for i in range(len(q)):\n        total_weight += q[i]\n        if q[i] != q[len(q) - 1 - i]:\n            return False\n    \n    if total_weight <= w:\n        return True\n    else:\n        return False\n",
    "HumanEval/73": "def smallest_change(arr):\n    n = len(arr)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for length in range(2, n+1):\n        for i in range(n-length+1):\n            j = i + length - 1\n            if arr[i] == arr[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    return n - dp[0][n-1]\n",
    "HumanEval/74": "def total_match(lst1, lst2):\n    total1 = sum(len(s) for s in lst1)\n    total2 = sum(len(s) for s in lst2)\n    \n    if total1 < total2:\n        return lst1\n    elif total2 < total1:\n        return lst2\n    else:\n        return lst1\n    \n    if not lst1 or not lst2:\n        return []\n",
    "HumanEval/75": "def is_multiply_prime(a):\n    \"\"\"Return True if the given number is the multiplication of 3 prime numbers, False otherwise.\"\"\"\n    if a < 100:\n        prime_factors = find_prime_factors(a)\n        return len(prime_factors) == 3\n\ndef find_prime_factors(n):\n    \"\"\"Find all the prime factors of a given number.\"\"\"\n    prime_factors = []\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            prime_factors.append(i)\n            n //= i\n        else:\n            i += 1\n    if n > 2:\n        prime_factors.append(n)\n    return prime_factors\n",
    "HumanEval/76": "def is_simple_power(x, n):\n    power = 0\n    while True:\n        result = n ** power\n        if result == x:\n            return True\n        elif result > x:\n            return False\n        power += 1\n",
    "HumanEval/77": "import math\n\ndef iscube(a):\n    \"\"\"\n    Write a function that takes an integer a and returns True \n    if this integer is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    \"\"\"\n    if a == 0:\n        return True\n    if a < 0:\n        a = -a\n    cube_root = a ** (1/3)\n    if cube_root.is_integer():\n        return True\n    else:\n        return False\n",
    "HumanEval/78": "def hex_key(num):\n    prime_hex_digits = [2, 3, 5, 7, 'B', 'D']\n    count = 0\n\n    for digit in num:\n        if digit.upper() in [str(d) for d in prime_hex_digits]:\n            count += 1\n\n    return count\n",
    "HumanEval/79": "def decimal_to_binary(decimal):\n    binary_str = \"\"\n    \n    while decimal > 0:\n        binary_str = str(decimal % 2) + binary_str\n        decimal //= 2\n    \n    return \"db\" + binary_str + \"db\"\n",
    "HumanEval/80": "def is_happy(s):\n    if len(s) < 3:\n        return False\n\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n\n    return True\n",
    "HumanEval/81": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grade = 'A+'\n        elif grade > 3.7:\n            letter_grade = 'A'\n        elif grade > 3.3:\n            letter_grade = 'A-'\n        elif grade > 3.0:\n            letter_grade = 'B+'\n        elif grade > 2.7:\n            letter_grade = 'B'\n        elif grade > 2.3:\n            letter_grade = 'B-'\n        elif grade > 2.0:\n            letter_grade = 'C+'\n        elif grade > 1.7:\n            letter_grade = 'C'\n        elif grade > 1.3:\n            letter_grade = 'C-'\n        elif grade > 1.0:\n            letter_grade = 'D+'\n        elif grade > 0.7:\n            letter_grade = 'D'\n        elif grade > 0.0:\n            letter_grade = 'D-'\n        else:\n            letter_grade = 'E'\n        letter_grades.append(letter_grade)\n    return letter_grades\n",
    "HumanEval/82": "def is_prime(num):\n    \"\"\"Helper function to check if a number is prime.\"\"\"\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise.\"\"\"\n    length = len(string)\n    return is_prime(length)\n",
    "HumanEval/83": "def starts_one_ends(n):\n    return 2 * 10**(n-1) - 10**(n-2)\n",
    "HumanEval/84": "def solve(N):\n    digits_sum = sum(int(digit) for digit in str(N))\n    return bin(digits_sum)[2:]\n",
    "HumanEval/85": "def add(lst):\n    \"\"\"\n    Given a non-empty list of integers lst, add the even elements that are at odd indices.\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2\n    \"\"\"\n    total = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            total += lst[i]\n    return total\n",
    "HumanEval/86": "def anti_shuffle(s):\n    words = s.split()\n    sorted_words = []\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        sorted_words.append(sorted_word)\n    result = ' '.join(sorted_words)\n    return result\n",
    "HumanEval/87": "def get_row(lst, x):\n    coordinates = []\n    for row_idx, row in enumerate(lst):\n        if x in row:\n            col_idx = row.index(x)\n            coordinates.append((row_idx, col_idx))\n            # No need to continue searching the current row\n            continue\n    return coordinates\n",
    "HumanEval/88": "def sort_array(array):\n    arr_copy = array[:]\n    first_element = arr_copy[0] if arr_copy else 0\n    last_element = arr_copy[-1] if arr_copy else 0\n    sum_of_first_last = first_element + last_element\n\n    if sum_of_first_last % 2 != 0:\n        arr_copy.sort()\n    else:\n        arr_copy.sort(reverse=True)\n\n    return arr_copy\n",
    "HumanEval/89": "def encrypt(s):\n    alphabet = {\n        'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8,\n        'j': 9, 'k': 10, 'l': 11, 'm': 12, 'n': 13, 'o': 14, 'p': 15, 'q': 16,\n        'r': 17, 's': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24, 'z': 25\n    }\n    result = ''\n    for char in s:\n        if char.lower() in alphabet:\n            index = alphabet[char.lower()]\n            new_index = (index + 4) % 26\n            for letter, i in alphabet.items():\n                if i == new_index:\n                    result += letter if char.isupper() else letter.lower()\n                    break\n    return result\n",
    "HumanEval/90": "def next_smallest(lst):\n    if not lst:\n        return None\n    \n    sorted_lst = sorted(lst)\n    \n    if len(sorted_lst) < 2:\n        return None\n    \n    return sorted_lst[1]\n",
    "HumanEval/91": "def is_bored(S):\n    count = 0\n    sentences = S.split('.')\n    for sentence in sentences:\n        sentence = sentence.strip()\n        if sentence.startswith('I '):\n            count += 1\n    return count\n",
    "HumanEval/92": "def any_int(x, y, z):\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    total = x + y + z\n    return x == total - x or y == total - y or z == total - z\n",
    "HumanEval/93": "def encode(message):\n    vowels = 'aeiou'\n    vowel_map = {v: chr(ord(v) + 2) for v in vowels}\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += vowel_map.get(char.lower(), '?')\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += ' '\n    return encoded_message\n",
    "HumanEval/94": "def skjkasdkd(lst):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    largest_prime = 0\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n    \n    digit_sum = 0\n    while largest_prime > 0:\n        digit_sum += largest_prime % 10\n        largest_prime //= 10\n    \n    return digit_sum\n",
    "HumanEval/95": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    \n    # Check if the dictionary is empty\n    if not dict:\n        return False\n    \n    # Initialize a flag to keep track of the case\n    is_lower = None\n    \n    # Iterate through the keys\n    for key in dict:\n        # Check if the key is a string\n        if not isinstance(key, str):\n            return False\n        \n        # Set the initial case flag\n        if is_lower is None:\n            is_lower = key.islower()\n        \n        # Check if the current key is consistent with the initial case\n        if is_lower != key.islower():\n            return False\n    \n    # If we made it this far, all keys are either all lowercase or all uppercase\n    return True\n",
    "HumanEval/96": "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    \"\"\"\n    prime_numbers = []\n    for i in range(2, n):\n        if is_prime(i):\n            prime_numbers.append(i)\n    return prime_numbers\n",
    "HumanEval/97": "",
    "HumanEval/98": "def count_upper(s):\n    count = 0\n    for i, char in enumerate(s):\n        if i % 2 == 0 and char.upper() in 'AEIOU':\n            count += 1\n    return count\n",
    "HumanEval/99": "def closest_integer(value):\n    num = float(value)\n    rounded_num = round(num)\n    if abs(num - rounded_num) == 0.5:\n        if num > 0:\n            rounded_num = int(rounded_num + 0.5)\n        else:\n            rounded_num = int(rounded_num - 0.5)\n    return rounded_num\n",
    "HumanEval/100": "def make_a_pile(n):\n    levels = [n]\n    for _ in range(n-1):\n        if n % 2 == 1:\n            levels.append(levels[-1] + 2)\n        else:\n            levels.append(levels[-1] + 2)\n    return levels\n",
    "HumanEval/101": "def words_string(s):\n    words = s.split(',')\n    words = [word.strip() for word in words]\n    words = [word for word in words if word]\n    return words\n",
    "HumanEval/102": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # Check if x and y are positive numbers\n    if x <= 0 or y <= 0:\n        return -1\n\n    # Check if y is even and greater than or equal to x\n    if y % 2 == 0 and y >= x:\n        return y\n    # Check if x is even\n    elif x % 2 == 0:\n        return x\n    else:\n        return -1\n",
    "HumanEval/103": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    total = (n + m) * (m - n + 1) // 2\n    avg = total / (m - n + 1)\n    rounded = round(avg)\n    binary = bin(rounded)[2:]\n    return f\"0b{binary}\"\n",
    "HumanEval/104": "def unique_digits(x):\n    result = []\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            result.append(num)\n    return sorted(result)\n",
    "HumanEval/105": "def by_length(arr):\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    valid_digits = [d for d in arr if 1 <= d <= 9]\n    valid_digits.sort()\n    valid_digits.reverse()\n    transformed_digits = [digit_names[d-1] for d in valid_digits]\n    return transformed_digits\n",
    "HumanEval/106": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            factorial = 1\n            for j in range(1, i+1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            total = 0\n            for j in range(1, i+1):\n                total += j\n            result.append(total)\n    return result\n",
    "HumanEval/107": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    seen = set()\n\n    for i in range(1, int(n**0.5) + 1):\n        # Check if the current number is a palindrome\n        if str(i) == str(i)[::-1]:\n            if i not in seen:\n                seen.add(i)\n                if i % 2 == 0:\n                    even_count += 1\n                else:\n                    odd_count += 1\n\n        # Check the reverse of the current number\n        reverse_i = int(str(i)[::-1])\n        if reverse_i not in seen:\n            seen.add(reverse_i)\n            if reverse_i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)\n",
    "HumanEval/108": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        digit_sum = 0\n        num = abs(num)\n        while num > 0:\n            digit_sum += num % 10\n            num //= 10\n        if digit_sum > 0:\n            count += 1\n    return count\n",
    "HumanEval/109": "def move_one_ball(arr):\n    \"\"\"\n    Given an array of integers, determine if it is possible to get the array\n    sorted in non-decreasing order by performing right shift operations.\n    \"\"\"\n    if not arr:\n        return True\n    \n    sorted_arr = sorted(arr)\n    \n    for _ in range(len(arr)):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    \n    return False\n",
    "HumanEval/110": "def exchange(lst1, lst2):\n    even_lst1 = [num for num in lst1 if num % 2 == 0]\n    for num in lst2:\n        if num % 2 == 0:\n            even_lst1.append(num)\n    return \"YES\" if len(even_lst1) == len(lst1) else \"NO\"\n",
    "HumanEval/111": "from collections import defaultdict\n\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    letter_counts = defaultdict(int)\n    \n    for char in test:\n        letter_counts[char] += 1\n    \n    max_count = max(letter_counts.values())\n    \n    return {k: v for k, v in letter_counts.items() if v == max_count}\n",
    "HumanEval/112": "def reverse_delete(s, c):\n    result = \"\"\n    for char in s:\n        if char not in c:\n            result += char\n    is_palindrome = result == result[::-1]\n    return (result, is_palindrome)\n",
    "HumanEval/113": "def odd_count(lst):\n    output = []\n    for string in lst:\n        odd_count = len([digit for digit in string if int(digit) % 2 == 1])\n        output.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return output\n",
    "HumanEval/114": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n\n    min_so_far = nums[0]\n    min_ending_here = nums[0]\n\n    for i in range(1, len(nums)):\n        min_ending_here = min(nums[i], min_ending_here + nums[i])\n        min_so_far = min(min_so_far, min_ending_here)\n\n    return min_so_far\n",
    "HumanEval/115": "import math\n\ndef max_fill(grid, capacity):\n    total_fills = 0\n    for row in grid:\n        total_fills += math.ceil(sum(row) / capacity)\n    return int(total_fills)\n",
    "HumanEval/116": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    sorted_arr = sorted((bin(abs(x)).count('1'), abs(x), i) for i, x in enumerate(arr))\n    return [arr[i] for _, _, i in sorted_arr]\n",
    "HumanEval/117": "def select_words(s, n):\n    if not s:\n        return []\n\n    vowels = set('aeiou')\n    matching_words = []\n\n    for word in s.split():\n        consonants = sum(1 for char in word if char.isalpha() and char.lower() not in vowels)\n        if consonants == n:\n            matching_words.append(word)\n\n    return matching_words\n",
    "HumanEval/118": "def get_closest_vowel(word):\n    vowels = 'aeiou'\n    closest_vowel = ''\n    prev_char = ''\n    \n    for char in word:\n        if char in vowels and prev_char not in vowels:\n            closest_vowel = char\n        prev_char = char\n    \n    return closest_vowel\n",
    "HumanEval/119": "def is_balanced(s):\n    open_count = 0\n    for char in s:\n        if char == '(':\n            open_count += 1\n        else:\n            if open_count == 0:\n                return False\n            open_count -= 1\n    return open_count == 0\n\ndef match_parens(lst):\n    s1, s2 = lst\n    if is_balanced(s1 + s2) or is_balanced(s2 + s1):\n        return 'Yes'\n    else:\n        return 'No'\n",
    "HumanEval/120": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]\n",
    "HumanEval/121": "def solution(lst):\n    total_sum = 0\n    for i, num in enumerate(lst):\n        if i % 2 == 0 and num % 2 != 0:\n            total_sum += num\n    return total_sum\n",
    "HumanEval/122": "def add_elements(arr, k):\n    total = 0\n    \n    for i in range(min(k, len(arr))):\n        element = arr[i]\n        if 0 <= element < 100:\n            total += element\n    \n    return total\n",
    "HumanEval/123": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_collatz = []\n    \n    while n != 1:\n        if n % 2 == 0:  # If the current number is even\n            n = n // 2\n        else:  # If the current number is odd\n            n = 3 * n + 1\n            odd_collatz.append(n)\n    \n    odd_collatz.sort()\n    return odd_collatz\n",
    "HumanEval/124": "def valid_date(date):\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    month = int(parts[0])\n    day = int(parts[1])\n    year = int(parts[2])\n    if month < 1 or month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    return True\n",
    "HumanEval/125": "def split_words(txt):\n    if \",\" in txt:\n        return txt.split(\",\")\n    elif \" \" in txt:\n        return txt.split()\n    else:\n        count = 0\n        for char in txt:\n            if char.islower():\n                pos = ord(char) - ord('a')\n                if pos % 2 == 0:\n                    count += 1\n        return count\n",
    "HumanEval/126": "def is_sorted(lst):\n    if len(lst) <= 1:\n        return True\n    \n    if len(set(lst)) < len(lst):\n        return False\n    \n    sorted_lst = sorted(lst)\n    return lst == sorted_lst\n",
    "HumanEval/127": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n\n    max_start = max(start1, start2)\n    min_end = min(end1, end2)\n\n    if max_start > min_end:\n        return \"NO\"\n\n    length = min_end - max_start + 1\n\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"\n",
    "HumanEval/128": "def prod_signs(arr):\n    if not arr:\n        return None\n\n    product_of_signs = 1\n    sum_of_magnitudes = 0\n\n    for num in arr:\n        if num > 0:\n            product_of_signs *= 1\n        elif num < 0:\n            product_of_signs *= -1\n        else:\n            product_of_signs *= 0\n\n        sum_of_magnitudes += abs(num)\n\n    return product_of_signs * sum_of_magnitudes\n",
    "HumanEval/129": "from heapq import heappush, heappop\n\ndef minPath(grid, k):\n    n = len(grid)\n    visited = [[False] * n for _ in range(n)]\n\n    def dijkstra(start):\n        pq = [(0, start, [start])]\n        while pq:\n            path_len, curr, path = heappop(pq)\n            if len(path) == k:\n                return path\n            if not visited[curr[0]][curr[1]]:\n                visited[curr[0]][curr[1]] = True\n                for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                    x, y = curr\n                    nx, ny = x + dx, y + dy\n                    if 0 <= nx < n and 0 <= ny < n:\n                        heappush(pq, (path_len + 1, (nx, ny), path + [grid[nx][ny]]))\n        return []\n\n    for i in range(n):\n        for j in range(n):\n            path = dijkstra((i, j))\n            if path:\n                return path\n\n    return []\n",
    "HumanEval/130": "def tri(n):\n    tribonacci = [3]\n    \n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i // 2)\n        else:\n            tribonacci.append(tribonacci[-1] + tribonacci[-2] + tribonacci[i - 2])\n    \n    return tribonacci\n",
    "HumanEval/131": "def digits(n):\n    product = 1\n    for digit in str(n):\n        digit_int = int(digit)\n        if digit_int % 2 == 1:\n            product *= digit_int\n        if product == 0:\n            return 0\n    return product\n",
    "HumanEval/132": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n",
    "HumanEval/133": "import math\n\ndef sum_squares(lst):\n    result = 0\n    for num in lst:\n        rounded_num = math.ceil(num)\n        squared_num = rounded_num ** 2\n        result += squared_num\n    return result\n",
    "HumanEval/134": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    words = txt.split()\n    last_word = words[-1]\n    return last_word and last_word[-1].isalpha()\n",
    "HumanEval/135": "def can_arrange(arr):\n    max_idx = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            max_idx = i\n    return max_idx\n",
    "HumanEval/136": "def largest_smallest_integers(lst):\n    largest_negative = None\n    smallest_positive = None\n\n    for num in lst:\n        if num < 0 and (largest_negative is None or num > largest_negative):\n            largest_negative = num\n        elif num > 0 and (smallest_positive is None or num < smallest_positive):\n            smallest_positive = num\n\n    return (largest_negative, smallest_positive)\n",
    "HumanEval/137": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n    \"\"\"\n    try:\n        a_float = float(str(a).replace(\",\", \".\"))\n        b_float = float(str(b).replace(\",\", \".\"))\n        if a_float > b_float:\n            return a\n        elif b_float > a_float:\n            return b\n        else:\n            return None\n    except ValueError:\n        return None\n",
    "HumanEval/138": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    if n < 8 or n % 2 != 0:\n        return False\n    return n % 4 == 0\n",
    "HumanEval/139": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    result = 1\n    for i in range(n, 0, -1):\n        result *= i\n    return result\n",
    "HumanEval/140": "def fix_spaces(text):\n    modified_text = \"\"\n    prev_char = None\n    for char in text:\n        if char == \" \":\n            if prev_char == \" \":\n                modified_text += \"-\"\n            else:\n                modified_text += \"_\"\n        else:\n            modified_text += char\n        prev_char = char\n    return modified_text\n",
    "HumanEval/141": "def file_name_check(file_name):\n    # Check if the file name contains any digits\n    if any(char.isdigit() for char in file_name):\n        return 'No'\n    \n    # Check if the file name contains exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Check if the substring before the dot starts with a letter\n    before_dot = file_name.split('.')[0]\n    if not before_dot.isalpha():\n        return 'No'\n    \n    # Check if the substring after the dot is one of ['txt', 'exe', 'dll']\n    after_dot = file_name.split('.')[-1]\n    if after_dot not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'\n",
    "HumanEval/142": "def sum_squares(lst):\n    total = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            total += num ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            total += num ** 3\n        else:\n            total += num\n    return total\n",
    "HumanEval/143": "def words_in_sentence(sentence):\n    words = sentence.split()\n    prime_words = []\n    for word in words:\n        word_length = len(word)\n        if is_prime(word_length):\n            prime_words.append(word)\n    return ' '.join(prime_words)\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
    "HumanEval/144": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    product_num = x_num * n_num\n    product_den = x_den * n_den\n    return product_num % product_den == 0\n",
    "HumanEval/145": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))\n",
    "HumanEval/146": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            first_digit = abs(num) // 10 % 10\n            last_digit = abs(num) % 10\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return count\n",
    "HumanEval/147": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    count = 0\n    \n    for i in range(n):\n        if a[i] % 3 == 0:\n            for j in range(i+1, n):\n                if (a[j] + a[i]) % 3 == 0:\n                    count += 1\n    \n    return count\n",
    "HumanEval/148": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    p1_index = planets.index(planet1)\n    p2_index = planets.index(planet2)\n    \n    return tuple(planets[p1_index+1:p2_index])\n",
    "HumanEval/149": "def sorted_list_sum(lst):\n    new_list = []\n    for word in lst:\n        if len(word) % 2 == 0:\n            new_list.append(word)\n    new_list.sort(key=len)\n    new_list.sort()\n    return new_list\n",
    "HumanEval/150": "def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \"\"\"\n    if n < 2:\n        return y\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
    "HumanEval/151": "def double_the_difference(lst):\n    sum_of_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0 and num % 2 == 1:\n            sum_of_squares += num ** 2\n    return sum_of_squares\n",
    "HumanEval/152": "def compare(game, guess):\n    result = []\n    for i in range(len(game)):\n        diff = abs(game[i] - guess[i])\n        if diff == 0:\n            result.append(0)\n        else:\n            result.append(diff)\n    return result\n",
    "HumanEval/153": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    strongest_strength = float('-inf')\n\n    for extension in extensions:\n        cap = sum(1 for char in extension if char.isupper())\n        sm = sum(1 for char in extension if char.islower())\n        strength = cap - sm\n\n        if strength > strongest_strength:\n            strongest_strength = strength\n            strongest_extension = extension\n        elif strength == strongest_strength and extensions.index(extension) < extensions.index(strongest_extension):\n            strongest_extension = extension\n\n    return f\"{class_name}.{strongest_extension}\"\n",
    "HumanEval/154": "def cycpattern_check(a, b):\n    double_a = a + a\n    return b in double_a\n",
    "HumanEval/155": "def even_odd_count(num):\n    num = abs(num)\n    num_str = str(num)\n    even_count = 0\n    odd_count = 0\n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n",
    "HumanEval/156": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if not 1 <= number <= 1000:\n        raise ValueError(\"Number must be between 1 and 1000 inclusive.\")\n\n    roman_numerals = {\n        1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c',\n        90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'\n    }\n\n    result = ''\n    for key in sorted(roman_numerals.keys(), reverse=True):\n        while number >= key:\n            result += roman_numerals[key]\n            number -= key\n\n    return result\n",
    "HumanEval/157": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[2]**2 == sides[0]**2 + sides[1]**2\n",
    "HumanEval/158": "def find_max(words):\n    max_unique_chars = 0\n    max_word = \"\"\n\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word\n        elif unique_chars == max_unique_chars and word < max_word:\n            max_word = word\n\n    return max_word\n",
    "HumanEval/159": "def eat(number, need, remaining):\n    if not (0 <= number <= 1000 and 0 <= need <= 1000 and 0 <= remaining <= 1000):\n        raise ValueError(\"Input values must be between 0 and 1000 (inclusive)\")\n    \n    total_eaten = number + min(need, remaining)\n    carrots_left = max(0, remaining - need)\n    \n    return [total_eaten, carrots_left]\n",
    "HumanEval/160": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result\n",
    "HumanEval/161": "def solve(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    if not result:\n        return s[::-1]\n    return result\n",
    "HumanEval/162": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n\n    md5_hash = hashlib.md5(text.encode())\n    return md5_hash.hexdigest()\n",
    "HumanEval/163": "def generate_integers(a, b):\n    even_digits = []\n    for num in range(a, b+1):\n        if num % 2 == 0:\n            even_digits.append(num)\n    even_digits.sort()\n    return even_digits\n"
}