{
    "HumanEval/0": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n",
    "HumanEval/1": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    start = 0\n    stack = []\n\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            stack.append(i)\n        elif char == ')':\n            if stack:\n                if len(stack) == 1:\n                    result.append(paren_string[stack[0]:i+1])\n                    start = i + 1\n                stack.pop()\n\n    return result\n",
    "HumanEval/2": "import math\n\ndef truncate_number(number: float) -> float:\n    return math.modf(number)[0]\n",
    "HumanEval/3": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
    "HumanEval/4": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    absolute_differences = [abs(num - mean) for num in numbers]\n    mad = sum(absolute_differences) / len(numbers)\n    return mad\n",
    "HumanEval/5": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result\n",
    "HumanEval/6": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    groups = paren_string.split()\n    \n    for group in groups:\n        current_level = 0\n        max_level = 0\n        \n        for char in group:\n            if char == '(':\n                current_level += 1\n            elif char == ')':\n                current_level -= 1\n            \n            max_level = max(max_level, current_level)\n        \n        result.append(max_level)\n    \n    return result\n",
    "HumanEval/7": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    filtered_strings = [s for s in strings if substring in s]\n    return filtered_strings\n",
    "HumanEval/8": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_of_numbers = 0\n    product_of_numbers = 1\n\n    for number in numbers:\n        sum_of_numbers += number\n        product_of_numbers *= number\n\n    return sum_of_numbers, product_of_numbers\n",
    "HumanEval/9": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n    current_max = float('-inf')\n\n    for num in numbers:\n        current_max = max(current_max, num)\n        result.append(current_max)\n\n    return result\n",
    "HumanEval/10": "def make_palindrome(string: str) -> str:\n    if not string:\n        return \"\"\n\n    s = string + \"#\" + string[::-1]\n    prefix_table = build_prefix_table(s)\n    longest_palindromic_prefix = s[: prefix_table[-1]]\n    return string + longest_palindromic_prefix[len(string):]\n\ndef build_prefix_table(s: str) -> list[int]:\n    prefix_table = [0] * len(s)\n    j = 0\n    for i in range(1, len(s)):\n        while j > 0 and s[i] != s[j]:\n            j = prefix_table[j - 1]\n        if s[i] == s[j]:\n            j += 1\n        prefix_table[i] = j\n    return prefix_table\n",
    "HumanEval/11": "def string_xor(a: str, b: str) -> str:\n    \"\"\"\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    \n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n",
    "HumanEval/12": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    \n    longest_str = strings[0]\n    for s in strings:\n        if len(s) > len(longest_str):\n            longest_str = s\n    \n    return longest_str\n",
    "HumanEval/13": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Return a greatest common divisor of two integers a and b.\n    \n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    if b == 0:\n        return a\n    return greatest_common_divisor(b, a % b)\n",
    "HumanEval/14": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes\n",
    "HumanEval/15": "def string_sequence(n: int) -> str:\n    output = \"\"\n    for i in range(n+1):\n        output += str(i) + \" \"\n    return output.strip()\n",
    "HumanEval/16": "def count_distinct_characters(string: str) -> int:\n    distinct_chars = set()\n    for char in string:\n        distinct_chars.add(char.lower())\n    return len(distinct_chars)\n",
    "HumanEval/17": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    note_map = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        beats.append(note_map[note])\n    return beats\n",
    "HumanEval/18": "def how_many_times(string: str, substring: str) -> int:\n    if not string or not substring:\n        return 0\n    return string.count(substring)\n",
    "HumanEval/19": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest.\n    \n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    \n    word_list = numbers.split()\n    \n    word_to_num = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    \n    sorted_words = sorted(word_list, key=lambda x: word_to_num[x])\n    \n    return ' '.join(sorted_words)\n",
    "HumanEval/20": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    if len(numbers) < 2:\n        raise ValueError(\"Input list must have at least two elements\")\n\n    numbers.sort()\n    min_diff = float('inf')\n    num1 = num2 = 0\n\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            num1 = numbers[i]\n            num2 = numbers[i + 1]\n\n    return (num1, num2)\n",
    "HumanEval/21": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1.\n    \n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"Input list must have at least two elements.\")\n    \n    min_value = min(numbers)\n    max_value = max(numbers)\n    \n    transformed_numbers = [(x - min_value) / (max_value - min_value) for x in numbers]\n    \n    return transformed_numbers\n",
    "HumanEval/22": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\"Filter given list of any python values only for integers.\n\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]\n",
    "HumanEval/23": "def strlen(string: str) -> int:\n    \"\"\"\n    Return length of given string.\n\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n",
    "HumanEval/24": "import math\n\ndef largest_divisor(n: int) -> int:\n    \"\"\"\n    For a given number n, find the largest number that divides n evenly, smaller than n.\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    sqrt_n = int(math.sqrt(n))\n    for i in range(sqrt_n, 0, -1):\n        if n % i == 0:\n            return i\n    return 1\n",
    "HumanEval/25": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while n > 1:\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            i += 1\n    return factors\n",
    "HumanEval/26": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    unique_elements = set()\n    result = []\n\n    for num in numbers:\n        if num not in unique_elements:\n            unique_elements.add(num)\n            result.append(num)\n\n    return result\n",
    "HumanEval/27": "def flip_case(string: str) -> str:\n    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result\n",
    "HumanEval/28": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)\n",
    "HumanEval/29": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    filtered_strings = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered_strings.append(string)\n    return filtered_strings\n",
    "HumanEval/30": "def get_positive(l: list):\n    positive_numbers = []\n    for num in l:\n        if num > 0:\n            positive_numbers.append(num)\n    return positive_numbers\n",
    "HumanEval/31": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    \n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    \n    return True\n",
    "HumanEval/32": "import math\n\ndef find_zero(xs: list):\n    \"\"\"\n    Finds the zero point of a polynomial given its coefficients.\n    The polynomial must have an even number of coefficients, and the largest non-zero\n    coefficient must be the first one.\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"The number of coefficients must be even.\")\n    \n    for i in range(0, len(xs), 2):\n        a = xs[i]\n        b = xs[i+1]\n        \n        discriminant = b**2 - 4 * a * xs[i+2]\n        if discriminant >= 0:\n            x = (-b + math.sqrt(discriminant)) / (2 * a)\n            return x\n    \n    raise ValueError(\"No zero point found.\")\n",
    "HumanEval/33": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [5, 6, 3, 4, 8, 9, 2]\n    \"\"\"\n    result = l.copy()\n    for i in range(0, len(result), 3):\n        result[i:i+3] = sorted(result[i:i+3])\n    return result\n",
    "HumanEval/34": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n",
    "HumanEval/35": "def max_element(l: list):\n    if not l:\n        return None\n    \n    max_val = l[0]\n    for x in l[1:]:\n        if x > max_val:\n            max_val = x\n    \n    return max_val\n",
    "HumanEval/36": "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if '7' in str(i) and (i % 11 == 0 or i % 13 == 0):\n            count += 1\n    return count\n",
    "HumanEval/37": "def sort_even(l: list):\n    sorted_list = []\n    even_values = []\n    \n    for i, value in enumerate(l):\n        if i % 2 == 0:\n            even_values.append(value)\n        else:\n            sorted_list.append(value)\n    \n    even_values.sort()\n    \n    for i, value in enumerate(sorted_list):\n        if i % 2 == 0:\n            sorted_list[i] = even_values[i // 2]\n    \n    return sorted_list\n",
    "HumanEval/38": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    \n    # reverse the cyclic shift for each group\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    \n    return \"\".join(groups)\n",
    "HumanEval/39": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    i = 0\n    fib = 0\n    num = 1\n    prev_num = 0\n    while i < n:\n        if is_prime(fib):\n            i += 1\n        prev_num, num = num, num + prev_num\n        fib = num\n    return fib\n",
    "HumanEval/40": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    if len(l) < 3:\n        return False\n    \n    l.sort()\n    \n    for i in range(len(l) - 2):\n        if i > 0 and l[i] == l[i-1]:\n            continue\n        \n        left = i + 1\n        right = len(l) - 1\n        \n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    \n    return False\n",
    "HumanEval/41": "def car_race_collision(n: int) -> int:\n    return n * (n - 1)\n",
    "HumanEval/42": "def incr_list(l: list):\n    new_list = []\n    for x in l:\n        new_list.append(x + 1)\n    return new_list\n",
    "HumanEval/43": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    l.sort()\n    left, right = 0, len(l) - 1\n\n    while left < right:\n        total = l[left] + l[right]\n        if total == 0:\n            return True\n        elif total < 0:\n            left += 1\n        else:\n            right -= 1\n\n    return False\n",
    "HumanEval/44": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    result = \"\"\n    while x > 0:\n        remainder = str(x % base)\n        result = remainder + result\n        x //= base\n    return result or \"0\"\n",
    "HumanEval/45": "",
    "HumanEval/46": "def fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 0\n    elif n == 3:\n        return 2\n    \n    fib4_list = [0, 0, 2, 0]\n    \n    for i in range(4, n+1):\n        fib4_i = fib4_list[i-1] + fib4_list[i-2] + fib4_list[i-3] + fib4_list[i-4]\n        fib4_list.append(fib4_i)\n    \n    return fib4_list[n]\n",
    "HumanEval/47": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if not l:\n        raise ValueError(\"Input list cannot be empty\")\n\n    sorted_l = sorted(l)\n    length = len(sorted_l)\n\n    if length % 2 == 1:\n        return sorted_l[length // 2]\n    else:\n        middle1 = sorted_l[length // 2 - 1]\n        middle2 = sorted_l[length // 2]\n        return (middle1 + middle2) / 2\n",
    "HumanEval/48": "def is_palindrome(text: str):\n    left = 0\n    right = len(text) - 1\n\n    while left < right:\n        if text[left] != text[right]:\n            return False\n        left += 1\n        right -= 1\n\n    return True\n",
    "HumanEval/49": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    result = 1\n    base = 2\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * base) % p\n        base = (base * base) % p\n        n = n // 2\n    return result\n",
    "HumanEval/50": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr((ord(ch) - 5 - ord(\"a\")) % 26 + ord(\"a\")) for ch in s])\n",
    "HumanEval/51": "def remove_vowels(text):\n    result = \"\"\n    for char in text:\n        if char.lower() not in \"aeiou\":\n            result += char\n    return result\n",
    "HumanEval/52": "def below_threshold(l: list, t: int):\n    is_below = True\n    for num in l:\n        if num >= t:\n            is_below = False\n            break\n    return is_below\n",
    "HumanEval/53": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    \n    Args:\n        x (int): The first number to be added.\n        y (int): The second number to be added.\n    \n    Returns:\n        int: The sum of x and y.\n    \n    Examples:\n        >>> add(2, 3)\n        5\n        >>> add(5, 7)\n        12\n    \"\"\"\n    return x + y\n",
    "HumanEval/54": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n",
    "HumanEval/55": "def fib(n: int) -> int:\n    if n < 2:\n        return n\n    \n    fib_0 = 0\n    fib_1 = 1\n    for i in range(2, n+1):\n        fib_0, fib_1 = fib_1, fib_0 + fib_1\n    return fib_1\n",
    "HumanEval/56": "def correct_bracketing(brackets: str):\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n",
    "HumanEval/57": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] < l[i-1]:\n            increasing = False\n        if l[i] > l[i-1]:\n            decreasing = False\n    \n    return increasing or decreasing\n",
    "HumanEval/58": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    result = []\n    for num in l1:\n        if num in l2:\n            result.append(num)\n    return sorted(list(set(result)))\n",
    "HumanEval/59": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    max_prime = 2\n    i = 2\n    \n    while i * i <= n:\n        if n % i == 0:\n            max_prime = max(max_prime, i)\n        i += 1\n    \n    if max_prime == 2:\n        return n\n    else:\n        return max_prime\n",
    "HumanEval/60": "def sum_to_n(n: int) -> int:\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total\n",
    "HumanEval/61": "def correct_bracketing(brackets: str):\n    count = 0\n    for char in brackets:\n        if char == '(':\n            count += 1\n        elif char == ')':\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0\n",
    "HumanEval/62": "def derivative(xs: list):\n    \"\"\"\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    result = []\n    for i, coeff in enumerate(xs):\n        if i == 0:\n            result.append(0)  # Derivative of constant term is 0\n        else:\n            result.append(i * coeff)\n    return result\n",
    "HumanEval/63": "def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    memo = {0: 0, 1: 0, 2: 1}\n\n    def helper(n):\n        if n in memo:\n            return memo[n]\n        memo[n] = helper(n-1) + helper(n-2) + helper(n-3)\n        return memo[n]\n\n    return helper(n)\n",
    "HumanEval/64": "def vowels_count(s):\n    count = 0\n    for char in s:\n        if char.lower() in 'aeiou':\n            count += 1\n        elif char.lower() == 'y' and s.endswith(char):\n            count += 1\n    return count\n",
    "HumanEval/65": "def circular_shift(x, shift):\n    num_str = str(x)\n    num_digits = len(num_str)\n    if shift < num_digits:\n        shifted_digits = num_str[-shift:] + num_str[:-shift]\n    else:\n        shifted_digits = num_str[::-1]\n    return shifted_digits\n",
    "HumanEval/66": "def digitSum(s):\n    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total\n",
    "HumanEval/67": "def fruit_distribution(s, n):\n    words = s.split()\n    apples = 0\n    oranges = 0\n    for i in range(len(words)):\n        if words[i] == \"apples\":\n            apples = int(words[i-1])\n        elif words[i] == \"oranges\":\n            oranges = int(words[i-1])\n    mangos = n - apples - oranges\n    return mangos\n",
    "HumanEval/68": "def pluck(arr):\n    if not arr:\n        return []\n    \n    smallest_even = float('inf')\n    smallest_even_index = None\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_even:\n            smallest_even = num\n            smallest_even_index = i\n    \n    if smallest_even_index is None:\n        return []\n    \n    return [smallest_even, smallest_even_index]\n",
    "HumanEval/69": "def search(lst):\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    result = -1\n    for num, count in freq.items():\n        if count >= num and num > result:\n            result = num\n\n    return result\n",
    "HumanEval/70": "def strange_sort_list(lst):\n    sorted_list = []\n    while lst:\n        sorted_list.append(min(lst))\n        lst.remove(min(lst))\n        if lst:\n            sorted_list.append(max(lst))\n            lst.remove(max(lst))\n    return sorted_list\n",
    "HumanEval/71": "import math\n\ndef triangle_area(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    return round(area, 2)\n",
    "HumanEval/72": "def will_it_fly(q, w):\n    total = sum(q)\n    return total <= w\n",
    "HumanEval/73": "def smallest_change(arr):\n    n = len(arr)\n    dp = [[1 for _ in range(n)] for _ in range(n)]\n\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if arr[i] == arr[j]:\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n    return n - dp[0][n - 1]\n",
    "HumanEval/74": "def total_match(lst1, lst2):\n    total1 = sum(len(s) for s in lst1)\n    total2 = sum(len(s) for s in lst2)\n    if total1 <= total2:\n        return lst1\n    else:\n        return lst2\n",
    "HumanEval/75": "def is_prime(n):\n    \"\"\"Checks if a number is prime\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a):\n    \"\"\"Checks if a number is the multiplication of 3 prime numbers\"\"\"\n    if a < 100:\n        for i in range(2, int(a ** 0.5) + 1):\n            if a % i == 0:\n                j = a // i\n                if is_prime(i) and is_prime(j) and is_prime(a // (i * j)):\n                    return True\n    return False\n",
    "HumanEval/76": "import math\n\ndef is_simple_power(x, n):\n    \"\"\"\n    Returns True if x is a simple power of n, False otherwise.\n    \"\"\"\n    # Base case: if x is 1, it is a simple power of any n\n    if x == 1:\n        return True\n\n    # Calculate the logarithm of x with base n\n    log_x_n = math.log(x, n)\n\n    # Check if the logarithm is an integer\n    return log_x_n.is_integer()\n",
    "HumanEval/77": "import math\n\ndef iscube(a):\n    abs_a = abs(a)\n    cube_root = abs_a ** (1/3)\n    return cube_root.is_integer()\n",
    "HumanEval/78": "def hex_key(num):\n    prime_digits = [2, 3, 5, 7, 11, 13]\n    count = 0\n    \n    for char in num:\n        if char.isdigit():\n            digit = int(char)\n        else:\n            digit = ord(char.upper()) - ord('A') + 10\n        \n        if digit in prime_digits:\n            count += 1\n    \n    return count\n",
    "HumanEval/79": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return f\"db{binary}db\"\n",
    "HumanEval/80": "",
    "HumanEval/81": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade = 'A+'\n        elif gpa > 3.7:\n            letter_grade = 'A'\n        elif gpa > 3.3:\n            letter_grade = 'A-'\n        elif gpa > 3.0:\n            letter_grade = 'B+'\n        elif gpa > 2.7:\n            letter_grade = 'B'\n        elif gpa > 2.3:\n            letter_grade = 'B-'\n        elif gpa > 2.0:\n            letter_grade = 'C+'\n        elif gpa > 1.7:\n            letter_grade = 'C'\n        elif gpa > 1.3:\n            letter_grade = 'C-'\n        elif gpa > 1.0:\n            letter_grade = 'D+'\n        elif gpa > 0.7:\n            letter_grade = 'D'\n        elif gpa > 0.0:\n            letter_grade = 'D-'\n        else:\n            letter_grade = 'E'\n        letter_grades.append(letter_grade)\n    return letter_grades\n",
    "HumanEval/82": "def is_prime(n):\n    \"\"\"\n    Helper function to check if a number is prime.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    \"\"\"\n    Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise.\n    \"\"\"\n    length = len(string)\n    return is_prime(length)\n",
    "HumanEval/83": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    total = 10 ** n\n    starts_with_1 = 10 ** (n - 1)\n    ends_with_1 = 10 ** (n - 1)\n    both_1 = 1\n    return starts_with_1 + ends_with_1 - both_1\n",
    "HumanEval/84": "def solve(N):\n    binary_digits = [bin(int(digit))[2:] for digit in str(N)]\n    binary_sum = \"\".join(binary_digits)\n    return binary_sum\n",
    "HumanEval/85": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst, add the even elements that are at odd indices.\"\"\"\n    total = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            total += lst[i]\n    return total\n",
    "HumanEval/86": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = []\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        ordered_words.append(sorted_word)\n    return ' '.join(ordered_words)\n",
    "HumanEval/87": "def get_row(lst, x):\n    coordinates = []\n\n    for row, row_items in enumerate(lst):\n        for col, item in enumerate(row_items):\n            if item == x:\n                coordinates.append((row, col))\n\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coordinates\n",
    "HumanEval/88": "def sort_array(array):\n    if not array:\n        return []\n    \n    if len(array) == 1:\n        return array.copy()\n    \n    first = array[0]\n    last = array[-1]\n    total = first + last\n    \n    if total % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n",
    "HumanEval/89": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    \n    # Define the alphabet mapping\n    alphabet_lower = 'abcdefghijklmnopqrstuvwxyz'\n    alphabet_upper = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    \n    # Iterate through each character in the input string\n    encrypted_chars = []\n    for char in s:\n        # Check if the character is a letter\n        if char.isalpha():\n            # Find the position of the character in the alphabet\n            if char.islower():\n                pos = alphabet_lower.index(char)\n            else:\n                pos = alphabet_upper.index(char)\n            \n            # Shift the position by 4 places\n            new_pos = (pos + 4) % len(alphabet_lower)\n            \n            # Replace the character with the new shifted character\n            if char.islower():\n                encrypted_chars.append(alphabet_lower[new_pos])\n            else:\n                encrypted_chars.append(alphabet_upper[new_pos])\n        else:\n            # Keep non-alphabetic characters as-is\n            encrypted_chars.append(char)\n    \n    # Return the encrypted string\n    return ''.join(encrypted_chars)\n",
    "HumanEval/90": "def next_smallest(lst):\n    if not lst:\n        return None\n    \n    sorted_lst = sorted(lst)\n    if len(sorted_lst) < 2:\n        return None\n    \n    return sorted_lst[1]\n",
    "HumanEval/91": "def is_bored(S):\n    boredom_count = 0\n    sentences = S.split(\". \")\n    sentences.extend(S.split(\"? \"))\n    sentences.extend(S.split(\"! \"))\n    \n    for sentence in sentences:\n        if sentence.startswith(\"I \"):\n            boredom_count += 1\n    \n    return boredom_count\n",
    "HumanEval/92": "def any_int(x, y, z):\n    return all(isinstance(num, int) for num in (x, y, z)) and (x + y == z)\n",
    "HumanEval/93": "def encode(message):\n    vowels = 'aeiou'\n    encoded_message = ''\n    \n    for char in message:\n        if char.isalpha():\n            encoded_message += char.swapcase()\n        elif char.lower() in vowels:\n            encoded_message += '*'\n        else:\n            encoded_message += char\n    \n    return encoded_message\n",
    "HumanEval/94": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef skjkasdkd(lst):\n    largest_prime = 0\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n\n    digit_sum = 0\n    while largest_prime > 0:\n        digit_sum += largest_prime % 10\n        largest_prime //= 10\n\n    return digit_sum\n",
    "HumanEval/95": "def check_dict_case(dict_):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict_:\n        return False\n\n    all_lower = True\n    all_upper = True\n\n    for key in dict_:\n        if not isinstance(key, str):\n            return False\n        if not key.islower():\n            all_lower = False\n        if not key.isupper():\n            all_upper = False\n\n    return all_lower or all_upper\n",
    "HumanEval/96": "def count_up_to(n):\n    primes = []\n    if n <= 1:\n        return primes\n\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n\n    return primes\n",
    "HumanEval/97": "def multiply(a, b):\n    a_unit = abs(a) % 10\n    b_unit = abs(b) % 10\n    return a_unit * b_unit\n",
    "HumanEval/98": "def count_upper(s):\n    count = 0\n    for i, char in enumerate(s):\n        if i % 2 == 0 and char.upper() in 'AEIOU':\n            count += 1\n    return count\n",
    "HumanEval/99": "import math\n\ndef closest_integer(value):\n    num = float(value)\n    rounded = round(num)\n\n    # Handle the case where the number is equidistant from two integers\n    if abs(num - rounded) < 0.5:\n        if num > 0:\n            rounded = math.ceil(num)\n        else:\n            rounded = math.floor(num)\n\n    return int(rounded)\n",
    "HumanEval/100": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    pile = []\n    for i in range(n):\n        pile.append(n - i if i == 0 else pile[-1] + (2 if n % 2 == 1 else 1))\n    return pile\n",
    "HumanEval/101": "def words_string(s):\n    return s.split(\",\")\n",
    "HumanEval/102": "def choose_num(x, y):\n    if x > y:\n        return -1\n    \n    largest_even = -1\n    for num in range(x, y + 1):\n        if num % 2 == 0 and num > largest_even:\n            largest_even = num\n    \n    return largest_even\n",
    "HumanEval/103": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = sum(range(n, m+1))\n    avg = total / (m - n + 1)\n    rounded = round(avg)\n    return f\"0b{bin(rounded)[2:]}\"\n",
    "HumanEval/104": "def unique_digits(x):\n    unique_list = []\n    for num in x:\n        has_even_digit = False\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                has_even_digit = True\n                break\n        if not has_even_digit:\n            unique_list.append(num)\n    unique_list.sort()\n    return unique_list\n",
    "HumanEval/105": "def by_length(arr):\n    if not arr:\n        return []\n\n    valid_nums = [num for num in arr if 1 <= num <= 9]\n    valid_nums.sort()\n    valid_nums.reverse()\n\n    num_to_name = {\n        1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\",\n        6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"\n    }\n\n    result = [num_to_name[num] for num in valid_nums]\n    return result\n",
    "HumanEval/106": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n\ndef factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n",
    "HumanEval/107": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n\n    for num in range(1, n+1):\n        if str(num) == str(num)[::-1]:\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)\n",
    "HumanEval/108": "def count_nums(arr):\n    return sum(sum(int(digit) for digit in str(abs(num))) > 0 for num in arr)\n",
    "HumanEval/109": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            if i == len(arr) - 1 and arr[0] >= arr[i]:\n                return True\n            return False\n    \n    return True\n",
    "HumanEval/110": "def exchange(lst1, lst2):\n    odd_sum = 0\n    even_sum = 0\n    \n    for num in lst1:\n        if num % 2 != 0:\n            odd_sum += num\n    \n    for num in lst2:\n        if num % 2 == 0:\n            even_sum += num\n    \n    if odd_sum <= even_sum:\n        return \"YES\"\n    else:\n        return \"NO\"\n",
    "HumanEval/111": "def histogram(test):\n    if not test:\n        return {}\n    \n    letters = test.split()\n    counts = {}\n    \n    for letter in letters:\n        if letter in counts:\n            counts[letter] += 1\n        else:\n            counts[letter] = 1\n    \n    max_count = max(counts.values())\n    \n    result = {k: v for k, v in counts.items() if v == max_count}\n    \n    return result\n",
    "HumanEval/112": "def reverse_delete(s, c):\n    result = \"\"\n    for char in s:\n        if char not in c:\n            result += char\n    \n    is_palindrome = result == result[::-1]\n    return (result, is_palindrome)\n",
    "HumanEval/113": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    output = []\n    for i, string in enumerate(lst):\n        odd_count = sum(1 for digit in string if int(digit) % 2 != 0)\n        output.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return output\n",
    "HumanEval/114": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    curr_sum = 0\n\n    for num in nums:\n        curr_sum += num\n        min_sum = min(min_sum, curr_sum)\n        if curr_sum < 0:\n            curr_sum = 0\n\n    return min_sum\n",
    "HumanEval/115": "def max_fill(grid, capacity):\n    total_fills = 0\n    for col in range(len(grid[0])):\n        max_water_in_col = max(row[col] for row in grid)\n        fills_in_col = math.ceil(max_water_in_col / capacity)\n        total_fills += fills_in_col\n    return int(total_fills)\n",
    "HumanEval/116": "def sort_array(arr):\n    def count_ones(num):\n        return bin(abs(num)).count('1')\n    \n    return sorted(arr, key=lambda x: (count_ones(x), x))\n",
    "HumanEval/117": "def count_consonants(word):\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    count = 0\n    for char in word.lower():\n        if char in consonants:\n            count += 1\n    return count\n\ndef select_words(s, n):\n    if not s:\n        return []\n    \n    result = []\n    for word in s.split():\n        if count_consonants(word) == n:\n            result.append(word)\n    \n    return result\n",
    "HumanEval/118": "def get_closest_vowel(word):\n    closest_vowel = \"\"\n    in_between_consonants = False\n    \n    for char in word:\n        if char.isalpha() and char.lower() not in \"aeiou\":\n            in_between_consonants = True\n        elif char.lower() in \"aeiou\":\n            if in_between_consonants:\n                closest_vowel = char\n                in_between_consonants = False\n            else:\n                in_between_consonants = False\n    \n    return closest_vowel\n",
    "HumanEval/119": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    stack = []\n    for s in lst:\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if not stack:\n                    return 'No'\n                stack.pop()\n        if stack:\n            stack.clear()\n        else:\n            return 'Yes'\n    return 'No'\n",
    "HumanEval/120": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    return arr[:k]\n",
    "HumanEval/121": "def solution(lst):\n    total_sum = 0\n    for i, num in enumerate(lst):\n        if i % 2 == 0 and num % 2 != 0:\n            total_sum += num\n    return total_sum\n",
    "HumanEval/122": "def add_elements(arr, k):\n    total_sum = 0\n    for i in range(k):\n        if abs(arr[i]) < 100:\n            total_sum += arr[i]\n    return total_sum\n",
    "HumanEval/123": "def get_odd_collatz(n):\n    odd_collatz = []\n    current = n\n    while current != 1:\n        if current % 2 != 0:\n            odd_collatz.append(current)\n        if current % 2 == 0:\n            current //= 2\n        else:\n            current = 3 * current + 1\n    if n == 1:\n        odd_collatz = [1]\n    return sorted(odd_collatz)\n",
    "HumanEval/124": "def valid_date(date):\n    if not date:\n        return False\n\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n\n    month = int(parts[0])\n    day = int(parts[1])\n    year = int(parts[2])\n\n    if month < 1 or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\n    return True\n",
    "HumanEval/125": "def split_words(txt):\n    if not txt:\n        return []\n    words = [word for word in txt.split() + txt.split(',') if word]\n    if not words:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)\n    return words\n",
    "HumanEval/126": "def is_sorted(lst):\n    if len(lst) <= 1:\n        return True\n    if len(set(lst)) != len(lst):\n        return False\n    return lst == sorted(lst)\n",
    "HumanEval/127": "def intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n\n    # Determine the intersection\n    start = max(start1, start2)\n    end = min(end1, end2)\n\n    if start > end:\n        return \"NO\"  # No intersection\n\n    # Calculate the length of the intersection\n    length = end - start + 1\n\n    # Determine the output based on the length of the intersection\n    if length == 1:\n        return \"NO\"\n    elif is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"\n\ndef is_prime(n):\n    \"\"\"\n    Helper function to check if a number is prime.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
    "HumanEval/128": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    product_of_signs = 1\n    sum_of_magnitudes = 0\n    \n    for num in arr:\n        if num > 0:\n            product_of_signs *= 1\n        elif num < 0:\n            product_of_signs *= -1\n        else:\n            product_of_signs *= 0\n        \n        sum_of_magnitudes += abs(num)\n    \n    return product_of_signs * sum_of_magnitudes\n",
    "HumanEval/129": "def minPath(grid, k):\n    n = len(grid)\n    min_path = None\n    \n    def dfs(i, j, path, length, visited):\n        nonlocal min_path\n        \n        if length == k:\n            if min_path is None or path < min_path:\n                min_path = path[:]\n            return\n        \n        if i < 0 or i >= n or j < 0 or j >= n or (i, j) in visited:\n            return\n        \n        visited.add((i, j))\n        path.append(grid[i][j])\n        \n        dfs(i-1, j, path, length+1, visited)\n        dfs(i+1, j, path, length+1, visited)\n        dfs(i, j-1, path, length+1, visited)\n        dfs(i, j+1, path, length+1, visited)\n        \n        visited.remove((i, j))\n        path.pop()\n    \n    for i in range(n):\n        for j in range(n):\n            dfs(i, j, [], 0, set())\n            if min_path is not None:\n                break\n    \n    return min_path\n",
    "HumanEval/130": "def tri(n):\n    result = [3]  # First Tribonacci number is 3\n    for i in range(2, n + 1):\n        if i == 2:\n            result.append(4)  # tri(2) = 4\n        else:\n            current = result[-1] + result[-2] + result[-3]\n            result.append(current)\n    return result\n",
    "HumanEval/131": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 == 1:\n            product *= int(digit)\n    if product == 1:\n        return 0\n    else:\n        return product\n",
    "HumanEval/132": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n",
    "HumanEval/133": "import math\n\ndef sum_squares(lst):\n    total = 0\n    for num in lst:\n        rounded = math.ceil(num)\n        squared = rounded ** 2\n        total += squared\n    return total\n",
    "HumanEval/134": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    last_char = txt[-1]\n    if not last_char.isalpha():\n        return False\n    if txt.endswith(\" \" + last_char):\n        return False\n    return True\n",
    "HumanEval/135": "def can_arrange(arr):\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            max_index = max(max_index, i)\n    return max_index\n",
    "HumanEval/136": "def largest_smallest_integers(lst):\n    largest_negative = None\n    smallest_positive = None\n\n    for num in lst:\n        if isinstance(num, int):\n            if num < 0 and (largest_negative is None or num > largest_negative):\n                largest_negative = num\n            elif num > 0 and (smallest_positive is None or num < smallest_positive):\n                smallest_positive = num\n    \n    if largest_negative is not None and smallest_positive is not None:\n        return (largest_negative, smallest_positive)\n    else:\n        raise ValueError(\"The list does not contain any negative or positive integers.\")\n",
    "HumanEval/137": "def compare_one(a, b):\n    try:\n        a_float = float(str(a).replace(\",\", \".\"))\n        b_float = float(str(b).replace(\",\", \".\"))\n        if a_float > b_float:\n            return a\n        elif a_float < b_float:\n            return b\n        else:\n            return None\n    except ValueError:\n        try:\n            a_str = str(a).replace(\",\", \"\")\n            b_str = str(b).replace(\",\", \"\")\n            if a_str > b_str:\n                return a\n            elif a_str < b_str:\n                return b\n            else:\n                return None\n        except ValueError:\n            return None\n",
    "HumanEval/138": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    if n < 8:\n        return False\n\n    for a in range(2, n - 4, 2):\n        for b in range(a + 2, n - 2, 2):\n            for c in range(b + 2, n, 2):\n                d = n - a - b - c\n                if d > 0 and d % 2 == 0:\n                    return True\n\n    return False\n",
    "HumanEval/139": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n\n    result = 1\n    for i in range(n, 0, -1):\n        result *= i\n        if i > 1:\n            result //= (i - 1)\n\n    return result\n",
    "HumanEval/140": "def fix_spaces(text):\n    output = \"\"\n    prev_was_space = False\n    \n    for char in text:\n        if char == \" \":\n            if prev_was_space:\n                output += \"-\"\n            else:\n                output += \"_\"\n            prev_was_space = True\n        else:\n            output += char\n            prev_was_space = False\n    \n    return output\n",
    "HumanEval/141": "def file_name_check(file_name):\n    if sum(1 for char in file_name if char.isdigit()) > 3:\n        return \"No\"\n    \n    if file_name.count(\".\") != 1:\n        return \"No\"\n    \n    parts = file_name.split(\".\")\n    before_dot, after_dot = parts[0], parts[1]\n    \n    if not before_dot:\n        return \"No\"\n    \n    if not before_dot[0].isalpha():\n        return \"No\"\n    \n    valid_extensions = [\"txt\", \"exe\", \"dll\"]\n    if after_dot not in valid_extensions:\n        return \"No\"\n    \n    return \"Yes\"\n",
    "HumanEval/142": "def sum_squares(lst):\n    total = 0\n    for i, x in enumerate(lst):\n        if i % 3 == 0:\n            total += x ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            total += x ** 3\n        else:\n            total += x\n    return total\n",
    "HumanEval/143": "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n    \"\"\"\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(int(word))]\n    result = ' '.join(prime_words)\n    return result\n",
    "HumanEval/144": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    result_num = x_num * n_num\n    result_den = x_den * n_den\n    return result_num % result_den == 0\n",
    "HumanEval/145": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    def sum_of_digits(num):\n        \"\"\"\n        Helper function to calculate the sum of digits of a given integer.\n        \"\"\"\n        return sum(int(digit) for digit in str(abs(num)))\n\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))\n",
    "HumanEval/146": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        num_str = str(abs(num))\n        if num > 10 and int(num_str[0]) % 2 != 0 and int(num_str[-1]) % 2 != 0:\n            count += 1\n    return count\n",
    "HumanEval/147": "def get_max_triples(n):\n    a = []\n    for i in range(1, n+1):\n        a.append(i * i - i + 1)\n\n    divisible_by_3 = [x for x in a if x % 3 == 0]\n    count = 0\n\n    for i in range(len(divisible_by_3)):\n        for j in range(i+1, len(divisible_by_3)):\n            k = 3 - (divisible_by_3[i] + divisible_by_3[j]) % 3\n            if k in a:\n                count += 1\n\n    return count\n",
    "HumanEval/148": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    # Check if planet1 and planet2 are valid planet names\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    # Find the indices of planet1 and planet2\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    \n    # Create the result list\n    result = []\n    start = min(index1, index2)\n    end = max(index1, index2)\n    for i in range(start, end+1):\n        result.append(planets[i])\n    \n    return tuple(sorted(result))\n",
    "HumanEval/149": "def sorted_list_sum(lst):\n    new_list = []\n    for word in lst:\n        if len(word) % 2 == 0:\n            new_list.append(word)\n    new_list.sort(key=lambda x: (len(x), x))\n    return new_list\n",
    "HumanEval/150": "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y\n",
    "HumanEval/151": "def double_the_difference(lst):\n    sum_of_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0 and num % 2 == 1:\n            sum_of_squares += num ** 2\n    return sum_of_squares\n",
    "HumanEval/152": "def compare(game, guess):\n    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result\n",
    "HumanEval/153": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    strongest_strength = float('-inf')\n    \n    for extension in extensions:\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n        strength = cap - sm\n        \n        if strength > strongest_strength:\n            strongest_extension = extension\n            strongest_strength = strength\n        elif strength == strongest_strength and extensions.index(extension) < extensions.index(strongest_extension):\n            strongest_extension = extension\n    \n    return f\"{class_name}.{strongest_extension}\"\n",
    "HumanEval/154": "def cycpattern_check(a, b):\n    concat_b = b + b\n    return a in concat_b\n",
    "HumanEval/155": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    \n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    return (even_count, odd_count)\n",
    "HumanEval/156": "def int_to_mini_roman(number):\n    roman_symbols = [('m', 1000), ('cm', 900), ('d', 500), ('cd', 400), ('c', 100), ('xc', 90),\n                     ('l', 50), ('xl', 40), ('x', 10), ('ix', 9), ('v', 5), ('iv', 4), ('i', 1)]\n\n    result = \"\"\n    for symbol, value in roman_symbols:\n        count = number // value\n        result += symbol * count\n        number -= value * count\n\n    return result\n",
    "HumanEval/157": "import math\n\ndef right_angle_triangle(a, b, c):\n    longest_side = max(a, b, c)\n    return math.isclose(math.sqrt(a**2 + b**2), longest_side) or \\\n           math.isclose(math.sqrt(a**2 + c**2), longest_side) or \\\n           math.isclose(math.sqrt(b**2 + c**2), longest_side)\n",
    "HumanEval/158": "def find_max(words):\n    max_word = \"\"\n    max_unique_chars = 0\n    \n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_word = word\n            max_unique_chars = unique_chars\n        elif unique_chars == max_unique_chars and word < max_word:\n            max_word = word\n    \n    return max_word\n",
    "HumanEval/159": "def eat(number, need, remaining):\n    if not (0 <= number <= 1000 and 0 <= need <= 1000 and 0 <= remaining <= 1000):\n        raise ValueError(\"Input values are out of range.\")\n    \n    total_eaten = min(number + need, number + remaining)\n    remaining_carrots = max(0, remaining - need)\n    \n    return [total_eaten, remaining_carrots]\n",
    "HumanEval/160": "import operator\n\ndef do_algebra(operator, operand):\n    if len(operator) != len(operand) - 1:\n        raise ValueError(\"The length of the operator list must be one less than the length of the operand list.\")\n    for op in operand:\n        if not isinstance(op, int) or op < 0:\n            raise ValueError(\"The operand list must contain only non-negative integers.\")\n    if len(operator) < 1 or len(operand) < 2:\n        raise ValueError(\"The operator list must have at least one operator and the operand list must have at least two operands.\")\n\n    def evaluate(ops, ops_):\n        if len(ops) == 0:\n            return ops_[0]\n        \n        op = ops.pop(0)\n        op1 = ops_.pop(0)\n        op2 = ops_.pop(0)\n        \n        try:\n            if op == '+':\n                return evaluate(ops, [operator.add(op1, op2)] + ops_)\n            elif op == '-':\n                return evaluate(ops, [operator.sub(op1, op2)] + ops_)\n            elif op == '*':\n                return evaluate(ops, [operator.mul(op1, op2)] + ops_)\n            elif op == '//':\n                if op2 == 0:\n                    raise ZeroDivisionError(\"Division by zero.\")\n                return evaluate(ops, [operator.floordiv(op1, op2)] + ops_)\n            elif op == '**':\n                return evaluate(ops, [operator.pow(op1, op2)] + ops_)\n            else:\n                raise ValueError(f\"Invalid operator: {op}\")\n        except ZeroDivisionError as e:\n            raise e\n        except Exception as e:\n            raise ValueError(f\"Error evaluating expression: {e}\")\n\n    return evaluate(operator, operand)\n",
    "HumanEval/161": "def solve(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    \n    if not result:\n        return s[::-1]\n    else:\n        return result\n",
    "HumanEval/162": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    md5_hash = hashlib.md5(text.encode())\n    return md5_hash.hexdigest()\n",
    "HumanEval/163": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    even_digits = [num for num in range(min(a, b), max(a, b) + 1) if num % 2 == 0]\n    even_digits.sort()\n    return even_digits\n"
}