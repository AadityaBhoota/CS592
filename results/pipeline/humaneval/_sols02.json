{
    "HumanEval/0": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < threshold:\n                return True\n    return False\n",
    "HumanEval/1": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    \"\"\"\n    paren_string = paren_string.replace(\" \", \"\")\n    \n    groups = []\n    counter = 0\n    current_group = ''\n\n    for char in paren_string:\n        if char == '(':\n            counter += 1\n            current_group += char\n        if char == ')' and counter > 0:\n            counter -= 1\n            current_group += char\n            if counter == 0:\n                groups.append(current_group)\n                current_group = ''\n\n    return groups\n",
    "HumanEval/2": "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    return number - integer_part\n",
    "HumanEval/3": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    \n    for operation in operations:\n        balance += operation\n        \n        if balance < 0:\n            return True\n    \n    return False\n",
    "HumanEval/4": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    differences = [abs(num - mean) for num in numbers]\n    mad = sum(differences) / len(differences)\n    return mad\n",
    "HumanEval/5": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    \"\"\"Insert a number 'delimiter' between every two consecutive elements of input list `numbers`.\"\"\"\n    result = []\n    for num in numbers[:-1]:\n        result.extend([num, delimiter])\n    result.append(numbers[-1])  # Append the last number without delimiter\n    return result\n",
    "HumanEval/6": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    \n    depths = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        \n        depths.append(max_depth)\n    \n    return depths\n",
    "HumanEval/7": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    filtered_strings = []\n    \n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n        \n    return filtered_strings\n",
    "HumanEval/8": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_result = 0\n    product_result = 1\n    \n    sum_result = sum(numbers) if numbers else 0\n    product_result = 1 if numbers else 1\n    for num in numbers:\n        product_result *= num\n\n    return sum_result, product_result\n",
    "HumanEval/9": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    rolling_max_vals = []  # Step 0\n\n    max_val = float('-inf')\n    for num in numbers:\n        max_val = max(max_val, num)  # Update rolling maximum\n        rolling_max_vals.append(max_val)  # Append to result list\n\n    return rolling_max_vals\n",
    "HumanEval/10": "def make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string + string[::-1]\n\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n\n    return string + string[:-1][::-1]\n",
    "HumanEval/11": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if len(a) != len(b):\n        return \"Error: Inputs should be of the same length.\"\n\n    result = ''\n    \n    for char_a, char_b in zip(a, b):\n        # XOR operation for binary strings\n        result += str(int(char_a) ^ int(char_b))\n    \n    return result\n",
    "HumanEval/12": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    \n    max_len = 0\n    longest_str = None\n    \n    for string in strings:\n        if len(string) > max_len:\n            max_len = len(string)\n            longest_str = string\n        elif len(string) == max_len and longest_str is None:\n            longest_str = string\n\n    return longest_str\n",
    "HumanEval/13": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Return the greatest common divisor of two integers a and b\n    \n    Parameters:\n    a (int): The first integer\n    b (int): The second integer\n    \n    Returns:\n    int: The greatest common divisor of a and b\n    \n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b:\n        a, b = b, a % b\n        \n    return a\n",
    "HumanEval/14": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(len(string)):\n        prefix = string[:i+1]\n        prefixes.append(prefix)\n\n    return prefixes\n",
    "HumanEval/15": "def string_sequence(n: int) -> str:\n    sequence = ''\n    \n    for num in range(n + 1):\n        sequence += str(num) + ' '\n    \n    sequence = sequence.strip()\n    \n    return sequence\n",
    "HumanEval/16": "def count_distinct_characters(string: str) -> int:\n    distinct_chars = set()\n    \n    for char in string:\n        lowercase_char = char.lower()\n        distinct_chars.add(lowercase_char)\n    \n    return len(distinct_chars)\n",
    "HumanEval/17": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n\n    beat_values = {'o': 4, 'o|': 2, '.|': 1}\n    beats = [beat_values[note] for note in notes]\n\n    return beats\n",
    "HumanEval/18": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\n",
    "HumanEval/19": "def sort_numbers(numbers: str) -> str:\n    number_words = numbers.split()\n    \n    word_to_num = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    sorted_numbers = sorted(number_words, key=lambda x: word_to_num[x])\n    \n    sorted_string = ' '.join(sorted_numbers)\n    \n    return sorted_string\n",
    "HumanEval/20": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    if len(numbers) < 2:\n        raise ValueError(\"Input list must contain at least two numbers.\")\n    \n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (0.0, 0.0)\n    \n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    \n    return closest_pair\n",
    "HumanEval/21": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    if len(numbers) < 2:\n        raise ValueError(\"Input list must contain at least two numbers.\")\n        \n    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n\n    rescaled_list = [(num - min_val) / range_val for num in numbers]\n\n    return rescaled_list\n",
    "HumanEval/22": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    filtered_integers = []\n    \n    for value in values:\n        if isinstance(value, int):\n            filtered_integers.append(value)\n    \n    return filtered_integers\n",
    "HumanEval/23": "def strlen(string: str) -> int:\n    return len(string)\n",
    "HumanEval/24": "def largest_divisor(n: int) -> int:\n    largest_divisor = 1\n\n    for i in range(2, n):\n        if n % i == 0:\n            largest_divisor = i\n\n    return largest_divisor\n",
    "HumanEval/25": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    \n    # Step 1: Check for factor 2\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n\n    # Step 2: Check for odd primes\n    p = 3\n    while p*p <= n:\n        if n % p == 0:\n            factors.append(p)\n            n //= p\n        else:\n            p += 2\n\n    # Step 3: Add the remaining prime factor if n is not 1\n    if n > 1:\n        factors.append(n)\n\n    return factors\n",
    "HumanEval/26": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    unique_numbers = []\n\n    for num in numbers:\n        if num not in unique_numbers:\n            unique_numbers.append(num)\n\n    return unique_numbers\n",
    "HumanEval/27": "def flip_case(string: str) -> str:\n    flipped_string = ''\n    for char in string:\n        if char.isupper():\n            flipped_string += char.lower()\n        elif char.islower():\n            flipped_string += char.upper()\n    return flipped_string\n\nprint(flip_case('Hello'))\n",
    "HumanEval/28": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    concatenated_string = ''\n    \n    for string in strings:\n        concatenated_string += string\n    \n    return concatenated_string\n",
    "HumanEval/29": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    filtered_strings = []\n    \n    for string in strings:\n        if string.startswith(prefix):\n            filtered_strings.append(string)\n    \n    return filtered_strings\n",
    "HumanEval/30": "def get_positive(l: list):\n    positive_numbers = []\n\n    for num in l:\n        if num > 0:\n            positive_numbers.append(num)\n\n    return positive_numbers\n",
    "HumanEval/31": "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    \n    return True\n",
    "HumanEval/32": "def find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero finds x such that poly(x) = 0.\n    find_zero returns only one zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non-zero coefficient as it guarantees a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n\n    result = None\n\n    for x in range(-1000, 1001, 1):\n        x /= 10  # Adjust to step size of 0.1\n        value = poly(xs, x)\n        if abs(value) < 0.0001:\n            result = x\n            break\n\n    return result\n",
    "HumanEval/33": "def sort_third(l: list):\n    sorted_list = l.copy()\n    indices_divisible_by_three = []\n\n    for i in range(len(l)):\n        if i % 3 == 0:\n            indices_divisible_by_three.append(i)\n\n    for index in indices_divisible_by_three:\n        sorted_list[index] = sorted(l[index])\n\n    return sorted_list\n",
    "HumanEval/34": "def unique(l: list):\n    unique_set = set(l)\n    unique_sorted = sorted(unique_set)\n    return unique_sorted\n",
    "HumanEval/35": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\"\"\"\n    \n    if not l:\n        return None\n    \n    max_elem = l[0]\n    \n    for elem in l[1:]:\n        if elem > max_elem:\n            max_elem = elem\n    \n    return max_elem\n",
    "HumanEval/36": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count\n",
    "HumanEval/37": "def sort_even(l: list):\n    sorted_even_elements = []  # Step 0: Create a new list to store the sorted even elements\n    \n    for index, element in enumerate(l):  # Step 1: Iterate over the indices and elements of the original list\n        if index % 2 == 0:  # Step 2: If the index is even\n            sorted_even_elements.append(element)  # Add the element to the sorted_even_elements list\n    \n    sorted_even_elements.sort()  # Step 3: Sort the elements in the sorted_even_elements list\n\n    index_sorted = 0\n    for index, element in enumerate(l):  # Iterating over the indices and elements of the original list again\n        if index % 2 == 0:  # If the index is even\n            l[index] = sorted_even_elements[index_sorted]  # Replace the element with the sorted element\n            index_sorted += 1\n\n    return l  # Step 5: Return the modified list\n\n# Testing the final implementation\nprint(sort_even([1, 2, 3]))  # Expected: [1, 2, 3]\nprint(sort_even([5, 6, 3, 4]))  # Expected: [3, 6, 5, 4]\n",
    "HumanEval/38": "def decode_cyclic(s: str):\n    groups = [s[i:i+3] for i in range(0, len(s), 3]\n    \n    decoded_groups = [(group[-1] + group[:2]) if len(group) == 3 else group for group in groups]\n    \n    decoded_string = \"\".join(decoded_groups)\n    \n    return decoded_string\n",
    "HumanEval/39": "def is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef generate_fibonacci(n: int) -> int:\n    if n <= 0:\n        return 0\n    a, b = 0, 1\n    for _ in range(2, n):\n        a, b = b, a + b\n    return b\n\ndef prime_fib(n: int) -> int:\n    count = 0\n    num = 1\n    while count < n:\n        num += 1\n        if is_prime(num) and generate_fibonacci(num) == num:\n            count += 1\n    return num\n",
    "HumanEval/40": "def triples_sum_to_zero(l: list):\n    l.sort()\n    n = len(l)\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False\n",
    "HumanEval/41": "def car_race_collision(n: int):\n    left_to_right = [i for i in range(n)]  # Initialize positions of cars moving left to right\n    right_to_left = [i for i in range(2 * n - 1, n - 1, -1)]  # Initialize positions of cars moving right to left\n    collisions = 0  # Initialize collision counter\n\n    for pos_lr, pos_rl in zip(left_to_right, right_to_left):\n        if pos_lr >= pos_rl:  # Check for overlap of car positions\n            collisions += 1  # Increment collision counter if a collision occurs\n\n    return collisions  # Return the total number of collisions\n",
    "HumanEval/42": "def incr_list(l: list):\n    new_list = []\n\n    for num in l:\n        new_list.append(num + 1)\n    \n    return new_list\n",
    "HumanEval/43": "def pairs_sum_to_zero(l):\n    seen_numbers = set()\n\n    for num in l:\n        if -num in seen_numbers:\n            return True\n        seen_numbers.add(num)\n\n    return False\n",
    "HumanEval/44": "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    \n    result = ''\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x = x // base\n    \n    return result\n",
    "HumanEval/45": "def triangle_area(a, h):\n    \"\"\"\n    Given length of a side and height, return the area of a triangle.\n\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    area = 0.5 * a * h\n    return area\n",
    "HumanEval/46": "    return fib4_sequence[n]\n",
    "HumanEval/47": "def median(l: list):\n    if not l:\n        return None\n    \n    l.sort()\n    n = len(l)\n    \n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n",
    "HumanEval/48": "def is_palindrome(text: str):\n    return text == text[::-1]\n",
    "HumanEval/49": "def modp(n: int, p: int):\n    return pow(2, n) % p\n",
    "HumanEval/50": "def encode_shift(s: str):\n    \"\"\"\n    Returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([shift_char(ch, 5) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    Takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([shift_char(ch, -5) for ch in s])\n",
    "HumanEval/51": "def remove_vowels(text):\n    result = \"\"\n    for char in text:\n        if char.lower() not in 'aeiou':\n            result += char\n    return result\n",
    "HumanEval/52": "def below_threshold(l: list, t: int):\n    for num in l:\n        if num >= t:\n            return False\n    return True\n",
    "HumanEval/53": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n",
    "HumanEval/54": "def same_chars(s0: str, s1: str):\n    return sorted(set(s0)) == sorted(set(s1))\n",
    "HumanEval/55": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n in (0, 1):\n        return n\n\n    a, b = 0, 1\n\n    for _ in range(2, n):\n        temp = a + b\n        a = b\n        b = temp\n\n    return b\n",
    "HumanEval/56": "def correct_bracketing(brackets: str):\n    opening_count = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            opening_count += 1\n        elif bracket == \">\":\n            opening_count -= 1\n        if opening_count < 0:\n            return False\n    \n    return opening_count == 0\n",
    "HumanEval/57": "def monotonic(l: list):\n    is_increasing = all(l[i] <= l[i+1] for i in range(len(l) - 1))\n    is_decreasing = all(l[i] >= l[i+1] for i in range(len(l) - 1))\n\n    return is_increasing or is_decreasing\n",
    "HumanEval/58": "def common(l1: list, l2: list):\n    unique_set1 = set(l1)\n    unique_set2 = set(l2)\n    \n    common_elements = unique_set1.intersection(unique_set2)\n    sorted_common_elements = sorted(common_elements)\n    \n    return sorted_common_elements\n",
    "HumanEval/59": "import math\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef largest_prime_factor(n: int):\n    largest_prime = 2  # Step 0\n    # Step 1\n    for i in range(2, math.isqrt(n) + 1):  # Step 2 corrected\n        if n % i == 0:\n            # Step 3\n            if is_prime(i):\n                # Step 4\n                largest_prime = i  # Update largest_prime\n    return largest_prime  # Step 5\n",
    "HumanEval/60": "def sum_to_n(n: int):\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total\n",
    "HumanEval/61": "def correct_bracketing(brackets: str):\n    stack = []\n    \n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    \n    return not stack\n\n# Testing the function with test cases\nprint(correct_bracketing(\"(\"))  # False\nprint(correct_bracketing(\"()\"))  # True\nprint(correct_bracketing(\"(()())\"))  # True\nprint(correct_bracketing(\")(()\"))  # False\n",
    "HumanEval/62": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    derivative_coeffs = []\n    \n    for i in range(1, len(xs)):\n        derivative_coeffs.append(xs[i] * i)\n        \n    return derivative_coeffs\n",
    "HumanEval/63": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n",
    "HumanEval/64": "def vowels_count(s):\n    count = 0\n    for i, char in enumerate(s):\n        if char in ['a', 'e', 'i', 'o', 'u']:\n            count += 1\n        if char.lower() == 'y' and i == len(s) - 1:\n            count += 1\n    return count\n",
    "HumanEval/65": "def circular_shift(x, shift):\n    x_str = str(x)\n    num_digits = len(x_str)\n    \n    if shift > num_digits:\n        return x_str[::-1]\n    \n    return x_str[num_digits - shift:] + x_str[:num_digits - shift]\n\n# Test the implementation\nprint(circular_shift(12, 1))  # Output: \"21\"\nprint(circular_shift(12, 2))  # Output: \"12\"\n",
    "HumanEval/66": "def digitSum(s):\n    total_sum = 0\n    \n    for char in s:\n        if char.isupper():\n            total_sum += ord(char)\n            \n    return total_sum\n",
    "HumanEval/67": "def fruit_distribution(s, n):\n    numbers = [int(num) for num in s.split() if num.isdigit()]\n    apples = numbers[0]\n    oranges = numbers[1]\n    \n    mango = n - apples - oranges\n    \n    if mango < 0:\n        mango = 0\n\n    return mango\n",
    "HumanEval/68": "def pluck(arr):\n    smallest_even_value = None\n    smallest_even_index = None\n    \n    for index, node in enumerate(arr):\n        if node % 2 == 0:\n            if smallest_even_value is None or node < smallest_even_value or (node == smallest_even_value and index < smallest_even_index):\n                smallest_even_value = node\n                smallest_even_index = index\n    \n    if smallest_even_value is not None:\n        return [smallest_even_value, smallest_even_index]\n    else:\n        return []\n",
    "HumanEval/69": "def search(lst):\n    element_frequency = {}  # Step 0\n    for elem in lst:\n        if elem in element_frequency:\n            element_frequency[elem] += 1\n        else:\n            element_frequency[elem] = 1\n    \n    for key, value in element_frequency.items():  # Step 1\n        if key > 0 and value >= key:\n            return key\n            \n    return -1\n",
    "HumanEval/70": "def strange_sort_list(lst):\n    if len(lst) == 0:\n        return []\n    \n    result = [] \n    sorted_lst = sorted(lst)\n    \n    for i in range(0, len(sorted_lst)//2, 2):\n        result.append(sorted_lst[i])\n        result.append(sorted_lst[-(i+1)])\n    \n    if len(sorted_lst) % 2 != 0:\n        result.append(sorted_lst[len(sorted_lst)//2])\n\n    return result\n",
    "HumanEval/71": "import math\n\ndef triangle_area(a, b, c):\n    if a + b > c and b + c > a and a + c > b:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1\n",
    "HumanEval/72": "def will_it_fly(q, w):\n    def is_palindromic_list(lst):\n        return lst == lst[::-1]\n    \n    is_balanced = is_palindromic_list(q)\n    sum_of_elements = sum(q)\n    is_under_weight = sum_of_elements <= w\n    \n    return is_balanced and is_under_weight\n",
    "HumanEval/73": "def smallest_change(arr):\n    if arr == arr[::-1]:\n        return 0\n    \n    count = 0\n    length = len(arr)\n    \n    for i in range(length // 2):\n        if arr[i] != arr[length - i - 1]:\n            count += 1\n    \n    return count\n",
    "HumanEval/74": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(word) for word in lst1)\n    total_chars_lst2 = sum(len(word) for word in lst2)\n    \n    # Compare the total number of characters in both lists and return accordingly\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst2 < total_chars_lst1:\n        return lst2\n    else:\n        return lst1\n",
    "HumanEval/75": "from sympy import isprime\n\ndef is_multiply_prime(a):\n    \n    if a >= 100:\n        return False\n    \n    factors = []\n    \n    for i in range(2, a):\n        if isprime(i) and a % i == 0:\n            factors.append(i)\n    \n    return len(factors) == 3\n",
    "HumanEval/76": "def is_simple_power(x, n):\n    if x == 1 and n == 1:\n        return True\n    if x != 1 and n == 1:\n        return False\n\n    power = 1\n\n    while n ** power <= x:\n        if n ** power == x:\n            return True\n        power += 1\n\n    return False\n",
    "HumanEval/77": "import math\n\ndef iscube(a):\n    cube_root = round(math.pow(abs(a), 1/3))\n    return cube_root ** 3 == abs(a)\n",
    "HumanEval/78": "def hex_key(num):\n    prime_digits_count = 0\n    prime_hex_digits = {\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"}\n    \n    for digit in num:\n        if digit in prime_hex_digits:\n            prime_digits_count += 1\n    \n    return prime_digits_count\n",
    "HumanEval/79": "def decimal_to_binary(decimal):\n    binary_rep = bin(decimal)[2:]  # Convert decimal to binary representation\n    binary_str = 'db' + binary_rep + 'db'  # Add 'db' prefix and suffix\n    return binary_str\n",
    "HumanEval/80": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    \n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) != 3:\n            return False\n    return True\n",
    "HumanEval/81": "def numerical_letter_grade(grades):\n    \"\"\"Convert a list of GPAs to a list of corresponding letter grades.\"\"\"\n    letter_grades = []  # Create an empty list to store the letter grades\n\n    for grade in grades:\n        if grade == 4.0:\n          letter_grades.append('A+')\n        elif grade > 3.7:\n          letter_grades.append('A')\n        elif grade > 3.3:\n          letter_grades.append('A-')\n        elif grade > 3.0:\n          letter_grades.append('B+')\n        elif grade > 2.7:\n          letter_grades.append('B')\n        elif grade > 2.3:\n          letter_grades.append('B-')\n        elif grade > 2.0:\n          letter_grades.append('C+')\n        elif grade > 1.7:\n          letter_grades.append('C')\n        elif grade > 1.3:\n          letter_grades.append('C-')\n        elif grade > 1.0:\n          letter_grades.append('D+')\n        elif grade > 0.7:\n          letter_grades.append('D')\n        elif grade >= 0.0:\n          letter_grades.append('D-')\n        else:\n          letter_grades.append('E')\n\n    return letter_grades\n\n# Testing the function with example input\ngrades = [4.0, 3, 1.7, 2, 3.5]\nprint(numerical_letter_grade(grades))  # Expected output: ['A+', 'B', 'C-', 'C', 'A-']\n",
    "HumanEval/82": "import math\n\ndef prime_length(string):\n    if len(string) < 2:\n        return False\n\n    for i in range(2, int(math.sqrt(len(string)))+1):\n        if len(string) % i == 0:\n            return False\n    return True\n",
    "HumanEval/83": "def starts_one_ends(n):\n    count = 0\n    for i in range(10 ** (n - 1), 10 ** n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count\n",
    "HumanEval/84": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    total = 0\n    binary_str = bin(N)[2:]\n    for digit in binary_str:\n        total += int(digit)\n    binary_total = bin(total)\n    return binary_total[2:]\n\n\n# Test the function with the provided examples\nprint(solve(1000))  # Output: '1'\nprint(solve(150))   # Output: '110'\nprint(solve(147))   # Output: '1100'\n",
    "HumanEval/85": "def add(lst):\n    total = 0\n    for idx in range(1, len(lst), 2):\n        if lst[idx] % 2 == 0:\n            total += lst[idx]\n    return total\n\nprint(add([4, 2, 6, 7]))\n",
    "HumanEval/86": "def anti_shuffle(s):\n    words = s.split()\n    sorted_words = [''.join(sorted(word, key=lambda x: ord(x))) for word in words]\n    return ' '.join(sorted_words)\n",
    "HumanEval/87": "def get_row(lst, x):\n    rows_with_x = []\n    for i, row in enumerate(lst):\n        column_indices = [idx for idx, val in enumerate(row) if val == x]\n        for col_index in column_indices:\n            rows_with_x.append((i, col_index))\n    \n    rows_with_x.sort(key=lambda coord: (coord[0], -coord[1]))  # Sort by row index in ascending order, then by column index in descending order\n    return rows_with_x\n",
    "HumanEval/88": "def sort_array(array):\n    if len(array) == 0:\n        return []\n    \n    first_last_sum = array[0] + array[-1]\n    if first_last_sum % 2 == 1:  # Sum is odd\n        return sorted(array)\n    else:  # Sum is even\n        return sorted(array, reverse=True)\n",
    "HumanEval/89": "def encrypt(s):\n    result = \"\"\n    \n    for c in s:\n        if c.isalpha():\n            shift = 2\n            if c.islower():\n                new_char = chr((ord(c) - ord('a') + shift*2) % 26 + ord('a'))\n            else:\n                new_char = chr((ord(c) - ord('A') + shift*2) % 26 + ord('A'))\n            result += new_char\n        else:\n            result += c\n\n    return result\n",
    "HumanEval/90": "def next_smallest(lst):\n    if not lst:\n        return None\n    \n    unique_elements = list(set(lst))\n    unique_elements.sort()\n    \n    if len(unique_elements) < 2:\n        return None\n    \n    return unique_elements[1]\n",
    "HumanEval/91": "def is_bored(S):\n    sentences = []\n    for delimiter in ['.', '?', '!']:\n        sentences += S.split(delimiter)\n    \n    sentences = [sentence.strip() for sentence in sentences if len(sentence.strip()) > 0]\n    \n    boredoms = sum(1 for sentence in sentences if sentence.startswith(\"I \"))\n    \n    return boredoms\n",
    "HumanEval/92": "def any_int(x, y, z):\n    # Step 1: Check if all input parameters are integers\n    if all(isinstance(num, int) for num in [x, y, z]):\n        # Step 2: Check if any number is equal to the sum of the other two\n        if x == y + z or y == x + z or z == x + y:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
    "HumanEval/93": "def encode(message):\n    encoded_message = \"\"\n\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                char = char.upper()\n            else:\n                char = char.lower()\n            \n            vowels = \"AEIOU\"\n            if char.upper() in vowels:\n                index = (ord(char.upper()) - ord('A') + 2) % 26\n                char = chr(ord('A') + index)\n                \n            encoded_message += char\n        else:\n            encoded_message += char\n\n    return encoded_message\n",
    "HumanEval/94": "import math\n\ndef largest_prime_sum_digits(lst):\n    \"\"\"\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n    \"\"\"\n    \n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    largest_prime = 0\n    sum_digits = 0\n    \n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n        sum_digits += sum(int(digit) for digit in str(num))\n    \n    return sum(int(digit) for digit in str(largest_prime))\n",
    "HumanEval/95": "def check_dict_case(dict):\n    if not dict:\n        return False\n    \n    key_case = set()\n    for key in dict.keys():\n        if key.islower():\n            key_case.add('lower')\n        elif key.isupper():\n            key_case.add('upper')\n        else:\n            return False\n\n    return len(key_case) == 1\n",
    "HumanEval/96": "def count_up_to(n):\n    if n <= 1:\n        return []\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n\n    for num in range(2, n):\n        if is_prime(num):\n            primes.append(num)\n\n    return primes\n",
    "HumanEval/97": "def multiply(a, b):\n    # Step 1: Get the unit digit of the first number 'a'.\n    unit_digit_a = a % 10\n    \n    # Step 1: Get the unit digit of the second number 'b'.\n    unit_digit_b = b % 10\n    \n    # Step 3: Multiply the unit digits obtained in steps 1 and 2.\n    product = unit_digit_a * unit_digit_b\n    \n    # Step 4: Return the result from step 3.\n    return product\n",
    "HumanEval/98": "    return count  # Step 5: Return the count after iterating through all characters\n",
    "HumanEval/99": "def closest_integer(value):\n    number = float(value)\n    rounded_number = round(number)\n    \n    if abs(number - rounded_number) == 0.5:\n        if number >= 0:\n            return int(number) + 1\n        else:\n            return int(number) - 1\n\n    return rounded_number\n",
    "HumanEval/100": "def make_a_pile(n):\n    stones_per_level = [n]  # Step 1: Add the initial number of stones (n) to the list\n    \n    stones_count = n\n    for i in range(1, n):\n        if stones_count % 2 == 0:\n            stones_count += 1\n        else:\n            stones_count += 2\n        stones_per_level.append(stones_count)\n\n    return stones_per_level  # Step 3: Return the list containing the number of stones per level\n",
    "HumanEval/101": "def words_string(s):\n    words = s.replace(\",\", \" \").split()\n    words = [word for word in words if word != '']\n    return words\n",
    "HumanEval/102": "def choose_num(x, y):\n    max_even = -1\n    largest_even = max(x, y)\n    \n    for num in range(min(x, y), largest_even + 1):\n        if num % 2 == 0 and num > max_even:\n            max_even = num\n\n    if max_even == -1:\n        return -1\n    else:\n        return max_even\n",
    "HumanEval/103": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total_sum = sum(range(n, m + 1))\n    average = total_sum / (m - n + 1)\n    rounded_average = round(average)\n    rounded_average_binary = bin(rounded_average)\n    return rounded_average_binary\n",
    "HumanEval/104": "def unique_digits(x):\n    result = []\n    if not x:\n        return result\n    \n    for num in x:\n        num_str = str(num)\n        \n        if any(int(digit) % 2 == 0 for digit in num_str):\n            continue\n        \n        result.append(num)\n    \n    return sorted(result)\n",
    "HumanEval/105": "def by_length(arr):\n    if not arr:\n        return []\n    \n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    \n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    final_arr = [digit_names[num-1] for num in reversed_arr]\n    \n    return final_arr\n",
    "HumanEval/106": "def f(n):\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 != 0:\n            result.append(sum(range(1, i + 1)))\n        else:\n            result.append(factorial(i))\n    return result\n",
    "HumanEval/107": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)\n",
    "HumanEval/108": "def count_nums(arr):\n    count = 0\n\n    for num in arr:\n        sum_of_digits = 0\n        for digit in str(num):\n            if digit.isdigit():\n                sum_of_digits += int(digit)\n        if sum_of_digits > 0:\n            count += 1\n\n    return count\n",
    "HumanEval/109": "def move_one_ball(arr):\n    if not arr:\n        return True\n\n    min_idx = arr.index(min(arr))\n\n    is_sorted = all(arr[i] <= arr[i+1] for i in range(len(arr) - 1))\n    if is_sorted:\n        return True\n\n    if min_idx == len(arr) - 1:\n        return True\n    else:\n        return False\n",
    "HumanEval/110": "def exchange(lst1, lst2):\n    if all(num % 2 == 0 for num in lst1):\n        return \"YES\"\n    \n    odd_count = sum(1 for num in lst1 if num % 2 != 0)\n    if odd_count == 0:\n        return \"NO\"\n    \n    even_count = sum(1 for num in lst2 if num % 2 == 0)\n    \n    if odd_count >= even_count:\n        return \"YES\"\n    else:\n        return \"NO\"\n",
    "HumanEval/111": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n    \"\"\"\n    \n    letters = test.split()\n\n    letter_count = {}\n    \n    for letter in letters:\n        if letter in letter_count:\n            letter_count[letter] += 1\n        else:\n            letter_count[letter] = 1\n    \n    max_count = max(letter_count.values()) if letter_count else 0\n    \n    most_repeated_letters = {key: value for key, value in letter_count.items() if value == max_count}\n    \n    return most_repeated_letters\n",
    "HumanEval/112": "def reverse_delete(s, c):\n    filtered_s = ''.join(char for char in s if char not in c)\n    is_palindrome = filtered_s == filtered_s[::-1]\n    return filtered_s, is_palindrome\n",
    "HumanEval/113": "def odd_count(lst):\n    result = []  \n    for num in lst:\n        count = 0  \n        for char in num:\n            if int(char) % 2 != 0:\n                count += 1  \n        result.append(f\"the number of odd elements {count} in the str{count}ng {num} of the {count}nput.\")\n    return result\n",
    "HumanEval/114": "def minSubArraySum(nums):\n    min_sum = float('inf')  # Initialize min_sum to infinity\n    current_sum = 0  # Initialize current_sum to 0\n    \n    for num in nums:\n        current_sum = max(num, num + current_sum)  # Update current_sum\n        min_sum = min(min_sum, current_sum)  # Update min_sum\n        \n    return min_sum  # Return min_sum\n",
    "HumanEval/115": "def max_fill(grid, capacity):\n    count = 0\n    for row in grid:\n        for well in row:\n            while well > 0:\n                well -= min(capacity, well)\n                count += 1\n    return count\n",
    "HumanEval/116": "def sort_array(arr):\n    def count_ones(num):\n        return bin(num).count('1')\n\n    def custom_sort_key(num):\n        return count_ones(num), num\n\n    return sorted(arr, key=custom_sort_key)\n",
    "HumanEval/117": "def select_words(s, n):\n    words = s.split()\n\n    def count_consonants(word):\n        consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n        return sum(1 for letter in word if letter in consonants)\n\n    def has_n_consonants(word, n):\n        return count_consonants(word) == n\n\n    return [word for word in words if has_n_consonants(word, n)]\n",
    "HumanEval/118": "def get_closest_vowel(word):\n    vowels = set('AEIOUaeiou')\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] not in vowels and word[i-1] in vowels and word[i+1] in vowels:\n            return word[i]\n    return \"\"\n",
    "HumanEval/119": "def match_parens(lst):\n    balance = 0\n\n    for s in lst:\n        for char in s:\n            if char == '(':\n                balance += 1\n            elif char == ')':\n                balance -= 1\n            if balance < 0:\n                return 'No'\n\n    return 'Yes'\n",
    "HumanEval/120": "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n    arr.sort()\n    return arr[-k:]\n",
    "HumanEval/121": "def solution(lst):\n    total_sum = 0\n    \n    for i in range(len(lst)):\n        if lst[i] % 2 != 0 and i % 2 == 0:\n            total_sum += lst[i]\n    \n    return total_sum\n",
    "HumanEval/122": "    return sum_two_digits\n",
    "HumanEval/123": "def get_odd_collatz(n):\n    odd_numbers = []\n    collatz_seq = [n]\n    \n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz_seq.append(n)\n        \n    for num in collatz_seq:\n        if num % 2 != 0 and num != 1:\n            odd_numbers.append(num)\n    \n    odd_numbers.sort()\n    \n    return odd_numbers\n",
    "HumanEval/124": "def valid_date(date):\n    if not date:\n        return False\n        \n    date_parts = date.split(\"-\")\n    if len(date_parts) != 3:\n        return False\n    \n    month, day, year = date_parts\n    \n    try:\n        month = int(month)\n        day = int(day)\n        year = int(year)\n    except ValueError:\n        return False\n    \n    if not(1 <= month <= 12):\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        max_days = 31\n    elif month in [4, 6, 9, 11]:\n        max_days = 30\n    else:\n        max_days = 29 if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0) else 28\n\n    if not(1 <= day <= max_days):\n        return False\n    \n    return True\n",
    "HumanEval/125": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    \n    if ',' in txt:\n        return txt.split(',')\n\n    count = sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)\n    return count\n",
    "HumanEval/126": "def is_sorted(lst):\n    def has_more_than_one_duplicate(lst):\n        for num in lst:\n            if lst.count(num) > 2:  # Check if any number has more than two occurrences\n                return True\n        return False\n\n    def is_sorted_ascending(lst):\n        return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))\n\n    return not has_more_than_one_duplicate(lst) and is_sorted_ascending(lst)\n",
    "HumanEval/127": "def intersection(interval1, interval2):\n    def is_prime(number):\n        if number < 2:\n            return False\n        for i in range(2, int(number ** 0.5) + 1):\n            if number % i == 0:\n                return False\n        return True\n\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\n    if start > end:\n        return \"NO\"\n\n    length = end - start + 1\n\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"\n",
    "HumanEval/128": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    sign_product = 1\n    sum_magnitudes = 0\n    \n    for num in arr:\n        if num > 0:\n            sum_magnitudes += abs(num)\n        elif num < 0:\n            sum_magnitudes -= abs(num)\n        sign_product *= 1 if num > 0 else (-1 if num < 0 else 0)\n    \n    return sign_product * sum_magnitudes\n",
    "HumanEval/129": "def minPath(grid, k):\n    def get_neighbors(cell):\n        neighbors = []\n        directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]  # right, left, down, up\n    \n        for dx, dy in directions:\n            new_x, new_y = cell[0] + dx, cell[1] + dy\n            if 0 <= new_x < len(grid) and 0 <= new_y < len(grid[0]):\n                neighbors.append((new_x, new_y))\n        \n        return neighbors\n\n    def dfs(cell, path):\n        if len(path) == k:\n            return path\n        \n        neighbors = get_neighbors(cell)\n        min_path = None\n        \n        for neighbor in neighbors:\n            if neighbor not in path:\n                new_path = dfs(neighbor, path + [neighbor])\n                if min_path is None or new_path < min_path:\n                    min_path = new_path\n        \n        return min_path\n\n    start_cell = find_starting_cell(grid)\n    return [grid[cell[0]][cell[1]] for cell in dfs(start_cell, [start_cell])]\n",
    "HumanEval/130": "def tri(n):\n    tribonacci_sequence = []\n    \n    if n >= 1:\n        tribonacci_sequence.append(1)\n    if n >= 2:\n        tribonacci_sequence.append(3)\n    \n    if n == 0:\n        return tribonacci_sequence\n    \n    for i in range(3, n+1):\n        if i % 2 == 0:\n            tribonacci_sequence.append(1 + i // 2)\n        else:\n            tribonacci_sequence.append(tribonacci_sequence[i-1] + tribonacci_sequence[i-2] + tribonacci_sequence[i-3])\n    \n    return tribonacci_sequence\n",
    "HumanEval/131": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    while n > 0:\n        digit = n % 10  # Get the last digit\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10  # Remove the last digit\n    \n    return product\n",
    "HumanEval/132": "def is_nested(string):\n    stack = []\n    \n    if not string:\n        return False\n\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n\n    return bool(stack)\n",
    "HumanEval/133": "import math\n\ndef sum_squares(lst):\n    rounded_list = [math.ceil(num) for num in lst]\n    squared_list = [num**2 for num in rounded_list]\n    return sum(squared_list)\n",
    "HumanEval/134": "def check_if_last_char_is_a_letter(txt):\n    if txt == \"\":\n        return False\n    \n    words = txt.split()\n    \n    if not words:\n        return False\n    \n    last_word = words[-1]\n    last_char = last_word[-1]\n    \n    return last_char.isalpha() and not last_char.isalnum()\n",
    "HumanEval/135": "def can_arrange(arr):\n    result_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i - 1]:\n            result_index = i\n\n    return result_index\n",
    "HumanEval/136": "def largest_smallest_integers(lst):\n    largest_negative = None\n    smallest_positive = None\n    \n    for num in lst:\n        if num < 0 and (largest_negative is None or num > largest_negative):\n            largest_negative = num\n        elif num > 0 and (smallest_positive is None or num < smallest_positive):\n            smallest_positive = num\n    \n    return (largest_negative, smallest_positive) if largest_negative is not None or smallest_positive is not None else (None, None)\n",
    "HumanEval/137": "def compare_one(a, b):\n    if isinstance(a, str) and ',' in a:\n        a = float(a.replace(\",\", \".\"))\n    if isinstance(b, str) and ',' in b:\n        b = float(b.replace(\",\", \".\")\n\n    if abs(float(a)) > abs(float(b)):\n        return a if isinstance(a, str) else b\n    elif abs(float(b)) > abs(float(a)):\n        return b if isinstance(b, str) else a\n    else:\n        return None\n",
    "HumanEval/138": "def is_equal_to_sum_even(n):\n    even_numbers = [x for x in range(n, 0, -2) if x % 2 == 0]\n    \n    for i in range(len(even_numbers)):\n        for j in range(i+1, len(even_numbers)):\n            for k in range(j+1, len(even_numbers)):\n                for l in range(k+1, len(even_numbers)):\n                    if even_numbers[i] + even_numbers[j] + even_numbers[k] + even_numbers[l] == n:\n                        return True\n    return False\n",
    "HumanEval/139": "def special_factorial(n):\n    if n <= 0:\n        raise ValueError(\"n must be greater than 0\")\n\n    result = 1\n\n    for i in range(n, 0, -1):\n        factorial_i = 1\n        for j in range(1, i + 1):\n            factorial_i *= j\n        \n        result *= factorial_i\n\n    return result\n",
    "HumanEval/140": "def fix_spaces(text):\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"__\", \"-\")\n    return text\n",
    "HumanEval/141": "def file_name_check(file_name):\n    digit_count = sum(1 for char in file_name if char.isdigit())\n    \n    if digit_count > 3:\n        return 'No'\n    \n    dot_count = file_name.count('.')\n    \n    if dot_count != 1:\n        return 'No'\n    \n    parts = file_name.split('.')\n    \n    if len(parts[0]) == 0 or not parts[0][0].isalpha():\n        return 'No'\n    \n    valid_extensions = ['txt', 'exe', 'dll']\n    if parts[1] not in valid_extensions:\n        return 'No'\n    \n    return 'Yes'\n",
    "HumanEval/142": "def sum_squares(lst):\n    total_sum = 0\n    \n    for index, num in enumerate(lst):\n        if index % 3 == 0 or (index % 4 == 0 and index % 3 != 0):\n            if index % 3 == 0:\n                num = num ** 2\n            total_sum += num\n            \n    return total_sum\n",
    "HumanEval/143": "def words_in_sentence(sentence):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_prime_length(word):\n        return is_prime(len(word))\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime_length(word)]\n    return \" \".join(prime_words)\n",
    "HumanEval/144": "from math import gcd\n\ndef parse_fraction(fraction):\n    numerator, denominator = map(int, fraction.split('/'))\n    return numerator, denominator\n\ndef multiply_fractions(x, n):\n    x_numer, x_denom = parse_fraction(x)\n    n_numer, n_denom = parse_fraction(n)\n\n    result_numer = x_numer * n_numer\n    result_denom = x_denom * n_denom\n\n    return result_numer, result_denom\n\ndef simplify_result(result):\n    numer, denom = result\n    div = gcd(numer, denom)\n    return numer // div, denom // div\n\ndef simplify(x, n):\n    result = multiply_fractions(x, n)\n    simplified_result = simplify_result(result)\n\n    return simplified_result[1] == 1 or simplified_result[1] == -1\n\n",
    "HumanEval/145": "def order_by_points(nums):\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    sums_of_digits = [sum_of_digits(num) for num in nums]\n    sorted_nums = sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))\n\n    return sorted_nums\n",
    "HumanEval/146": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            str_num = str(num)\n            if int(str_num[0]) % 2 != 0 and int(str_num[-1]) % 2 != 0:\n                count += 1\n    return count\n\n# Testing the function\nprint(specialFilter([15, -73, 14, -15]))  # Expected output: 1\nprint(specialFilter([33, -2, -3, 45, 21, 109]))  # Expected output: 2\n",
    "HumanEval/147": "def get_max_triples(n):\n    a = []\n    count = 0\n\n    for i in range(1, n+1):\n        a.append(i * i - i + 1)\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n\n    return count\n",
    "HumanEval/148": "# Step 0: Store the correct planet names in a list in the correct order\nplanets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n\ndef bf(planet1, planet2):\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    index_1 = planets.index(planet1)\n    index_2 = planets.index(planet2)\n    \n    if index_1 == -1 or index_2 == -1:\n        return ()\n    \n    if index_1 > index_2:\n        index_1, index_2 = index_2, index_1\n    \n    result = planets[index_1+1:index_2]\n    result.sort(key=lambda x: planets.index(x))\n    \n    return tuple(result)\n",
    "HumanEval/149": "def sorted_list_sum(lst):\n    filtered_list = [word for word in lst if len(word) % 2 == 0]\n    sorted_list = sorted(filtered_list, key=lambda x: (len(x), x))\n    return sorted_list\n",
    "HumanEval/150": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y\n",
    "HumanEval/151": "def double_the_difference(lst):\n    # Step 0: Filter out negative numbers and non-integers\n    filtered_list = [num for num in lst if num >= 0 and isinstance(num, int)]\n    \n    # Step 1: Filter the list to only contain odd numbers\n    odd_numbers = [num for num in filtered_list if num % 2 == 1]\n    \n    # Step 2: Calculate the sum of squares of the odd numbers\n    sum_of_squares = sum(num**2 for num in odd_numbers)\n    \n    # Step 3: Double the sum of squares\n    result = 2 * sum_of_squares\n    \n    return result\n",
    "HumanEval/152": "def compare(game, guess):\n    result_diff = []\n    \n    for i in range(len(game)):\n        diff = abs(game[i] - guess[i])\n        result_diff.append(diff)\n    \n    return result_diff\n",
    "HumanEval/153": "def Strongest_Extension(class_name, extensions):\n    strongest_extension_name = None\n    strongest_extension_strength = float('-inf')\n    strongest_extension_index = None\n    \n    for index, extension in enumerate(extensions):\n        # Calculate strength of the extension\n        cap_count = sum(1 for char in extension if char.isupper())\n        sm_count = sum(1 for char in extension if char.islower())\n        strength = cap_count - sm_count\n\n        # Update strongest extension if current extension is stronger\n        if strength > strongest_extension_strength or (strength == strongest_extension_strength and index < strongest_extension_index):\n            strongest_extension_name = extension\n            strongest_extension_strength = strength\n            strongest_extension_index = index\n\n    return f\"{class_name}.{strongest_extension_name}\"\n",
    "HumanEval/154": "def cycpattern_check(a, b):\n    if len(a) != len(b):\n        return False\n    else:\n        concat_word = a + a\n        \n        for i in range(len(a)):\n            if concat_word[i:i+len(b)] == b:\n                return True\n                \n        return False\n",
    "HumanEval/155": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n\n    num_str = str(abs(num))\n    \n    for digit in num_str:\n        digit = int(digit)\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    return (even_count, odd_count)\n",
    "HumanEval/156": "def int_to_mini_roman(number):\n    roman_numerals = {\n        'M': 1000, 'CM': 900, 'D': 500, 'CD': 400,\n        'C': 100, 'XC': 90, 'L': 50, 'XL': 40,\n        'X': 10, 'IX': 9, 'V': 5, 'IV': 4, 'I': 1\n    }\n\n    result = \"\"\n\n    roman_values = sorted(roman_numerals.items(), key=lambda x: x[1], reverse=True)\n\n    for roman_char, value in roman_values:\n        while number >= value:\n            result += roman_char\n            number -= value\n\n    return result.lower()\n",
    "HumanEval/157": "def right_angle_triangle(a, b, c):\n    if not is_valid_triangle(a, b, c):\n        return False\n\n    longest_side = max(a, b, c)\n    sum_of_squares = a**2 + b**2 if longest_side == c else (a**2 + c**2 if longest_side == b else b**2 + c**2)\n\n    return longest_side**2 == sum_of_squares\n",
    "HumanEval/158": "def find_max(words):\n    max_unique_word = \"\"\n    max_unique_count = -1\n    \n    for word in words:\n        unique_count = len(set(word))\n        if unique_count > max_unique_count:\n            max_unique_count = unique_count\n            max_unique_word = word\n        elif unique_count == max_unique_count and word < max_unique_word:\n            max_unique_word = word\n            \n    return max_unique_word\n",
    "HumanEval/159": "def eat(number, need, remaining):\n    total_carrots_eaten = number + need\n    carrots_left = remaining - total_carrots_eaten\n    if carrots_left < 0:\n        carrots_left = 0\n    return [total_carrots_eaten, carrots_left]\n",
    "HumanEval/160": "def do_algebra(operator, operand):\n    expression = operand[0]\n    \n    for i in range(1, len(operand)):\n        if operator[i-1] == '+':\n            expression += operand[i]\n        elif operator[i-1] == '-':\n            expression -= operand[i]\n        elif operator[i-1] == '*':\n            expression *= operand[i]\n        elif operator[i-1] == '//':\n            expression //= operand[i]\n        elif operator[i-1] == '**':\n            expression **= operand[i]\n    \n    return expression\n",
    "HumanEval/161": "def solve(s):\n    result = \"\"\n\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n\n    if not any(char.isalpha() for char in result):\n        result = result[::-1]\n\n    return result\n",
    "HumanEval/162": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    \n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n    return md5_hash\n",
    "HumanEval/163": "def generate_integers(a, b):\n    even_digits = []\n    for num in range(a, b+1):\n        if num % 2 == 0:\n            even_digits.append(num)\n    return even_digits\n"
}