{
    "HumanEval/0": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"\n    Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    if len(numbers) < 2:\n        return False\n    \n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < threshold:\n                return True\n    \n    return False\n",
    "HumanEval/1": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    separate_groups = []\n    stack = []\n    open_index = -1\n    \n    paren_string = paren_string.replace(\" \", \"\")\n    \n    for i, char in enumerate(paren_string):\n        if char == '(':\n            stack.append(i)\n        elif char == ')':\n            open_index = stack.pop()\n            group = paren_string[open_index:i + 1]\n            separate_groups.append(group)\n    \n    return separate_groups\n",
    "HumanEval/2": "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part\n",
    "HumanEval/3": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    \"\"\"\n    \n    balance = 0\n    \n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n        \n    return False\n",
    "HumanEval/4": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    # Step 1: Calculate the mean of the input list\n    mean = sum(numbers) / len(numbers)\n    \n    # Step 2: Calculate the absolute differences between each element and the mean\n    absolute_diffs = [abs(number - mean) for number in numbers]\n    \n    # Step 3: Calculate the Mean Absolute Deviation (MAD) by averaging the absolute differences\n    mad = sum(absolute_diffs) / len(absolute_diffs)\n    \n    # Step 4: Return the Mean Absolute Deviation (MAD)\n    return mad\n",
    "HumanEval/5": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    \n    for i, num in enumerate(numbers):\n        result.append(num)  # Step 3: Append the current number\n        if i != len(numbers) - 1:  # Check if it's not the last number\n            result.append(delimiter)  # Step 4: Append the delimiter\n    \n    return result\n",
    "HumanEval/6": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_groups = paren_string.split()\n    max_nesting_levels = []\n    for group in paren_groups:\n        max_nesting = 0\n        current_level = 0\n        for char in group:\n            if char == '(':\n                current_level += 1\n                max_nesting = max(max_nesting, current_level)\n            elif char == ')':\n                current_level -= 1\n        max_nesting_levels.append(max_nesting)\n    \n    return max_nesting_levels\n",
    "HumanEval/7": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    result = []\n    \n    for string in strings:\n        if substring in string:\n            result.append(string)\n    \n    return result\n",
    "HumanEval/8": "return total_sum, total_product\n",
    "HumanEval/9": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    \n    for i in range(len(numbers)):\n        current_max = max(numbers[:i + 1])\n        result.append(current_max)\n\n    return result\n",
    "HumanEval/10": "def make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    if not string:\n        return ''\n\n    for i in range(len(string), 0, -1):\n        suffix = string[:i]\n        if is_palindrome(suffix):\n            return string + string[:i-1][::-1]\n\n    return ''  # Return empty string if no palindromic suffix is found\n",
    "HumanEval/11": "def string_xor(a: str, b: str) -> str:\n    result = \"\"\n    for i in range(min(len(a), len(b))):  # iterating over the indices of the smaller string\n        result += str(int(a[i]) ^ int(b[i]))  # performing XOR operation on the characters\n    return result\n",
    "HumanEval/12": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \n    Args:\n        strings (List[str]): List of strings\n    \n    Returns:\n        Optional[str]: The longest string in the input list or None if the list is empty\n    \"\"\"\n    \n    if not strings:\n        return None\n    \n    max_length_str = strings[0]\n    \n    for string in strings:\n        if len(string) > len(max_length_str):\n            max_length_str = string\n    \n    return max_length_str\n",
    "HumanEval/13": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b \"\"\"\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)\n",
    "HumanEval/14": "def all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    \n    for char in string:\n        prefixes.append(char)\n        \n    for i in range(1, len(string)):\n        prefixes.append(string[:i+1])\n",
    "HumanEval/15": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 up to n inclusive. \"\"\"\n    \n    numbers = []\n    \n    for num in range(n + 1):\n        numbers.append(str(num))\n        \n    return ' '.join(numbers)\n",
    "HumanEval/16": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    distinct_chars = set()\n\n    # Convert the input string to lowercase\n    lowercase_string = string.lower()\n    \n    # Iterate through each character in the lowercase string\n    for char in lowercase_string:\n        # Check if the character is a letter and add it to the set\n        if char.isalpha():\n            distinct_chars.add(char)\n\n    # Return the length of the set containing unique characters\n    return len(distinct_chars)\n",
    "HumanEval/17": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes_list = music_string.split()\n    durations = []\n\n    for note in notes_list:\n        if note == 'o':\n            durations.append(4)\n        elif note == 'o|':\n            durations.append(2)\n        elif note == '.|':\n            durations.append(1)\n    \n    return durations\n",
    "HumanEval/18": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlapping cases. \"\"\"\n    count = 0\n    \n    if string == '' or substring == '' or len(substring) > len(string):\n        return 0\n    \n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    \n    return count\n\n# Testing the function\nprint(how_many_times('', 'a'))  # Output: 0\nprint(how_many_times('aaa', 'a'))   # Output: 3\nprint(how_many_times('aaaa', 'aa'))   # Output: 3\n\n# Additional test cases\nprint(how_many_times('ababab', 'aba'))  # Output: 2\nprint(how_many_times('banana', 'ana'))   # Output: 2\nprint(how_many_times('mississippi', 'ss'))   # Output: 2\n",
    "HumanEval/19": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    number_list = numbers.split()\n\n    number_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    numerical_values = [number_map[num] for num in number_list]\n    sorted_numerical_values = sorted(numerical_values)\n\n    sorted_numbers = [key for key, value in number_map.items() if value in sorted_numerical_values]\n    return ' '.join(sorted_numbers)\n",
    "HumanEval/20": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two numbers.\")\n\n    sorted_numbers = sorted(numbers)\n    \n    closest_pair = (sorted_numbers[0], sorted_numbers[1])\n    min_diff = abs(sorted_numbers[1] - sorted_numbers[0])\n    \n    for i in range(len(sorted_numbers) - 1):\n        diff = abs(sorted_numbers[i+1] - sorted_numbers[i])\n        \n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (sorted_numbers[i], sorted_numbers[i+1])\n    \n    return closest_pair\n",
    "HumanEval/21": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_nums = max_num - min_num\n    scaled_values = [(num - min_num) / range_nums for num in numbers]\n    return scaled_values\n",
    "HumanEval/22": "def filter_integers(values: List[Any]) -> List[int]:\n    integers = []\n    for value in values:\n        if isinstance(value, int):\n            integers.append(value)\n    return integers\n",
    "HumanEval/23": "def strlen(string: str) -> int:\n    \"\"\"Return length of given string\"\"\"\n    return len(string)\n",
    "HumanEval/24": "def largest_divisor(n: int) -> int:\n    largest = 1\n  \n    for i in range(2, n // 2 + 2):\n        if n % i == 0:\n            largest = i\n\n    return largest\n",
    "HumanEval/25": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    \n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n        \n    return factors\n",
    "HumanEval/26": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    result = []\n    seen = set()\n    \n    for num in numbers:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n    \n    return result\n",
    "HumanEval/27": "def flip_case(string: str) -> str:\n    new_string = \"\"\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        elif char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char\n    return new_string\n",
    "HumanEval/28": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    result = \"\"\n    for s in strings:\n        result += s\n    return result\n",
    "HumanEval/29": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    filtered_strings = []\n    \n    for string in strings:\n        if string.startswith(prefix):\n            filtered_strings.append(string)\n    \n    return filtered_strings\n",
    "HumanEval/30": "def get_positive(l: list):\n    positive_numbers = []\n\n    for num in l:\n        if num > 0:\n            positive_numbers.append(num)\n\n    return positive_numbers\n",
    "HumanEval/31": "import math\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    \n    if n == 1:\n        return False\n    \n    if n < 2:\n        return False\n    \n    sqrt_n = int(math.sqrt(n)) + 1\n    \n    for i in range(2, sqrt_n):\n        if n % i == 0:\n            return False\n    \n    return True\n",
    "HumanEval/32": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    if len(xs) % 2 != 0:\n        raise ValueError(\"List 'xs' should have an even number of coefficients.\")\n    \n    largest_non_zero = max(filter(lambda x: x != 0, xs))  # Extract largest non-zero coefficient\n    \n    # Create a new list of coefficients for a shifted polynomial\n    shifted_xs = [i / largest_non_zero for i in xs]\n    \n    for i in range(1, len(shifted_xs)):\n        if shifted_xs[-1] % i == 0:\n            factor = shifted_xs[-1] / i\n            if poly(shifted_xs, factor) == 0:\n                return factor\n",
    "HumanEval/33": "def sort_third(l: list):\n    sorted_list = []\n    \n    for i in range(len(l)):\n        if i % 3 == 0:\n            sorted_list.append(l[i])\n        else:\n            sorted_list.append(l[i])\n\n    return sorted_list\n",
    "HumanEval/34": "def unique(l: list):\n    unique_set = set(l)\n    unique_list = list(unique_set)\n    unique_list.sort()\n    return unique_list\n",
    "HumanEval/35": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\"\"\"\n    if not l:\n        return None  # return None for an empty list\n    \n    max_num = l[0]\n    for num in l[1:]:\n        if num > max_num:\n            max_num = num\n    \n    return max_num\n",
    "HumanEval/36": "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\"\"\"\n    \n    def contains_digit_7(number: int) -> bool:\n        return '7' in str(number)\n\n    count = 0\n    for num in range(1, n):\n        if num % 11 == 0 or num % 13 == 0:\n            if contains_digit_7(num):\n                count += 1\n\n    return count\n",
    "HumanEval/37": "def sort_even(l: list):\n    sorted_even_vals = []  # Step 0\n\n    for idx, val in enumerate(l):  # Step 1\n        if idx % 2 == 1:  # Step 2\n            sorted_even_vals.append(val)  # Step 2\n        else:  # Step 3\n            sorted_even_vals.append(sorted(l[:idx+1]))  # Step 3\n\n    return sorted_even_vals  # Step 4\n",
    "HumanEval/38": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # Split the input string into groups of three characters\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n\n    # Reverse the cyclic operation for each group to decode it\n    decoded_groups = [''.join([group[2], group[0], group[1]]) if len(group) == 3 else group for group in groups]\n\n    # Join the decoded groups to form the decoded string\n    decoded_string = ''.join(decoded_groups)\n    \n    return decoded_string\n",
    "HumanEval/39": "def is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef generate_fibonacci(limit: int):\n    fibonacci = [0, 1]\n    while fibonacci[-1] + fibonacci[-2] < limit:\n        fibonacci.append(fibonacci[-1] + fibonacci[-2])\n    return fibonacci\n",
    "HumanEval/40": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                elem1 = l[i]\n                elem2 = l[j]\n                elem3 = l[k]\n                if elem1 + elem2 + elem3 == 0:\n                    return True\n    return False\n",
    "HumanEval/41": "def car_race_collision(n: int):\n    total_collisions = n * (n - 1) // 2\n    return total_collisions\n",
    "HumanEval/42": "def incr_list(l: list):\n    result = []\n\n    for num in l:\n        result.append(num + 1)\n    \n    return result\n",
    "HumanEval/43": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n",
    "HumanEval/44": "def change_base(x: int, base: int):\n    if base >= 10:\n        return \"Base must be less than 10.\"\n    \n    result = \"\"\n    \n    while x > 0:\n        remainder = x % base\n        x = x // base\n        \n        result = str(remainder) + result\n    \n    return result\n",
    "HumanEval/45": "def triangle_area(a, h):\n    # Step 1: Calculate the area of the triangle\n    area = 0.5 * a * h\n    return area\n",
    "HumanEval/46": "return fib4_sequence[n]\n",
    "HumanEval/47": "def median(l: list) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    sorted_list = sorted(l)\n    length = len(sorted_list)\n    \n    if length % 2 == 1:\n        return sorted_list[length // 2]\n    else:\n        mid1 = sorted_list[length // 2 - 1]\n        mid2 = sorted_list[length // 2]\n        return (mid1 + mid2) / 2\n",
    "HumanEval/48": "def is_palindrome(text: str):\n    text = text.replace(\" \", \"\")\n    text = text.lower()\n    return text == text[::-1]\n",
    "HumanEval/49": "def modp(n: int, p: int):\n    power = 2 ** n\n    result = power % p\n    return result\n",
    "HumanEval/50": "def decode_shift(s: str):\n    decoded = \"\"\n    for ch in s:\n        decoded += chr(((ord(ch) - 5 - ord('a') + 26) % 26) + ord('a'))\n    \n    return decoded\n",
    "HumanEval/51": "def remove_vowels(text):\n    result = \"\"\n    vowels = 'aeiouAEIOU'\n    \n    for char in text:\n        if char not in vowels:\n            result += char\n    \n    return result\n",
    "HumanEval/52": "def below_threshold(l: list, t: int):\n    for num in l:\n        if num > t:\n            return False\n    return True\n",
    "HumanEval/53": "def add(x: int, y: int):\n    return x + y\n\n# Doctests\n\"\"\"\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\n\"\"\"\n",
    "HumanEval/54": "def same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)\n",
    "HumanEval/55": "def fib(n: int):\n    if n <= 1:\n        return n\n    \n    a, b = 0, 1\n    \n    for _ in range(2, n + 1):\n        a, b = b, a + b\n        \n    return b\n",
    "HumanEval/56": "def correct_bracketing(brackets: str):\n    count = 0\n    \n    for bracket in brackets:\n        if bracket == '<':\n            count += 1\n        elif bracket == '>':\n            if count <= 0:\n                return False\n            count -= 1\n    \n    return count == 0\n",
    "HumanEval/57": "def monotonic(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\"\"\"\n    \n    # Step 0: Check if the list is empty\n    if not l:\n        return True\n    \n    # Step 1.1: Check if the list is strictly sorted in increasing order\n    is_increasing = all(l[i] < l[i+1] for i in range(len(l) - 1))\n    \n    # Step 1.2: Check if the list is strictly sorted in decreasing order\n    is_decreasing = all(l[i] > l[i+1] for i in range(len(l) - 1))\n\n    # Step 2: Return True if either strictly increasing or strictly decreasing\n    return is_increasing or is_decreasing\n",
    "HumanEval/58": "def common(l1: list, l2: list):\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    common_elements = set1.intersection(set2)\n    \n    result = sorted(list(common_elements))\n    \n    return result\n",
    "HumanEval/59": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef largest_prime_factor(n: int):\n    prime_factors = []\n    \n    # Iterate from 2 to n // 2\n    for i in range(2, n // 2 + 1):\n        if n % i == 0 and is_prime(i):\n            prime_factors.append(i)\n    \n    # Include n if n is prime\n    if is_prime(n):\n        prime_factors.append(n)\n    \n    # Find the largest prime factor\n    largest_prime = max(prime_factors)\n    \n    return largest_prime\n",
    "HumanEval/60": "def sum_to_n(n: int):\n    total_sum = 0\n    \n    for i in range(1, n + 1):\n        total_sum += i\n    \n    return total_sum\n",
    "HumanEval/61": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append('(')\n        elif bracket == ')' and len(stack) == 0:\n            return False\n        elif bracket == ')' and len(stack) > 0:\n            stack.pop()\n    \n    return len(stack) == 0\n",
    "HumanEval/62": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\n    deriv_coefficients = []\n    \n    for i in range(1, len(xs)):\n        derivative_coefficient = i * xs[i]\n        deriv_coefficients.append(derivative_coefficient)\n    \n    return deriv_coefficients\n",
    "HumanEval/63": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n\n    n_minus_3, n_minus_2, n_minus_1 = 0, 0, 1\n\n    if n in [0, 1, 2]:\n        return n_minus_1\n\n    for i in range(3, n + 1):\n        fib_n = n_minus_1 + n_minus_2 + n_minus_3\n        n_minus_3, n_minus_2, n_minus_1 = n_minus_2, n_minus_1, fib_n\n\n    return fib_n\n",
    "HumanEval/64": "def vowels_count(s):\n    vowels = set('aeiou')\n    count = 0\n    for i, char in enumerate(s):\n        if char.lower() in vowels or (char.lower() == 'y' and i == len(s) - 1):\n            count += 1\n    return count\n",
    "HumanEval/65": "def circular_shift(x, shift):\n    x_str = str(x)\n    num_digits = len(x_str)\n    effective_shift = shift % num_digits\n    \n    if effective_shift == 0:\n        return x_str\n\n    new_str = x_str[-effective_shift:] + x_str[:-effective_shift]\n    return new_str\n",
    "HumanEval/66": "def digitSum(s):\n    total_sum = 0\n\n    for char in s:\n        if char.isupper():\n            total_sum += ord(char)\n\n    return total_sum\n",
    "HumanEval/67": "def fruit_distribution(s, n):\n    apple_str = ''\n    orange_str = ''\n    for char in s:\n        if char.isnumeric():\n            if not orange_str:\n                apple_str += char\n            else:\n                orange_str += char\n    apples = int(apple_str)\n    oranges = int(orange_str)\n    \n    mango = n - apples - oranges\n    return mango\n",
    "HumanEval/68": "def pluck(arr):\n    min_even_value = None\n    min_index = -1\n\n    for index, value in enumerate(arr):\n        if value % 2 == 0:  # Check if the value is even\n            if min_even_value is None or value < min_even_value or (value == min_even_value and index < min_index): # Compare with current min_even_value\n                min_even_value = value\n                min_index = index\n\n    if min_even_value is None:\n        return []\n    \n    return [min_even_value, min_index]\n",
    "HumanEval/69": "def search(lst):\n    freq_dict = {}\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    greatest_integer = -1\n    for num, freq in freq_dict.items():\n        if freq >= num:\n            greatest_integer = max(greatest_integer, num)\n    \n    return greatest_integer\n",
    "HumanEval/70": "def strange_sort_list(lst):\n    if not lst:\n        return []\n\n    output = []\n    while lst:\n        min_val = min(lst)\n        output.append(min_val)\n        lst.remove(min_val)\n        \n        if not lst:\n            break\n        \n        max_val = max(lst)\n        output.append(max_val)\n        lst.remove(max_val)\n    \n    return output\n",
    "HumanEval/71": "import math\n\ndef triangle_area(a, b, c):\n    def is_valid_triangle(a, b, c):\n        return a + b > c and a + c > b and b + c > a\n\n    if not is_valid_triangle(a, b, c):\n        return -1\n\n    s = (a + b + c) / 2\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    rounded_area = round(area, 2)\n    \n    return rounded_area\n",
    "HumanEval/72": "def is_palindromic(lst):\n    return lst == lst[::-1]\n\ndef will_it_fly(q, w):\n    if not is_palindromic(q):\n        return False\n    \n    sum_elements = sum(q)\n    \n    if sum_elements <= w:\n        return True\n    else:\n        return False\n",
    "HumanEval/73": "def smallest_change(arr):\n    length = len(arr)\n    changes_needed = 0\n    left = 0\n    right = length - 1\n\n    while left < right:\n        if arr[left] != arr[right]:\n            changes_needed += abs(arr[left] - arr[right])\n        left += 1\n        right -= 1\n\n    return changes_needed\n",
    "HumanEval/74": "def total_match(lst1, lst2):\n    def calculate_chars(lst):\n        return sum(len(s) for s in lst)\n\n    if len(lst1) == len(lst2):\n        total_chars_lst1 = calculate_chars(lst1)\n        total_chars_lst2 = calculate_chars(lst2)\n\n        if total_chars_lst1 < total_chars_lst2:\n            return lst1\n        else:\n            return lst2\n    elif len(lst1) < len(lst2):\n        return lst1\n    else:\n        return lst2\n",
    "HumanEval/75": "def is_multiply_prime(a):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(2, 100) if is_prime(num)]\n\n    products = []\n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                products.append(primes[i] * primes[j] * primes[k])\n\n    return a in products\n",
    "HumanEval/76": "import math\n\ndef is_simple_power(x, n):\n    if x == 1:\n        return n == 1\n    \n    if x == n:\n        return True\n\n    sqrt_x = math.isqrt(x)\n    for i in range(2, sqrt_x + 1):\n        if n**i == x:\n            return True\n\n    return False\n",
    "HumanEval/77": "import math\n\ndef iscube(a):\n    if a < 0:\n        return False\n    cube_root = a ** (1/3)\n    if cube_root.is_integer() and int(cube_root) ** 3 == a:\n        return True\n    return False\n",
    "HumanEval/78": "def hex_key(num):\n    count = 0\n    primes = ['2', '3', '5', '7', 'B', 'D']\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count\n",
    "HumanEval/79": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    binary = \"db\" + binary + \"db\"\n    return binary\n",
    "HumanEval/80": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    \n    for i in range(len(s) - 2):\n        sub_str = s[i:i+3]\n        \n        if len(set(sub_str)) < 3:\n            return False\n    \n    return True\n",
    "HumanEval/81": "def numerical_letter_grade(grades):\n    letter_grades = []\n    \n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade = 'A+'\n        elif gpa > 3.7:\n            letter_grade = 'A'\n        elif gpa > 3.3:\n            letter_grade = 'A-'\n        elif gpa > 3.0:\n            letter_grade = 'B+'\n        elif gpa > 2.7:\n            letter_grade = 'B'\n        elif gpa > 2.3:\n            letter_grade = 'B-'\n        elif gpa > 2.0:\n            letter_grade = 'C+'\n        elif gpa > 1.7:\n            letter_grade = 'C'\n        elif gpa > 1.3:\n            letter_grade = 'C-'\n        elif gpa > 1.0:\n            letter_grade = 'D+'\n        elif gpa > 0.7:\n            letter_grade = 'D'\n        elif gpa > 0.0:\n            letter_grade = 'D-'\n        else:\n            letter_grade = 'E'\n        \n        letter_grades.append(letter_grade)\n    \n    return letter_grades\n",
    "HumanEval/82": "def prime_length(string):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    string_length = len(string)\n    return is_prime(string_length)\n",
    "HumanEval/83": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    \n    # Step 0: Check if the input n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return \"Input must be a positive integer.\"\n    \n    count = 0\n    \n    # Step 2: Iterate through all n-digit positive integers\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n\n    return count\n",
    "HumanEval/84": "def solve(N):\n    N_str = str(N)\n    total_sum = sum(int(digit) for digit in N_str)\n    binary_sum = bin(total_sum)[2:]\n    return binary_sum\n",
    "HumanEval/85": "def add(lst):\n    total = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            total += lst[i]\n    return total\n\n# Testing the function\nprint(add([4, 2, 6, 7]))  # It should print 2\n",
    "HumanEval/86": "import re\n\ndef sort_word(word):\n    return ''.join(sorted(word, key=lambda c: ord(c)))\n\ndef anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of a string is a string where all words are replaced by a new word \n    with characters arranged in ascending order of ascii value.\n    \n    Args:\n    - s: input string\n    \n    Returns:\n    - Ordered version of the input string\n    \"\"\"\n    words = re.findall(r'\\S+|\\s+', s)\n    ordered_words = [sort_word(word) if word.strip() else ' ' for word in words]\n    ordered_string = ''.join(ordered_words)\n    return ordered_string\n",
    "HumanEval/87": "def get_row(lst, x):\n    coordinates = []\n    \n    for i, row in enumerate(lst):\n        if x in row:\n            j = row.index(x)\n            coordinates.append((i, j))\n    \n    coordinates.sort(key=lambda coord: coord[0])  # Step 2\n    coordinates.sort(key=lambda coord: coord[1], reverse=True)  # Step 3\n    \n    return coordinates\n",
    "HumanEval/88": "def sort_array(array):\n    if not array:\n        return array\n    \n    first_element = array[0]\n    last_element = array[-1]\n    \n    sum_first_last = first_element + last_element\n    \n    if sum_first_last % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n",
    "HumanEval/89": "def encrypt(s):\n    encrypted_text = \"\"\n    \n    for c in s:\n        if c.isalpha():\n            rotated_char = chr(((ord(c) - ord('a') + 2 * 2) % 26) + ord('a')) if c.islower() else chr(((ord(c) - ord('A') + 2 * 2) % 26) + ord('A'))\n            encrypted_text += rotated_char\n        else:\n            encrypted_text += c\n    \n    return encrypted_text\n",
    "HumanEval/90": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    \n    lst.sort()\n    \n    return lst[1] if len(lst) > 1 else None\n",
    "HumanEval/91": "def is_bored(S):\n    sentences = []\n    current_sentence = \"\"\n    for char in S:\n        if char in ['.', '?', '!']:\n            sentences.append(current_sentence.strip())\n            current_sentence = \"\"\n        else:\n            current_sentence += char\n\n    boredom_count = 0\n    for sentence in sentences:\n        if sentence.startswith(\"I \") or sentence.startswith(\"I\" + ' '):  # Check if the sentence starts with \"I \"\n            boredom_count += 1\n\n    return boredom_count\n",
    "HumanEval/92": "def any_int(x, y, z):\n    if all(isinstance(num, int) for num in [x, y, z]):\n        if any(num == x + y + z for num in [x, y, z]):\n            return True\n        else:\n            return False\n    else:\n        return False\n",
    "HumanEval/93": "def encode(message):\n    encoded_message = \"\"\n    \n    for char in message:\n        if char.isalpha():\n            if char.lower() in ['a', 'e', 'i', 'o', 'u']:\n                encoded_message += chr(ord(char) + 2) if char.islower() else chr(ord(char) + 2).upper()\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n        \n    return encoded_message\n",
    "HumanEval/94": "def sum_of_digits(n):\n    return sum(int(digit) for digit in str(n))\n\ndef find_largest_prime_sum(lst):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n   \n    largest_prime = None\n    for num in lst:\n        if is_prime(num) and (largest_prime is None or num > largest_prime):\n            largest_prime = num\n    \n    if largest_prime is None:\n        return 0\n    \n    return sum_of_digits(largest_prime)\n",
    "HumanEval/95": "def check_dict_case(dict):\n    if not dict:  # Check if dictionary is empty\n        return False\n    \n    keys = dict.keys()\n    \n    key_types = [type(key) for key in keys]\n    \n    if all(key_type == str for key_type in key_types):  # Check if all keys are strings\n        if all(key.islower() for key in keys) or all(key.isupper() for key in keys):  # Check if all keys are either all lowercase or all uppercase\n            return True\n    \n    return False\n",
    "HumanEval/96": "import math\n\ndef count_up_to(n):\n    primes_list = []\n    \n    if n <= 1:\n        return primes_list\n    \n    for num in range(2, n):\n        if num == 2 or num == 3:\n            primes_list.append(num)\n            continue\n        if num == 1 or num % 2 == 0:\n            continue\n        \n        is_prime = True\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes_list.append(num)\n            \n    return primes_list\n",
    "HumanEval/97": "def multiply(a, b):\n    return (a % 10) * (b % 10)\n",
    "HumanEval/98": "def count_upper(s):\n    count = 0\n    \n    vowels = set('AEIOU')\n    \n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in vowels:\n            count += 1\n            \n    return count\n",
    "HumanEval/99": "def closest_integer(value):\n    value = value.strip()\n    \n    numerical_value = float(value)\n    \n    floor_value = int(numerical_value)\n    ceil_value = int(numerical_value) + 1\n\n    diff_floor = abs(numerical_value - floor_value)\n    diff_ceil = abs(ceil_value - numerical_value)\n    \n    # Decide which integer is closer or return the farthest from zero if equidistant\n    if diff_floor == diff_ceil:\n        if numerical_value < 0:\n            return ceil_value\n        else:\n            return floor_value\n    elif diff_floor < diff_ceil:\n        return floor_value\n    else:\n        return ceil_value\n",
    "HumanEval/100": "def make_a_pile(n):\n    stone_pile = [n]  # Append n to the list, representing the first level\n\n    for i in range(2, n+1):  # Loop from level 2 to n (inclusive)\n        if stone_pile[i-2] % 2 == 0:  # Check if the stones in the previous level are even\n            stone_pile.append(stone_pile[i-2] + 1)  # If even, add the next odd number of stones\n        else:\n            stone_pile.append(stone_pile[i-2] + 2)  # If odd, add the next even number of stones\n\n    return stone_pile\n",
    "HumanEval/101": "def words_string(s):\n    words = s.replace(',', '').split()\n    return words\n",
    "HumanEval/102": "def choose_num(x, y):\n    if x > y:\n        x, y = y, x\n\n    even_number = -1\n    for num in range(y, x + 1):\n        if num % 2 == 0:\n            even_number = num\n            break\n\n    return even_number\n",
    "HumanEval/103": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    # Calculate the sum of numbers from n to m\n    total = 0\n    count = 0\n    for i in range(n, m+1):\n        total += i\n        count += 1\n    \n    # Calculate the average\n    average = total / count\n    \n    # Round the average to the nearest integer and convert to binary\n    rounded_average = round(average)\n    \n    return bin(rounded_average)\n",
    "HumanEval/104": "def unique_digits(x):\n    result = []\n    \n    for num in x:\n        num_str = str(num)\n        has_even_digit = any(int(digit) % 2 == 0 for digit in num_str)\n        \n        if not has_even_digit:\n            result.append(num)\n    \n    result.sort()\n    \n    return result\n",
    "HumanEval/105": "def by_length(arr):\n    # Define a dictionary to map integers to their corresponding names\n    integer_to_name = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    \n    # Filter out integers between 1 and 9 (inclusive) from the input array and sort these integers\n    filtered_arr = sorted([num for num in arr if 1 <= num <= 9])\n    \n    # Reverse the sorted array of integers\n    reversed_arr = filtered_arr[::-1]\n    \n    # Map each integer in the reversed array to its corresponding name using the dictionary\n    result_arr = [integer_to_name[num] for num in reversed_arr]\n    \n    return result_arr\n",
    "HumanEval/106": "import math\n\ndef f(n):\n    result = []\n    \n    for i in range(1, n+1):\n        if i % 2 == 0:\n            # Calculate and append the factorial of i if i is even\n            result.append(math.factorial(i//2))\n        else:\n            result.append(sum(range(1, i+1)))  # Calculate and append the sum of numbers from 1 to i if i is odd\n    \n    return result\n",
    "HumanEval/107": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    even_count = 0\n    odd_count = 0\n    \n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n                \n    return (even_count, odd_count)\n",
    "HumanEval/108": "def count_nums(arr):\n    def get_sum_of_digits(num):\n        abs_num = abs(num)\n        sum_digits = sum(int(digit) for digit in str(abs_num))\n        \n        return sum_digits if num >= 0 else -sum_digits\n\n    count = 0\n    for num in arr:\n        if get_sum_of_digits(num) > 0:\n            count += 1\n\n    return count\n",
    "HumanEval/109": "def move_one_ball(arr):\n    if not arr:\n        return True\n\n    min_index = arr.index(min(arr))\n\n    # Check if the array is already sorted\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i+1]:\n            break\n    else:\n        return True\n    \n    num_shifts = len(arr) - min_index\n    if num_shifts == len(arr):\n        num_shifts = 0\n\n    new_arr = arr[-min_index:] + arr[:-min_index]\n\n    for i in range(len(new_arr) - 1):\n        if new_arr[i] > new_arr[i + 1]:\n            return False\n\n    return True\n",
    "HumanEval/110": "def exchange(lst1, lst2):\n    odd_count_lst1 = sum(1 for num in lst1 if num % 2 != 0)\n    odd_count_lst2 = sum(1 for num in lst2 if num % 2 != 0)\n    even_count_lst2 = sum(1 for num in lst2 if num % 2 == 0)\n\n    if odd_count_lst1 <= odd_count_lst2 + even_count_lst2:\n        return \"YES\"\n    else:\n        return \"NO\"\n",
    "HumanEval/111": "def histogram(test):\n    letter_count = {letter: 0 for letter in set(test.replace(\" \", \"\").lower()) if letter.isalpha()}\n\n    for letter in test.replace(\" \", \"\").lower():\n        if letter in letter_count:\n            letter_count[letter] += 1\n\n    max_count = max(letter_count.values())\n    max_letters = {letter: count for letter, count in letter_count.items() if count == max_count}\n\n    return max_letters\n",
    "HumanEval/112": "def reverse_delete(s, c):\n    result_string = ''.join(char for char in s if char not in c)\n    is_palindrome = result_string == result_string[::-1]\n    return result_string, is_palindrome\n",
    "HumanEval/113": "def odd_count(lst):\n    result = []  # Initialize an empty list to store the results\n    for string in lst:\n        odd_count = sum(1 for char in string if int(char) % 2 != 0)\n        output_str = f\"the number of odd elements {odd_count}n the str{odd_count}ng {string} of the {odd_count}nput.\"\n        result.append(output_str)  # Append the modified string to the result list\n    return result  # Return the list of modified strings\n",
    "HumanEval/114": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    \n    cur_sum = 0\n    for num in nums:\n        cur_sum = max(num, cur_sum + num)\n        min_sum = min(min_sum, cur_sum)\n    \n    return min_sum\n",
    "HumanEval/115": "import math\n\ndef max_fill(grid, capacity):\n    total_wells = len(grid)\n    units_per_well = len(grid[0])\n    \n    total_times_fill_needed = 0\n    \n    for col in range(units_per_well):\n        for row in range(total_wells):\n            if grid[row][col] == 1:\n                total_times_fill_needed += 1\n    \n    total_water_to_extract = total_times_fill_needed * capacity\n\n    total_times_bucket_empty = math.ceil(total_water_to_extract / capacity)\n    \n    return total_times_bucket_empty\n",
    "HumanEval/116": "def sort_array(arr):\n    def count_ones(num):\n        return bin(num).count('1')\n\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n",
    "HumanEval/117": "def select_words(s, n):\n    words = s.split()\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    result = []\n  \n    for word in words:\n        count = sum(1 for letter in word if letter in consonants)\n        if count == n:\n            result.append(word)\n    \n    return result\n",
    "HumanEval/118": "def is_consonant(char):\n    return char.isalpha() and char.lower() not in ['a', 'e', 'i', 'o', 'u']\n\ndef get_closest_vowel(word):\n    found_consonant = False\n    closest_vowel = \"\"\n    for char in reversed(word):\n        if is_consonant(char):\n            found_consonant = True\n        elif found_consonant and char.isalpha() and not is_consonant(char):\n            closest_vowel = char\n            break\n\n    return closest_vowel\n",
    "HumanEval/119": "def match_parens(lst):\n    open_count = close_count = 0\n\n    for string in lst:\n        for char in string:\n            if char == '(':\n                open_count += 1\n            elif char == ')':\n                close_count += 1\n                \n            if close_count > open_count:\n                return 'No'\n    \n    if open_count != close_count:\n        return 'No'\n    else:\n        return 'Yes'\n",
    "HumanEval/120": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    return arr[:k]\n",
    "HumanEval/121": "def solution(lst):\n    odd_elements_sum = 0\n    for index, num in enumerate(lst):\n        if num % 2 != 0 and index % 2 == 0:  # Check if the element is odd and the index is even\n            odd_elements_sum += num  # Add the odd element to the sum\n\n    return odd_elements_sum\n",
    "HumanEval/122": "    return sum_two_digits\n",
    "HumanEval/123": "def get_odd_collatz(n):\n    if not isinstance(n, int) or n <= 0:\n        return []\n\n    odd_collatz = []\n    \n    while n != 1:\n        if n % 2 != 0:\n            odd_collatz.append(n)\n        \n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n\n    if n % 2 != 0:\n        odd_collatz.append(n)\n    \n    return sorted(odd_collatz)\n",
    "HumanEval/124": "def valid_date(date):\n    if not date:\n        return False\n    \n    date_components = date.split('-')\n    if len(date_components) != 3:\n        return False\n\n    month = int(date_components[0])\n    if month < 1 or month > 12:\n        return False\n\n    day = int(date_components[1])\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    else:\n        return False\n\n    return True\n",
    "HumanEval/125": "def split_words(txt):\n    has_whitespace = ' ' in txt\n    \n    if has_whitespace:\n        words = txt.split()\n        return words\n    \n    has_commas = ',' in txt\n    \n    if not has_whitespace and has_commas:\n        words = txt.split(',')\n        return [word.strip() for word in words]\n    \n    if not has_whitespace and not has_commas:\n        count_odd_lower_case_letters = 0\n        txt_lower = txt.lower()\n        \n        for char in txt_lower:\n            if char.islower() and ord(char) % 2 != 0:\n                count_odd_lower_case_letters += 1\n        \n        return count_odd_lower_case_letters\n",
    "HumanEval/126": "def has_duplicates(lst):\n    num_count = {}\n    for num in lst:\n        if num in num_count:\n            num_count[num] += 1\n        else:\n            num_count[num] = 1\n    \n    for count in num_count.values():\n        if count > 1:\n            return True\n    \n    return False\n\ndef is_sorted(lst):\n    if has_duplicates(lst):\n        return False\n    \n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1)\n",
    "HumanEval/127": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = min(interval1), max(interval1)\n    start2, end2 = min(interval2), max(interval2)\n    \n    intersect_start = max(start1, start2)\n    intersect_end = min(end1, end2)\n    \n    if intersect_start > intersect_end:\n        return \"NO\"\n    \n    intersection_length = intersect_end - intersect_start\n    \n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"\n",
    "HumanEval/128": "def prod_signs(arr):\n    if not arr:\n        return None\n\n    sign_prod = 1\n    sum_magnitudes = 0\n\n    for num in arr:\n        sign_prod *= 1 if num > 0 else -1 if num < 0 else 0\n        sum_magnitudes += abs(num)\n\n    return sign_prod * sum_magnitudes\n",
    "HumanEval/129": "def minPath(grid, k):\n    start_value = 1\n    for row in range(len(grid)):\n        for col in range(len(grid[0])):\n            if grid[row][col] == start_value:\n                start_pos = (row, col)\n                break\n    \n    def get_neighbors(grid, row, col):\n        neighbors = []\n        if row > 0:\n            neighbors.append((row - 1, col))\n        if row < len(grid) - 1:\n            neighbors.append((row + 1, col))\n        if col > 0:\n            neighbors.append((row, col - 1))\n        if col < len(grid[0]) - 1:\n            neighbors.append((row, col + 1))\n        return neighbors\n\n    def dfs(grid, k, path, current_pos):\n        if len(path) == k:\n            return path\n\n        for neighbor in get_neighbors(grid, current_pos[0], current_pos[1]):\n            new_row, new_col = neighbor\n            new_pos_value = grid[new_row][new_col]\n            if new_pos_value not in path:\n                found_path = dfs(grid, k, path + [new_pos_value], neighbor)\n                if found_path:\n                    return found_path\n\n    return dfs(grid, k, [start_value], start_pos)\n\n# Test the minPath function\ngrid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nk = 3\nprint(minPath(grid, k))  # Expected output: [1, 2, 1]\n",
    "HumanEval/130": "def tri(n):\n    tribonacci_sequence = [3, 1]  # Initialize the list with the first two values of the Tribonacci sequence\n    \n    # Iterate from index 2 up to n (inclusive) to calculate the Tribonacci sequence\n    for i in range(2, n + 1):\n        # Check if i is even or odd to determine the Tribonacci number\n        if i % 2 == 0:\n            tribonacci_number = 1 + i // 2  # Calculate Tribonacci number for even index i\n        else:\n            tribonacci_number = tribonacci_sequence[i - 1] + tribonacci_sequence[i - 2] + tribonacci_sequence[i - 3]\n        \n        tribonacci_sequence.append(tribonacci_number)  # Append the calculated Tribonacci number to the list\n    \n    return tribonacci_sequence\n",
    "HumanEval/131": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    n_str = str(n)\n    \n    for digit in n_str:\n        digit_int = int(digit)\n        \n        if digit_int % 2 != 0:\n            product *= digit_int\n    \n    return product\n",
    "HumanEval/132": "def is_nested(string):\n    stack = []\n\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    \n    return len(stack) > 0\n",
    "HumanEval/133": "import math\n\ndef sum_squares(lst):\n    rounded_lst = [math.ceil(elem) for elem in lst]\n    squared_lst = [elem ** 2 for elem in rounded_lst]\n    total_sum = sum(squared_lst)\n    \n    return total_sum\n\n# Test the function with the provided examples\nprint(sum_squares([1, 2, 3]))  # Output should be 14\nprint(sum_squares([1, 4, 9]))  # Output should be 98\nprint(sum_squares([1, 3, 5, 7]))  # Output should be 84\nprint(sum_squares([1.4, 4.2, 0]))  # Output should be 29\nprint(sum_squares([-2.4, 1, 1]))  # Output should be 6\n",
    "HumanEval/134": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    \n    txt = txt.rstrip()  # Remove trailing whitespace\n    words = txt.split()  # Split the string into words\n    \n    if len(words) == 0:\n        return False\n\n    last_word = words[-1]  # Get the last word\n\n    if not last_word:\n        return False\n\n    last_character = last_word[-1]  # Get the last character of the last word\n\n    return last_character.isalpha()\n",
    "HumanEval/135": "def can_arrange(arr):\n    max_index = -1  # Initialize the maximum index found so far\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i-1]:  # Check if the current element is not greater than or equal to the element before it\n            max_index = max(max_index, i-1)\n    \n    return max_index\n\n# Test cases\nprint(can_arrange([1,2,4,3,5]))  # Output: 3\nprint(can_arrange([1,2,3]))       # Output: -1\n",
    "HumanEval/136": "def largest_smallest_integers(lst):\n    largest_neg = None\n    smallest_pos = None\n\n    for num in lst:\n        if num < 0 and (largest_neg is None or num > largest_neg):\n            largest_neg = num\n        elif num > 0 and (smallest_pos is None or num < smallest_pos):\n            smallest_pos = num\n\n    return (largest_neg, smallest_pos)\n",
    "HumanEval/137": "def compare_one(a, b):\n    if type(a) == type(b):\n        if isinstance(a, (int, float)):\n            return max(a, b)\n        elif isinstance(a, str):\n            try:\n                a = float(a.replace(',', '.'))\n            except ValueError:\n                return None\n            try:\n                b = float(b.replace(',', '.'))\n            except ValueError:\n                return None\n            if a != b:\n                return max(a, b)\n            else:\n                return None\n    else:\n        return None\n",
    "HumanEval/138": "def is_equal_to_sum_even(n):\n    if n < 8:\n        return False\n\n    for i in range(2, n // 2 + 1):\n        for j in range(2, n // 2 + 1):\n            for k in range(2, n // 2 + 1):\n                for l in range(2, n // 2 + 1):\n                    if i + j + k + l == n:\n                        return True\n    return False\n",
    "HumanEval/139": "def special_factorial(n):\n    result = 1\n    for i in range(n, 0, -1):\n        factorial = 1\n        for j in range(1, i+1):\n            factorial *= j\n        result *= factorial\n    return result\n",
    "HumanEval/140": "def fix_spaces(text):\n    result = \"\"\n    current_consecutive_spaces = 0  # count of consecutive spaces\n    \n    for i, char in enumerate(text):\n        if char == \" \":\n            current_consecutive_spaces += 1\n\n            if i + 1 < len(text) and text[i + 1] == \" \":\n                current_consecutive_spaces += 1\n                \n                if current_consecutive_spaces > 2:\n                    result += \"-\"\n                else:\n                    result += \"_\"\n            else:\n                result += \"_\"\n        else:\n            current_consecutive_spaces = 0\n            result += char\n\n    return result\n",
    "HumanEval/141": "def file_name_check(file_name):\n    if sum(char.isdigit() for char in file_name) > 3:\n        return 'No'\n\n    if file_name.count('.') != 1:\n        return 'No'\n\n    file_parts = file_name.split('.')\n    if len(file_parts) != 2:\n        return 'No'\n\n    if not file_parts[0] or not file_parts[0][0].isalpha():\n        return 'No'\n\n    if file_parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    return 'Yes'\n",
    "HumanEval/142": "def sum_squares(lst):\n    total_sum = 0\n    \n    for index in range(len(lst)):\n        num = lst[index]\n        \n        if index % 3 == 0:\n            total_sum += num**2\n        \n        elif index % 4 == 0 and index % 3 != 0:\n            total_sum += num**3\n    \n    return total_sum\n",
    "HumanEval/143": "def words_in_sentence(sentence):\n\n    def is_prime(number):\n        if number < 2:\n            return False\n        for i in range(2, int(number ** 0.5) + 1):\n            if number % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return \" \".join(prime_words)\n",
    "HumanEval/144": "def simplify(x, n):\n    # Step 0: Extract numerators and denominators\n    x_numer, x_denom = map(int, x.split('/'))\n    n_numer, n_denom = map(int, n.split('/'))\n    \n    # Step 1: Multiply numerators\n    prod_numer = x_numer * n_numer\n    \n    # Step 2: Multiply denominators\n    prod_denom = x_denom * n_denom\n    \n    # Step 3: Check if product is a whole number\n    return prod_numer % prod_denom == 0\n",
    "HumanEval/145": "def order_by_points(nums):\n    def digit_sum(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    return sorted(nums, key=lambda num: (digit_sum(num), nums.index(num)))\n",
    "HumanEval/146": "def specialFilter(nums):\n    count = 0  # Initialize a counter variable to keep track of the number of elements that meet the specified conditions\n    \n    for num in nums:\n        # Check if the number is greater than 10 and if both the first and last digits are odd\n        str_num = str(abs(num))  # Convert the number to a string and take the absolute value to handle negative numbers\n        first_digit = int(str_num[0])  # Get the first digit of the number\n        last_digit = abs(num) % 10  # Get the last digit of the number\n\n        # If the number meets the conditions, increment the counter\n        if num > 10 and first_digit % 2 != 0 and last_digit % 2 != 0:\n            count += 1\n\n    return count\n",
    "HumanEval/147": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    \n    count_triples = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count_triples += 1\n    \n    return count_triples\n",
    "HumanEval/148": "    return tuple(sorted_planets)\n",
    "HumanEval/149": "def list_sort(lst):\n    even_length_strings = [string for string in lst if len(string) % 2 == 0]\n    sorted_strings = sorted(even_length_strings, key=lambda x: (len(x), x))\n    return sorted_strings\n",
    "HumanEval/150": "def x_or_y(n, x, y):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y\n",
    "HumanEval/151": "def double_the_difference(lst):\n    result = 0\n\n    for num in lst:\n        if isinstance(num, int) and num > 0 and num % 2 != 0:\n            result += num ** 2\n\n    return result * 2\n",
    "HumanEval/152": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]\n",
    "HumanEval/153": "def Strongest_Extension(class_name, extensions):\n    strongest_extension_name = None\n    strongest_extension_strength = float('-inf')\n    \n    for extension in extensions:\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        extension_strength = CAP - SM\n        \n        if extension_strength > strongest_extension_strength:\n            strongest_extension_name = extension\n            strongest_extension_strength = extension_strength\n        elif extension_strength == strongest_extension_strength:\n            if extensions.index(extension) < extensions.index(strongest_extension_name):\n                strongest_extension_name = extension\n    \n    result = f\"{class_name}.{strongest_extension_name}\"\n    return result\n",
    "HumanEval/154": "def rotate_word(word):\n    for i in range(len(word)):\n        yield word[i:] + word[:i]\n\ndef cycpattern_check(a, b):\n    rotated_b = rotate_word(b)\n    for rot in rotated_b:\n        if rot in a:\n            return True\n    return False\n",
    "HumanEval/155": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    \n    num_str = str(num)\n    \n    for digit_char in num_str:\n        digit = int(digit_char)\n        \n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    return even_count, odd_count\n",
    "HumanEval/156": "roman_numerals = {\n    1000: 'm',\n    900: 'cm',\n    500: 'd',\n    400: 'cd',\n    100: 'c',\n    90: 'xc',\n    50: 'l',\n    40: 'xl',\n    10: 'x',\n    9: 'ix',\n    5: 'v',\n    4: 'iv',\n    1: 'i'\n}\n\ndef int_to_mini_roman(number):\n    roman_result = ''\n    \n    for value, roman_val in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            roman_result += roman_val\n            number -= value\n\n    return roman_result\n",
    "HumanEval/157": "import math\n\ndef right_angle_triangle(a, b, c):\n    # Step 0: Check if the given sides can form a triangle\n    if a > 0 and b > 0 and c > 0 and a + b > c and b + c > a and a + c > b:\n        # Calculate the squares of the sides\n        a_squared = a * a\n        b_squared = b * b\n        c_squared = c * c\n        \n        # Check if any of the angles determined by the sides is a right angle (90 degrees)\n        if a_squared + b_squared == c_squared or b_squared + c_squared == a_squared or a_squared + c_squared == b_squared:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
    "HumanEval/158": "def find_max(words):\n    char_count = {}\n    max_unique_count = 0\n    max_word = \"\"\n\n    for word in words:\n        unique_chars = set()\n        for char in word:\n            unique_chars.add(char)\n        \n        count_unique = len(unique_chars)\n        \n        if count_unique > char_count.get(word, 0):\n            char_count[word] = count_unique\n            if count_unique > max_unique_count or (count_unique == max_unique_count and word < max_word):\n                max_unique_count = count_unique\n                max_word = word\n    \n    return max_word\n",
    "HumanEval/159": "def eat(number, need, remaining):\n    total_eaten = number + need\n    total_left = max(remaining - total_eaten, 0)\n\n    return total_eaten, total_left\n",
    "HumanEval/160": "def do_algebra(operator, operand):\n    if len(operator) != len(operand) - 1:\n        return \"Error: Length of operator list should be one less than the length of the operand list.\"\n\n    expression = str(operand[0]) \n\n    for i in range(len(operator)):\n        expression += operator[i]  # Add the operator\n        expression += str(operand[i+1])  # Add the current operand\n\n    result = eval(expression)\n\n    return result\n",
    "HumanEval/161": "def solve(s):\n    result = \"\"\n    has_letters = False\n\n    for char in s:\n        if char.isalpha():\n            has_letters = True\n            result += char.upper() if char.islower() else char.lower()\n        else:\n            result += char\n\n    if not has_letters:\n        return s[::-1]\n\n    return result\n",
    "HumanEval/162": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its MD5 hash equivalent string.\n    If 'text' is an empty string, return None.\n    \"\"\"\n    if not text:\n        return None\n    \n    md5_hash = hashlib.md5()\n    md5_hash.update(text.encode('utf-8'))\n    \n    return md5_hash.hexdigest()\n",
    "HumanEval/163": "def generate_integers(a, b):\n    even_digits = []\n    \n    if a > b:\n        a, b = b, a\n    \n    for num in range(a, b + 1):\n        if num % 2 == 0:\n            even_digits.append(num)\n    \n    return even_digits\n"
}