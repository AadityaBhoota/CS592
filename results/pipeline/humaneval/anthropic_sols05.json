{
    "HumanEval/0": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    min_diff = float('inf')\n    \n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            min_diff = min(min_diff, diff)\n    \n    return min_diff <= threshold\n",
    "HumanEval/1": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    stack = []\n    current_group = \"\"\n\n    for char in paren_string:\n        if char == \"(\":\n            stack.append(char)\n            current_group += char\n        elif char == \")\":\n            if stack:\n                stack.pop()\n                current_group += char\n                if not stack:\n                    result.append(current_group)\n                    current_group = \"\"\n        elif char == \" \":\n            continue\n\n    return result\n",
    "HumanEval/2": "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part\n",
    "HumanEval/3": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n",
    "HumanEval/4": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    abs_diffs = [abs(num - mean) for num in numbers]\n    mad = sum(abs_diffs) / len(abs_diffs)\n    return mad\n",
    "HumanEval/5": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result\n",
    "HumanEval/6": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        stack = []\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if stack:\n                    stack.pop()\n            max_depth = max(max_depth, len(stack))\n        result.append(max_depth)\n    return result\n",
    "HumanEval/7": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    filtered = []\n    for s in strings:\n        if substring in s:\n            filtered.append(s)\n    return filtered\n",
    "HumanEval/8": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    total_sum = 0\n    total_product = 1\n    \n    for num in numbers:\n        total_sum += num\n        total_product *= num\n    \n    return (total_sum, total_product)\n",
    "HumanEval/9": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    current_max = float('-inf')\n    \n    for num in numbers:\n        current_max = max(current_max, num)\n        result.append(current_max)\n    \n    return result\n",
    "HumanEval/10": "def make_palindrome(string: str) -> str:\n    \"\"\"\n    Find the shortest palindrome that begins with a supplied string.\n    \"\"\"\n    if not string:\n        return \"\"\n    \n    longest_palindromic_suffix = find_longest_palindromic_suffix(string)\n    prefix_to_reverse = string[:-len(longest_palindromic_suffix)]\n    reversed_prefix = prefix_to_reverse[::-1]\n    \n    return string + reversed_prefix\n\ndef find_longest_palindromic_suffix(string: str) -> str:\n    \"\"\"\n    Find the longest palindromic suffix of the given string.\n    \"\"\"\n    n = len(string)\n    s = \"#\" + \"#\".join(string) + \"#\"\n    length = len(s)\n    p = [0] * length\n    \n    center, right_boundary = 0, 0\n    for i in range(1, length):\n        if i <= right_boundary:\n            p[i] = min(right_boundary - i + 1, p[2 * center - i])\n        \n        while i - p[i] >= 0 and i + p[i] < length and s[i - p[i]] == s[i + p[i]]:\n            p[i] += 1\n        \n        if i + p[i] - 1 > right_boundary:\n            center, right_boundary = i, i + p[i] - 1\n    \n    max_len = max(p)\n    center_index = p.index(max_len)\n    start = (center_index - max_len) // 2\n    end = start + max_len\n    return string[start:end]\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\"\n    Test if given string is a palindrome.\n    \"\"\"\n    return string == string[::-1]\n",
    "HumanEval/11": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    if not all(c in '01' for c in a) or not all(c in '01' for c in b):\n        raise ValueError(\"Input strings must contain only '1's and '0's.\")\n\n    result = ''.join('1' if a_char != b_char else '0' for a_char, b_char in zip(a, b))\n    return result\n",
    "HumanEval/12": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n\n    longest_str = strings[0]\n    for string in strings:\n        if len(string) > len(longest_str):\n            longest_str = string\n\n    return longest_str\n",
    "HumanEval/13": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Return the greatest common divisor of two integers a and b.\n\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return a\n",
    "HumanEval/14": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes\n",
    "HumanEval/15": "def string_sequence(n: int) -> str:\n    sequence = \"\"\n    for i in range(n+1):\n        sequence += str(i)\n        if i < n:\n            sequence += \" \"\n    return sequence\n",
    "HumanEval/16": "def count_distinct_characters(string: str) -> int:\n    return len(set(string))\n",
    "HumanEval/17": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    note_durations = []\n    for char in music_string:\n        if char == 'o':\n            note_durations.append(4)\n        elif char == 'o|':\n            note_durations.append(2)\n        elif char == '.|':\n            note_durations.append(1)\n        elif char == ' ':\n            pass\n    return note_durations\n",
    "HumanEval/18": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            count += 1\n    return count\n",
    "HumanEval/19": "from typing import List\n\nWORD_TO_INT = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n}\n\ndef sort_numbers(numbers: str) -> str:\n    word_list = numbers.split()\n    int_list = [WORD_TO_INT[word] for word in word_list]\n    int_list.sort()\n    sorted_words = [next(k for k, v in WORD_TO_INT.items() if v == num) for num in int_list]\n    return ' '.join(sorted_words)\n",
    "HumanEval/20": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    \n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[0] - numbers[1])\n    \n    for i in range(1, len(numbers)):\n        diff = abs(numbers[i] - numbers[i-1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i-1], numbers[i])\n    \n    return closest_pair\n",
    "HumanEval/21": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1.\n\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_val = min(numbers)\n    max_val = max(numbers)\n    a = 1 / (max_val - min_val)\n    b = -min_val / (max_val - min_val)\n    return [a * x + b for x in numbers]\n",
    "HumanEval/22": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    filtered_ints = []\n    for value in values:\n        if isinstance(value, int):\n            filtered_ints.append(value)\n    return filtered_ints\n",
    "HumanEval/23": "def strlen(string: str) -> int:\n    return len(string)\n",
    "HumanEval/24": "import math\n\ndef largest_divisor(n: int) -> int:\n    for i in range(int(math.sqrt(n)), 0, -1):\n        if n % i == 0:\n            return i\n    return 1\n",
    "HumanEval/25": "",
    "HumanEval/26": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    unique_nums = []\n    seen = set()\n    \n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            unique_nums.append(num)\n    \n    return unique_nums\n",
    "HumanEval/27": "def flip_case(string: str) -> str:\n    \"\"\"\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    \n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()\n",
    "HumanEval/28": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    if not strings:\n        return ''\n    return ''.join(strings)\n",
    "HumanEval/29": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    filtered_strings = []\n    \n    for string in strings:\n        if string.startswith(prefix):\n            filtered_strings.append(string)\n    \n    return filtered_strings\n",
    "HumanEval/30": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    positive_numbers = []\n    for num in l:\n        if num > 0:\n            positive_numbers.append(num)\n    return positive_numbers\n",
    "HumanEval/31": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    \n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    \n    return True\n",
    "HumanEval/32": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 != 0 or xs[-1] == 0:\n        raise ValueError(\"Invalid input: the list of coefficients must have an even number of elements, and the largest coefficient must be non-zero.\")\n\n    a = xs[-2]\n    b = xs[-3]\n    c = xs[-4]\n\n    discriminant = b**2 - 4 * a * c\n    if discriminant < 0:\n        raise ValueError(\"The polynomial has no real roots.\")\n\n    root1 = (-b + math.sqrt(discriminant)) / (2 * a)\n    root2 = (-b - math.sqrt(discriminant)) / (2 * a)\n\n    return root1\n",
    "HumanEval/33": "def sort_third(l: list):\n    result = l[:]\n    divisible_by_three = [result[i] for i in range(len(result)) if i % 3 == 0]\n    divisible_by_three.sort()\n    for i in range(len(result)):\n        if i % 3 == 0:\n            result[i] = divisible_by_three.pop(0)\n    return result\n",
    "HumanEval/34": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n",
    "HumanEval/35": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    if not l:\n        return None\n    \n    max_val = l[0]\n    for x in l:\n        if x > max_val:\n            max_val = x\n    \n    return max_val\n",
    "HumanEval/36": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count\n",
    "HumanEval/37": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indices, while its values at the even indices are equal\n    to the values of the even indices of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [5, 4, 3, 6]\n    \"\"\"\n    result = []\n    even_elements = []\n\n    for i, x in enumerate(l):\n        if i % 2 == 0:\n            even_elements.append(x)\n        else:\n            result.append(x)\n\n    even_elements.sort()\n\n    for i in range(0, len(l), 2):\n        result.insert(i, even_elements.pop(0))\n\n    return result\n",
    "HumanEval/38": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n",
    "HumanEval/39": "def is_prime(n: int) -> bool:\n    \"\"\"\n    Checks if a given number is prime.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_fibonacci(n: int) -> bool:\n    \"\"\"\n    Checks if a given number is a Fibonacci number.\n    \"\"\"\n    a, b = 0, 1\n    while b <= n:\n        if b == n:\n            return True\n        a, b = b, a + b\n    return False\n\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    Returns the n-th number that is a Fibonacci number and is also prime.\n    \"\"\"\n    fib_nums = [0, 1]\n    i = 2\n    while len(fib_nums) < n:\n        fib_num = fib_nums[i-1] + fib_nums[i-2]\n        if is_prime(fib_num):\n            fib_nums.append(fib_num)\n        i += 1\n    return fib_nums[n-1]\n\ndef fibonacci(n: int) -> int:\n    \"\"\"\n    Calculates the n-th Fibonacci number.\n    \"\"\"\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)\n",
    "HumanEval/40": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    l.sort()\n    n = len(l)\n\n    for i in range(n-2):\n        if i > 0 and l[i] == l[i-1]:\n            continue  # Skip duplicates\n        left = i + 1\n        right = n - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    \n    return False\n",
    "HumanEval/41": "def car_race_collision(n: int) -> int:\n    total_collisions = 0\n    for i in range(n):\n        time_to_center = i / 2\n        collisions_at_center = n - int(time_to_center)\n        total_collisions += collisions_at_center\n    return total_collisions\n",
    "HumanEval/42": "def incr_list(l: list) -> list:\n    new_list = []\n    for num in l:\n        new_list.append(num + 1)\n    return new_list\n",
    "HumanEval/43": "def pairs_sum_to_zero(l):\n    unique_elements = set()\n    for num in l:\n        if -num in unique_elements:\n            return True\n        unique_elements.add(num)\n    return False\n",
    "HumanEval/44": "def change_base(x: int, base: int):\n    result = ''\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result or '0'\n",
    "HumanEval/45": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h\n",
    "HumanEval/46": "def fib4(n: int):\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n\n    fib4_list = [0, 0, 2, 0]  # Initialize the first four elements\n\n    if n < 4:\n        return fib4_list[n]\n\n    for i in range(4, n + 1):\n        fib4_list.append(fib4_list[i - 1] + fib4_list[i - 2] + fib4_list[i - 3] + fib4_list[i - 4])\n\n    return fib4_list[n]\n",
    "HumanEval/47": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    length = len(l)\n    if length % 2 == 1:\n        return l[length // 2]\n    else:\n        middle1 = l[length // 2 - 1]\n        middle2 = l[length // 2]\n        return (middle1 + middle2) / 2\n",
    "HumanEval/48": "def is_palindrome(text: str):\n    left = 0\n    right = len(text) - 1\n    \n    while left < right:\n        if text[left] != text[right]:\n            return False\n        left += 1\n        right -= 1\n    \n    return True\n",
    "HumanEval/49": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    if p == 1:\n        return 0\n\n    result = 1\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * 2) % p\n        n //= 2\n        p = (2 * p) % p\n\n    return result\n",
    "HumanEval/50": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr((ord(ch) - 5 - ord(\"a\")) % 26 + ord(\"a\")) for ch in s])\n",
    "HumanEval/51": "def remove_vowels(text):\n    result = \"\"\n    for char in text:\n        if char.lower() not in 'aeiou':\n            result += char\n    return result\n",
    "HumanEval/52": "def below_threshold(l: list, t: int) -> bool:\n    for num in l:\n        if num >= t:\n            return False\n    return True\n",
    "HumanEval/53": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y.\n\n    Args:\n        x (int): The first number to add.\n        y (int): The second number to add.\n\n    Returns:\n        int: The sum of x and y.\n\n    Examples:\n        >>> add(2, 3)\n        5\n        >>> add(5, 7)\n        12\n    \"\"\"\n    return x + y\n",
    "HumanEval/54": "def same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)\n",
    "HumanEval/55": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\n    \n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n",
    "HumanEval/56": "def correct_bracketing(brackets: str):\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n",
    "HumanEval/57": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    is_increasing = None\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i-1]:\n            if is_increasing is False:\n                return False\n            is_increasing = True\n        elif l[i] < l[i-1]:\n            if is_increasing is True:\n                return False\n            is_increasing = False\n    \n    return True\n",
    "HumanEval/58": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    element_count = {}\n    for elem in l1:\n        element_count[elem] = element_count.get(elem, 0) + 1\n\n    result = []\n    for elem in l2:\n        if elem in element_count:\n            result.append(elem)\n            element_count[elem] -= 1\n            if element_count[elem] == 0:\n                del element_count[elem]\n\n    return sorted(result)\n",
    "HumanEval/59": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    largest_factor = 1\n    while n % 2 == 0:\n        largest_factor = 2\n        n //= 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            largest_factor = i\n            n //= i\n    if n > 2:\n        largest_factor = n\n    return largest_factor\n",
    "HumanEval/60": "def sum_to_n(n: int):\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total\n",
    "HumanEval/61": "def correct_bracketing(brackets: str):\n    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack or stack.pop() != '(':\n                return False\n    return len(stack) == 0\n",
    "HumanEval/62": "def derivative(xs: list):\n    \"\"\"\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    result = [xs[i] * i for i in range(1, len(xs))]\n    return result\n",
    "HumanEval/63": "def fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n\n    fibfib_list = [0, 0, 1]\n    for i in range(3, n+1):\n        fibfib_list.append(sum(fibfib_list[-3:]))\n    return fibfib_list[n]\n",
    "HumanEval/64": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    >>> vowels_count(\"rhythm\")\n    0\n    >>> vowels_count(\"sky\")\n    1\n    >>> vowels_count(\"aeiou\")\n    5\n    \"\"\"\n    count = 0\n    vowels = 'aeiou'\n    for char in s.lower():\n        if char in vowels:\n            count += 1\n        elif char == 'y' and s.lower().endswith('y'):\n            count += 1\n    return count\n",
    "HumanEval/65": "def circular_shift(x, shift):\n    digits = str(x)\n    length = len(digits)\n    if shift < length:\n        return digits[-shift:] + digits[:-shift]\n    else:\n        return digits[::-1]\n",
    "HumanEval/66": "def digitSum(s):\n    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total\n",
    "HumanEval/67": "def fruit_distribution(s, n):\n    parts = s.split()\n    apples = int(parts[0]) if parts else 0\n    oranges = int(parts[-1]) if len(parts) > 2 else 0\n    mangoes = n - apples - oranges\n    return mangoes\n",
    "HumanEval/68": "def pluck(arr):\n    if not arr:\n        return []\n    \n    smallest_even = float('inf')\n    smallest_index = None\n    \n    for i, num in enumerate(arr):\n        if num % 2 == 0:\n            if num < smallest_even or (num == smallest_even and i < smallest_index):\n                smallest_even = num\n                smallest_index = i\n    \n    if smallest_index is None:\n        return []\n    else:\n        return [smallest_even, smallest_index]\n",
    "HumanEval/69": "def search(lst):\n    freq = {}\n    for num in lst:\n        freq[num] = freq.get(num, 0) + 1\n    \n    for num in reversed(range(1, max(freq.keys()) + 1)):\n        if num in freq and freq[num] >= num:\n            return num\n    \n    return -1\n",
    "HumanEval/70": "def strange_sort_list(lst):\n    result = []\n    while lst:\n        result.append(min(lst))\n        lst.remove(min(lst))\n        if lst:\n            result.append(min(lst))\n            lst.remove(min(lst))\n    return result\n",
    "HumanEval/71": "import math\n\ndef triangle_area(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    return round(area, 2)\n",
    "HumanEval/72": "def will_it_fly(q, w):\n    if q == q[::-1] and sum(q) <= w:\n        return True\n    return False\n",
    "HumanEval/73": "def smallest_change(arr):\n    left = 0\n    right = len(arr) - 1\n    changes = 0\n\n    while left < right:\n        if arr[left] == arr[right]:\n            left += 1\n            right -= 1\n        else:\n            changes += 1\n            if arr[left + 1] == arr[right]:\n                left += 2\n                right -= 1\n            elif arr[left] == arr[right - 1]:\n                left += 1\n                right -= 2\n            else:\n                left += 1\n                right -= 1\n\n    return changes\n",
    "HumanEval/74": "def total_match(lst1, lst2):\n    total1 = 0\n    total2 = 0\n\n    if not lst1 and not lst2:\n        return []\n\n    for string in lst1:\n        total1 += len(string)\n\n    for string in lst2:\n        total2 += len(string)\n\n    if total1 < total2:\n        return lst1\n    elif total2 < total1:\n        return lst2\n    else:\n        return lst1\n",
    "HumanEval/75": "def is_prime(n):\n    \"\"\"Checks if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_of_three_primes(n):\n    \"\"\"Checks if a number is the multiplication of 3 prime numbers.\"\"\"\n    for i in range(2, int(n ** (1/3)) + 1):\n        if n % i == 0:\n            for j in range(2, int(n ** (1/3)) + 1):\n                if i != j and n % j == 0:\n                    for k in range(2, int(n ** (1/3)) + 1):\n                        if i != k and j != k and n % k == 0 and is_prime(i) and is_prime(j) and is_prime(k):\n                            return True\n    return False\n\ndef is_multiply_prime(a):\n    \"\"\"Checks if a number is the multiplication of 3 prime numbers.\"\"\"\n    if a < 100 and is_multiply_of_three_primes(a):\n        return True\n    return False\n",
    "HumanEval/76": "def is_simple_power(x, n):\n    int_value = 1\n    while x % n == 0:\n        x //= n\n        int_value += 1\n    return x == 1\n",
    "HumanEval/77": "def iscube(a):\n    if a == 0 or a == -1:\n        return True\n    cube_root = a ** (1/3)\n    if cube_root.is_integer():\n        return True\n    else:\n        return False\n",
    "HumanEval/78": "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef hex_key(num):\n    \"\"\"\n    Counts the number of hexadecimal digits that are primes in the given hexadecimal number.\n    \"\"\"\n    digits = list(num)\n    count = 0\n    for digit in digits:\n        if digit in ['2', '3', '5', '7', 'B', 'D']:\n            if is_prime(int(digit, 16)):\n                count += 1\n    return count\n",
    "HumanEval/79": "def decimal_to_binary(decimal):\n    binary_str = bin(decimal)[2:]\n    return f\"db{binary_str}db\"\n",
    "HumanEval/80": "def is_happy(s):\n    \"\"\"\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct.\n    \"\"\"\n    if len(s) < 3:\n        return False\n\n    unique_letters = set(s[:3])\n    if len(unique_letters) < 3:\n        return False\n\n    for i in range(3, len(s)):\n        unique_letters.remove(s[i-3])\n        unique_letters.add(s[i])\n        if len(unique_letters) < 3:\n            return False\n\n    return True\n",
    "HumanEval/81": "def numerical_letter_grade(grades):\n    grade_mapping = {\n        4.0: 'A+',\n        3.7: 'A',\n        3.3: 'A-',\n        3.0: 'B+',\n        2.7: 'B',\n        2.3: 'B-',\n        2.0: 'C+',\n        1.7: 'C',\n        1.3: 'C-',\n        1.0: 'D+',\n        0.7: 'D',\n        0.0: 'D-',\n        -0.1: 'E'\n    }\n    \n    letter_grades = []\n    for grade in grades:\n        for cutoff, letter in grade_mapping.items():\n            if grade >= cutoff:\n                letter_grades.append(letter)\n                break\n    \n    return letter_grades\n",
    "HumanEval/82": "def is_prime(n):\n    \"\"\"\n    Helper function to check if a number is prime.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    \"\"\"\n    Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise.\n    \"\"\"\n    length = len(string)\n    return is_prime(length)\n",
    "HumanEval/83": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    return 9 * 10**(n-1)\n",
    "HumanEval/84": "def solve(N):\n    total_sum = 0\n    for digit in str(N):\n        total_sum += int(digit)\n    return bin(total_sum)[2:]\n",
    "HumanEval/85": "def add(lst):\n    total = 0\n    for i, num in enumerate(lst):\n        if i % 2 == 1 and num % 2 == 0:\n            total += num\n    return total\n",
    "HumanEval/86": "def anti_shuffle(s):\n    words = s.split()\n    new_words = [''.join(sorted(word)) for word in words]\n    result = ' '.join(new_words)\n    return result\n",
    "HumanEval/87": "def get_row(lst, x):\n    coordinates = []\n    for row_index, row in enumerate(lst):\n        for col_index, value in enumerate(row):\n            if value == x:\n                coordinates.append((row_index, col_index))\n    \n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coordinates\n",
    "HumanEval/88": "def sort_array(array):\n    if not array:\n        return []\n    \n    if len(array) == 1:\n        return array\n    \n    first = array[0]\n    last = array[-1]\n    sum_of_first_and_last = first + last\n    \n    sorted_array = sorted(array.copy())\n    \n    if sum_of_first_and_last % 2 == 1:\n        return sorted_array\n    else:\n        return sorted_array[::-1]\n",
    "HumanEval/89": "def encrypt(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    shifted_alphabet = ''.join(chr((ord(c) - 97 + 4) % 26 + 97) for c in alphabet)\n    result = ''\n    for c in s:\n        index = alphabet.index(c)\n        result += shifted_alphabet[index]\n    return result\n",
    "HumanEval/90": "def next_smallest(lst):\n    if not lst or len(set(lst)) < 2:\n        return None\n    return sorted(lst)[1]\n",
    "HumanEval/91": "def is_bored(S):\n    if not S:\n        return 0\n\n    boredom_count = 0\n    sentences = S.split('.') + S.split('?') + S.split('!')\n    for sentence in sentences:\n        sentence = sentence.strip()\n        if sentence.startswith(\"I\"):\n            boredom_count += 1\n    return boredom_count\n",
    "HumanEval/92": "def any_int(x, y, z):\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    if x == y + z or y == x + z or z == x + y:\n        return True\n    else:\n        return False\n",
    "HumanEval/93": "def encode(message):\n    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n                encoded_char = char.lower()\n            else:\n                encoded_char = char.upper()\n            encoded_message += encoded_char\n        else:\n            encoded_message += char\n    return encoded_message\n",
    "HumanEval/94": "import heapq\n\ndef is_prime(n):\n    \"\"\"Helper function to check if a number is prime\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef skjkasdkd(lst):\n    \"\"\"Find the largest prime value in the list and return the sum of its digits\"\"\"\n    primes = []\n    for num in lst:\n        if isinstance(num, int) and is_prime(num):\n            heapq.heappush(primes, -num)\n            if len(primes) > 10:\n                heapq.heappop(primes)\n\n    if not primes:\n        return 0\n\n    largest_prime = -heapq.heappop(primes)\n    digit_sum = 0\n    while largest_prime > 0:\n        digit_sum += largest_prime % 10\n        largest_prime //= 10\n    return digit_sum\n",
    "HumanEval/95": "def check_dict_case(d):\n    if not d:\n        return False\n    \n    case = None\n    for key in d:\n        if not isinstance(key, str):\n            return False\n        if case is None:\n            case = all(c.isupper() for c in key)\n        elif all(c.isupper() for c in key) != case:\n            return False\n    \n    return True\n",
    "HumanEval/96": "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    \"\"\"\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n",
    "HumanEval/97": "def multiply(a, b):\n    a_unit = abs(a) % 10\n    b_unit = abs(b) % 10\n    return a_unit * b_unit\n",
    "HumanEval/98": "def count_upper(s):\n    count = 0\n    for i, char in enumerate(s):\n        if i % 2 == 0 and char.isupper() and char in 'AEIOU':\n            count += 1\n    return count\n",
    "HumanEval/99": "def closest_integer(value):\n    num = float(value)\n    if num.is_integer():\n        return int(num)\n    else:\n        return round(num, 0, flag=1)\n",
    "HumanEval/100": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the same as the previous level if n is odd.\n        - the previous odd number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 3, 3]\n    >>> make_a_pile(5)\n    [5, 5, 5, 5, 5]\n    \"\"\"\n    pile = [n]\n    while n > 1:\n        if n % 2 == 0:\n            pile.append(n - 1)\n        else:\n            pile.append(n)\n        n -= 1\n    return pile\n",
    "HumanEval/101": "def words_string(s):\n    words = s.split(', ') + s.split(' ')\n    words = [word for word in words if word]\n    return words\n",
    "HumanEval/102": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x < 0 or y < 0:\n        return -1\n\n    if x <= y:\n        num_range = range(x, y+1)\n    else:\n        num_range = range(y, x+1)\n\n    largest_even = -1\n    for num in num_range:\n        if num % 2 == 0 and num > largest_even:\n            largest_even = num\n\n    if largest_even == -1:\n        return -1\n\n    return largest_even\n",
    "HumanEval/103": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = round((n + m) / 2)\n    return bin(avg)\n",
    "HumanEval/104": "def unique_digits(x):\n    result = []\n    for num in x:\n        has_even_digit = False\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                has_even_digit = True\n                break\n        if not has_even_digit:\n            result.append(num)\n    return sorted(result)\n",
    "HumanEval/105": "def by_length(arr):\n    result = []\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    for num in reversed_arr:\n        result.append([\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][num - 1])\n    return result\n",
    "HumanEval/106": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_of_numbers(i))\n    return result\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef sum_of_numbers(n):\n    return n * (n + 1) // 2\n",
    "HumanEval/107": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    \n    for i in range(1, int(n**0.5) + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    return (even_count, odd_count)\n",
    "HumanEval/108": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        digit_sum = 0\n        for digit in str(abs(num)):\n            digit_sum += int(digit)\n        if digit_sum > 0:\n            count += 1\n    return count\n",
    "HumanEval/109": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i+1]:\n            arr = arr[1:] + [arr[0]]\n            if all(arr[j] <= arr[j+1] for j in range(len(arr) - 1)):\n                return True\n    \n    return False\n",
    "HumanEval/110": "def exchange(lst1, lst2):\n    odd_sum_lst1 = 0\n    odd_sum_lst2 = 0\n    \n    # Count the number of odd elements and their sum in lst1\n    for num in lst1:\n        if num % 2 != 0:\n            odd_sum_lst1 += num\n    \n    # Count the number of odd elements and their sum in lst2\n    for num in lst2:\n        if num % 2 != 0:\n            odd_sum_lst2 += num\n    \n    # Check if the sums of odd elements are equal\n    if odd_sum_lst1 == odd_sum_lst2:\n        return \"YES\"\n    else:\n        return \"NO\"\n",
    "HumanEval/111": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    words = test.split()\n    letter_counts = {}\n    \n    for word in words:\n        for letter in word:\n            if letter in letter_counts:\n                letter_counts[letter] += 1\n            else:\n                letter_counts[letter] = 1\n    \n    return letter_counts\n",
    "HumanEval/112": "def reverse_delete(s, c):\n    c_set = set(c)\n    result = \"\"\n    for char in s:\n        if char not in c_set:\n            result += char\n    return (result, result == result[::-1])\n",
    "HumanEval/113": "def odd_count(lst):\n    output = []\n    for string in lst:\n        count = sum(1 for digit in string if int(digit) % 2 != 0)\n        output.append(f\"The number of odd elements in the string is: {count}.\")\n    return output\n",
    "HumanEval/114": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum += num\n        min_sum = min(min_sum, current_sum)\n        if current_sum < 0:\n            current_sum = 0\n    \n    return min_sum\n",
    "HumanEval/115": "",
    "HumanEval/116": "def sort_array(arr):\n    result = []\n    binary_counts = []\n    for num in arr:\n        count_of_ones = bin(num).count('1')\n        binary_counts.append((count_of_ones, num))\n    binary_counts.sort()\n    for count, num in binary_counts:\n        result.append(num)\n    return result\n",
    "HumanEval/117": "def select_words(s, n):\n    words = []\n    word_list = s.split()\n    for word in word_list:\n        consonants = sum(1 for char in word if char.isalpha() and char.lower() not in 'aeiou')\n        if consonants == n:\n            words.append(word)\n    return words\n",
    "HumanEval/118": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    last_consonant = None\n    \n    for i in range(len(word)-1, -1, -1):\n        if word[i] not in vowels:\n            last_consonant = i\n        elif last_consonant is not None and i < last_consonant:\n            return word[i]\n    \n    return \"\"\n",
    "HumanEval/119": "def match_parens(lst):\n    for s in lst:\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if not stack:\n                    return 'No'\n                stack.pop()\n        if not stack:\n            continue\n        else:\n            return 'No'\n    return 'Yes'\n",
    "HumanEval/120": "import heapq\n\ndef maximum(arr, k):\n    min_heap = []\n    for num in arr:\n        if len(min_heap) < k or num > min_heap[0]:\n            heapq.heappush(min_heap, num)\n            if len(min_heap) > k:\n                heapq.heappop(min_heap)\n    return sorted(min_heap, reverse=True)\n",
    "HumanEval/121": "def solution(lst):\n    total = 0\n    for i, num in enumerate(lst):\n        if i % 2 == 0 and num % 2 != 0:\n            total += num\n    return total\n",
    "HumanEval/122": "def add_elements(arr, k):\n    sum_of_two_digits = 0\n    for i in range(min(k, len(arr))):\n        if 0 <= arr[i] < 100:\n            sum_of_two_digits += arr[i]\n    return sum_of_two_digits\n",
    "HumanEval/123": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    if n == 1:\n        return [1]\n    \n    odd_numbers = []\n    current_num = n\n    \n    while current_num != 1:\n        if current_num % 2 == 1:\n            odd_numbers.append(current_num)\n        \n        if current_num % 2 == 0:\n            current_num //= 2\n        else:\n            current_num = 3 * current_num + 1\n    \n    return sorted(odd_numbers)\n",
    "HumanEval/124": "def valid_date(date):\n    \"\"\"\n    Check if a given date string is valid.\n    \n    Args:\n        date (str): The date string in the format \"mm-dd-yyyy\".\n    \n    Returns:\n        bool: True if the date is valid, False otherwise.\n    \"\"\"\n    # Check if the input is empty\n    if not date:\n        return False\n    \n    # Split the date string into components\n    parts = date.split('-')\n    \n    # Check if the date is in the correct format\n    if len(parts) != 3:\n        return False\n    \n    # Convert the components to integers\n    month = int(parts[0])\n    day = int(parts[1])\n    year = int(parts[2])\n    \n    # Check the month value\n    if month < 1 or month > 12:\n        return False\n    \n    # Check the day value based on the month\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    \n    return True\n",
    "HumanEval/125": "def split_words(txt):\n    \"\"\"\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ','. If no commas exist, you should return the number of lowercase letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25.\n    \n    Examples:\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    \"\"\"\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for char in txt:\n            if char.islower() and ord(char) % 2 == 1:\n                count += 1\n        return count\n",
    "HumanEval/126": "def is_sorted(lst):\n    if len(lst) <= 1:\n        return True\n    \n    prev = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] <= prev:\n            return False\n        if lst.count(lst[i]) > 1:\n            return False\n        prev = lst[i]\n    \n    return True\n",
    "HumanEval/127": "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    \"\"\"Determine if the length of the intersection of two intervals is a prime number.\"\"\"\n    # Determine the intersection of the two intervals\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    # If the intervals don't intersect, return \"NO\"\n    if start > end:\n        return \"NO\"\n    \n    # Calculate the length of the intersection\n    length = end - start + 1\n    \n    # Check if the length is a prime number\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"\n",
    "HumanEval/128": "def prod_signs(arr):\n    if not arr:\n        return None\n\n    product_of_signs = 1\n    sum_of_magnitudes = 0\n\n    for num in arr:\n        if num == 0:\n            product_of_signs = 0\n            break\n        elif num > 0:\n            product_of_signs *= 1\n        else:\n            product_of_signs *= -1\n        sum_of_magnitudes += abs(num)\n\n    return product_of_signs * sum_of_magnitudes\n",
    "HumanEval/129": "def minPath(grid, k):\n    result = []\n    n = len(grid)\n\n    def dfs(i, j, path):\n        if (i, j) in set(path):\n            return\n        path.append(grid[i][j])\n        if len(path) == k:\n            if not result or path < result:\n                result[:] = path[:]\n            return\n        for di, dj in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            ni, nj = i + di, j + dj\n            if 0 <= ni < n and 0 <= nj < n:\n                dfs(ni, nj, path)\n        path.pop()\n\n    for i in range(n):\n        for j in range(n):\n            dfs(i, j, [])\n    return result\n",
    "HumanEval/130": "def tri(n):\n    result = [3, 0, 2]\n    for i in range(3, n+1):\n        tri_i = result[i-3] + result[i-2] + result[i-1]\n        result.append(tri_i)\n    return result[:n+1]\n",
    "HumanEval/131": "import math\n\ndef digits(n):\n    \"\"\"Given an integer n, return the product of the odd digits.\n    Return 0 if all digits are even or n is negative.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if n < 0:\n        return 0\n\n    product = 1\n    for digit in str(abs(n)):\n        if int(digit) % 2 != 0:\n            product = math.prod([product, int(digit)])\n\n    return product if product != 1 else 0\n",
    "HumanEval/132": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            if stack[-1] == '[':\n                stack.pop()\n            else:\n                return True\n    return len(stack) == 0\n",
    "HumanEval/133": "import math\n\ndef sum_squares(lst):\n    squared_values = []\n    for num in lst:\n        rounded_up = math.ceil(num)\n        squared = rounded_up ** 2\n        squared_values.append(squared)\n    return sum(squared_values)\n",
    "HumanEval/134": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    \n    words = txt.split()\n    if not words:\n        return False\n    \n    last_word = words[-1]\n    if last_word and last_word[-1].isalpha():\n        return True\n    else:\n        return False\n",
    "HumanEval/135": "def can_arrange(arr):\n    result = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            result = i-1\n    return result\n",
    "HumanEval/136": "def largest_smallest_integers(lst):\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    \"\"\"\n    largest_negative = None\n    smallest_positive = None\n\n    for num in lst:\n        if num < 0 and (largest_negative is None or num > largest_negative):\n            largest_negative = num\n        elif num > 0 and (smallest_positive is None or num < smallest_positive):\n            smallest_positive = num\n\n    return (largest_negative, smallest_positive)\n",
    "HumanEval/137": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n    \"\"\"\n    if type(a) == type(b):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    try:\n        a_float = float(str(a).replace(\",\", \".\"))\n        b_float = float(str(b).replace(\",\", \".\"))\n        if a_float > b_float:\n            return type(a)(a_float)\n        elif b_float > a_float:\n            return type(b)(b_float)\n        else:\n            return None\n    except ValueError:\n        return None\n",
    "HumanEval/138": "def is_equal_to_sum_even(n):\n    if n % 4 != 0:\n        return False\n    \n    a = 2\n    while a <= n // 4:\n        if n - a - (a + 2) - (a + 4) == 0:\n            return True\n        a += 2\n    \n    return False\n",
    "HumanEval/139": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    result = 1\n    for i in range(n, 0, -1):\n        result *= factorial(i)\n    return result\n\ndef factorial(n):\n    \"\"\"Calculates the factorial of a given number.\"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n",
    "HumanEval/140": "def fix_spaces(text):\n    result = \"\"\n    prev_char = \"\"\n    for char in text:\n        if char == \" \":\n            if prev_char == \" \":\n                result += \"-\"\n            else:\n                result += \"_\"\n        else:\n            result += char\n        prev_char = char\n\n    if result[0] == \"_\":\n        result = result[1:]\n    if result[-1] == \"_\":\n        result = result[:-1]\n\n    return result\n",
    "HumanEval/141": "def file_name_check(file_name):\n    # Step 3: Check if the file name contains exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n\n    # Step 4: Split the file name into two parts\n    parts = file_name.split('.')\n    before_dot = parts[0]\n    after_dot = parts[1]\n\n    # Step 5 and 7: Check if the substring before the dot is not empty, starts with a Latin alphabet letter, and has no more than 3 digits\n    if not before_dot or not before_dot[0].isalpha() or sum(1 for char in before_dot if char.isdigit()) > 3:\n        return 'No'\n\n    # Step 6: Check if the substring after the dot is a valid extension\n    valid_extensions = ['txt', 'exe', 'dll']\n    if after_dot not in valid_extensions:\n        return 'No'\n\n    # Step 8: If all checks pass, return 'Yes'\n    return 'Yes'\n",
    "HumanEval/142": "def sum_squares(lst):\n    total = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            total += num ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            total += num ** 3\n        else:\n            total += num\n    return total\n",
    "HumanEval/143": "def words_in_sentence(sentence):\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
    "HumanEval/144": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    result_num = x_num * n_num\n    result_den = x_den * n_den\n    return result_den == 1\n",
    "HumanEval/145": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), x))\n",
    "HumanEval/146": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and abs(num) % 10 in [1, 3, 5, 7, 9] and abs(num // 10) % 10 in [1, 3, 5, 7, 9]:\n            count += 1\n    return count\n",
    "HumanEval/147": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                a_i = i * i - i + 1\n                a_j = j * j - j + 1\n                a_k = k * k - k + 1\n                if (a_i + a_j + a_k) % 3 == 0:\n                    count += 1\n    return count\n",
    "HumanEval/148": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    i1 = planets.index(planet1)\n    i2 = planets.index(planet2)\n    \n    if i1 < i2:\n        return tuple(planets[i1+1:i2])\n    else:\n        return tuple(planets[i2+1:i1])\n",
    "HumanEval/149": "def sorted_list_sum(lst):\n    if not lst:\n        return []\n    \n    new_list = [word for word in lst if len(word) % 2 == 0]\n    new_list.sort(key=lambda x: (len(x), x))\n    return new_list\n",
    "HumanEval/150": "def x_or_y(n, x, y):\n    if n < 2:\n        return y\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return y\n    return x\n",
    "HumanEval/151": "def double_the_difference(lst):\n    sum_of_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0:\n            if num % 2 == 1:\n                sum_of_squares += num ** 2\n    return sum_of_squares\n",
    "HumanEval/152": "def compare(game, guess):\n    result = []\n    for i in range(len(game)):\n        diff = abs(game[i] - guess[i])\n        result.append(0 if diff == 0 else diff)\n    return result\n",
    "HumanEval/153": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = \"\"\n    strongest_strength = float(\"-inf\")\n\n    for extension in extensions:\n        cap = sum(1 for char in extension if char.isupper())\n        sm = sum(1 for char in extension if char.islower())\n        strength = cap - sm\n\n        if strength > strongest_strength or (strength == strongest_strength and extension < strongest_extension):\n            strongest_extension = extension\n            strongest_strength = strength\n\n    return f\"{class_name}.{strongest_extension}\"\n",
    "HumanEval/154": "def cycpattern_check(a, b):\n    for i in range(len(b)):\n        rotated_b = b[i:] + b[:i]\n        if rotated_b in a:\n            return True\n    return False\n",
    "HumanEval/155": "def even_odd_count(num):\n    \"\"\"Given an integer, return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num_str = str(abs(num))\n    even_count = 0\n    odd_count = 0\n\n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    return (even_count, odd_count)\n",
    "HumanEval/156": "def int_to_mini_roman(number):\n    mini_roman_map = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l',\n        90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n\n    mini_roman = ''\n\n    for value in [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]:\n        count = int(number / value)\n        mini_roman += (mini_roman_map[value] * count)\n        number -= value * count\n\n    return mini_roman\n",
    "HumanEval/157": "def right_angle_triangle(a, b, c):\n    hypotenuse = max(a, b, c)\n    other_sides_squared = a**2 + b**2 + c**2 - hypotenuse**2\n    return other_sides_squared == hypotenuse**2\n",
    "HumanEval/158": "def find_max(words):\n    max_word = \"\"\n    max_count = 0\n    \n    for word in words:\n        unique_chars = set(word)\n        if len(unique_chars) > max_count:\n            max_word = word\n            max_count = len(unique_chars)\n        elif len(unique_chars) == max_count and word < max_word:\n            max_word = word\n    \n    return max_word\n",
    "HumanEval/159": "def eat(number, need, remaining):\n    if not (0 <= number <= 1000 and 0 <= need <= 1000 and 0 <= remaining <= 1000):\n        raise ValueError(\"Input values must be within the given constraints.\")\n\n    total_need = number + need\n\n    if remaining >= need:\n        return [total_need, remaining - need]\n    else:\n        return [total_need, 0]\n",
    "HumanEval/160": "def do_algebra(operator, operand):\n    if len(operator) != len(operand) - 1:\n        raise ValueError(\"The length of the operator list must be equal to the length of the operand list minus one.\")\n    if any(x < 0 for x in operand):\n        raise ValueError(\"The operand list must contain only non-negative integers.\")\n    if len(operator) < 1 or len(operand) < 2:\n        raise ValueError(\"The operator list must have at least one operator, and the operand list must have at least two operands.\")\n\n    result = operand[0]\n\n    for i in range(len(operator)):\n        op = operator[i]\n        next_operand = operand[i + 1]\n        if op == '+':\n            result += next_operand\n        elif op == '-':\n            result -= next_operand\n        elif op == '*':\n            result *= next_operand\n        elif op == '//':\n            result //= next_operand\n        elif op == '**':\n            result **= next_operand\n        else:\n            raise ValueError(f\"Invalid operator: {op}\")\n\n    return result\n",
    "HumanEval/161": "def solve(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    if not result:\n        return s[::-1]\n    return result\n",
    "HumanEval/162": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    hash_obj = hashlib.md5(text.encode())\n    return hash_obj.hexdigest()\n",
    "HumanEval/163": "def generate_integers(a, b):\n    even_digits = []\n\n    # Make sure a is less than or equal to b\n    if a > b:\n        a, b = b, a\n\n    # Iterate through the range and append even digits to the list\n    for num in range(a, b + 1):\n        if num % 2 == 0:\n            even_digits.append(num)\n\n    # Sort the list in ascending order\n    even_digits.sort()\n\n    return even_digits\n"
}