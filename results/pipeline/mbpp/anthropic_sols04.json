{
    "MbppEval/8": "def square_nums(nums):\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums\n",
    "MbppEval/11": "def remove_Occ(s, ch):\n    if not s:\n        return s\n    \n    first_idx = s.index(ch)\n    last_idx = s.rindex(ch)\n    \n    return s[:first_idx] + s[first_idx+1:last_idx] + s[last_idx+1:]\n",
    "MbppEval/2": "def similar_elements(test_tup1, test_tup2):\n    shared_elements = set(test_tup1) & set(test_tup2)\n    return tuple(shared_elements)\n",
    "MbppEval/4": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n\n    Examples:\n    heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 3) == [85, 75, 65]\n    heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 2) == [85, 75]\n    heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 5) == [85, 75, 65, 58, 35]\n    \"\"\"\n    hq.heapify(nums)\n    return hq.nlargest(n, nums)\n",
    "MbppEval/69": "def is_sublist(l, s):\n    i = 0\n    j = 0\n    \n    while i < len(l):\n        if l[i] == s[j]:\n            j += 1\n            if j == len(s):\n                return True\n        else:\n            j = 0\n        i += 1\n    \n    return False\n",
    "MbppEval/56": "def get_reverse(n):\n    \"\"\"\n    Helper function to get the reverse of a number.\n    \"\"\"\n    return int(str(n)[::-1])\n\ndef rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n\n    Examples:\n    check(70) == False\n    check(23) == False\n    check(73) == True\n    \"\"\"\n    reverse_num = get_reverse(num)\n    return num == 2 * reverse_num - 1\n",
    "MbppEval/14": "def find_Volume(l, b, h):\n    return (1/4) * l * b * h\n",
    "MbppEval/9": "def find_Rotations(str):\n    min_rotations = len(str)\n    for i in range(1, len(str)):\n        rotated_str = str[i:] + str[:i]\n        if rotated_str == str:\n            min_rotations = i + 1\n            break\n    return min_rotations\n",
    "MbppEval/16": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'^[a-z]+_[a-z]+$'\n    if re.match(pattern, text):\n        return \"Found a match!\"\n    else:\n        return \"Not matched!\"\n",
    "MbppEval/85": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Write a function to find the surface area of a sphere.\n\n    Examples:\n    surfacearea_sphere(10) == 1256.6370614359173\n    surfacearea_sphere(15) == 2827.4333882308138\n    surfacearea_sphere(20) == 5026.548245743669\n    \"\"\"\n    return 4 * math.pi * r**2\n",
    "MbppEval/18": "def remove_dirty_chars(first_string, second_string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n\n    Examples:\n    remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n    remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'\n    remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles'\n    \"\"\"\n    result = \"\"\n    for char in first_string:\n        if char not in second_string:\n            result += char\n    return result\n",
    "MbppEval/17": "def square_perimeter(a):\n    return 4 * a\n",
    "MbppEval/71": "def comb_sort(nums):\n    gap = len(nums)\n    swapped = True\n    \n    while gap > 1 or swapped:\n        swapped = False\n        gap = int(gap / 1.25)\n        if gap < 1:\n            gap = 1\n        \n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    \n    return nums\n",
    "MbppEval/84": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n\n    Examples:\n    sequence(10) == 6\n    sequence(2) == 1\n    sequence(3) == 2\n    \"\"\"\n    seq = [1, 1]\n    for i in range(2, n):\n        seq.append(bin(seq[-1]).count('1'))\n    return seq[n - 1]\n",
    "MbppEval/86": "def centered_hexagonal_number(n):\n    return n * (2 * n - 1)\n",
    "MbppEval/6": "def differ_At_One_Bit_Pos(x, y):\n    \"\"\"\n    Check whether the two numbers differ at one bit position only.\n    \n    Args:\n        x (int): The first number.\n        y (int): The second number.\n    \n    Returns:\n        bool: True if the numbers differ at one bit position only, False otherwise.\n    \"\"\"\n    xor_result = x ^ y\n    set_bits = bin(xor_result).count('1')\n    return set_bits == 1\n",
    "MbppEval/19": "def test_duplicate(arraynums):\n    unique_elements = set()\n    for num in arraynums:\n        if num in unique_elements:\n            return True\n        unique_elements.add(num)\n    return False\n",
    "MbppEval/74": "def is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n\n    pattern_to_color = {}\n\n    for i in range(len(colors)):\n        pattern = patterns[i]\n        color = colors[i]\n\n        if pattern not in pattern_to_color:\n            if color in pattern_to_color.values():\n                return False\n            pattern_to_color[pattern] = color\n        elif pattern_to_color[pattern] != color:\n            return False\n\n    return True\n",
    "MbppEval/62": "def smallest_num(xs):\n    smallest = xs[0]\n    for x in xs[1:]:\n        if x < smallest:\n            smallest = x\n    return smallest\n",
    "MbppEval/83": "def get_Char(strr):\n    total = 0\n    for char in strr:\n        total += ord(char)\n    return chr(total % 26 + 97)\n",
    "MbppEval/20": "import math\n\ndef is_woodall(x):\n    result = 2 ** x + x\n    sqrt = int(math.sqrt(result))\n    return sqrt * sqrt == result\n",
    "MbppEval/57": "def find_Max_Num(arr):\n    arr.sort(reverse=True)\n    result = ''.join(map(str, arr))\n    return int(result)\n",
    "MbppEval/61": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = defaultdict(int)\n    running_sum = 0\n    for i, digit in enumerate(s):\n        running_sum += int(digit)\n        if running_sum == i + 1:\n            count[running_sum] += 1\n    return sum(count.values())\n",
    "MbppEval/79": "def word_len(s):\n    return len(s) % 2 != 0\n",
    "MbppEval/89": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n\n    Examples:\n    closest_num(11) == 10\n    closest_num(7) == 6\n    closest_num(12) == 11\n    closest_num(0) == None\n    \"\"\"\n    if N <= 0:\n        return None\n    return N - 1\n",
    "MbppEval/72": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n\n    Examples:\n    dif_Square(5) == True\n    dif_Square(10) == False\n    dif_Square(15) == True\n    \"\"\"\n    for a in range(int(n**0.5) + 1):\n        b = a + 1\n        if n == a**2 - b**2:\n            return True\n    return False\n",
    "MbppEval/63": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n\n    Examples:\n    max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n    max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15\n    max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23\n    \"\"\"\n    max_diff = 0\n    for a, b in test_list:\n        diff = abs(max(a, b) - min(a, b))\n        max_diff = max(max_diff, diff)\n    return max_diff\n",
    "MbppEval/68": "def is_Monotonic(A):\n    if not A:\n        return True\n\n    increasing = decreasing = True\n\n    for i in range(len(A) - 1):\n        if A[i] < A[i+1]:\n            decreasing = False\n        if A[i] > A[i+1]:\n            increasing = False\n\n        if not increasing and not decreasing:\n            return False\n\n    return increasing or decreasing\n",
    "MbppEval/91": "def find_substring(str1, sub_str):\n    found = False\n    for s in str1:\n        if sub_str in s:\n            found = True\n            break\n    return found\n",
    "MbppEval/97": "def frequency_lists(list1):\n    freq_dict = {}\n    \n    for inner_list in list1:\n        for element in inner_list:\n            if element in freq_dict:\n                freq_dict[element] += 1\n            else:\n                freq_dict[element] = 1\n    \n    return freq_dict\n",
    "MbppEval/87": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    \n    for key, value in dict1.items():\n        merged_dict[key] = value\n        \n    for key, value in dict2.items():\n        merged_dict[key] = value\n        \n    for key, value in dict3.items():\n        merged_dict[key] = value\n        \n    return merged_dict\n",
    "MbppEval/82": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n\n    Parameters:\n    r (float): The radius of the sphere.\n\n    Returns:\n    float: The volume of the sphere.\n\n    Examples:\n    volume_sphere(10) == 4188.790204786391\n    volume_sphere(25) == 65449.84694978735\n    volume_sphere(20) == 33510.32163829113\n    '''\n    return (4/3) * math.pi * r**3\n",
    "MbppEval/95": "def Find_Min_Length(lst):\n    if not lst:\n        return 0\n\n    min_length = float('inf')\n    for inner_list in lst:\n        min_length = min(min_length, len(inner_list))\n\n    return min_length\n",
    "MbppEval/65": "def recursive_list_sum(data_list):\n    total = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total\n",
    "MbppEval/104": "def sort_sublists(input_list):\n    return [sorted(sublist) for sublist in input_list]\n",
    "MbppEval/96": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n\n    Examples:\n    divisor(15) == 4\n    divisor(12) == 6\n    divisor(9) == 3\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n",
    "MbppEval/94": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]\n",
    "MbppEval/118": "def string_to_list(string):\n    return string.split()\n",
    "MbppEval/3": "import math\n\ndef is_not_prime(n):\n    if n <= 1:\n        return True\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    \n    return False\n",
    "MbppEval/106": "def add_lists(test_list, test_tup):\n    return test_tup + tuple(test_list)\n",
    "MbppEval/124": "import cmath\n\ndef angle_complex(a, b):\n    complex_num = complex(a, b)\n    angle = cmath.phase(complex_num)\n    return angle\n",
    "MbppEval/113": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
    "MbppEval/105": "def count(lst):\n    true_count = 0\n    for item in lst:\n        if item:\n            true_count += 1\n    return true_count\n",
    "MbppEval/109": "def odd_Equivalent(s, n):\n    count = 0\n    for _ in range(n):\n        s = s[1:] + s[0]\n        if int(s, 2) % 2 == 1:\n            count += 1\n    return count\n",
    "MbppEval/115": "def empty_dit(obj):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n\n    Examples:\n    empty_dit([{},{},{}]) == True\n    empty_dit([{1,2},{},{}]) == False\n    empty_dit({}) == True\n    empty_dit([]) == True\n    empty_dit([1, 2, 3]) == False\n    \"\"\"\n    if isinstance(obj, dict):\n        return len(obj) == 0\n    elif isinstance(obj, list):\n        if len(obj) == 0:\n            return True\n        for item in obj:\n            if not isinstance(item, dict):\n                return False\n            if len(item) > 0:\n                return False\n        return True\n    else:\n        return False\n",
    "MbppEval/103": "def eulerian_num(n, m):\n    memo = {}\n    \n    def helper(n, m):\n        if m == 0 or m == n:\n            return 1\n        if (n, m) in memo:\n            return memo[(n, m)]\n        memo[(n, m)] = (n - m) * helper(n - 1, m - 1) + (m + 1) * helper(n - 1, m)\n        return memo[(n, m)]\n    \n    return helper(n, m)\n",
    "MbppEval/123": "def amicable_numbers_sum(limit):\n    amicable_numbers = []\n\n    for n in range(1, limit + 1):\n        divisor_sum = sum(divisor for divisor in range(1, n) if n % divisor == 0)\n        if divisor_sum != n and sum(divisor for divisor in range(1, divisor_sum) if divisor_sum % divisor == 0) == n:\n            amicable_numbers.append(n)\n\n    return sum(amicable_numbers)\n",
    "MbppEval/128": "def long_words(n, str):\n    return [word for word in str.split() if len(word) > n]\n",
    "MbppEval/127": "def multiply_int(x, y):\n    return x * y\n",
    "MbppEval/125": "def find_length(string, n):\n    max_diff = 0\n    current_diff = 0\n    zeros = 0\n    ones = 0\n    \n    for char in string:\n        if char == '0':\n            zeros += 1\n        else:\n            ones += 1\n        current_diff = abs(zeros - ones)\n        max_diff = max(max_diff, current_diff)\n    \n    return max_diff\n",
    "MbppEval/126": "def gcd(a, b):\n    \"\"\"Find the Greatest Common Divisor of a and b.\"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\ndef divisors(n):\n    \"\"\"Find all the divisors of n.\"\"\"\n    return [i for i in range(1, n + 1) if n % i == 0]\n\ndef sum(a, b):\n    \"\"\"Find the sum of common divisors of a and b.\"\"\"\n    g = gcd(a, b)\n    return sum(divisors(g))\n",
    "MbppEval/120": "def max_product_tuple(list1):\n    max_product = 0\n    \n    for tup in list1:\n        a, b = tup\n        current_product = abs(a * b)\n        \n        if current_product > max_product:\n            max_product = current_product\n    \n    return max_product\n",
    "MbppEval/142": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n",
    "MbppEval/102": "def snake_to_camel(word):\n    words = word.split('_')\n    capitalized_words = [w.capitalize() for w in words]\n    camel_case = ''.join(capitalized_words)\n    return camel_case\n",
    "MbppEval/145": "def max_Abs_Diff(arr, n):\n    \"\"\"\n    Find the maximum difference between any two elements in a given array.\n\n    Args:\n        arr (list): The input array.\n        n (int): The length of the input array.\n\n    Returns:\n        int: The maximum absolute difference between any two elements in the array.\n    \"\"\"\n    max_val = max(arr)\n    min_val = min(arr)\n\n    return abs(max_val - min_val)\n",
    "MbppEval/119": "def search(arr):\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if mid > 0 and arr[mid] == arr[mid - 1]:\n            left = mid + 1\n        elif mid < len(arr) - 1 and arr[mid] == arr[mid + 1]:\n            right = mid - 1\n        else:\n            return arr[mid]\n\n    return -1\n",
    "MbppEval/137": "def zero_count(nums):\n    zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n    return zero_count / len(nums)\n",
    "MbppEval/140": "def extract_singly(test_list):\n    result = set()\n    for inner_list in test_list:\n        result.update(inner_list)\n    return list(result)\n",
    "MbppEval/99": "def decimal_to_binary(n):\n    binary_str = \"\"\n    \n    while n > 0:\n        binary_str = str(n % 2) + binary_str\n        n //= 2\n    \n    return binary_str or '0'\n",
    "MbppEval/162": "def sum_series(n):\n    total_sum = 0\n    for i in range(n // 2 + 1):\n        total_sum += n - 2 * i\n    return total_sum\n",
    "MbppEval/165": "def count_char_position(str1):\n    count = 0\n    for i, char in enumerate(str1.lower()):\n        if ord(char) - ord('a') + 1 == i + 1:\n            count += 1\n    return count\n",
    "MbppEval/171": "import math\n\ndef perimeter_pentagon(a):\n    return 5 * a\n",
    "MbppEval/92": "def is_undulating(n):\n    digits = [int(d) for d in n]\n    is_up = None\n    trend_changes = 0\n    prev_digit = None\n\n    for i in range(1, len(digits)):\n        if digits[i] > digits[i-1]:\n            if is_up is False:\n                trend_changes += 1\n            is_up = True\n        elif digits[i] < digits[i-1]:\n            if is_up is True:\n                trend_changes += 1\n            is_up = False\n        prev_digit = digits[i-1]\n\n    return trend_changes == len(digits) - 1\n",
    "MbppEval/172": "def count_occurance(s):\n    count = 0\n    for i in range(len(s) - 2):\n        if s[i:i+3] == 'std':\n            count += 1\n    return count\n",
    "MbppEval/93": "def power(a, b):\n    return a ** b\n",
    "MbppEval/168": "def frequency(a, x):\n    count = 0\n    for element in a:\n        if element == x:\n            count += 1\n    return count\n",
    "MbppEval/170": "def sum_range_list(list1, m, n):\n    sum_range = 0\n    for i in range(m, n+1):\n        sum_range += list1[i]\n    return sum_range\n",
    "MbppEval/166": "def find_even_pair(A):\n    even_count = 0\n    odd_count = 0\n    even_pairs = 0\n\n    # Count even and odd numbers\n    for num in A:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    # Calculate the number of pairs that XOR to an even number\n    for num in A:\n        even_pairs += even_count * odd_count\n        if num % 2 == 0:\n            even_count -= 1\n        else:\n            odd_count -= 1\n\n    return even_pairs\n",
    "MbppEval/129": "def magic_square_test(my_matrix):\n    # Check if the input is a valid 2D matrix\n    if not isinstance(my_matrix, list) or not all(isinstance(row, list) for row in my_matrix):\n        return False\n    \n    # Check if all rows have the same length\n    row_length = len(my_matrix[0])\n    if not all(len(row) == row_length for row in my_matrix):\n        return False\n    \n    # Initialize magic_sum\n    magic_sum = sum(my_matrix[0])\n    \n    # Check rows\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return False\n    \n    # Check columns\n    for j in range(row_length):\n        column_sum = 0\n        for i in range(len(my_matrix)):\n            column_sum += my_matrix[i][j]\n        if column_sum != magic_sum:\n            return False\n    \n    # Calculate primary diagonal sum\n    primary_diagonal_sum = 0\n    for i in range(len(my_matrix)):\n        primary_diagonal_sum += my_matrix[i][i]\n    \n    # Calculate secondary diagonal sum\n    secondary_diagonal_sum = 0\n    for i in range(len(my_matrix)):\n        secondary_diagonal_sum += my_matrix[i][row_length - i - 1]\n    \n    # Check diagonals\n    if primary_diagonal_sum != magic_sum or secondary_diagonal_sum != magic_sum:\n        return False\n    \n    # If all checks pass, return True\n    return True\n",
    "MbppEval/132": "def tup_string(tup1):\n    return ''.join(tup1)\n",
    "MbppEval/167": "def next_power_of_2(n):\n    \"\"\"\n    Find the smallest power of 2 greater than or equal to n.\n\n    Examples:\n    next_power_of_2(0) == 1\n    next_power_of_2(5) == 8\n    next_power_of_2(17) == 32\n    \"\"\"\n    power = 1\n    while power < n:\n        power *= 2\n    return power\n",
    "MbppEval/163": "from math import tan, pi\n\ndef area_polygon(s, l):\n    area = (s * l**2) / (4 * tan(pi/s))\n    return area\n",
    "MbppEval/138": "def is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return False\n    temp = n\n    if (temp & (temp - 1)) == 0:\n        return True\n    while temp:\n        if temp & 1 == 1 and not is_Sum_Of_Powers_Of_Two(temp & (temp - 1)):\n            return False\n        temp >>= 1\n    return True\n",
    "MbppEval/222": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n\n    Examples:\n    check_type((5, 6, 7, 3, 5, 6)) == True\n    check_type((1, 2, \"4\")) == False\n    check_type((3, 2, 1, 4, 5)) == True\n    \"\"\"\n    if not test_tuple:\n        return True\n\n    data_type = type(test_tuple[0])\n\n    for element in test_tuple:\n        if type(element) != data_type:\n            return False\n\n    return True\n",
    "MbppEval/100": "def is_palindrome(n):\n    \"\"\"\n    Check if a number is a palindrome.\n    \"\"\"\n    original_n = n\n    reversed_n = 0\n    while n > 0:\n        reversed_n = reversed_n * 10 + n % 10\n        n //= 10\n    return original_n == reversed_n\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Find the next smallest palindrome of a given integer.\n    \"\"\"\n    if is_palindrome(num):\n        return num\n    \n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    \n    return num\n",
    "MbppEval/226": "def odd_values_string(str):\n    result = \"\"\n    for i, char in enumerate(str):\n        if i % 2 == 0:\n            result += char\n    return result\n",
    "MbppEval/223": "def is_majority(arr, n, x):\n    # Find the first and last index of x in the sorted array\n    first = 0\n    last = n - 1\n    while first <= last:\n        mid = (first + last) // 2\n        if arr[mid] == x:\n            break\n        elif arr[mid] < x:\n            first = mid + 1\n        else:\n            last = mid - 1\n\n    # If x is not found in the array, return False\n    if arr[mid] != x:\n        return False\n\n    # Find the first index of x\n    start = mid\n    while start > 0 and arr[start - 1] == x:\n        start -= 1\n\n    # Find the last index of x\n    end = mid\n    while end < n - 1 and arr[end + 1] == x:\n        end += 1\n\n    # Check if the count of x is greater than n/2\n    if end - start + 1 > n // 2:\n        return True\n    else:\n        return False\n",
    "MbppEval/224": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n",
    "MbppEval/229": "def re_arrange_array(arr, n):\n    left = 0\n    right = n - 1\n\n    while left <= right:\n        if arr[left] < 0:\n            left += 1\n        elif arr[right] >= 0:\n            right -= 1\n        else:\n            arr[left], arr[right] = arr[right], arr[left]\n            left += 1\n            right -= 1\n\n    return arr\n",
    "MbppEval/160": "def gcd(a, b):\n    \"\"\"\n    Find the greatest common divisor of a and b using the Euclidean algorithm.\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\ndef extended_gcd(a, b, n):\n    \"\"\"\n    Find the extended Euclidean algorithm to solve ax + by = n.\n    \"\"\"\n    if b == 0:\n        return 1, 0, a\n    else:\n        x, y, d = extended_gcd(b, a % b, n)\n        return y, x - (a // b) * y, d\n\ndef find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    d = gcd(a, b)\n    if n % d != 0:\n        return None\n    \n    x, y, _ = extended_gcd(a // d, b // d, n // d)\n    return (x, y)\n",
    "MbppEval/164": "def divisor_sum(n):\n    \"\"\"\n    Calculates the sum of all the divisors of an integer n.\n    \"\"\"\n    divisor_sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisor_sum += i\n    return divisor_sum\n\ndef are_divisor_sums_equal(a, b):\n    \"\"\"\n    Determines if the sum of the divisors of two integers are the same.\n    \"\"\"\n    return divisor_sum(a) == divisor_sum(b)\n",
    "MbppEval/133": "def sum_negativenum(nums):\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum\n",
    "MbppEval/108": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    min_heap = []\n    if num1:\n        heapq.heappush(min_heap, (num1[0], 0, num1))\n    if num2:\n        heapq.heappush(min_heap, (num2[0], 1, num2))\n    if num3:\n        heapq.heappush(min_heap, (num3[0], 2, num3))\n\n    result = []\n    while min_heap:\n        value, list_index, list_ref = heapq.heappop(min_heap)\n        result.append(value)\n\n        next_index = list_index + 1\n        if next_index < len(list_ref):\n            heapq.heappush(min_heap, (list_ref[next_index], list_index, list_ref))\n\n    return result\n",
    "MbppEval/235": "def even_bit_set_number(n):\n    odd_mask = 0b1010101010101010\n    result = n | odd_mask\n    return result\n",
    "MbppEval/227": "def min_of_three(a, b, c):\n    minimum = a\n    \n    if b < minimum:\n        minimum = b\n    if c < minimum:\n        minimum = c\n    \n    return minimum\n",
    "MbppEval/88": "import collections\n\ndef freq_count(list1):\n    freq = collections.Counter(list1)\n    return dict(freq)\n",
    "MbppEval/244": "import math\n\ndef next_Perfect_Square(N):\n    sqrt = math.sqrt(N)\n    next_sqrt = math.ceil(sqrt)\n    next_perfect_square = next_sqrt ** 2\n    return int(next_perfect_square)\n",
    "MbppEval/251": "def insert_element(lst, element):\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result\n",
    "MbppEval/233": "import math\n\ndef lateralsuface_cylinder(r, h):\n    lateral_surface_area = 2 * math.pi * r * h\n    return round(lateral_surface_area, 2)\n",
    "MbppEval/116": "def tuple_to_int(nums):\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result\n",
    "MbppEval/242": "def count_charac(str1):\n    total_chars = 0\n    for char in str1:\n        total_chars += 1\n    return total_chars\n",
    "MbppEval/249": "def intersection_array(array_nums1, array_nums2):\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.append(num)\n    return intersection\n",
    "MbppEval/252": "import cmath\n\ndef convert(num):\n    \"\"\"\n    Convert a complex number to polar coordinates.\n    \n    Args:\n        num (complex): The complex number to be converted.\n    \n    Returns:\n        (float, float): The magnitude (modulus) and angle (phase) of the complex number.\n    \"\"\"\n    magnitude = abs(num)\n    angle = cmath.phase(num)\n    return (magnitude, angle)\n",
    "MbppEval/245": "def max_sum(arr):\n    n = len(arr)\n    increasing = [0] * n\n    decreasing = [0] * n\n\n    # Compute the increasing subsequence\n    increasing[0] = arr[0]\n    for i in range(1, n):\n        increasing[i] = max(increasing[i-1] + arr[i], arr[i])\n\n    # Compute the decreasing subsequence\n    decreasing[n-1] = arr[n-1]\n    for i in range(n-2, -1, -1):\n        decreasing[i] = max(decreasing[i+1] + arr[i], arr[i])\n\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, increasing[i] + decreasing[i] - arr[i])\n\n    return max_sum\n",
    "MbppEval/67": "def bell_number(n):\n    \"\"\"\n    Computes the Bell number B(n).\n    \"\"\"\n    if n == 0 or n == 1:\n        return 1\n    \n    result = 0\n    for k in range(n):\n        result += bell_number(k) * binomial(n, k)\n    \n    return result\n\ndef binomial(n, k):\n    \"\"\"\n    Computes the binomial coefficient C(n, k).\n    \"\"\"\n    if k < 0 or k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    \n    return factorial(n) // (factorial(k) * factorial(n - k))\n\ndef factorial(n):\n    \"\"\"\n    Computes the factorial of a number.\n    \"\"\"\n    if n == 0 or n == 1:\n        return 1\n    return n * factorial(n - 1)\n",
    "MbppEval/234": "def volume_cube(l):\n    return l ** 3\n",
    "MbppEval/253": "def count_integer(list1):\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count\n",
    "MbppEval/161": "def remove_elements(list1, list2):\n    result = []\n    for item in list1:\n        if item not in list2:\n            result.append(item)\n    return result\n",
    "MbppEval/232": "import heapq\n\ndef larg_nnum(list1, n):\n    return heapq.nlargest(n, list1)\n",
    "MbppEval/117": "def list_to_float(test_list):\n    output_list = []\n    for pair in test_list:\n        first_element = float(pair[0]) if pair[0].replace('.', '', 1).isdigit() else pair[0]\n        second_element = float(pair[1]) if pair[1].replace('.', '', 1).isdigit() else pair[1]\n        output_list.append((first_element, second_element))\n    return str(output_list)\n",
    "MbppEval/259": "def maximize_elements(test_tup1, test_tup2):\n    result = []\n    for a, b in zip(test_tup1, test_tup2):\n        result.append((max(a[0], b[0]), max(a[1], b[1])))\n    return tuple(result)\n",
    "MbppEval/239": "def get_total_number_of_sequences(m, n):\n    dp = [[0] * (n+1) for _ in range(m+1)]\n\n    # Base case: there is 1 sequence of length 1 for each valid integer\n    for i in range(1, m+1):\n        dp[i][1] = 1\n\n    for j in range(2, n+1):\n        for i in range(1, m+1):\n            min_val = max(1, i//2)\n            for k in range(min_val, i):\n                dp[i][j] += dp[k][j-1]\n\n    return sum(dp[i][n] for i in range(1, m+1))\n",
    "MbppEval/250": "def count_X(tup, x):\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count\n",
    "MbppEval/248": "import math\n\ndef harmonic_sum(n):\n    return math.log(n) + 0.5772\n",
    "MbppEval/255": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l, n))\n",
    "MbppEval/266": "def lateralsurface_cube(l):\n    return 4 * l ** 2\n",
    "MbppEval/261": "def division_elements(test_tup1, test_tup2):\n    results = []\n    for i in range(len(test_tup1)):\n        result = test_tup1[i] / test_tup2[i]\n        results.append(result)\n    return tuple(results)\n",
    "MbppEval/262": "def split_two_parts(list1, L):\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)\n",
    "MbppEval/269": "def ascii_value(k):\n    return ord(k)\n",
    "MbppEval/268": "def find_star_num(n):\n    return n**2 + (n-1)**2\n",
    "MbppEval/260": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_newman_shanks_williams_prime(n):\n    if not is_prime(n):\n        return False\n    i = 0\n    while True:\n        if n == 2 ** i + 1:\n            return True\n        if 2 ** i + 1 > n:\n            return False\n        i += 1\n\ndef newman_prime(n):\n    count = 0\n    i = 2\n    while True:\n        if is_newman_shanks_williams_prime(i):\n            count += 1\n            if count == n:\n                return i\n        i += 1\n",
    "MbppEval/257": "def swap_numbers(a, b):\n    return b, a\n",
    "MbppEval/139": "import math\n\ndef circle_circumference(r):\n    return 2 * math.pi * r\n",
    "MbppEval/267": "def square_Sum(n):\n    total_sum = 0\n    for i in range(1, 2*n, 2):\n        total_sum += i**2\n    return total_sum\n",
    "MbppEval/264": "def dog_age(h_age):\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return (2 * 10.5) + ((h_age - 2) * 4)\n",
    "MbppEval/279": "def is_num_decagonal(n):\n    return n * (3 * n - 2)\n",
    "MbppEval/111": "def common_in_nested_lists(nestedlist):\n    element_count = {}\n    for inner_list in nestedlist:\n        for element in inner_list:\n            if element in element_count:\n                element_count[element] += 1\n            else:\n                element_count[element] = 1\n    \n    common_elements = [element for element, count in element_count.items() if count == len(nestedlist)]\n    return common_elements\n",
    "MbppEval/274": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    total_sum = 0\n    for k in range(0, n+1, 2):\n        binomial_coeff = math.comb(n, k)\n        total_sum += binomial_coeff\n    return total_sum\n",
    "MbppEval/281": "def all_unique(test_list):\n    unique_set = set(test_list)\n    return len(unique_set) == len(test_list)\n",
    "MbppEval/101": "def kth_element(arr, k, index=1):\n    \"\"\"\n    Find the kth element in the given array using 1-based indexing.\n\n    Args:\n        arr (list): The input array.\n        k (int): The value of k.\n        index (int, optional): The 1-based index. Defaults to 1.\n\n    Returns:\n        int: The kth element in the array.\n    \"\"\"\n    if k < 1 or k > len(arr):\n        return \"Error: k is not within the valid range of the array length.\"\n\n    def partition(left, right, pivot_index):\n        pivot = arr[pivot_index]\n        arr[pivot_index], arr[right] = arr[right], arr[pivot_index]\n        store_index = left\n        for i in range(left, right):\n            if arr[i] < pivot:\n                arr[i], arr[store_index] = arr[store_index], arr[i]\n                store_index += 1\n        arr[right], arr[store_index] = arr[store_index], arr[right]\n        return store_index\n\n    def select(left, right, k_smallest):\n        if left == right:\n            return arr[left]\n\n        pivot_index = left\n        pivot_index = partition(left, right, pivot_index)\n\n        if k_smallest == pivot_index + 1:\n            return arr[pivot_index]\n        elif k_smallest < pivot_index + 1:\n            return select(left, pivot_index - 1, k_smallest)\n        else:\n            return select(pivot_index + 1, right, k_smallest)\n\n    return select(0, len(arr) - 1, k)\n",
    "MbppEval/273": "def subtract_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\n    Examples:\n    subtract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    subtract_elements((11, 2, 3), (24, 45, 16)) == (-13, -43, -13)\n    subtract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n    \"\"\"\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Input tuples must have the same length.\")\n\n    result = tuple(a - b for a, b in zip(test_tup1, test_tup2))\n    return result\n",
    "MbppEval/277": "def dict_filter(d, n):\n    filtered_dict = {}\n    for key, value in d.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict\n",
    "MbppEval/131": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    char_list = list(str1)\n    vowel_indices = [i for i, char in enumerate(char_list) if char.lower() in vowels]\n    \n    for i in range(len(vowel_indices) // 2):\n        char_list[vowel_indices[i]], char_list[vowel_indices[-(i+1)]] = char_list[vowel_indices[-(i+1)]], char_list[vowel_indices[i]]\n    \n    return ''.join(char_list)\n",
    "MbppEval/282": "def sub_list(nums1, nums2):\n    if len(nums1) != len(nums2):\n        return []\n    \n    result = [x - y for x, y in zip(nums1, nums2)]\n    return result\n",
    "MbppEval/280": "def sequential_search(dlist, item):\n    found = False\n    index = -1\n    \n    for i, element in enumerate(dlist):\n        if element == item:\n            found = True\n            index = i\n            break\n    \n    return (found, index)\n",
    "MbppEval/294": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n\n    Examples:\n    max_val(['Python', 3, 2, 4, 5, 'version']) == 5\n    max_val(['Python', 15, 20, 25]) == 25\n    max_val(['Python', 30, 20, 40, 50, 'version']) == 50\n    \"\"\"\n    max_value = float('-inf')\n    \n    for item in listval:\n        if isinstance(item, (int, float)):\n            max_value = max(max_value, item)\n    \n    return max_value\n",
    "MbppEval/130": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    count = defaultdict(int)\n    for num in nums:\n        count[num] += 1\n    \n    max_count = 0\n    max_item = None\n    for item, c in count.items():\n        if c > max_count:\n            max_count = c\n            max_item = item\n    \n    return (max_item, max_count)\n",
    "MbppEval/265": "def list_split(S, step):\n    result = []\n    for i in range(0, len(S), step):\n        sub_list = [S[j] for j in range(i, len(S), step)]\n        result.append(sub_list)\n    return result\n",
    "MbppEval/292": "def find(n, m):\n    return n // m\n",
    "MbppEval/297": "def flatten_list(list1):\n    flattened_list = []\n\n    for element in list1:\n        if isinstance(element, list):\n            flattened_list.extend(flatten_list(element))\n        else:\n            flattened_list.append(element)\n\n    return flattened_list\n",
    "MbppEval/284": "def check_element(lst, element):\n    all_equal = True\n    for item in lst:\n        if item != element:\n            all_equal = False\n            break\n    return all_equal\n",
    "MbppEval/293": "import math\n\ndef otherside_rightangle(w, h):\n    return math.sqrt(w ** 2 + h ** 2)\n",
    "MbppEval/278": "def count_first_elements(test_tup):\n    count = 0\n    for element in test_tup:\n        if isinstance(element, tuple):\n            return count\n        count += 1\n    return count\n",
    "MbppEval/300": "def count_binary_seq(n):\n    if n == 0:\n        return 1.0\n    \n    total = 0\n    for i in range(2 ** n):\n        first_half = bin(i)[2:].zfill(n)\n        second_half = bin((2 ** n) - 1 - i)[2:].zfill(n)\n        if sum(int(bit) for bit in first_half) == sum(int(bit) for bit in second_half):\n            total += 1\n    return total\n",
    "MbppEval/256": "import math\n\ndef count_Primes_nums(n):\n    if n < 2:\n        return 0\n\n    is_prime = [True] * n\n    is_prime[0] = is_prime[1] = False\n\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if is_prime[i]:\n            for j in range(i * i, n, i):\n                is_prime[j] = False\n\n    return sum(is_prime)\n",
    "MbppEval/285": "import re\n\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}$'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
    "MbppEval/301": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n\n    Examples:\n    dict_depth({'a':1, 'b': {'c': {'d': {}}}}) == 4\n    dict_depth({'a':1, 'b': {'c':'python'}}) == 2\n    dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}}) == 3\n    \"\"\"\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n",
    "MbppEval/286": "def max_sub_array_sum_repeated(a, n, k):\n    max_sum = float('-inf')\n    current_sum = 0\n    min_sum = 0\n    total_sum = 0\n\n    for _ in range(k):\n        current_sum = max(current_sum + a[i], a[i])\n        max_sum = max(max_sum, current_sum)\n        min_sum = min(min_sum, current_sum)\n        total_sum += a[i]\n        i = (i + 1) % n\n\n    # If all elements are negative, return the maximum element\n    if max_sum < 0:\n        return max_sum\n\n    return max(max_sum, total_sum - min_sum)\n",
    "MbppEval/283": "def validate(n):\n    freq_dict = {}\n    str_n = str(n)\n    \n    for char in str_n:\n        digit = int(char)\n        if digit not in freq_dict:\n            freq_dict[digit] = 1\n        else:\n            freq_dict[digit] += 1\n    \n    for digit, count in freq_dict.items():\n        if count > digit:\n            return False\n    \n    return True\n",
    "MbppEval/58": "def opposite_Signs(x, y):\n    if (x < 0 and y >= 0) or (x >= 0 and y < 0):\n        return True\n    else:\n        return False\n",
    "MbppEval/305": "import re\n\ndef start_withp(words):\n    p_words = []\n    P_words = []\n    \n    for word in words:\n        if re.match(r'^p', word, re.IGNORECASE):\n            if word.startswith('p'):\n                p_words.append(word)\n            else:\n                P_words.append(word)\n    \n    return (p_words[0], P_words[0]) if p_words and P_words else ()\n",
    "MbppEval/291": "def count_no_of_ways(n, k):\n    if n == 1:\n        return k\n    \n    same = k\n    diff = k * (k-1)\n    \n    for i in range(3, n+1):\n        same, diff = diff, (same + diff) * (k-1)\n    \n    return same + diff\n",
    "MbppEval/309": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n\n    Examples:\n    maximum(5, 10) == 10\n    maximum(-1, -2) == -1\n    maximum(9, 7) == 9\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b\n",
    "MbppEval/312": "import math\n\ndef volume_cone(r, h):\n    return (1/3) * math.pi * r**2 * h\n",
    "MbppEval/306": "def max_sum_increasing_subseq(a, n, index, k):\n    dp = [0] * n\n    \n    # Initialize the first element\n    dp[0] = a[0]\n    \n    # Iterate through the array\n    for i in range(1, n):\n        # Find the maximum sum of the increasing subsequence up to i, including any element after i up to the kth element\n        if i <= index:\n            dp[i] = max(dp[i-1], a[i])\n        elif a[i] < a[k]:\n            dp[k] = max(dp[k], dp[i-1] + a[i])\n        else:\n            dp[i] = dp[i-1]\n    \n    # Return the maximum value in the dp array\n    return dp[k]\n",
    "MbppEval/304": "def find_Element(arr, ranges, rotations, index):\n    for i in range(rotations):\n        for start, end in ranges:\n            arr[start:end+1] = arr[start:end+1][-1:] + arr[start:end+1][:-1]\n    return arr[index]\n",
    "MbppEval/276": "import math\n\ndef volume_cylinder(r, h):\n    return math.pi * r**2 * h\n",
    "MbppEval/310": "def string_to_tuple(str1):\n    return tuple(str1)\n",
    "MbppEval/287": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of squares of first n even natural numbers.\n\n    Examples:\n    square_Sum(2) == 20\n    square_Sum(3) == 56\n    square_Sum(4) == 120\n    \"\"\"\n    total_sum = 0\n    for i in range(1, n+1):\n        even_num = 2 * i\n        total_sum += even_num ** 2\n    return total_sum\n",
    "MbppEval/240": "def replace_list(list1, list2):\n    new_list = list1[:]\n    new_list[-1] = list2\n    return new_list\n",
    "MbppEval/389": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for i in range(2, n+1):\n            a, b = b, a + b\n        return b\n",
    "MbppEval/388": "def highest_Power_of_2(n):\n    power_of_2 = 1\n    while power_of_2 <= n:\n        power_of_2 *= 2\n    return power_of_2 // 2\n",
    "MbppEval/391": "def convert_list_dictionary(l1, l2, l3):\n    result = []\n    for key, name, value in zip(l1, l2, l3):\n        result.append({key: {name: value}})\n    return result\n",
    "MbppEval/307": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    if m < 0 or m >= len(tuplex):\n        raise IndexError(\"Index out of range\")\n    \n    new_tuple = deepcopy(tuplex)\n    element_at_m = new_tuple[m]\n    \n    if isinstance(element_at_m, list):\n        new_tuple = new_tuple[:m] + (element_at_m[:n] + [n] + element_at_m[n+1:],) + new_tuple[m+1:]\n    else:\n        new_tuple = new_tuple[:m] + ([n],) + new_tuple[m+1:]\n    \n    return new_tuple\n",
    "MbppEval/64": "def subject_marks(subjectmarks):\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks\n",
    "MbppEval/299": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    aggregates = defaultdict(int)\n\n    for name, score in stdata:\n        aggregates[name] += score\n\n    max_name, max_score = max(aggregates.items(), key=lambda x: x[1])\n    return (max_name, max_score)\n",
    "MbppEval/308": "def large_product(nums1, nums2, N):\n    largest_products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            product = num1 * num2\n            if len(largest_products) < N or product > largest_products[0]:\n                largest_products.append(product)\n                largest_products.sort(reverse=True)\n                if len(largest_products) > N:\n                    largest_products.pop(0)\n    return largest_products[:N]\n",
    "MbppEval/393": "def max_length_list(input_list):\n    max_length = 0\n    max_length_list = None\n\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_length_list = lst\n\n    return max_length, max_length_list\n",
    "MbppEval/395": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n\n    Examples:\n    first_non_repeating_character(\"abcabc\") == None\n    first_non_repeating_character(\"abc\") == \"a\"\n    first_non_repeating_character(\"ababc\") == \"c\"\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n\n    return None\n",
    "MbppEval/409": "def min_product_tuple(list1):\n    min_product = float('inf')\n\n    for a, b in list1:\n        product = a * b\n        min_product = min(min_product, product)\n\n    return min_product\n",
    "MbppEval/272": "def rear_extract(test_list):\n    output = []\n    for tup in test_list:\n        output.append(tup[-1])\n    return output\n",
    "MbppEval/406": "def find_Parity(x):\n    if x % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n",
    "MbppEval/415": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n\n    Examples:\n    max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n    max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)\n    max_Product([1,2,3]) == (2,3)\n    \"\"\"\n    if len(arr) < 2:\n        return None\n\n    max1 = max(arr[0], arr[1])\n    max2 = min(arr[0], arr[1])\n\n    for i in range(2, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n\n    return (max1, max2)\n",
    "MbppEval/420": "def cube_Sum(n):\n    sum_cubes = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum_cubes += i**3\n    return sum_cubes\n",
    "MbppEval/270": "def sum_even_and_even_index(arr):\n    total = 0\n    for i, num in enumerate(arr):\n        if i % 2 == 0 and num % 2 == 0:\n            total += num\n    return total\n",
    "MbppEval/414": "def overlapping(list1, list2):\n    is_overlapping = False\n    for item in list1:\n        if item in list2:\n            is_overlapping = True\n            break\n    return is_overlapping\n",
    "MbppEval/394": "def check_distinct(test_tup):\n    return len(set(test_tup)) == len(test_tup)\n",
    "MbppEval/398": "def sum_of_digits(nums):\n    total_sum = 0\n    for item in nums:\n        if isinstance(item, (int, float)):\n            item = abs(item)\n            for digit in str(item):\n                total_sum += int(digit)\n        elif isinstance(item, list):\n            total_sum += sum_of_digits(item)\n    return total_sum\n",
    "MbppEval/410": "def min_val(listval):\n    min_value = float('inf')\n    for item in listval:\n        if isinstance(item, (int, float)):\n            min_value = min(min_value, item)\n    return min_value\n",
    "MbppEval/408": "def k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    for num1 in nums1:\n        for num2 in nums2:\n            pairs.append([num1, num2])\n    pairs.sort(key=lambda x: x[0] + x[1])\n    return pairs[:min(k, len(pairs))]\n",
    "MbppEval/412": "def remove_odd(l):\n    even_list = []\n    for num in l:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list\n",
    "MbppEval/400": "def extract_freq(test_list):\n    unique_tuples = set()\n    for tup in test_list:\n        unique_tuples.add(tup)\n    return len(unique_tuples)\n",
    "MbppEval/396": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    if re.match(regex, string):\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n",
    "MbppEval/421": "def concatenate_tuple(test_tup):\n    result = \"-\".join(map(str, test_tup))\n    return result\n",
    "MbppEval/418": "def Find_Max(lst):\n    max_length = 0\n    max_element = None\n    \n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    \n    return max_element\n",
    "MbppEval/424": "def extract_rear(test_tuple):\n    rear_elements = []\n    for item in test_tuple:\n        rear_elements.append(item[-1])\n    return rear_elements\n",
    "MbppEval/422": "def find_Average_Of_Cube(n):\n    total_cube = 0\n    for i in range(1, n+1):\n        total_cube += i**3\n    return total_cube / n\n",
    "MbppEval/290": "def max_length(list1):\n    max_length = 0\n    max_list = []\n\n    for inner_list in list1:\n        if len(inner_list) > max_length:\n            max_length = len(inner_list)\n            max_list = inner_list\n\n    return (max_length, max_list)\n",
    "MbppEval/419": "def round_and_sum(list1):\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    return total_sum * len(list1)\n",
    "MbppEval/425": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n",
    "MbppEval/413": "def extract_nth_element(list1, n):\n    result = []\n    for tup in list1:\n        result.append(tup[n])\n    return result\n",
    "MbppEval/417": "def group_tuples(input_list):\n    grouped = {}\n    \n    for tup in input_list:\n        first_element = tup[0]\n        if first_element not in grouped:\n            grouped[first_element] = []\n        grouped[first_element].append(tup)\n    \n    return [tuple(group) for group in grouped.values()]\n",
    "MbppEval/427": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\n    Examples:\n    change_date_format(\"2026-01-02\") == '02-01-2026'\n    change_date_format(\"2020-11-13\") == '13-11-2020'\n    change_date_format(\"2021-04-26\") == '26-04-2021'\n    '''\n    match = re.match(r\"(\\d{4})-(\\d{2})-(\\d{2})\", dt)\n    if match:\n        year, month, day = match.groups()\n        return f\"{day}-{month}-{year}\"\n    else:\n        raise ValueError(\"Invalid date format: {dt}\")\n",
    "MbppEval/429": "def and_tuples(test_tup1, test_tup2):\n    return tuple(a & b for a, b in zip(test_tup1, test_tup2))\n",
    "MbppEval/237": "from collections import Counter \n\ndef check_occurences(test_list):\n    count_dict = {}\n    for tup in test_list:\n        if tup in count_dict:\n            count_dict[tup] += 1\n        else:\n            count_dict[tup] = 1\n    return count_dict\n",
    "MbppEval/430": "def parabola_directrix(a, b, c):\n    return -b / (2 * a)\n",
    "MbppEval/431": "def common_element(list1, list2):\n    has_common_element = False\n    for item in list1:\n        if item in list2:\n            has_common_element = True\n            break\n    return has_common_element\n",
    "MbppEval/428": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2  # Initialize the gap\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2  # Decrease the gap\n\n    return my_list\n",
    "MbppEval/434": "import re\n\ndef text_match_one(text):\n    pattern = r\"ab+\"\n    if re.search(pattern, text):\n        return \"Found a match!\"\n    else:\n        return \"Not matched!\"\n",
    "MbppEval/433": "def check_greater(arr, number):\n    is_greater = True\n    for element in arr:\n        if number <= element:\n            is_greater = False\n            break\n    if is_greater:\n        return \"Yes, the entered number is greater than those in the array\"\n    else:\n        return \"No, entered number is less than those in the array\"\n",
    "MbppEval/441": "def surfacearea_cube(l):\n    return 6 * (l ** 2)\n",
    "MbppEval/432": "def median_trapezium(base1, base2, height):\n    median = (base1 + base2) / 2\n    return median\n",
    "MbppEval/435": "def last_Digit(n):\n    return n % 10\n",
    "MbppEval/439": "def multiple_to_single(L):\n    result = ''\n    for num in L:\n        result += str(num)\n    return int(result)\n",
    "MbppEval/438": "def count_bidirectional(test_list):\n    tuple_dict = {}\n    count = 0\n    for t in test_list:\n        reverse_t = (t[1], t[0])\n        if reverse_t in tuple_dict:\n            count += 1\n            tuple_dict.pop(reverse_t)\n        else:\n            tuple_dict[t] = reverse_t\n    return str(count)\n",
    "MbppEval/437": "def remove_odd(str1):\n    result = \"\"\n    for i, char in enumerate(str1):\n        if i % 2 == 0:\n            result += char\n    return result\n",
    "MbppEval/445": "def index_multiplication(test_tup1, test_tup2):\n    return tuple([(a * x, b * y) for (a, b), (x, y) in zip(test_tup1, test_tup2)])\n",
    "MbppEval/446": "from collections import Counter \n\ndef count_Occurrence(tup, lst):\n    counter = Counter(tup)\n    count = 0\n    for element in lst:\n        if element in counter:\n            count += counter[element]\n    return count\n",
    "MbppEval/405": "def check_tuplex(tuplex, tuple1):\n    return tuple1 in tuplex\n",
    "MbppEval/447": "def cube_nums(nums):\n    return [num ** 3 for num in nums]\n",
    "MbppEval/436": "def neg_nos(list1):\n    negative_numbers = [num for num in list1 if num < 0]\n    return negative_numbers\n",
    "MbppEval/459": "import re\n\ndef remove_uppercase(str1):\n    return re.sub(r'[A-Z]+', '', str1)\n",
    "MbppEval/440": "import re\n\ndef find_adverb_position(text):\n    adverb_pattern = r'\\w+ly'\n    match = re.search(adverb_pattern, text)\n    if match:\n        start = match.start()\n        end = match.end()\n        adverb = match.group()\n        return (start, end, adverb)\n    else:\n        return None\n",
    "MbppEval/450": "def extract_string(str, l):\n    return [s for s in str if len(s) == l]\n",
    "MbppEval/448": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of Perrin numbers.\n\n    Examples:\n    cal_sum(9) == 49\n    cal_sum(10) == 66\n    cal_sum(11) == 88\n    \"\"\"\n    if n <= 0:\n        return 0\n\n    # Initialize the first three Perrin numbers\n    perrin = [3, 0, 2]\n\n    # Calculate the Perrin numbers up to the nth term\n    for i in range(3, n):\n        next_perrin = perrin[i-3] + perrin[i-2] + perrin[i-1]\n        perrin.append(next_perrin)\n\n    # Calculate the sum of the Perrin numbers\n    return sum(perrin)\n",
    "MbppEval/457": "def Find_Min(lst):\n    min_length = float('inf')\n    min_sublist = None\n\n    for sublst in lst:\n        if len(sublst) < min_length:\n            min_length = len(sublst)\n            min_sublist = sublst\n        elif len(sublst) == min_length:\n            min_sublist = sublst\n\n    return min_sublist\n",
    "MbppEval/442": "def positive_count(nums):\n    positive_nums = 0\n    for num in nums:\n        if num > 0:\n            positive_nums += 1\n    return positive_nums / len(nums)\n",
    "MbppEval/458": "def rectangle_area(l, b):\n    area = l * b\n    return area\n",
    "MbppEval/452": "def loss_amount(actual_cost, sale_amount):\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return 0\n",
    "MbppEval/454": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\w*z\\w*'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
    "MbppEval/443": "def largest_neg(list1):\n    largest_neg = float('inf')\n    \n    for num in list1:\n        if num < 0 and num > largest_neg:\n            largest_neg = num\n    \n    if largest_neg == float('inf'):\n        return None\n    else:\n        return largest_neg\n",
    "MbppEval/404": "def minimum(a, b):\n    if a < b:\n        return a\n    else:\n        return b\n",
    "MbppEval/390": "def add_string(list_, string):\n    formatted_strings = []\n    for element in list_:\n        formatted_string = string.format(element)\n        formatted_strings.append(formatted_string)\n    return formatted_strings\n",
    "MbppEval/453": "import math\n\ndef sumofFactors(n):\n    even_factors = []\n    for i in range(1, n+1):\n        if n % i == 0 and i % 2 == 0:\n            even_factors.append(i)\n    return sum(even_factors)\n",
    "MbppEval/465": "def drop_empty(dict1):\n    result = {}\n    for key, value in dict1.items():\n        if value is not None:\n            result[key] = value\n    return result\n",
    "MbppEval/471": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product *= num\n    return product % n\n",
    "MbppEval/455": "def check_monthnumb_number(monthnum2):\n    months_31_days = [1, 3, 5, 7, 8, 10, 12]\n    return monthnum2 in months_31_days\n",
    "MbppEval/470": "def add_pairwise(test_tup):\n    return tuple(a + b for a, b in zip(test_tup[:-1], test_tup[1:]))\n",
    "MbppEval/464": "def check_value(dict, n):\n    same_value = True\n    for value in dict.values():\n        if value != n:\n            same_value = False\n            break\n    return same_value\n",
    "MbppEval/451": "import re\n\ndef remove_whitespaces(text1):\n    return re.sub(r'\\s+', '', text1)\n",
    "MbppEval/463": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n\n    max_so_far = arr[0]\n    min_so_far = arr[0]\n    result = max_so_far\n\n    for i in range(1, len(arr)):\n        curr = arr[i]\n        temp_max = max(curr, max_so_far * curr, min_so_far * curr)\n        min_so_far = min(curr, max_so_far * curr, min_so_far * curr)\n\n        max_so_far = temp_max\n\n        result = max(max_so_far, result)\n\n    return result\n",
    "MbppEval/472": "def check_Consecutive(l):\n    is_consecutive = True\n    for i in range(len(l) - 1):\n        if l[i] + 1 != l[i+1]:\n            is_consecutive = False\n            break\n    return is_consecutive\n",
    "MbppEval/392": "def f(n):\n    if n <= 1:\n        return n\n    \n    f_n_2 = f(n // 2)\n    f_n_3 = f(n // 3)\n    f_n_4 = f(n // 4)\n    f_n_5 = f(n // 5)\n    \n    return max(f_n_2 + f_n_3 + f_n_4 + f_n_5, n)\n\ndef get_max_sum(n):\n    return f(n)\n",
    "MbppEval/477": "def is_lower(string):\n    return string.lower()\n",
    "MbppEval/475": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n\n    Examples:\n    sort_counter({'Math':81, 'Physics':83, 'Chemistry':87}) == [('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n    sort_counter({'Math':400, 'Physics':300, 'Chemistry':250}) == [('Math', 400), ('Physics', 300), ('Chemistry', 250)]\n    sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250}) == [('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]\n    \"\"\"\n    counter_obj = Counter(dict1)\n    sorted_counter = sorted(counter_obj.items(), key=lambda x: x[1], reverse=True)\n    return sorted_counter\n",
    "MbppEval/460": "def Extract(lst):\n    first_elements = []\n    for sub_list in lst:\n        first_elements.append(sub_list[0])\n    return first_elements\n",
    "MbppEval/444": "def trim_tuple(test_list, K):\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][K:]\n    return test_list\n",
    "MbppEval/476": "def big_sum(nums):\n    smallest = min(nums)\n    largest = max(nums)\n    return smallest + largest\n",
    "MbppEval/462": "def combinations_list(list1):\n    combinations = []\n\n    def helper(current_combination, remaining_list):\n        if not remaining_list:\n            combinations.append(current_combination[:])\n            return\n        \n        for i in range(len(remaining_list)):\n            current_combination.append(remaining_list[i])\n            helper(current_combination, remaining_list[i+1:])\n            current_combination.pop()\n    \n    helper([], list1)\n    return combinations\n",
    "MbppEval/473": "def tuple_intersection(test_list1, test_list2):\n    intersection = set()\n    \n    for tup1 in test_list1:\n        for tup2 in test_list2:\n            if (tup1[0], tup1[1]) in [(tup2[0], tup2[1]), (tup2[1], tup2[0])]:\n                intersection.add(tuple(sorted(tup1)))\n    \n    return intersection\n",
    "MbppEval/479": "def first_digit(n):\n    return int(str(n)[0])\n",
    "MbppEval/407": "def rearrange_bigger(n):\n    digits = list(str(n))\n    i = len(digits) - 2\n    while i >= 0 and digits[i] >= digits[i+1]:\n        i -= 1\n    if i < 0:\n        return False\n    j = len(digits) - 1\n    while j > i and digits[j] <= digits[i]:\n        j -= 1\n    digits[i], digits[j] = digits[j], digits[i]\n    digits[i+1:] = sorted(digits[i+1:])\n    return int(''.join(digits))\n",
    "MbppEval/555": "def difference(n):\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_numbers\n",
    "MbppEval/565": "def split(word):\n    return list(word)\n",
    "MbppEval/574": "import math\n\ndef surfacearea_cylinder(r, h):\n    surface_area = 2 * math.pi * r**2 + 2 * math.pi * r * h\n    return round(surface_area, 5)\n",
    "MbppEval/567": "def issort_list(list1):\n    is_sorted = True\n    for i in range(1, len(list1)):\n        if list1[i] < list1[i-1]:\n            is_sorted = False\n            break\n    return is_sorted\n",
    "MbppEval/560": "def union_elements(test_tup1, test_tup2):\n    return tuple(sorted(set(test_tup1 + test_tup2)))\n",
    "MbppEval/143": "def find_lists(Input):\n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    return count\n",
    "MbppEval/564": "def count_Pairs(arr, n):\n    element_counts = {}\n    for num in arr:\n        if num in element_counts:\n            element_counts[num] += 1\n        else:\n            element_counts[num] = 1\n    \n    total_pairs = 0\n    for count in element_counts.values():\n        total_pairs += count * (n - count)\n    \n    return total_pairs // 2\n",
    "MbppEval/468": "def max_product(arr):\n    n = len(arr)\n    lis = [1] * n\n    max_product = 0\n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                lis[i] = max(lis[i], lis[j] + 1)\n        max_product = max(max_product, arr[i] * lis[i])\n\n    return max_product\n",
    "MbppEval/562": "def Find_Max_Length(lst):\n    max_length = 0\n    for sublst in lst:\n        current_length = len(sublst)\n        if current_length > max_length:\n            max_length = current_length\n    return max_length\n",
    "MbppEval/558": "def digit_distance_nums(n1, n2):\n    max_len = max(len(str(n1)), len(str(n2)))\n    n1_str = str(n1).zfill(max_len)\n    n2_str = str(n2).zfill(max_len)\n    total_distance = 0\n    for i in range(max_len):\n        total_distance += abs(int(n1_str[i]) - int(n2_str[i]))\n    return total_distance\n",
    "MbppEval/577": "def last_Digit_Factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result % 10\n",
    "MbppEval/566": "def sum_digits(n):\n    total = 0\n    for digit in str(n):\n        total += int(digit)\n    return total\n",
    "MbppEval/556": "def find_Odd_Pair(A, N):\n    count = 0\n    for num in A:\n        if count_set_bits(num) % 2 == 1:\n            count += N - 1\n    return count\n\ndef count_set_bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n",
    "MbppEval/478": "import re\n\ndef remove_lowercase(str1):\n    pattern = r'[a-z]+'\n    return re.sub(pattern, '', str1)\n",
    "MbppEval/568": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n\n    Examples:\n    empty_list(5) == [{}, {}, {}, {}, {}]\n    empty_list(6) == [{}, {}, {}, {}, {}, {}]\n    empty_list(7) == [{}, {}, {}, {}, {}, {}, {}]\n    \"\"\"\n    return [{} for _ in range(length)]\n",
    "MbppEval/582": "def my_dict(dict1):\n    return len(dict1) == 0\n",
    "MbppEval/563": "import re\n\ndef extract_values(text):\n    return re.findall(r'\"([^\"]*)\"', text)\n",
    "MbppEval/572": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n\n    Examples:\n    two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\n    two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]\n    two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n",
    "MbppEval/576": "def is_Sub_Array(A, B):\n    i, j = 0, 0\n    while i < len(A) and j < len(B):\n        if A[i] == B[j]:\n            j += 1\n            if j == len(B):\n                return True\n        else:\n            j = 0\n        i += 1\n    return False\n",
    "MbppEval/581": "def surface_Area(b, s):\n    base_area = b ** 2\n    slant_area = 0.5 * b * s\n    surface_area = base_area + 4 * slant_area\n    return surface_area\n",
    "MbppEval/426": "def filter_oddnumbers(nums):\n    odd_nums = [num for num in nums if num % 2 != 0]\n    return odd_nums\n",
    "MbppEval/579": "def find_dissimilar(test_tup1, test_tup2):\n    dissimilar = set()\n    \n    # Find elements in test_tup1 that are not in test_tup2\n    for elem in test_tup1:\n        if elem not in test_tup2:\n            dissimilar.add(elem)\n    \n    # Find elements in test_tup2 that are not in test_tup1\n    for elem in test_tup2:\n        if elem not in test_tup1:\n            dissimilar.add(elem)\n    \n    return tuple(dissimilar)\n",
    "MbppEval/573": "def unique_product(list_data):\n    product = 1\n    unique_nums = set(list_data)\n    for num in unique_nums:\n        product *= num\n    return product\n",
    "MbppEval/230": "def replace_blank(str1, char):\n    new_str = \"\"\n    for c in str1:\n        if c.isspace():\n            new_str += char\n        else:\n            new_str += c\n    return new_str\n",
    "MbppEval/578": "def interleave_lists(list1, list2, list3):\n    if len(list1) != len(list2) or len(list1) != len(list3):\n        return []\n\n    interleaved_list = []\n\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n\n    return interleaved_list\n",
    "MbppEval/580": "def even_ele(test_tuple, even_fnc):\n    result = []\n    for elem in test_tuple:\n        if isinstance(elem, tuple):\n            result.append(even_ele(elem, even_fnc))\n        elif even_fnc(elem):\n            result.append(elem)\n    return tuple(result)\n",
    "MbppEval/583": "from math import factorial\n\ndef catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \n    Args:\n        n (int): The index of the Catalan number to be calculated.\n        \n    Returns:\n        int: The nth Catalan number.\n    \"\"\"\n    return factorial(2 * n) // (factorial(n + 1) * factorial(n))\n",
    "MbppEval/554": "def Split(list_of_integers):\n    odd_numbers = []\n    for num in list_of_integers:\n        if num % 2 != 0:\n            odd_numbers.append(num)\n    return odd_numbers\n",
    "MbppEval/411": "import re\n\ndef snake_to_camel(word):\n    words = word.split('_')\n    camel_case_words = [words[0]]\n    for w in words[1:]:\n        camel_case_words.append(w.capitalize())\n    camel_case = ''.join(camel_case_words)\n    return camel_case\n",
    "MbppEval/584": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\w+ly'\n    match = re.search(pattern, text)\n    if match:\n        adverb = match.group()\n        start = match.start()\n        end = match.end()\n        return f\"{start}-{end}: {adverb}\"\n    else:\n        return \"\"\n",
    "MbppEval/585": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n\n    Args:\n        items (list): A list of dictionaries, where each dictionary represents an item with keys 'name' and 'price'.\n        n (int): The number of most expensive items to return.\n\n    Returns:\n        list: A list of the n most expensive items.\n    \"\"\"\n    # Create a max-heap of the items, sorted by price in descending order\n    heap = [(-item['price'], item) for item in items]\n    heapq.heapify(heap)\n\n    # Get the n most expensive items (the n items with the highest prices)\n    result = [heapq.heappop(heap)[1] for _ in range(n)]\n\n    return result\n",
    "MbppEval/594": "def diff_even_odd(list1):\n    first_even = None\n    first_odd = None\n    \n    for num in list1:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n        \n        if first_even is not None and first_odd is not None:\n            return abs(first_even - first_odd)\n    \n    return 0\n",
    "MbppEval/588": "def big_diff(nums):\n    largest = max(nums)\n    smallest = min(nums)\n    return largest - smallest\n",
    "MbppEval/559": "def max_sub_array_sum(a, size):\n    max_sum = a[0]\n    current_sum = a[0]\n\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum\n",
    "MbppEval/597": "def find_kth(arr1, arr2, k):\n    i, j = 0, 0\n    while k > 1:\n        if i < len(arr1) and j < len(arr2):\n            if arr1[i] < arr2[j]:\n                i += 1\n            else:\n                j += 1\n        else:\n            if i < len(arr1):\n                i += 1\n            else:\n                j += 1\n        k -= 1\n    \n    if i < len(arr1) and j < len(arr2):\n        return min(arr1[i], arr2[j])\n    elif i < len(arr1):\n        return arr1[i]\n    else:\n        return arr2[j]\n",
    "MbppEval/295": "def sum_div(number):\n    result = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            result += i\n    return result\n",
    "MbppEval/590": "import cmath\n\ndef polar_rect(x, y):\n    r = (x**2 + y**2) ** 0.5\n    theta = cmath.atan2(y, x)\n    a = r * cmath.cos(theta)\n    b = r * cmath.sin(theta)\n    return ((r, theta), complex(a, b))\n",
    "MbppEval/586": "def split_Arr(l, n):\n    length = len(l)\n    if n < 0 or n >= length:\n        return l\n    return l[n:] + l[:n]\n",
    "MbppEval/607": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None\n",
    "MbppEval/595": "def min_Swaps(str1, str2):\n    if len(str1) != len(str2):\n        return \"Not Possible\"\n    \n    differences = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            differences += 1\n    \n    if differences % 2 != 0:\n        return \"Not Possible\"\n    \n    return differences // 2\n",
    "MbppEval/598": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n\n    Examples:\n    armstrong_number(153) == True\n    armstrong_number(259) == False\n    armstrong_number(4458) == False\n    \"\"\"\n    # Convert the number to a list of digits\n    digits = [int(digit) for digit in str(number)]\n\n    # Calculate the sum of the cubes of the digits\n    sum_of_cubes = sum(digit ** len(digits) for digit in digits)\n\n    # Check if the sum is equal to the original number\n    return sum_of_cubes == number\n",
    "MbppEval/474": "def replace_char(str1, ch, newch):\n    new_str = \"\"\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str\n",
    "MbppEval/616": "def tuple_modulo(test_tup1, test_tup2):\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Input tuples must have the same length.\")\n\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] % test_tup2[i],)\n\n    return result\n",
    "MbppEval/619": "def move_num(test_str):\n    non_numeric = \"\"\n    numeric = \"\"\n    for char in test_str:\n        if char.isdigit():\n            numeric += char\n        else:\n            non_numeric += char\n    return non_numeric + numeric\n",
    "MbppEval/608": "from math import comb\n\ndef bell_Number(n):\n    if n == 0:\n        return 1\n    \n    return sum(bell_Number(k) * comb(n, k) for k in range(n))\n",
    "MbppEval/617": "import math\n\ndef min_Jumps(steps, d):\n    if d == 0:\n        return 0\n    \n    diagonal_distance = math.sqrt(d**2)\n    jumps = math.ceil(diagonal_distance / steps)\n    return jumps\n",
    "MbppEval/599": "def sum_average(number):\n    total = 0\n    for i in range(1, number+1):\n        total += i\n    average = total / number\n    return (total, average)\n",
    "MbppEval/602": "def first_repeated_char(str1):\n    char_dict = {}\n    for i, char in enumerate(str1):\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = i\n    return \"None\"\n",
    "MbppEval/615": "def average_tuple(nums):\n    averages = []\n    for inner_tuple in nums:\n        avg = sum(inner_tuple) / len(inner_tuple)\n        averages.append(avg)\n    return averages\n",
    "MbppEval/623": "def nth_nums(nums, n):\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result\n",
    "MbppEval/624": "def is_upper(string):\n    \"\"\"\n    Write a python function to convert a given string to uppercase.\n\n    Examples:\n    is_upper(\"person\") == \"PERSON\"\n    is_upper(\"final\") == \"FINAL\"\n    is_upper(\"Valid\") == \"VALID\"\n    \"\"\"\n    return string.upper()\n",
    "MbppEval/622": "def get_median(arr1, arr2, n):\n    merged_arr = sorted(arr1 + arr2)\n    length = 2 * n\n    if length % 2 == 0:\n        mid1 = merged_arr[length // 2 - 1]\n        mid2 = merged_arr[length // 2]\n        return (mid1 + mid2) / 2\n    else:\n        return merged_arr[length // 2]\n",
    "MbppEval/456": "def reverse_string_list(stringlist):\n    reversed_strings = []\n    for string in stringlist:\n        reversed_strings.append(string[::-1])\n    return reversed_strings\n",
    "MbppEval/603": "def get_ludic(n):\n    ludic = [1]\n    current = 2\n\n    while current <= n:\n        is_ludic = True\n        for num in ludic:\n            if (current - num) in ludic:\n                is_ludic = False\n                break\n        if is_ludic:\n            ludic.append(current)\n        current += 1\n\n    return ludic\n",
    "MbppEval/618": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n\n    Examples:\n    div_list([4,5,6],[1, 2, 3]) == [4.0,2.5,2.0]\n    div_list([3,2],[1,4]) == [3.0, 0.5]\n    div_list([90,120],[50,70]) == [1.8, 1.7142857142857142]\n    '''\n    if len(nums1) != len(nums2):\n        return \"Error: Input lists must have the same length.\"\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result\n",
    "MbppEval/614": "def cummulative_sum(test_list):\n    total_sum = 0\n    for tup in test_list:\n        for num in tup:\n            total_sum += num\n    return total_sum\n",
    "MbppEval/626": "def triangle_area(r):\n    if r < 0:\n        return -1\n    elif r == 0:\n        return 0\n    else:\n        return 0.5 * 2 * r * r\n",
    "MbppEval/620": "def largest_subset(a):\n    largest_subset = []\n    a.sort()\n    for num in a:\n        if all(num % x == 0 for x in largest_subset):\n            largest_subset.append(num)\n    return len(largest_subset)\n",
    "MbppEval/600": "def is_Even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n",
    "MbppEval/589": "import math\n\ndef perfect_squares(a, b):\n    perfect_squares_list = []\n    for num in range(a, b + 1):\n        if int(math.sqrt(num)) ** 2 == num:\n            perfect_squares_list.append(num)\n    return perfect_squares_list\n",
    "MbppEval/627": "def find_First_Missing(array, start=0, end=None):\n    if not array:\n        return 0\n    \n    if array[0] != 0:\n        return 0\n    \n    if array[-1] == len(array) - 1:\n        return len(array)\n    \n    if end is None:\n        end = len(array) - 1\n    \n    while start <= end:\n        middle = (start + end) // 2\n        if array[middle] == middle + start:\n            start = middle + 1\n        else:\n            end = middle - 1\n    \n    return start\n",
    "MbppEval/596": "import sys\n\ndef tuple_size(tuple_list):\n    return sys.getsizeof(tuple_list)\n",
    "MbppEval/628": "def replace_spaces(string):\n    result = \"\"\n    for char in string:\n        if char == \" \":\n            result += \"%20\"\n        else:\n            result += char\n    return result\n",
    "MbppEval/610": "def remove_kth_element(list1, L):\n    result = []\n    for i, element in enumerate(list1):\n        if i != L:\n            result.append(element)\n    return result\n",
    "MbppEval/629": "def Split(lst):\n    even_numbers = []\n    for num in lst:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers\n",
    "MbppEval/631": "def replace_spaces(text):\n    new_text = \"\"\n    for char in text:\n        if char == \" \":\n            new_text += \"_\"\n        elif char == \"_\":\n            new_text += \" \"\n        else:\n            new_text += char\n    return new_text\n",
    "MbppEval/635": "import heapq as hq\n\ndef heap_sort(iterable):\n    \"\"\"\n    Sort the given list using heap sort.\n    \n    Args:\n        iterable (list): The list to be sorted.\n    \n    Returns:\n        list: The sorted list.\n    \"\"\"\n    heap = list(iterable)\n    hq.heapify(heap)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list\n",
    "MbppEval/638": "import math\n\ndef wind_chill(v, t):\n    wci = 13.12 + 0.6215 * t - 11.37 * v ** 0.16 + 0.3965 * t * v ** 0.16\n    return round(wci)\n",
    "MbppEval/625": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n\n    Examples:\n    swap_List([1,2,3]) == [3,2,1]\n    swap_List([1,2,3,4,4]) == [4,2,3,4,1]\n    swap_List([4,5,6]) == [6,5,4]\n    swap_List([1]) == [1]\n    swap_List([]) == []\n    \"\"\"\n    if len(newList) < 2:\n        return newList\n    return [newList[-1]] + newList[1:-1] + [newList[0]]\n",
    "MbppEval/632": "def move_zero(num_list):\n    result = []\n    for num in num_list:\n        if num != 0:\n            result.append(num)\n    result.extend([0] * num_list.count(0))\n    return result\n",
    "MbppEval/557": "def toggle_string(string):\n    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result\n",
    "MbppEval/633": "def pair_xor_Sum(arr, n):\n    total_xor_sum = 0\n    for a in arr:\n        total_xor_sum ^= a\n    \n    result = 0\n    for a in arr:\n        result += total_xor_sum ^ a\n    \n    return result\n",
    "MbppEval/591": "def swap_List(newList):\n    first_element = newList[0]\n    last_element = newList[-1]\n\n    newList[0] = last_element\n    newList[-1] = first_element\n\n    return newList\n",
    "MbppEval/720": "def add_dict_to_tuple(test_tup, test_dict):\n    new_tup = (*test_tup, )\n    new_tup += (test_dict,)\n    return new_tup\n",
    "MbppEval/644": "def reverse_Array_Upto_K(input, k):\n    reversed_part = []\n    for i in range(k):\n        reversed_part.append(input[k-i-1])\n    reversed_part.extend(input[k:])\n    return reversed_part\n",
    "MbppEval/612": "def merge(lst):\n    first = []\n    second = []\n    \n    for sublist in lst:\n        first.append(sublist[0])\n        second.append(sublist[1])\n    \n    return [first, second]\n",
    "MbppEval/724": "def power_base_sum(base, power):\n    total_sum = 0\n    for _ in range(power):\n        base *= base\n        while base > 0:\n            total_sum += base % 10\n            base //= 10\n    return total_sum\n",
    "MbppEval/736": "import bisect\n\ndef left_insertion(a, x):\n    return bisect.bisect_left(a, x)\n",
    "MbppEval/228": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    mask = (1 << (r - l + 1)) - 1\n    mask <<= l\n    return (n & mask) == mask\n",
    "MbppEval/640": "import re\n\ndef remove_parenthesis(items):\n    output = []\n    for item in items:\n        modified = re.sub(r'\\(.*?\\)', '', item)\n        output.append(modified)\n    return output\n",
    "MbppEval/630": "def adjac(ele, sub = []):\n    x_coords = []\n    y_coords = []\n    for dx in range(-1, 2):\n        for dy in range(-1, 2):\n            new_x = ele[0] + dx\n            new_y = ele[1] + dy\n            if new_x >= 0 and new_y >= 0:\n                sub.append((new_x, new_y))\n    return sub\n",
    "MbppEval/734": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    prefix_prod = [1] * (n + 1)\n    \n    for i in range(1, n + 1):\n        prefix_prod[i] = prefix_prod[i - 1] * arr[i - 1]\n    \n    result = 0\n    for i in range(1, n + 1):\n        result += (i * (prefix_prod[i] - prefix_prod[i - 1])) * arr[i - 1]\n    \n    return result\n",
    "MbppEval/721": "def maxAverageOfPath(cost):\n    n = len(cost)\n    total_cost = [[0] * n for _ in range(n)]\n    num_cells = [[0] * n for _ in range(n)]\n    \n    # Initialize the first row and first column\n    total_cost[0][0] = cost[0][0]\n    num_cells[0][0] = 1\n    for i in range(1, n):\n        total_cost[0][i] = total_cost[0][i-1] + cost[0][i]\n        num_cells[0][i] = num_cells[0][i-1] + 1\n        total_cost[i][0] = total_cost[i-1][0] + cost[i][0]\n        num_cells[i][0] = num_cells[i-1][0] + 1\n    \n    # Fill the rest of the matrix\n    for i in range(1, n):\n        for j in range(1, n):\n            total_cost[i][j] = max(total_cost[i-1][j], total_cost[i][j-1]) + cost[i][j]\n            num_cells[i][j] = max(num_cells[i-1][j], num_cells[i][j-1]) + 1\n    \n    # Find the maximum average\n    max_average = 0\n    for i in range(n):\n        max_average = max(max_average, total_cost[n-1][i] / num_cells[n-1][i])\n    \n    return max_average\n",
    "MbppEval/732": "import re\n\ndef replace_specialchar(text):\n    return re.sub(r'[ ,.]', ':', text)\n",
    "MbppEval/611": "def max_of_nth(test_list, N):\n    if not test_list:\n        return None\n    if N < 0 or N >= len(test_list[0]):\n        return None\n\n    max_value = test_list[0][N]\n    for row in test_list:\n        max_value = max(max_value, row[N])\n\n    return max_value\n",
    "MbppEval/726": "def multiply_elements(test_tup):\n    result = []\n    for i in range(len(test_tup) - 1):\n        result.append(test_tup[i] * test_tup[i + 1])\n    return tuple(result)\n",
    "MbppEval/637": "def noprofit_noloss(actual_cost, sale_amount):\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n",
    "MbppEval/643": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    if re.search(pattern, text):\n        return \"Found a match!\"\n    else:\n        return \"Not matched!\"\n",
    "MbppEval/740": "def tuple_to_dict(test_tup):\n    result = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        result[key] = value\n    return result\n",
    "MbppEval/731": "import math\n\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n\n    Examples:\n    lateralsurface_cone(5, 12) == 204.20352248333654\n    lateralsurface_cone(10, 15) == 566.3586699569488\n    lateralsurface_cone(19, 17) == 1521.8090132193388\n    \"\"\"\n    lateral_surface_area = math.pi * r * math.sqrt(r**2 + h**2)\n    return lateral_surface_area\n",
    "MbppEval/738": "def geometric_sum(n):\n    total = 0\n    for i in range(n-1):\n        total += 1 / (2 ** i)\n    return total\n",
    "MbppEval/737": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    if re.match(regex, string):\n        return 'Valid'\n    else:\n        return 'Invalid'\n",
    "MbppEval/739": "import math\n\ndef find_Index(n):\n    number = 1\n    index = 0\n    while len(str(number)) < n:\n        index += 1\n        number += index\n    return int((math.sqrt(8 * number + 1) - 1) / 2)\n",
    "MbppEval/604": "def reverse_words(s):\n    words = s.split()\n    reversed_words = words[::-1]\n    result = ' '.join(reversed_words)\n    return result\n",
    "MbppEval/733": "def find_first_occurrence(A, x):\n    left = 0\n    right = len(A) - 1\n    \n    while left <= right:\n        middle = (left + right) // 2\n        \n        if A[middle] == x:\n            if middle == 0 or A[middle-1] != x:\n                return middle\n            else:\n                right = middle - 1\n        elif A[middle] < x:\n            left = middle + 1\n        else:\n            right = middle - 1\n    \n    return -1\n",
    "MbppEval/741": "def all_Characters_Same(s):\n    if len(s) == 0:\n        return True\n    \n    prev_char = s[0]\n    for char in s[1:]:\n        if char != prev_char:\n            return False\n    \n    return True\n",
    "MbppEval/744": "def check_none(test_tup):\n    for element in test_tup:\n        if element is None:\n            return True\n    return False\n",
    "MbppEval/728": "def sum_list(lst1, lst2):\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result\n",
    "MbppEval/742": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    Write a function to calculate the area of a tetrahedron.\n\n    Examples:\n    area_tetrahedron(3) == 15.588457268119894\n    area_tetrahedron(20) == 692.8203230275509\n    area_tetrahedron(10) == 173.20508075688772\n    \"\"\"\n    return (math.sqrt(3) * side ** 2)\n",
    "MbppEval/747": "def lcs_of_three(X, Y, Z):\n    m, n, o = len(X), len(Y), len(Z)\n    dp = [[[0] * (o+1) for _ in range(n+1)] for _ in range(m+1)]\n\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n\n    return dp[m][n][o]\n",
    "MbppEval/743": "def rotate_right(lst, m):\n    \"\"\"\n    Rotates the list 'lst' to the right by 'm' positions.\n    \"\"\"\n    return lst[-m:] + lst[:-m]\n",
    "MbppEval/749": "def sort_numeric_strings(nums_str):\n    if not isinstance(nums_str, list) or not all(isinstance(x, str) for x in nums_str):\n        raise TypeError(\"Input must be a list of strings\")\n    \n    nums_int = [int(x) for x in nums_str]\n    nums_int.sort()\n    nums_str_sorted = [str(x) for x in nums_int]\n    \n    return nums_str_sorted\n",
    "MbppEval/751": "def check_min_heap_helper(arr, i):\n    left = 2 * i + 1\n    right = 2 * i + 2\n    \n    # Check if the current node is smaller than its left and right children\n    if left < len(arr) and arr[i] > arr[left]:\n        return False\n    if right < len(arr) and arr[i] > arr[right]:\n        return False\n    \n    # Recursively check the left and right subtrees\n    if left < len(arr):\n        if not check_min_heap_helper(arr, left):\n            return False\n    if right < len(arr):\n        if not check_min_heap_helper(arr, right):\n            return False\n    \n    return True\n",
    "MbppEval/750": "def add_tuple(test_list, test_tup):\n    return test_list + list(test_tup)\n",
    "MbppEval/754": "def extract_index_list(l1, l2, l3):\n    set1 = set(l1)\n    set2 = set(l2)\n    set3 = set(l3)\n    common_elements = list(set1 & set2 & set3)\n    return common_elements\n",
    "MbppEval/66": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n",
    "MbppEval/745": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    result = []\n    for num in range(startnum, endnum + 1):\n        is_divisible = True\n        for digit in str(num):\n            if digit == '0' or num % int(digit) != 0:\n                is_divisible = False\n                break\n        if is_divisible:\n            result.append(num)\n    return result\n",
    "MbppEval/755": "def second_smallest(numbers):\n    if len(numbers) < 2:\n        return None\n    \n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n    \n    if second_smallest == float('inf'):\n        return None\n    else:\n        return second_smallest\n",
    "MbppEval/760": "def unique_Element(arr):\n    unique_count = 0\n    seen = set()\n    for num in arr:\n        if num not in seen:\n            unique_count += 1\n            seen.add(num)\n    return 'YES' if unique_count == 1 else 'NO'\n",
    "MbppEval/753": "def min_k(test_list, K):\n    test_list.sort(key=lambda x: x[1])\n    return test_list[:K]\n",
    "MbppEval/725": "import re\n\ndef extract_quotation(text1):\n    return re.findall(r'\"(.*?)\"', text1)\n",
    "MbppEval/748": "import re\n\ndef capital_words_spaces(str1):\n    words = re.findall('[A-Z][^A-Z]*', str1)\n    return ' '.join(words)\n",
    "MbppEval/746": "import math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    area = (math.pi * r**2 * a) / 360\n    return area\n",
    "MbppEval/772": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = [word for word in words if len(word) != K]\n    return ' '.join(new_words)\n",
    "MbppEval/762": "def check_monthnumber_number(monthnum3):\n    thirty_day_months = [4, 6, 9, 11]\n    return monthnum3 in thirty_day_months\n",
    "MbppEval/777": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n\n    Examples:\n    find_sum([1,2,3,1,1,4,5,6]) == 21\n    find_sum([1,10,9,4,2,10,10,45,4]) == 71\n    find_sum([12,10,9,45,2,10,10,45,10]) == 78\n    \"\"\"\n    unique_elements = set(arr)\n    return sum(unique_elements)\n",
    "MbppEval/723": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    if len(nums1) != len(nums2):\n        return 0\n\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n\n    return count\n",
    "MbppEval/758": "def unique_sublists(list1):\n    sublists_count = {}\n    \n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublists_count:\n            sublists_count[sublist_tuple] += 1\n        else:\n            sublists_count[sublist_tuple] = 1\n    \n    return sublists_count\n",
    "MbppEval/775": "def odd_position(nums):\n    result = True\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            result = False\n            break\n    return result\n",
    "MbppEval/766": "def pair_wise(l1):\n    pairs = []\n    for i in range(len(l1) - 1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs\n",
    "MbppEval/757": "def count_reverse_pairs(test_list):\n    count = 0\n    for item in test_list:\n        if item[::-1] in test_list:\n            count += 1\n    return str(count)\n",
    "MbppEval/778": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    result = []\n    for _, group in groupby(list1):\n        result.append(list(group))\n    return result\n",
    "MbppEval/769": "def Diff(li1, li2):\n    set1 = set(li1)\n    set2 = set(li2)\n    result = list(set1 - set2)\n    return result\n",
    "MbppEval/781": "import math\n\ndef count_divisors(n):\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    \n    if len(divisors) % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n",
    "MbppEval/764": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count the number of digits in a given string.\n\n    Examples:\n    number_ctr('program2bedone') == 1\n    number_ctr('3wonders') == 1\n    number_ctr('123') == 3\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count\n",
    "MbppEval/770": "def odd_num_sum(n):\n    sum_of_fourth_power = 0\n    for i in range(1, n+1, 2):\n        sum_of_fourth_power += i ** 4\n    return sum_of_fourth_power\n",
    "MbppEval/771": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    \n    for char in exp:\n        if char in ['{', '(', '[']:\n            stack.append(char)\n        elif char in ['}', ')', ']']:\n            if not stack:\n                return False\n            top = stack.pop()\n            if (char == '}' and top != '{' or \n                char == ')' and top != '(' or\n                char == ']' and top != '['):\n                return False\n    \n    return not stack\n",
    "MbppEval/735": "def set_middle_bits(n):\n    binary_str = bin(n)[2:]\n    first_bit = binary_str[0]\n    middle_bits = binary_str[1:-1]\n    last_bit = binary_str[-1]\n    \n    flipped_middle_bits = ''.join('1' if bit == '0' else '0' for bit in middle_bits)\n    \n    result = first_bit + flipped_middle_bits + last_bit\n    return int(result, 2)\n",
    "MbppEval/779": "def unique_sublists(list1):\n    sublist_counts = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_counts:\n            sublist_counts[sublist_tuple] += 1\n        else:\n            sublist_counts[sublist_tuple] = 1\n    return sublist_counts\n",
    "MbppEval/786": "import bisect\n\ndef right_insertion(a, x):\n    return bisect.bisect_right(a, x)\n",
    "MbppEval/776": "def count_vowels(test_str):\n    vowels = set('aeiou')\n    char_list = list(test_str)\n    count = 0\n\n    for i in range(len(char_list)):\n        if i == 0 or i == len(char_list) - 1:\n            if char_list[i] in vowels:\n                count += 1\n        else:\n            if char_list[i-1] in vowels and char_list[i+1] in vowels:\n                count += 1\n\n    return count\n",
    "MbppEval/787": "import re\n\ndef text_match_three(text):\n    pattern = r'a...b{3}'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
    "MbppEval/765": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Find the nth polite number.\n    \"\"\"\n    if n == 1:\n        return 1\n\n    left, right = 2, n * 2\n    while left <= right:\n        mid = (left + right) // 2\n        divisors = 0\n        for i in range(1, int(math.sqrt(mid)) + 1):\n            if mid % i == 0:\n                divisors += 1\n                if i != mid // i:\n                    divisors += 1\n        if divisors == n:\n            return mid\n        elif divisors < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1\n",
    "MbppEval/784": "def mul_even_odd(list1):\n    if not list1:\n        return 0\n    \n    first_even = None\n    first_odd = None\n    \n    for num in list1:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n        \n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is None or first_odd is None:\n        return 0\n    \n    return first_even * first_odd\n",
    "MbppEval/773": "import re\n\ndef occurance_substring(text, pattern):\n    match = re.search(pattern, text)\n    if not match:\n        return None\n    start = match.start()\n    end = match.end()\n    return (match.group(), start, end)\n",
    "MbppEval/790": "def even_position(nums):\n    is_even_position = True\n    for i, num in enumerate(nums):\n        if i % 2 == 0 and num % 2 != 0:\n            is_even_position = False\n            break\n    return is_even_position\n",
    "MbppEval/783": "def rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx - mn\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    if df == 0:\n        h = 0\n    elif mx == r:\n        h = (g - b)/df * 60 + 0\n    elif mx == g:\n        h = (b - r)/df * 60 + 120\n    elif mx == b:\n        h = (r - g)/df * 60 + 240\n    if h < 0:\n        h += 360\n    return h, s, mx*100\n",
    "MbppEval/639": "def sample_nam(sample_names):\n    uppercase_names = [name for name in sample_names if name[0].isupper()]\n    return sum(len(name) for name in uppercase_names)\n",
    "MbppEval/788": "def new_tuple(test_list, test_str):\n    return tuple(test_list + [test_str])\n",
    "MbppEval/798": "def _sum(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total\n",
    "MbppEval/796": "def return_sum(dict):\n    total = 0\n    for value in dict.values():\n        total += value\n    return total\n",
    "MbppEval/785": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n\n    Examples:\n    tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\n    tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)\n    tuple_str_int(\"(4, 5, 6)\") == (4, 5, 6)\n    \"\"\"\n    if not test_str.startswith(\"(\") or not test_str.endswith(\")\"):\n        raise ValueError(\"Input string must be a tuple in the format '(int, int, int)'\")\n\n    tuple_str = test_str[1:-1]\n    tuple_elements = tuple_str.split(\", \")\n    tuple_ints = [int(elem) for elem in tuple_elements]\n    result_tuple = tuple(tuple_ints)\n\n    return result_tuple\n",
    "MbppEval/791": "def remove_nested(test_tup):\n    if not test_tup:\n        return ()\n    return tuple(x for x in test_tup if not isinstance(x, tuple))\n",
    "MbppEval/793": "def last(arr, x, n):\n    left = 0\n    right = n - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1\n",
    "MbppEval/141": "def pancake_sort(nums):\n    n = len(nums)\n    for i in range(n, 0, -1):\n        max_idx = 0\n        for j in range(1, i):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        nums[:max_idx+1] = reversed(nums[:max_idx+1])\n        nums[:i] = reversed(nums[:i])\n    return nums\n",
    "MbppEval/800": "import re\n\ndef remove_all_spaces(text):\n    return re.sub(r'\\s+', '', text)\n",
    "MbppEval/797": "def sum_odd(l, r):\n    total = 0\n    for num in range(l, r+1):\n        if num % 2 != 0:\n            total += num\n    return total\n",
    "MbppEval/801": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y == z:\n        count = 3\n    elif x == y or y == z or x == z:\n        count = 2\n    return count\n",
    "MbppEval/794": "import re\n\ndef text_starta_endb(text):\n    pattern = r'^a.*b$'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
    "MbppEval/805": "def max_sum_list(lists):\n    max_sum = 0\n    max_list = None\n    \n    for l in lists:\n        curr_sum = sum(l)\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            max_list = l\n    \n    return max_list\n",
    "MbppEval/803": "import math\n\ndef is_perfect_square(n):\n    sqrt = math.sqrt(n)\n    return sqrt.is_integer()\n",
    "MbppEval/246": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the Babylonian method.\n\n    Examples:\n    babylonian_squareroot(10) == 3.162277660168379\n    babylonian_squareroot(2) == 1.414213562373095\n    babylonian_squareroot(9) == 3.0\n    \"\"\"\n    guess = (1 + number) / 2\n    \n    while abs(guess**2 - number) >= 0.000001:\n        guess = (guess + number/guess) / 2\n    \n    return guess\n",
    "MbppEval/799": "def left_rotate(n, d):\n    \"\"\"\n    Rotate the bits of a 32-bit number `n` to the left by `d` bits.\n\n    Args:\n        n (int): The number to be rotated.\n        d (int): The number of bits to rotate left.\n\n    Returns:\n        int: The rotated number.\n    \"\"\"\n    left_shift = d % 32\n    return ((n << left_shift) | (n >> (32 - left_shift))) & 0xFFFFFFFF\n",
    "MbppEval/808": "def check_K(test_tup, K):\n    contains_K = False\n    for elem in test_tup:\n        if elem == K:\n            contains_K = True\n            break\n    return contains_K\n",
    "MbppEval/804": "def is_product_even(arr, n):\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0\n",
    "MbppEval/809": "def check_smaller(test_tup1, test_tup2):\n    is_smaller = True\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            is_smaller = False\n            break\n    return is_smaller\n",
    "MbppEval/806": "def max_run_uppercase(test_str):\n    max_run = 0\n    current_run = 0\n    \n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            current_run = 0\n        \n        if current_run > max_run:\n            max_run = current_run\n    \n    return max_run\n",
    "MbppEval/767": "def get_pairs_count(arr, sum):\n    seen = set()\n    count = 0\n    for i in arr:\n        if sum - i in seen:\n            count += 1\n        seen.add(i)\n    return count\n",
    "MbppEval/792": "def count_list(input_list):\n    count = 0\n    for element in input_list:\n        if isinstance(element, list):\n            count += 1\n    return count\n",
    "MbppEval/641": "def is_nonagonal(n):\n    \"\"\"\n    Finds the nth nonagonal number.\n\n    Args:\n        n (int): The index of the nonagonal number to find.\n\n    Returns:\n        int: The nth nonagonal number.\n    \"\"\"\n    return n * (7 * n - 5) // 2\n",
    "MbppEval/247": "def lps(str):\n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n    \n    # Initialize the diagonal elements\n    for i in range(n):\n        dp[i][i] = 1\n    \n    # Fill the dp table\n    for length in range(2, n+1):\n        for start in range(n - length + 1):\n            end = start + length - 1\n            if str[start] == str[end]:\n                dp[start][end] = dp[start+1][end-1] + 2\n            else:\n                dp[start][end] = max(dp[start+1][end], dp[start][end-1])\n    \n    return dp[0][n-1]\n",
    "MbppEval/807": "def first_odd(nums):\n    if not nums:\n        return None\n    \n    for num in nums:\n        if num % 2 != 0:\n            return num\n    \n    return None\n",
    "MbppEval/802": "def count_rotation(arr):\n    min_element = arr[0]\n    min_index = 0\n\n    for i in range(len(arr)):\n        if arr[i] < min_element:\n            min_element = arr[i]\n            min_index = i\n\n    return min_index\n",
    "MbppEval/722": "def filter_data(students, h, w):\n    filtered_students = {}\n\n    for student, stats in students.items():\n        student_height, student_weight = stats\n        if student_height >= h and student_weight >= w:\n            filtered_students[student] = stats\n\n    return filtered_students\n",
    "MbppEval/75": "def find_tuples(test_list, K):\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return str(result)\n",
    "MbppEval/759": "def is_decimal(num):\n    if not isinstance(num, str):\n        return False\n    if not num.replace('.', '').isdigit() or num.count('.') != 1:\n        return False\n    parts = num.split('.')\n    if len(parts[1]) != 2:\n        return False\n    return True\n",
    "MbppEval/90": "def len_log(list1):\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length\n",
    "MbppEval/135": "def hexagonal_num(n):\n    return n * (2 * n - 1)\n",
    "MbppEval/730": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    return [key for key, _ in groupby(nums)]\n",
    "MbppEval/756": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b+)'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
    "MbppEval/606": "import math\n\ndef radian_degree(degree):\n    return degree * (math.pi / 180)\n",
    "MbppEval/12": "def sort_matrix(M):\n    row_sums = [sum(row) for row in M]\n    sorted_indices = sorted(range(len(row_sums)), key=lambda i: row_sums[i])\n    sorted_matrix = [M[i] for i in sorted_indices]\n    return sorted_matrix\n",
    "MbppEval/593": "import re\n\ndef removezero_ip(ip):\n    \"\"\"\n    Write a function to remove leading zeroes from an IP address.\n\n    Examples:\n    removezero_ip(\"216.08.094.196\") == \"216.8.94.196\"\n    removezero_ip(\"12.01.024\") == \"12.1.24\"\n    removezero_ip(\"216.08.094.0196\") == \"216.8.94.196\"\n    \"\"\"\n    octets = ip.split('.')\n    octets = [re.sub(r'^0+(\\d+)', r'\\1', octet) for octet in octets]\n    return '.'.join(octets)\n",
    "MbppEval/763": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(1, n):\n        diff = abs(arr[i] - arr[i-1])\n        min_diff = min(min_diff, diff)\n    return min_diff\n",
    "MbppEval/296": "def merge_and_count(left, right):\n    i = j = inv_count = 0\n    merged = []\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            merged.append(left[i])\n            i += 1\n        else:\n            merged.append(right[j])\n            j += 1\n            inv_count += len(left) - i\n    merged += left[i:]\n    merged += right[j:]\n    return merged, inv_count\n\ndef get_Inv_Count(arr):\n    if len(arr) <= 1:\n        return arr, 0\n    mid = len(arr) // 2\n    left, left_inv_count = get_Inv_Count(arr[:mid])\n    right, right_inv_count = get_Inv_Count(arr[mid:])\n    merged, merge_inv_count = merge_and_count(left, right)\n    return merged, left_inv_count + right_inv_count + merge_inv_count\n",
    "MbppEval/605": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n\n    Examples:\n    prime_num(13) == True\n    prime_num(7) == True\n    prime_num(-1010) == False\n    \"\"\"\n    # Check for edge cases\n    if num <= 1:\n        return False\n\n    # Check for 2\n    if num == 2:\n        return True\n\n    # Check for all other numbers\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n\n    return True\n",
    "MbppEval/401": "def add_nested_tuples(test_tup1, test_tup2):\n    result = []\n    for t1, t2 in zip(test_tup1, test_tup2):\n        new_tuple = (t1[0] + t2[0], t1[1] + t2[1])\n        result.append(new_tuple)\n    return tuple(result)\n",
    "MbppEval/77": "def is_Diff(n):\n    n_str = str(n)\n    even_sum = 0\n    odd_sum = 0\n    \n    for i, digit in enumerate(n_str):\n        if i % 2 == 0:\n            even_sum += int(digit)\n        else:\n            odd_sum += int(digit)\n    \n    diff = abs(even_sum - odd_sum)\n    return diff % 11 == 0\n",
    "MbppEval/587": "def list_tuple(listx):\n    return tuple(listx)\n",
    "MbppEval/238": "def number_of_substrings(str):\n    n = len(str)\n    return int(n * (n + 1) / 2)\n",
    "MbppEval/311": "def set_left_most_unset_bit(n):\n    leftmost_one = n & (-n)\n    return n | leftmost_one\n",
    "MbppEval/80": "def tetrahedral_number(n):\n    return (n * (n + 1) * (n + 2)) / 6\n",
    "MbppEval/752": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        j0 = 0\n        j1 = 1\n        for i in range(2, n+1):\n            j2 = j1 + 2 * j0\n            j0 = j1\n            j1 = j2\n        return j1\n",
    "MbppEval/271": "def even_Power_Sum(n):\n    total_sum = 0\n    for i in range(1, n+1):\n        even_num = 2 * i\n        even_num_power_5 = even_num ** 5\n        total_sum += even_num_power_5\n    return total_sum\n",
    "MbppEval/397": "def median_numbers(a, b, c):\n    numbers = [a, b, c]\n    numbers.sort()\n    return numbers[1]\n",
    "MbppEval/70": "def find_equal_tuple(Input):\n    expected_length = len(Input[0])\n    for tup in Input:\n        if len(tup) != expected_length:\n            return 'All tuples do not have same length'\n    return 'All tuples have same length'\n",
    "MbppEval/592": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef binomial_Coeff(n, k):\n    return factorial(n) // (factorial(k) * factorial(n-k))\n\ndef sum_Of_product(n):\n    total = 0\n    for k in range(n):\n        total += binomial_Coeff(n, k) * binomial_Coeff(n, k+1)\n    return total\n",
    "MbppEval/7": "def find_char_long(text):\n    return [word for word in text.split() if len(word) >= 4]\n",
    "MbppEval/569": "def sort_sublists(list1):\n    result = []\n    for sublist in list1:\n        result.append(sorted(sublist))\n    return result\n",
    "MbppEval/782": "def odd_length_sum(arr):\n    total_sum = sum(arr)\n    odd_sum = sum(arr[i] ** 2 for i in range(len(arr)) if i % 2 != 0)\n    return total_sum + odd_sum\n",
    "MbppEval/461": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n",
    "MbppEval/98": "def multiply_num(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)\n",
    "MbppEval/399": "def bitwise_xor(test_tup1, test_tup2):\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Input tuples must have the same length\")\n    \n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    \n    return tuple(result)\n",
    "MbppEval/780": "from itertools import combinations\n\ndef find_combinations(test_list):\n    result = []\n    for a, b in combinations(test_list, 2):\n        result.append((a[0] + b[0], a[1] + b[1]))\n    return result\n",
    "MbppEval/59": "def is_octagonal(n):\n    return n * (2 * n - 1)\n"
}