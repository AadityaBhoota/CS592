{
    "MbppEval/17": "def square_perimeter(a):\n    perimeter = 4 * a\n    return perimeter\n",
    "MbppEval/59": "def is_octagonal(n):\n    return n * (3*n - 2)\n\n# Testing the function with examples\nprint(is_octagonal(5))  # Output should be 65\nprint(is_octagonal(10))  # Output should be 280\nprint(is_octagonal(15))  # Output should be 645\n",
    "MbppEval/58": "def opposite_Signs(x, y):\n    if x * y < 0:\n        return True\n    else:\n        return False\n",
    "MbppEval/19": "def test_duplicate(arraynums):\n    num_set = set(arraynums)\n    return len(num_set) < len(arraynums)\n",
    "MbppEval/14": "def find_volume(l, b, h):\n    # Step 1: Calculate the volume of the triangular prism\n    base_area = 0.5 * b * h\n    volume = base_area * l\n    return volume\n\n# Testing the function\nprint(find_volume(10, 8, 6))  # Output should be 240\nprint(find_volume(3, 2, 2))    # Output should be 6\nprint(find_volume(1, 2, 1))    # Output should be 1\n",
    "MbppEval/8": "def square_nums(nums):\n    square_list = []\n    \n    for num in nums:\n        square_list.append(num ** 2)\n\n    return square_list\n",
    "MbppEval/66": "def pos_count(lst):\n    count = 0  # Step 0\n\n    for num in lst:  # Step 1\n        if num > 0:  # Step 2\n            count += 1  # Step 3\n\n    return count  # Step 4\n",
    "MbppEval/65": "def recursive_list_sum(data_list):\n    total_sum = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total_sum += recursive_list_sum(element)\n        else:\n            total_sum += element\n    return total_sum\n",
    "MbppEval/4": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    largest_integers = []\n    max_heap = [-num for num in nums]\n    hq.heapify(max_heap)\n    \n    for _ in range(n):\n        if max_heap:\n            largest_integers.append(-hq.heappop(max_heap))\n            \n    largest_integers = largest_integers[::-1]\n    \n    return largest_integers\n",
    "MbppEval/62": "def smallest_num(xs):\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest\n",
    "MbppEval/57": "def find_Max_Num(arr):\n    str_arr = [str(num) for num in arr]\n    sorted_str_arr = sorted(str_arr, reverse=True)\n    final_num = int(\"\".join(sorted_str_arr))\n    return final_num\n",
    "MbppEval/71": "def comb_sort(nums):\n    gap = len(nums)\n    shrink_factor = 1.3\n    swapped = True\n\n    while gap > 1 or swapped:\n        gap = int(gap / shrink_factor)\n        gap = max(1, gap)\n        swapped = False\n\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n    return nums\n",
    "MbppEval/69": "def is_sublist(l, s):\n    for i in range(len(l)):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n",
    "MbppEval/68": "def is_Monotonic(A):\n    inc = dec = False\n    \n    for i in range(1, len(A)):\n        if A[i] > A[i - 1]:\n            inc = True\n        elif A[i] < A[i - 1]:\n            dec = True\n            \n        if inc and dec:\n            return False\n        \n    return True\n",
    "MbppEval/77": "def is_Diff(n): \n    sum_alt_digits = 0\n    for i, digit in enumerate(str(n)):\n        if i % 2 == 0:\n            sum_alt_digits += int(digit)\n        else:\n            sum_alt_digits -= int(digit)\n\n    return sum_alt_digits % 11 == 0\n",
    "MbppEval/72": "def dif_Square(n): \n    for a in range(int(n**0.5)+1):  # Square root limit to avoid duplicates\n        b_square = a**2 - n\n        if b_square >= 0:\n            b = int(b_square**0.5)\n            if b**2 == b_square and a > b and isinstance(a, int) and isinstance(b, int):\n                return True\n    return False\n",
    "MbppEval/3": "import math\n\ndef is_not_prime(n):\n    if n < 2:\n        return True\n    \n    if n == 2:\n        return False\n    \n    sqrt_n = math.isqrt(n)  # Calculate the square root of n\n\n    for i in range(2, sqrt_n + 1):\n        if n % i == 0:\n            return True  # n is not a prime number\n\n    return False  # n is a prime number\n",
    "MbppEval/75": "def find_tuples(test_list, K):\n    results = []  # Initialize a results list\n    for tpl in test_list:\n        if all(elem % K == 0 for elem in tpl):\n            results.append(tpl)  # Append the tuple to results if all elements are divisible by K\n    \n    return str(results)  # Return the results list as a string\n",
    "MbppEval/74": "def is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n    \n    color_map = {}\n    \n    for color, pattern in zip(colors, patterns):\n        if color in color_map:\n            if color_map[color] != pattern:\n                return False\n        else:\n            color_map[color] = pattern\n    \n    return True\n",
    "MbppEval/79": "def word_len(s):\n    word_length = len(s)\n    \n    if word_length % 2 != 0:\n        return True\n    else:\n        return False\n",
    "MbppEval/82": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume\n",
    "MbppEval/16": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    result = re.search(pattern, text)\n    if result:\n        return 'Found a match!'\n    else:\n        return 'Notlake bracketed'''\n",
    "MbppEval/86": "def centered_hexagonal_number(n):\n    return 3*n*(n-1) + 1\n",
    "MbppEval/85": "import math\n\ndef surfacearea_sphere(r):\n    return 4 * math.pi * r**2\n\n# Testing the function\nprint(surfacearea_sphere(10))  # Should print 1256.6370614359173\nprint(surfacearea_sphere(15))  # Should print 2827.4333882308138\nprint(surfacearea_sphere(20))  # Should print 5026.548245743669\n",
    "MbppEval/89": "def closest_num(N):\n    smaller_num = N - 1\n    if smaller_num < N:\n        return smaller_num\n    else:\n        return \"No smaller number found\"\n",
    "MbppEval/63": "def max_difference(test_list):\n    max_diff = 0\n    \n    for tup in test_list:\n        difference = max(tup) - min(tup)\n        if difference > max_diff:\n            max_diff = difference\n        \n    return max_diff\n",
    "MbppEval/83": "def get_Char(strr):\n    total_ascii = 0\n    for char in strr:\n        total_ascii += ord(char)\n        \n    remainder = total_ascii % 26\n    result_char = chr(remainder + 97)  # Adding 97 to get the ASCII corresponding to 'a'\n    \n    return result_char\n",
    "MbppEval/88": "import collections\n\ndef freq_count(list1):\n    freq_dict = {}\n    \n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    \n    return freq_dict\n",
    "MbppEval/87": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    \n    for d in (dict1, dict2, dict3):\n        for key, value in d.items():\n            if key not in merged_dict:\n                merged_dict[key] = value\n            elif merged_dict[key] != value:\n                # Update the value if the existing value is different\n                merged_dict[key] = value\n                \n    return merged_dict\n",
    "MbppEval/93": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n\n    Examples:\n    power(3,4) == 81\n    power(2,3) == 8\n    power(5,5) == 3125\n    '''\n    return a**b\n",
    "MbppEval/90": "def len_log(list1):\n    max_length = 0\n    \n    for word in list1:\n        word_length = len(word)\n        if word_length > max_length:\n            max_length = word_length\n    \n    return max_length\n",
    "MbppEval/7": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b[a-zA-Z]+\\b', text)\n    filtered_words = [word for word in words if len(word) >= 4]\n    return filtered_words\n",
    "MbppEval/96": "def divisor(n):\n    count = 0\n    \n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    \n    return count\n",
    "MbppEval/92": "def is_undulating(n): \n    if len(n) < 3:\n        return False\n\n    is_diff_positive = n[0] != n[1]\n    for i in range(2, len(n)):\n        if n[i] == n[i - 1] or (int(n[i]) - int(n[i - 1])) * (int(n[i - 1]) - int(n[i - 2])) >= 0:\n            return False\n\n    return True\n",
    "MbppEval/9": "def find_Rotations(str): \n    count = 1\n    if len(str) == 1:\n        return count\n    \n    rotated = str\n    while rotated != str:\n        count += 1\n        rotated = rotated[-1] + rotated[:-1]\n    \n    return count\n",
    "MbppEval/99": "def decimal_to_binary(n):\n    binary_str = bin(n)[2:]  # Remove '0b' prefix\n    binary_str = binary_str.zfill(4)  # Left-pad with zeros to ensure a minimum length of 4 characters\n    return binary_str\n",
    "MbppEval/84": "def sequence(n): \n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n\n    conway_seq = [0, 1, 1]\n\n    for i in range(3, n + 1):\n        conway_seq.append(conway_seq[conway_seq[i - 1]] + conway_seq[i - conway_seq[i - 1]])\n\n    return conway_seq[n]\n",
    "MbppEval/97": "def frequency_lists(list1):\n    freq_dict = {}\n    \n    flattened_list = [element for sublist in list1 for element in sublist]\n    \n    for element in flattened_list:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    \n    return freq_dict\n",
    "MbppEval/101": "def kth_element(arr, k):\n    k -= 1\n    return arr[k]\n",
    "MbppEval/103": "def eulerian_num(n, m):\n    if n == 0 and m == 0:\n        return 1\n    \n    if n == 1 and m == 0:\n        return 0\n    \n    if m > n:\n        return 0\n    \n    return (n-m) * eulerian_num(n-1, m-1) + (m+1) * eulerian_num(n-1, m)\n",
    "MbppEval/102": "def snake_to_camel(word):\n    words = word.split('_')\n    # Convert all words in the list to lowercase\n    words = [w.lower() for w in words]\n\n    # Capitalize the first letter of each word after the first word\n    camel_words = [words[0]]\n    camel_words.extend([w.capitalize() for w in words[1:]])\n\n    return ''.join(camel_words)\n",
    "MbppEval/98": "def multiply_num(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n\n    result /= len(numbers)\n    \n    return result\n",
    "MbppEval/106": "def add_lists(test_list, test_tup):\n    new_list = list(test_tup)\n    new_list.extend(test_list)\n    return tuple(new_list)\n",
    "MbppEval/105": "def count(lst):\n    true_count = 0\n\n    for item in lst:\n        if item == True:\n            true_count += 1\n\n    return true_count\n",
    "MbppEval/108": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    combined_list = num1 + num2 + num3\n    heapq.heapify(combined_list)\n    \n    final_sorted_list = []\n    \n    while combined_list:\n        final_sorted_list.append(heapq.heappop(combined_list))\n    \n    return final_sorted_list\n",
    "MbppEval/104": "def sort_sublists(input_list):\n    sorted_sublists = []\n    \n    for sublist in input_list:\n        sorted_sublist = sorted(sublist)\n        sorted_sublists.append(sorted_sublist)\n\n    return sorted_sublists\n",
    "MbppEval/6": "def differ_At_One_Bit_Pos(x, y):\n    xor_result = x ^ y\n    return bin(xor_result).count('1') == 1\n\n# Testing the function with the given examples\nprint(differ_At_One_Bit_Pos(13, 9))  # Should return True\nprint(differ_At_One_Bit_Pos(15, 8))  # Should return False\nprint(differ_At_One_Bit_Pos(2, 4))   # Should return False\n",
    "MbppEval/113": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n\n# Testing the function with examples\nprint(check_integer(\"python\"))  # Output: False\nprint(check_integer(\"1\"))  # Output: True\nprint(check_integer(\"12345\"))  # Output: True\n",
    "MbppEval/115": "def empty_dit(list1):\n    for dictionary in list1:\n        if not isinstance(dictionary, dict) or dictionary:\n            return False\n    return True\n",
    "MbppEval/116": "def tuple_to_int(nums):\n    result_str = ''\n\n    for num in nums:\n        result_str += str(num)\n\n    return int(result_str)\n",
    "MbppEval/118": "def string_to_list(string):\n    return string.split()\n",
    "MbppEval/109": "def odd_Equivalent(s, n):\n    count = 0\n    \n    for _ in range(n):\n        s = s[-1] + s[:-1]\n        \n        if int(s[-1]) % 2 != 0:\n            count += 1\n    \n    return count\n",
    "MbppEval/95": "def Find_Min_Length(lst):  \n    min_length = len(lst[0])\n    \n    for inner_lst in lst:\n        if len(inner_lst) < min_length:\n            min_length = len(inner_lst)\n    \n    return min_length\n",
    "MbppEval/123": "def amicable_numbers_sum(limit):\n    def find_divisors(num):\n        divisors = []\n        for i in range(1, num):\n            if num % i == 0:\n                divisors.append(i)\n        return divisors\n\n    def sum_divisors(num):\n        return sum(find_divisors(num))\n\n    amicable_sum = 0\n    for num in range(1, limit + 1):\n        divisor_sum = sum_divisors(num)\n        if divisor_sum != num and sum_divisors(divisor_sum) == num:\n            amicable_sum += num\n\n    return amicable_sum\n",
    "MbppEval/124": "import cmath\n\ndef angle_complex(a, b):\n    angle = cmath.phase(complex(a, b))\n    return angle\n",
    "MbppEval/18": "def remove_dirty_chars(str1, str2):\n    clean_chars = []\n\n    for char in str1:\n        if char not in str2:\n            clean_chars.append(char)\n\n    clean_string = ''.join(clean_chars)\n    return clean_string\n",
    "MbppEval/127": "def multiply_int(x, y):\n    result = x * y\n    return result\n",
    "MbppEval/126": "def common_divisors(a, b):\n    def find_divisors(num):\n        divisors = set()\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                divisors.add(i)\n                divisors.add(num // i)\n        return divisors\n\n    divisors_a = find_divisors(a)\n    divisors_b = find_divisors(b)\n    \n    common_divisors = divisors_a.intersection(divisors_b)\n    \n    return sum(common_divisors)\n",
    "MbppEval/120": "def max_product_tuple(list1):\n    max_product = 0\n    for pair in list1:\n        abs_product = abs(pair[0] * pair[1])\n        if abs_product > max_product:\n            max_product = abs_product\n    return max_product\n",
    "MbppEval/128": "def long_words(n, input_string):\n    words = input_string.split()\n    return [word for word in words if len(word) > n]\n",
    "MbppEval/56": "def rev(num):\n    num_str = str(num)\n    reversed_num_str = num_str[::-1].lstrip('0')\n    return int(reversed_num_str)\n\ndef check(num):\n    doubled_num = num * 2\n    reversed_doubled_num = rev(doubled_num)\n    return num - 1 == reversed_doubled_num\n",
    "MbppEval/125": "def find_length(string): \n    max_diff = 0\n    count = 0\n    \n    for char in string:\n        if char == '0':\n            count += 1\n        else:\n            count -= 1\n        \n        diff = abs(count)\n        max_diff = max(max_diff, diff)\n    \n    return max_diff\n",
    "MbppEval/133": "def sum_negativenum(nums):\n    sum_neg = 0\n\n    for num in nums:\n        if num < 0:\n            sum_neg += num\n\n    return sum_neg\n",
    "MbppEval/132": "def tup_string(tup1):\n    result = \"\"\n    for char in tup1:\n        result += char\n    return result\n",
    "MbppEval/130": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    frequency_map = defaultdict(int)\n    \n    for num in nums:\n        frequency_map[num] += 1\n    \n    max_item = max(frequency_map, key=frequency_map.get)\n    max_count = frequency_map[max_item]\n    \n    return max_item, max_count\n",
    "MbppEval/117": "def list_to_float(test_list):\n    converted_list = []\n    \n    for sublist in test_list:\n        converted_sublist = []\n        \n        for item in sublist:\n            try:\n                converted_item = float(item)\n            except ValueError:\n                converted_item = item\n            converted_sublist.append(converted_item)\n        \n        converted_list.append(tuple(converted_sublist))\n    \n    return converted_list\n",
    "MbppEval/135": "def hexagonal_num(n):\n    # Step 0: Verify input\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n    \n    # Step 2: Calculate hexagonal number\n    hexagonal_number = n * (2*n - 1)\n    \n    return hexagonal_number\n",
    "MbppEval/139": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n\n    Examples:\n    circle_circumference(10) == 62.830\n    circle_circumference(5) == 31.415\n    circle_circumference(4) == 25.132\n    '''\n    circumference = 2 * math.pi * r\n    return round(circumference, 3)\n",
    "MbppEval/131": "def reverse_vowels(str1):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    char_list = list(str1)\n    \n    start = 0\n    end = len(char_list) - 1\n    \n    while start < end:\n        if char_list[start].lower() in vowels and char_list[end].lower() in vowels:\n            char_list[start], char_list[end] = char_list[end], char_list[start]\n            \n        start += 1\n        end -= 1\n    \n    return \"\".join(char_list)\n",
    "MbppEval/137": "from array import array\n\ndef zero_count(nums):\n    zero_count = 0\n    total_count = len(nums)\n    \n    for num in nums:\n        if num == 0:\n            zero_count += 1\n    \n    ratio = zero_count / total_count if total_count > 0 else 0\n    return round(ratio, 2)\n",
    "MbppEval/141": "def pancake_sort(nums):\n    def find_max_index(arr):\n        max_index = 0\n        for i in range(1, len(arr)):\n            if arr[i] > arr[max_index]:\n                max_index = i\n        return max_index\n\n    def pancake_reverse(arr, k):\n        return arr[:k+1][::-1] + arr[k+1:]\n\n    sorted_nums = []\n    n = len(nums)\n    for i in range(n, 1, -1):\n        max_index = find_max_index(nums[:i])\n        nums = pancake_reverse(nums, max_index)\n        nums = pancake_reverse(nums, i-1)\n        sorted_nums.insert(0, nums.pop())\n    sorted_nums.insert(0, nums[0])  # Insert the remaining element\n    return sorted_nums\n",
    "MbppEval/140": "def extract_singly(test_list):\n    result = []  # Initialize an empty list to store the final output\n    \n    for tpl in test_list:  # Iterate over each tuple in the input list\n        for num in tpl:  # Iterate over each element in the tuple\n            result.append(num)  # Append each element to the result list\n    \n    return result  # Return the result list with all the elements flattened\n",
    "MbppEval/143": "def find_lists(Input): \n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    return count\n",
    "MbppEval/138": "def is_Sum_Of_Powers_Of_Two(n): \n    power = 1\n    \n    while power < n:\n        power *= 2\n        \n    power //= 2\n    \n    if n == power:\n        return True\n    elif power > n:\n        return False\n    else:\n        return is_Sum_Of_Powers_Of_Two(n - power)\n",
    "MbppEval/162": "def sum_series(n):\n    total_sum = 0\n    \n    for i in range(n // 2 + 1):\n        term = n - 2*i\n        total_sum += term\n    \n    return total_sum\n",
    "MbppEval/161": "def remove_elements(list1, list2):\n    result = []\n\n    for num in list1:\n        if num not in list2:\n            result.append(num)\n\n    return result\n",
    "MbppEval/163": "from math import tan, pi\n\ndef area_polygon(s, l):\n    a = l / (2 * tan(pi / s))\n    area = 0.5 * s * a * l\n    return area\n",
    "MbppEval/119": "def search(arr):\n    if len(arr) == 1:\n        return arr[0]\n\n    start, end = 0, len(arr) - 1\n\n    while start < end:\n        mid = (start + end) // 2\n\n        if arr[mid] != arr[mid - 1] and arr[mid] != arr[mid + 1]:\n            return arr[mid]\n        elif mid % 2 == 0 and arr[mid] == arr[mid + 1]:\n            start = mid + 2\n        else:\n            end = mid\n",
    "MbppEval/160": "def extended_gcd(a, b):\n    if a == 0:\n        return b, 0, 1\n    else:\n        g, y, x = extended_gcd(b % a, a)\n        return g, x - (b // a) * y, y\n\ndef find_solution(a, b, n):\n    if a == 0 and b == 0:\n        return 'No solution'\n\n    if a == 0:\n        if n % b == 0:\n            return 'x = 0, y = {}'.format(n // b)\n        else:\n            return 'No solution'\n\n    if b == 0:\n        if n % a == 0:\n            return 'x = {}, y = 0'.format(n // a)\n        else:\n            return 'No solution'\n\n    g, x, y = extended_gcd(a, b)\n\n    if n % g == 0:\n        x *= n // g\n        y *= n // g\n        return 'x = {}, y = {}'.format(x, y)\n    else:\n        return 'No solution'\n",
    "MbppEval/164": "import math\n\ndef get_divisors(n):\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != n // i:\n                divisors.append(n // i)\n    divisors.remove(n)\n    return divisors\n\ndef areEquivalent(num1, num2):\n    sum_divisors_num1 = sum(get_divisors(num1))\n    sum_divisors_num2 = sum(get_divisors(num2))\n    return sum_divisors_num1 == sum_divisors_num2\n\n# Test cases\nprint(areEquivalent(36, 57))  # Expected output: False\nprint(areEquivalent(2, 4))    # Expected output: False\nprint(areEquivalent(23, 47))  # Expected output: True\n",
    "MbppEval/167": "def next_power_of_2(n): \n    power = 1\n    while power < n:\n        power *= 2\n    return power\n",
    "MbppEval/166": "def find_even_pair(A): \n    count = 0\n\n    # Step 1: Loop through each pair of elements in the list\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            # Step 2: Calculate the xor of the pair\n            xor_result = A[i] ^ A[j]\n\n            # Step 3: Increment the count if the xor is even\n            if xor_result % 2 == 0:\n                count += 1\n    \n    # Step 4: Return the count of pairs that xor to an even number\n    return count\n",
    "MbppEval/170": "def sum_range_list(list1, m, n):\n    total_sum = 0\n    \n    for num in list1[m:n+1]:\n        total_sum += num\n        \n    return total_sum\n",
    "MbppEval/168": "def frequency(a, x):\n    count = 0\n    \n    for num in a:\n        if num == x:\n            count += 1\n        \n    return count\n",
    "MbppEval/171": "import math\ndef perimeter_pentagon(a):\n    return 5 * a\n",
    "MbppEval/165": "def count_char_position(str1): \n    count = 0\n    str1 = str1.lower()\n    for i in range(len(str1)):\n        if str1[i].isalpha():\n            position = ord(str1[i]) - ord('a') + 1\n            if position == i + 1:\n                count += 1\n    return count\n",
    "MbppEval/172": "def count_occurance(s):\n    count = 0\n    # Step 1: Initialize count to 0\n\n    for i in range(len(s)-2):\n        if s[i:i+3] == \"std\":\n            count += 1\n            # Step 3: Check if current characters form 'std' substring\n\n    return count\n",
    "MbppEval/223": "def is_majority(arr, n, x):\n    if n <= 0:\n        return False\n\n    min_count = n // 2\n\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n\n    if count > min_count:\n        return True\n\n    return False\n",
    "MbppEval/222": "def check_type(test_tuple):\n    if len(test_tuple) == 0:  # Check if the tuple is empty\n        return True\n    \n    first_type = type(test_tuple[0])  # Get the data type of the first element in the tuple\n    \n    for item in test_tuple[1:]:  # Iterate through the elements starting from the second element\n        if type(item) != first_type:  # Check if the data type of the element is not equal to the data type of the first element\n            return False\n    \n    return True  # If all types match, return True\n",
    "MbppEval/224": "def count_Set_Bits(n):\n    count = 0\n    \n    while n > 0:\n        if n & 1:\n            count += 1\n        \n        n >>= 1\n    \n    return count\n",
    "MbppEval/100": "def next_smallest_palindrome(num):\n    num_str = str(num)\n    num_len = len(num_str)\n\n    while True:\n        if num_str == num_str[::-1]:\n            return int(num_str)\n        num += 1\n        num_str = str(num)\n\ndef get_middle_index(num_len):\n    return num_len // 2\n\ndef split_number(num_str, middle):\n    if len(num_str) % 2 == 0:  # Handle even length\n        return num_str[:middle], num_str[middle:]\n    else:  # Handle odd length\n        return num_str[:middle], num_str[middle+1:]\n\ndef mirror_first_half(first_half_str):\n    return first_half_str[::-1]\n\ndef construct_palindrome(first_half, second_half):\n    return int(first_half + second_half)\n",
    "MbppEval/227": "def min_of_three(a, b, c):\n    if a < b:\n        min_value = a\n    else:\n        min_value = b\n        \n    if c < min_value:\n        min_value = c\n\n    return min_value\n",
    "MbppEval/230": "def replace_blank(str1, char):\n    # Step 0: Check if the inputs are valid\n    if not isinstance(str1, str) or len(str1) == 0 or not isinstance(char, str) or len(char) != 1:\n        return \"Invalid input. Please provide a non-empty string and a single character.\"\n\n    # Step 1: Replace all occurrences of blank spaces with the character\n    new_str = str1.replace(' ', char)\n\n    # Step 2: Return the modified string\n    return new_str\n",
    "MbppEval/229": "def re_arrange_array(arr, n):\n    neg_nums = []\n    pos_nums = []\n    \n    for i in range(n):\n        if arr[i] < 0:\n            neg_nums.append(arr[i])\n        else:\n            pos_nums.append(arr[i])\n            \n    rearranged_arr = neg_nums + pos_nums\n    return rearranged_arr\n",
    "MbppEval/228": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    binary_representation = bin(n)[2:]\n    \n    for i in range(l, r+1):\n        if len(binary_representation) < i or binary_representation[-i] != '1':\n            return False\n\n    return True\n",
    "MbppEval/232": "import heapq\n\ndef larg_nnum(list1, n):\n    return heapq.nlargest(n, list1)\n",
    "MbppEval/233": "def lateralsuface_cylinder(r,h):\n    lateral_surface_area = 2 * 3.14159 * r * h\n    return lateral_surface_area\n",
    "MbppEval/234": "def volume_cube(l):\n    # Calculate volume of the cube\n    volume = l ** 3\n    return volume\n",
    "MbppEval/239": "def get_total_number_of_sequences(m, n):\n    count = 0\n    \n    def count_sequences(start, length):\n        nonlocal count\n        if length == 0:\n            count += 1\n            return\n        for i in range(start, m + 1):\n            if i >= 2 * start and i <= m:\n                count_sequences(i, length - 1)\n    \n    count_sequences(1, n)\n    return count\n",
    "MbppEval/237": "from collections import Counter\n\ndef check_occurrences(test_list):\n    occurrences = dict(Counter(test_list))\n    return occurrences\n",
    "MbppEval/235": "def even_bit_set_number(n):\n    binary_number = bin(n)[2:].zfill(32)  # Pad the binary number with zeros to have 32 bits\n\n    # Create a mask with all even bits set to 1\n    mask = int(''.join(['1' if i % 2 == 0 else '0' for i in range(32)]), 2)\n    \n    # Perform a bitwise OR operation between the binary number and the mask\n    modified_binary = int(binary_number, 2) | mask\n\n    return modified_binary\n",
    "MbppEval/240": "def replace_list(list1, list2):\n    list1.pop()\n    list1.extend(list2)\n    return list1\n",
    "MbppEval/242": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n\n    Examples:\n    count_charac(\"python programming\") == 18\n    count_charac(\"language\") == 8\n    count_charac(\"words\") == 5\n    '''\n    count = 0\n    \n    for char in str1:\n        count += 1\n    \n    return count\n",
    "MbppEval/238": "def number_of_substrings(str): \n    count = 0\n    \n    for i in range(len(str)):\n        count += len(str) - i\n\n    return count\n",
    "MbppEval/244": "import math\n\ndef next_Perfect_Square(N):\n    square_root = math.sqrt(N)\n    next_square = math.ceil(square_root)\n    next_perfect_square = next_square ** 2\n    return next_perfect_square\n",
    "MbppEval/129": "def magic_square_test(my_matrix):\n    reference_sum = sum(my_matrix[0])\n\n    # Check rows\n    for row in my_matrix:\n        if sum(row) != reference_sum:\n            return False\n\n    # Check columns\n    for i in range(len(my_matrix)):\n        col_sum = sum(row[i] for row in my_matrix)\n        if col_sum != reference_sum:\n            return False\n\n    # Check main diagonal\n    if sum(my_matrix[i][i] for i in range(len(my_matrix))) != reference_sum:\n        return False\n\n    # Check secondary diagonal\n    if sum(my_matrix[i][len(my_matrix)-1-i] for i in range(len(my_matrix))) != reference_sum:\n        return False\n\n    return True\n",
    "MbppEval/246": "def babylonian_squareroot(number):\n    guess = number / 2\n    tolerance = 0.0000001\n\n    while abs(guess * guess - number) > tolerance:\n        guess = (guess + number / guess) / 2\n\n    return guess\n",
    "MbppEval/248": "def harmonic_sum(n):\n    sum = 0\n    for i in range(1, n):\n        sum += 1 / i\n    return sum\n",
    "MbppEval/250": "def count_X(tup, x): \n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n",
    "MbppEval/251": "def insert_element(lst, element):\n    modified_list = []\n    \n    for item in lst:\n        modified_list.append(element)\n        modified_list.append(item)\n        \n    return modified_list\n",
    "MbppEval/64": "def subject_marks(subjectmarks):\n    return sorted(subjectmarks, key=lambda x: x[1])\n",
    "MbppEval/61": "def calculate_digit_sum(s):\n    return sum(int(d) for d in s)\n\ndef is_valid_substring(sub):\n    return calculate_digit_sum(sub) == len(sub)\n\ndef count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if is_valid_substring(s[i:j]):\n                count += 1\n                \n    return count\n",
    "MbppEval/247": "def lps(s):\n    n = len(s)\n    if n == 0:\n        return 0\n\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for cl in range(2, n + 1): \n        for i in range(n - cl + 1): \n            j = i + cl - 1\n            if s[i] == s[j] and cl == 2: \n                dp[i][j] = 2\n            elif s[i] == s[j]: \n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else: \n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n\n    return dp[0][n-1]\n\n# Test the function with the given examples\nprint(lps(\"TENS FOR TENS\"))  # Output: 5\nprint(lps(\"CARDIO FOR CARDS\"))  # Output: 7\nprint(lps(\"PART OF THE JOURNEY IS PART\"))  # Output: 9\n",
    "MbppEval/252": "import cmath\n\ndef convert(numbers):\n    # Use cmath.polar to convert the complex number to polar form\n    polar_coordinates = cmath.polar(numbers)\n    \n    # Return the polar coordinates as a tuple of the form (r, phi)\n    return polar_coordinates\n",
    "MbppEval/257": "def swap_numbers(a, b):\n    return (b, a)\n",
    "MbppEval/70": "def find_equal_tuple(tuples_list, length):\n    for tuple_elem in tuples_list:\n        if len(tuple_elem) != length:\n            return 'All tuples do not have same length'\n    \n    return 'All tuples have same length'\n",
    "MbppEval/259": "def maximize_elements(test_tup1, test_tup2):\n    result = []\n    for tup1, tup2 in zip(test_tup1, test_tup2):\n        max_tup = tuple(max(val1, val2) for val1, val2 in zip(tup1, tup2))\n        result.append(max_tup)\n    return tuple(result)\n",
    "MbppEval/253": "def count_integer(list1):\n    count = 0\n    if not list1:\n        return 0\n\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    \n    return count\n",
    "MbppEval/245": "def max_sum(arr): \n    n = len(arr)\n    \n    inc_sum = [0] * n\n    dec_sum = [0] * n\n    \n    for i in range(n):\n        inc_sum[i] = arr[i]\n        dec_sum[i] = arr[i]\n        \n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                inc_sum[i] = max(inc_sum[i], inc_sum[j] + arr[i])\n    \n    for i in range(n-2, -1, -1):\n        for j in range(n-1, i, -1):\n            if arr[i] > arr[j]:\n                dec_sum[i] = max(dec_sum[i], dec_sum[j] + arr[i])\n    \n    max_bitonic_sum = 0\n    for i in range(n):\n        max_bitonic_sum = max(max_bitonic_sum, inc_sum[i] + dec_sum[i] - arr[i])\n    \n    return max_bitonic_sum\n",
    "MbppEval/262": "def split_two_parts(list1, L):\n    length = len(list1)\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)\n",
    "MbppEval/261": "def division_elements(test_tup1, test_tup2):\n    result = []\n    \n    for num1, num2 in zip(test_tup1, test_tup2):\n        division_result = num1 / num2\n        result.append(division_result)\n    \n    return tuple(result)\n",
    "MbppEval/265": "def list_split(S, step):\n    result = []\n    \n    for i in range(0, len(S), step):\n        sub_list = S[i:i+step]\n        result.append(sub_list)\n    \n    return result\n",
    "MbppEval/264": "def dog_age(h_age):\n    dog_age_first_two_years = 1 + 9\n    remaining_age = h_age - 2\n    remaining_age_in_dog_years = remaining_age * 4\n    age_in_dog_years = dog_age_first_two_years + remaining_age_in_dog_years\n    return age_in_dog_years\n",
    "MbppEval/269": "def ascii_value(k):\n    return ord(k)\n",
    "MbppEval/255": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    comb = combinations_with_replacement(l, n)\n    result = list(comb)\n    return result\n",
    "MbppEval/268": "def find_star_num(n):\n    return n**2 * 6 + 1\n",
    "MbppEval/272": "def rear_extract(test_list):\n    result = []\n    \n    for tpl in test_list:\n        result.append(tpl[-1])\n    \n    return result\n",
    "MbppEval/270": "def sum_even_and_even_index(arr):\n    sum_even = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum_even += arr[i]\n    return sum_even\n",
    "MbppEval/267": "def square_Sum(n):\n    sum_squares = 0\n    for i in range(1, 2*n, 2):\n        sum_squares += i**2\n    return sum_squares\n",
    "MbppEval/274": "import math\n\ndef binomial_coefficient(n, k):\n    return math.factorial(n) // (math.factorial(k) * math.factorial(n - k))\n\ndef even_binomial_coefficients(n):\n    return [binomial_coefficient(n, k) for k in range(0, n+1, 2)]\n\ndef even_binomial_Coeff_Sum(n):\n    even_coeffs = even_binomial_coefficients(n)\n    return sum(even_coeffs)\n",
    "MbppEval/260": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef newman_prime(n): \n    def ns_prime(candidate):\n        return is_prime((2**candidate) * candidate - 1)\n    \n    count = 0\n    num = 0\n    \n    while count < n:\n        if ns_prime(num):\n            count += 1\n            if count == n:\n                return num\n        num += 1\n",
    "MbppEval/273": "def substract_elements(test_tup1, test_tup2):\n    result = []\n    \n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n        \n    return tuple(result)\n",
    "MbppEval/276": "import math\n\ndef volume_cylinder(r, h):\n    pi = math.pi\n    volume = pi * r**2 * h\n    \n    return volume\n",
    "MbppEval/279": "def is_num_decagonal(n): \n    decagonal_number = n * (7 * n - 5)\n    return decagonal_number\n",
    "MbppEval/277": "def dict_filter(dict, n):\n    filtered_dict = {}\n\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n\n    return filtered_dict\n",
    "MbppEval/278": "def count_first_elements(test_tup):\n    count = 0\n    tup_elem = None\n    for elem in test_tup:\n        if elem == tup_elem:\n            break\n        count += 1\n    \n    return count\n",
    "MbppEval/280": "def sequential_search(dlist, item):\n    for index, value in enumerate(dlist):\n        if value == item:\n            return True, index\n    return False, -1\n",
    "MbppEval/271": "def even_Power_Sum(n):\n    sum_even_power = 0\n    even_number = 2\n    \n    for _ in range(n):\n        sum_even_power += even_number**5\n        even_number += 2\n        \n    return sum_even_power\n",
    "MbppEval/282": "def sub_list(nums1, nums2):\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result\n",
    "MbppEval/281": "def all_unique(test_list):\n    unique_set = set()\n    \n    for element in test_list:\n        if element in unique_set:\n            return False\n        unique_set.add(element)\n    \n    return True\n",
    "MbppEval/285": "import re\n\ndef text_match_two_three(text):\n    match = re.search(r'ab{2,3}', text)\n    \n    if match:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
    "MbppEval/284": "def check_element(lst, element):\n    result = True\n    for item in lst:\n        if item != element:\n            result = False\n            break\n    return result\n",
    "MbppEval/287": "def square_Sum(n):\n    sum_squares = 0\n    \n    for even_number in range(2, 2 * n + 1, 2):\n        sum_squares += even_number ** 2\n        \n    return sum_squares\n",
    "MbppEval/286": "def max_sub_array_sum_repeated(a, n, k):\n    repeated_array = a * (k - 1) + a  # Repeat (k-1) times and add the original array once\n    max_sum = float('-inf')  # Initialize max_sum to negative infinity\n    \n    # Loop through all possible subarrays of length n\n    for i in range(len(repeated_array) - n + 1):\n        current_sum = sum(repeated_array[i:i+n])\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum\n",
    "MbppEval/283": "def validate(n): \n    '''\n    Write a python function that takes in an integer and checks whether the frequency of each digit in the integer is \n    less than or equal to the digit itself.\n\n    Examples:\n    validate(1234) == True\n    validate(51241) == False\n    validate(321) == True\n    '''\n    num_str = str(n)\n    digit_freq = {}\n\n    for digit in num_str:\n        if digit in digit_freq:\n            digit_freq[digit] += 1\n        else:\n            digit_freq[digit] = 1\n\n    for digit, freq in digit_freq.items():\n        if int(digit) < freq:\n            return False\n    \n    return True\n",
    "MbppEval/293": "import math\n\ndef otherside_rightangle(w, h):\n    return math.sqrt(w ** 2 + h ** 2)\n",
    "MbppEval/292": "import math\n\ndef find(n, m):\n    quotient = n / m\n    rounded_down_quotient = math.floor(quotient)\n    return rounded_down_quotient\n",
    "MbppEval/294": "def max_val(listval):\n    max_value = None\n    for val in listval:\n        if isinstance(val, (int, float)):\n            if max_value is None or val > max_value:\n                max_value = val\n    return max_value\n",
    "MbppEval/295": "def sum_div(number):\n    sum_of_divisors = 0\n\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum_of_divisors += i\n\n    return sum_of_divisors\n",
    "MbppEval/290": "def max_length(list1):\n    max_len = 0\n    max_list = []\n    \n    for sublist in list1:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_list = sublist\n    \n    return max_len, max_list\n",
    "MbppEval/296": "def get_Inv_Count(arr):\n    count = 0\n\n    def merge_sort_and_count_inversions(arr):\n        if len(arr) <= 1:\n            return arr, 0\n        \n        mid = len(arr) // 2\n        left, inv_count_left = merge_sort_and_count_inversions(arr[:mid])\n        right, inv_count_right = merge_sort_and_count_inversions(arr[mid:])\n        \n        inv_count_merge = 0\n        sorted_arr = []\n        i, j = 0, 0\n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                sorted_arr.append(left[i])\n                i += 1\n            else:\n                sorted_arr.append(right[j])\n                j += 1\n                inv_count_merge += len(left) - i\n                count += len(left) - i\n\n        sorted_arr.extend(left[i:])\n        sorted_arr.extend(right[j:])\n        \n        return sorted_arr, inv_count_left + inv_count_right + inv_count_merge\n\n    sorted_arr, _ = merge_sort_and_count_inversions(arr)\n    \n    return count\n",
    "MbppEval/297": "def flatten_list(list1):\n    flattened_list = []\n    \n    def flatten_helper(nested_list):\n        for element in nested_list:\n            if isinstance(element, list):\n                flatten_helper(element)\n            else:\n                flattened_list.append(element)\n    \n    for element in list1:\n        flatten_helper(element)\n    \n    return flattened_list\n",
    "MbppEval/300": "def generate_binary_sequences(n, sequence=[], prefix_sum=0):\n    if len(sequence) == 2*n:\n        return [sequence] if prefix_sum == 0 else []\n    \n    sequences = []\n    for bit in [0, 1]:\n        new_sequence = sequence + [bit]\n        new_prefix_sum = prefix_sum + (-1) ** bit\n        sequences += generate_binary_sequences(n, new_sequence, new_prefix_sum)\n        \n    return sequences\n\ndef count_binary_seq(n):\n    binary_sequences = generate_binary_sequences(n)\n    return len(binary_sequences)\n",
    "MbppEval/291": "def count_no_of_ways(n, k):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return k\n    \n    same_color = k  # Number of ways when the last two posts have the same color\n    diff_color = k * (k - 1)  # Number of ways when the last two posts have different colors\n    \n    for _ in range(3, n + 1):\n        new_same_color = diff_color\n        new_diff_color = (same_color + diff_color) * (k - 1)\n        \n        same_color, diff_color = new_same_color, new_diff_color\n        \n    return same_color + diff_color\n",
    "MbppEval/299": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    aggregate_scores = defaultdict(int)\n    \n    for student, score in stdata:\n        if student in aggregate_scores:\n            aggregate_scores[student] += score\n        else:\n            aggregate_scores[student] = score\n\n    max_student = max(aggregate_scores, key=aggregate_scores.get)\n\n    return max_student, aggregate_scores[max_student]\n",
    "MbppEval/304": "def find_Element(arr, ranges, rotations, index):\n    total_rotations = sum([r[1] for r in ranges]) * rotations\n    effective_index = (index + total_rotations) % len(arr)\n    return arr[effective_index]\n",
    "MbppEval/249": "def intersection_array(array_nums1, array_nums2):\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    return list(set1.intersection(set2))\n",
    "MbppEval/309": "def maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b\n",
    "MbppEval/307": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    tup_list = list(tuplex)\n    \n    if m < 0 or m >= len(tup_list):\n        return tuple(tup_list)\n    \n    tup_list[m] = [n]\n    return tuple(tup_list)\n",
    "MbppEval/308": "# Step 1: Define the function large_product\ndef large_product(nums1, nums2, N):\n    # Step 2: Multiply each element in nums1 with each element in nums2 to generate a list of products\n    products = [x * y for x in nums1 for y in nums2]\n    \n    # Step 3: Sort the list of products in descending order\n    products.sort(reverse=True)\n    \n    # Step 4: Return the first N elements of the sorted list\n    return products[:N]\n",
    "MbppEval/306": "def max_sum_increasing_subseq(a, n, index, k):\n    if index >= n or k >= n:\n        return 0\n    \n    if a[index] < a[k]:\n        include_current = a[index] + max_sum_increasing_subseq(a, n, k, k+1)\n        exclude_current = max_sum_increasing_subseq(a, n, index, k+1)\n        \n        return max(include_current, exclude_current)\n    else:\n        return max_sum_increasing_subseq(a, n, k, k+1)\n",
    "MbppEval/311": "def find_leftmost_unset_bit_position(n):\n    position = 1\n    \n    while n & 1:\n        n >>= 1\n        position += 1\n\n    return position\n",
    "MbppEval/312": "import math\n\ndef volume_cone(r, h):\n    volume = (1/3) * math.pi * r**2 * h\n    return volume\n",
    "MbppEval/310": "def string_to_tuple(str1):\n    char_list = []\n    for char in str1:\n        char_list.append(char)\n    return tuple(char_list)\n",
    "MbppEval/388": "def highest_Power_of_2(n):\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power\n",
    "MbppEval/305": "import re\n\ndef start_withp(words):\n    result = []\n    count = 0\n    for word_str in words:\n        for word in word_str.split():\n            if re.match(r'[pP]\\w+', word):\n                result.append(word)\n                count += 1\n                if count == 2:\n                    return tuple(result)\n\n# Testing the function\nprint(start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"]))\n",
    "MbppEval/390": "def add_string(list_, string):\n    formatted_list = []\n    \n    for element in list_:\n        formatted_list.append(string.format(element))\n    \n    return formatted_list\n",
    "MbppEval/389": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n\n    Examples:\n    find_lucas(9) == 76\n    find_lucas(4) == 7\n    find_lucas(3) == 4\n    '''\n    if not isinstance(n, int) or n <= 0:\n        return \"Input must be a positive integer.\"\n    \n    lucas_numbers = [2, 1]  # Initialize with first two Lucas numbers\n    \n    for i in range(2, n+1):\n        lucas_numbers.append(lucas_numbers[-1] + lucas_numbers[-2])  # Calculate the next Lucas number\n        \n    return lucas_numbers[n-1]  # Return the n-th Lucas number\n",
    "MbppEval/392": "def get_max_sum(n):\n    if n <= 1:\n        return n\n    \n    max_sum = max(n, get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5))\n    \n    return max_sum\n",
    "MbppEval/393": "def max_length_list(input_list):\n    max_length = 0\n    result_list = []\n\n    for sublist in input_list:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n            result_list = sublist\n\n    return (max_length, result_list)\n",
    "MbppEval/396": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string): \n    if re.match(regex, string):\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n",
    "MbppEval/391": "def convert_list_dictionary(l1, l2, l3):\n    nested_dicts = []\n    if len(l1) == len(l2) == len(l3):\n        for i in range(len(l1)):\n            nested_dict = {l1[i]: {l2[i]: l3[i]}}\n            nested_dicts.append(nested_dict)\n        \n        return nested_dicts\n    else:\n        raise ValueError(\"Input lists are of different lengths\")\n",
    "MbppEval/395": "def first_non_repeating_character(str1):\n    char_count = {}\n    non_repeating_chars = []\n    \n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            non_repeating_chars.append(char)\n    \n    if non_repeating_chars:\n        return non_repeating_chars[0]\n    else:\n        return None\n",
    "MbppEval/394": "def check_distinct(test_tup):\n    distinct_set = set()\n\n    for elem in test_tup:\n        if elem in distinct_set:\n            return False\n        distinct_set.add(elem)\n\n    return True\n",
    "MbppEval/397": "def median_numbers(a, b, c):\n    numbers = [a, b, c]\n    numbers.sort()\n\n    if len(numbers) % 2 == 0:\n        mid_left = len(numbers) // 2 - 1\n        mid_right = len(numbers) // 2\n        median = (numbers[mid_left] + numbers[mid_right]) / 2\n    else:\n        median = numbers[len(numbers) // 2]\n\n    return median\n\nprint(median_numbers(25, 55, 65))\nprint(median_numbers(20, 10, 30))\nprint(median_numbers(15, 45, 75))\n",
    "MbppEval/400": "def extract_freq(test_list):\n    unique_tuples = set()\n    \n    for tup in test_list:\n        unique_tuples.add(tup)\n    \n    return len(unique_tuples)\n\n# Testing the implementation with the provided examples\nprint(extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)]))  # Output should be 3\nprint(extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)]))  # Output should be 4\nprint(extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)]))  # Output should be 4\n",
    "MbppEval/399": "def bitwise_xor(test_tup1, test_tup2):\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)\n",
    "MbppEval/404": "def minimum(a, b):\n    if a < b:\n        return a\n    else:\n        return b\n\n# Testing the function\nprint(minimum(1, 2))  # Output should be 1\nprint(minimum(-5, -4))  # Output should be -5\nprint(minimum(0, 0))  # Output should be 0\n",
    "MbppEval/405": "def check_tuplex(tuplex, item):\n    return item in tuplex\n",
    "MbppEval/398": "def sum_of_digits(nums):\n    total_sum = 0\n\n    if not nums:\n        return total_sum\n\n    for num in nums:\n        if isinstance(num, (int, str)):\n            num_str = str(num)\n            num_sum = 0\n            for digit in num_str:\n                if digit.isdigit():\n                    num_sum += int(digit)\n            total_sum += num_sum\n\n    return total_sum\n",
    "MbppEval/94": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    min_value = float('inf')\n    \n    for name, value in test_list:\n        if value < min_value:\n            min_value = value\n\n    result = next(filter(lambda x: x[1] == min_value, test_list))[0]\n\n    return result\n",
    "MbppEval/406": "def find_Parity(x): \n    ''' Finds whether the parity of a given number is odd. '''\n\n    if x % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n",
    "MbppEval/409": "def min_product_tuple(list1):\n    min_product = float('inf')  # Step 2\n\n    for tup in list1:  # Step 3\n        product = tup[0] * tup[1]  # Step 4\n        if product < min_product:  # Step 5\n            min_product = product\n\n    return min_product  # Step 6\n",
    "MbppEval/401": "def add_nested_tuples(test_tup1, test_tup2):\n    result = []\n    \n    for tup1, tup2 in zip(test_tup1, test_tup2):\n        sum_tuple = tuple(sum(x) for x in zip(tup1, tup2))\n        result.append(sum_tuple)\n    \n    return tuple(result)\n",
    "MbppEval/411": "def snake_to_camel(word):\n    words = word.split('_')\n    words = [w.lower() for w in words]\n    \n    # Capitalize the first letter of each word except the first word\n    camel_words = [words[0]] + [w.capitalize() for w in words[1:]]\n    \n    # Concatenate the capitalized words\n    camel_case = ''.join(camel_words)\n    \n    return camel_case\n",
    "MbppEval/410": "def min_val(listval):\n    min_value = None\n\n    for item in listval:\n        if isinstance(item, (int, float)):\n            if min_value is None or item < min_value:\n                min_value = item\n\n    return min_value\n",
    "MbppEval/413": "def extract_nth_element(list1, n):\n    extracted_elements = []\n    for tup in list1:\n        extracted_elements.append(tup[n])\n    return extracted_elements\n",
    "MbppEval/412": "def remove_odd(l):\n    result = []\n\n    for num in l:\n        if num % 2 == 0:  # Check if the number is even\n            result.append(num)  # If the number is even, add it to the result list\n    \n    return result\n",
    "MbppEval/414": "def overlapping(list1, list2):\n    for elem1 in list1:\n        if elem1 in list2:\n            return True\n    return False\n",
    "MbppEval/417": "def group_tuples(Input):\n    grouped_dict = {}\n    \n    for tup in Input:\n        first_element = tup[0]\n        \n        if first_element in grouped_dict:\n            grouped_dict[first_element].append(tup)\n        else:\n            grouped_dict[first_element] = [tup]\n           \n    return list(grouped_dict.values())\n",
    "MbppEval/419": "def round_and_sum(list1):\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    return total_sum * len(list1)\n\n# Test cases\nprint(round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50]))  # Output: 243\nprint(round_and_sum([5, 2, 9, 24.3, 29]))  # Output: 345\nprint(round_and_sum([25.0, 56.7, 89.2]))  # Output: 513\n",
    "MbppEval/415": "def max_Product(arr):\n    max_pair = None\n    max_product = None\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            pair = (arr[i], arr[j])\n            product = arr[i] * arr[j]\n            if max_product is None or product > max_product:\n                max_product = product\n                max_pair = pair\n            \n    return max_pair\n",
    "MbppEval/418": "    return max_element\n",
    "MbppEval/420": "def cube_Sum(n):\n    def cube(num):\n        return num ** 3\n    \n    even_numbers = [2 * i for i in range(1, n+1)]\n    cubes = [cube(num) for num in even_numbers]\n    \n    return sum(cubes)\n",
    "MbppEval/408": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    if not nums1 or not nums2:\n        return []\n\n    pairs = combine_pairs(nums1, nums2)\n    sums = sum_pairs(pairs)\n    pairs_with_sums = store_pairs_with_sums(pairs, sums)\n\n    min_heap = []\n    for pair, total in pairs_with_sums:\n        heapq.heappush(min_heap, (-total, pair))\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n\n    k_smallest = [pair for (_, pair) in min_heap]\n\n    return k_smallest\n\ndef combine_pairs(nums1, nums2):\n    pairs = []\n    for num1 in nums1:\n        for num2 in nums2:\n            pairs.append([num1, num2])\n    return pairs\n\ndef sum_pairs(pairs):\n    return [sum(pair) for pair in pairs]\n\ndef store_pairs_with_sums(pairs, sums):\n    return [(pairs[i], sums[i]) for i in range(len(pairs))]\n",
    "MbppEval/426": "def filter_oddnumbers(nums):\n    odd_numbers = []\n    for num in nums:\n        if num % 2 != 0:\n            odd_numbers.append(num)\n    return odd_numbers\n",
    "MbppEval/424": "def extract_rear(test_tuple):\n    rear_elements = []\n    \n    for string in test_tuple:\n        rear_index_element = string[-1]\n        rear_elements.append(rear_index_element)\n    \n    return rear_elements\n",
    "MbppEval/421": "def concatenate_tuple(test_tup):\n    result = \"\"\n    \n    for i in range(len(test_tup)):\n        element = str(test_tup[i])  # Convert each element to a string\n        result += element  # Concatenate the element to the result\n        \n        if i != len(test_tup) - 1:\n            result += '-'  # Append the delimiter '-' after each element except the last element\n\n    return result\n",
    "MbppEval/425": "def count_element_in_list(list1, x): \n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n",
    "MbppEval/430": "def parabola_directrix(a, b, c): \n    directrix = -b / (2 * a)\n    return -directrix\n",
    "MbppEval/428": "def shell_sort(my_list):\n    gap = len(my_list) // 2\n    \n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_value = my_list[i]\n            position = i\n            \n            while position >= gap and my_list[position - gap] > current_value:\n                my_list[position] = my_list[position - gap]\n                position = position - gap\n            \n            my_list[position] = current_value\n            \n        gap = gap // 2\n\n    return my_list\n",
    "MbppEval/429": "def and_tuples(test_tup1, test_tup2):\n    result = []\n    \n    for x, y in zip(test_tup1, test_tup2):\n        result.append(x & y)\n    \n    return tuple(result)\n",
    "MbppEval/422": "def find_Average_Of_Cube(n):\n    if n < 1:\n        return 0\n    \n    total = 0\n    \n    for i in range(1, n+1):\n        total += i ** 3\n    \n    average = total / n\n    \n    return average\n",
    "MbppEval/432": "def median_trapezium(base1, base2, height):\n    return (base1 + base2) / 2\n",
    "MbppEval/427": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\n    Examples:\n    change_date_format(\"2026-01-02\") == '02-01-2026'\n    change_date_format(\"2020-11-13\") == '13-11-2020'\n    change_date_format(\"2021-04-26\") == '26-04-2021'\n    '''\n\n    match = re.match(r'(\\d{4})-(\\d{2})-(\\d{2})', dt)\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n\n        formatted_date = f\"{day}-{month}-{year}\"\n        return formatted_date\n",
    "MbppEval/435": "def last_Digit(n):\n    return int(str(n)[-1])\n",
    "MbppEval/431": "def common_element(list1, list2):\n    # Check if the current element of the first list exists in the second list\n    for element in list1:\n        if element in list2:\n            return True\n    \n    return False  # No common element found after iterating through all elements of the first list\n",
    "MbppEval/433": "def check_greater(arr, number):\n    max_num = max(arr)\n    \n    if max_num < number:\n        return 'Yes, the entered number is greater than those in the array'\n    else:\n        return 'No, entered number is less than those in the array'\n",
    "MbppEval/434": "import re\n\ndef text_match_one(text):\n    pattern = \"ab+\"\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
    "MbppEval/439": "def multiple_to_single(L):\n    result = ''\n    \n    for num in L:\n        result += str(num)\n    \n    single_int = int(result)\n    return single_int\n",
    "MbppEval/438": "def count_bidirectional(test_list):\n    count = 0\n    checked_pairs = set()\n    \n    for tup in test_list:\n        reverse_tup = (tup[1], tup[0])\n        \n        if tup not in checked_pairs and reverse_tup in test_list:\n            count += 1\n            checked_pairs.add(tup)\n    \n    return str(count)\n",
    "MbppEval/436": "def neg_nos(list1):\n    neg_nums = []  # Create an empty list to store negative numbers\n    \n    for num in list1:\n        if num < 0:\n            neg_nums.append(num)  # Append negative number to the list\n    \n    return neg_nums  # Return the list of negative numbers\n",
    "MbppEval/437": "def remove_odd(str1):\n    result = \"\"\n    \n    for i in range(len(str1)):\n        char = str1[i]\n        if i % 2 == 0:\n            result += char\n            \n    return result\n",
    "MbppEval/444": "def trim_tuple(test_list, K):\n    result = []\n    for tup in test_list:\n        new_tup = tup[K:]\n        result.append(new_tup)\n    return str(result)\n",
    "MbppEval/441": "def surfacearea_cube(l):\n    surface_area = 6 * l**2\n    return surface_area\n",
    "MbppEval/443": "def largest_neg(list1): \n    largest_neg_num = None\n    \n    for num in list1:\n        if num < 0:\n            if largest_neg_num is None or num > largest_neg_num:\n                largest_neg_num = num\n    \n    return largest_neg_num\n",
    "MbppEval/442": "from array import array\n\ndef positive_count(nums):\n    total_count = len(nums)\n    positive_count = sum(1 for num in nums if num > 0)\n    positive_ratio = positive_count / total_count if total_count > 0 else 0\n    return positive_ratio\n",
    "MbppEval/440": "import re\ndef find_adverb_position(text):\n    adverb_pattern = r'\\b\\w+ly\\b'  # Regular expression pattern to match adverbs ending in 'ly'\n    \n    match = re.search(adverb_pattern, text)\n    \n    if match:\n        adverb = match.group()\n        start_index = match.start()\n        end_index = match.end()\n        return (start_index, end_index, adverb)\n    \n    return None\n",
    "MbppEval/447": "def cube_nums(nums):\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes\n",
    "MbppEval/448": "perrin_numbers = [3, 0, 2]\n",
    "MbppEval/451": "import re\n\ndef remove_whitespaces(text1):\n    return re.sub(r'\\s+', '', text1)\n",
    "MbppEval/446": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    elem_counts = Counter(tup)\n    total_count = 0\n\n    for ele in lst:\n        total_count += elem_counts[ele]\n\n    return total_count\n",
    "MbppEval/452": "def loss_amount(actual_cost, sale_amount):\n    loss = actual_cost - sale_amount\n    if loss > 0:\n        return loss\n    else:\n        return 0\n",
    "MbppEval/454": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*z\\w*\\b'  # Regular expression pattern to match a word containing 'z'\n    \n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
    "MbppEval/455": "def check_monthnumb_number(monthnum2):\n    thirty_one_days_months = [1, 3, 5, 7, 8, 10, 12]\n    if monthnum2 in thirty_one_days_months:\n        return True\n    else:\n        return False\n",
    "MbppEval/453": "import math\n\ndef sumofFactors(n):\n    sum_even_factors = 0\n\n    for i in range(1, n+1):\n        if n % i == 0 and i % 2 == 0:\n            sum_even_factors += i\n        if n % i == 0 and n // i != i and (n // i) % 2 == 0:\n            sum_even_factors += n // i\n\n    return sum_even_factors\n",
    "MbppEval/458": "def rectangle_area(l, b):\n    area = l * b\n    return area\n",
    "MbppEval/456": "def reverse_string_list(stringlist):\n    reversed_strings = []\n\n    for string in stringlist:\n        reversed_string = string[::-1]\n        reversed_strings.append(reversed_string)\n    \n    return reversed_strings\n",
    "MbppEval/457": "def Find_Min(lst):\n    min_length = float('inf')\n    min_sublist = None\n    \n    for sublist in lst:\n        sublist_length = len(sublist)\n        if sublist_length < min_length:\n            min_length = sublist_length\n            min_sublist = sublist\n    \n    return min_sublist\n",
    "MbppEval/459": "import re\n\ndef remove_uppercase(str1):\n    return re.sub('[A-Z]', '', str1)\n",
    "MbppEval/450": "def extract_string(str, l):\n    result = []\n    \n    for s in str:\n        if len(s) == l:\n            result.append(s)\n    \n    return result\n",
    "MbppEval/460": "def Extract(lst):\n    return [sub_list[0] for sub_list in lst]\n",
    "MbppEval/461": "def upper_ctr(str):\n    count = 0\n    \n    for char in str:\n        if char.isupper():\n            count += 1\n    \n    return count\n",
    "MbppEval/67": "def bell_number(n):\n    bell_triangle = [[1]]\n\n    for i in range(1, n):\n        prev_row = bell_triangle[-1]\n        new_row = [prev_row[-1]]\n\n        for j in range(i):\n            new_row.append(new_row[j] + prev_row[j])\n\n        bell_triangle.append(new_row)\n\n    return bell_triangle[n - 1][0]\n",
    "MbppEval/445": "def index_multiplication(test_tup1, test_tup2):\n    # Function to perform index wise multiplication of tuple elements in the given two tuples\n    result = []\n\n    # Iterate over the indices of the tuples\n    for i in range(len(test_tup1)):\n        result.append((test_tup1[i][0] * test_tup2[i][0], test_tup1[i][1] * test_tup2[i][1]))\n\n    return tuple(result)\n",
    "MbppEval/464": "def check_value(dict, n):\n    for value in dict.values():\n        if value != n:\n            return False\n    return True\n",
    "MbppEval/465": "def drop_empty(dict1):\n    non_empty_dict = {}\n    \n    for key, value in dict1.items():\n        if value is not None:\n            non_empty_dict[key] = value\n            \n    return non_empty_dict\n",
    "MbppEval/468": "def max_product(arr):\n    arr.sort()\n    max_prod = 1\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[j] > arr[i]:\n                product = arr[i] * arr[j]\n                if product > max_prod:\n                    max_prod = product\n\n    return max_prod\n",
    "MbppEval/471": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    \n    return product\n",
    "MbppEval/472": "def check_Consecutive(l): \n    if len(l) < 2:\n        return False\n\n    for i in range(1, len(l)):\n        if l[i] != l[i-1] + 1:\n            return False\n    \n    return True\n",
    "MbppEval/470": "def add_pairwise(test_tup):\n    result = []  \n    \n    for i in range(1, len(test_tup)):\n        result.append(test_tup[i-1] + test_tup[i]) \n        \n    return tuple(result)  \n",
    "MbppEval/475": "from collections import Counter\n\ndef sort_counter(dict1):\n    counter_obj = Counter(dict1)\n    sorted_counter = sorted(counter_obj.items(), key=lambda x: x[1], reverse=True)\n    return sorted_counter\n",
    "MbppEval/476": "def big_sum(nums):\n    max_val = max(nums)\n    min_val = min(nums)\n    return max_val + min_val\n",
    "MbppEval/477": "def is_lower(string):\n    return string.lower()\n",
    "MbppEval/473": "def tuple_intersection(test_list1, test_list2):\n    intersection_set = set()\n\n    for tuple1 in test_list1:\n        for tuple2 in test_list2:\n            if set(tuple1) == set(tuple2):\n                intersection_set.add(tuple1)\n                intersection_set.add(tuple2)\n\n    return intersection_set\n",
    "MbppEval/478": "import re\n\ndef remove_lowercase(str1):\n    return re.sub('[a-z]', '', str1)\n",
    "MbppEval/474": "def replace_char(str1, ch, newch):\n    new_str = ''\n\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    \n    return new_str\n",
    "MbppEval/479": "def first_Digit(n) :\n    num_str = str(n)\n    first_char = num_str[0]\n    first_digit = int(first_char)\n    return first_digit\n",
    "MbppEval/555": "def difference(n):\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_numbers = n * (n + 1) // 2\n    result = sum_of_cubes - sum_of_numbers\n    return result\n",
    "MbppEval/554": "def Split(lst): \n    odd_numbers = []  \n    \n    for num in lst:\n        if num % 2 != 0:\n            odd_numbers.append(num)  \n    \n    return odd_numbers  \n",
    "MbppEval/557": "def toggle_string(string):\n    result = \"\"\n    \n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    \n    return result\n",
    "MbppEval/559": "def max_sub_array_sum(a, size):\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    \n    for i in range(1, size):\n        max_ending_here = max(a[i], a[i] + max_ending_here)\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far\n",
    "MbppEval/560": "def union_elements(test_tup1, test_tup2):\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    union_set = set1.union(set2)\n    \n    return tuple(sorted(union_set))\n",
    "MbppEval/558": "def digit_distance_nums(n1, n2):\n    str_n1 = str(n1)\n    str_n2 = str(n2)\n\n    if len(str_n1) < len(str_n2):\n        str_n1 = str_n1.zfill(len(str_n2))\n    elif len(str_n2) < len(str_n1):\n        str_n2 = str_n2.zfill(len(str_n1))\n\n    total_distance = 0\n    for digit1, digit2 in zip(str_n1, str_n2):\n        total_distance += abs(int(digit1) - int(digit2))\n\n    return total_distance\n\n# Testing with examples\nprint(digit_distance_nums(1, 2))      # Output: 1\nprint(digit_distance_nums(23, 56))    # Output: 6\nprint(digit_distance_nums(123, 256))  # Output: 7\n",
    "MbppEval/562": "def Find_Max_Length(lst):\n    max_length = 0\n    \n    for sublist in lst:\n        sublist_length = len(sublist)\n        \n        if sublist_length > max_length:\n            max_length = sublist_length\n            \n    return max_length\n",
    "MbppEval/563": "import re\n\ndef extract_values(text):\n    extracted_values = re.findall(r'\"(.*?)\"', text)\n    return extracted_values\n",
    "MbppEval/407": "def rearrange_bigger(n):\n    if n < 10:\n        return False\n    \n    digits = [int(d) for d in str(n)]\n\n    for i in range(len(digits)-2, -1, -1):\n        if digits[i] < digits[i+1]:\n            break\n    else:\n        return False\n\n    for j in range(len(digits)-1, i, -1):\n        if digits[j] > digits[i]:\n            break\n\n    digits[i], digits[j] = digits[j], digits[i]\n    digits[i+1:] = sorted(digits[i+1:])\n\n    return int(''.join(map(str, digits)))\n\nprint(rearrange_bigger(12))  # Output: 21\nprint(rearrange_bigger(10))  # Output: False\nprint(rearrange_bigger(102))  # Output: 120\n",
    "MbppEval/564": "def count_Pairs(arr, n): \n    count = 0\n    for i in range(n): \n        for j in range(i+1, n): \n            if arr[i] != arr[j]: \n                count += 1\n    \n    return count\n",
    "MbppEval/567": "def issort_list(list1):\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    return True\n",
    "MbppEval/569": "def sort_sublists(list1):\n    for sublist in list1:\n        sublist.sort()\n    return list1\n",
    "MbppEval/568": "def empty_list(length):\n    empty_dicts = []\n    \n    for _ in range(length):\n        empty_dicts.append({})\n\n    return empty_dicts\n",
    "MbppEval/565": "def split(word): \n    result = []  # Initialize an empty list to store characters\n    \n    for char in word: \n        result.append(char)  # Append each character to the list\n        \n    return result\n",
    "MbppEval/566": "def sum_digits(n):\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    \n    total_sum = 0\n    n_str = str(n)\n    \n    for digit in n_str:\n        total_sum += int(digit)\n        \n    return total_sum\n",
    "MbppEval/572": "def two_unique_nums(nums):\n    unique_nums = []\n    \n    for num in nums:\n        if nums.count(num) == 1:\n            unique_nums.append(num)\n    \n    return unique_nums\n",
    "MbppEval/573": "def unique_product(list_data):\n    unique_numbers = set()\n    product = 1\n    \n    for num in list_data:\n        if num not in unique_numbers:\n            unique_numbers.add(num)\n            product *= num\n            \n    return product\n",
    "MbppEval/577": "import math\n\ndef last_Digit_Factorial(n):\n    factorial_result = math.factorial(n)\n    last_digit = factorial_result % 10\n    return last_digit\n",
    "MbppEval/576": "def is_Sub_Array(A, B): \n    if len(B) > len(A):\n        return False\n    \n    for i in range(len(A) - len(B) + 1):\n        if A[i:i + len(B)] == B:\n            return True\n\n    return False\n",
    "MbppEval/578": "def interleave_lists(list1, list2, list3):\n    result = []\n    \n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n        \n    return result\n",
    "MbppEval/574": "import math\n\ndef surfacearea_cylinder(r, h):\n    lateral_area = 2 * math.pi * r * h\n    top_bottom_area = 2 * math.pi * r**2\n    total_area = lateral_area + top_bottom_area\n    return total_area\n",
    "MbppEval/579": "def find_dissimilar(test_tup1, test_tup2):\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    dissimilar_elements = set1.symmetric_difference(set2)\n    return tuple(dissimilar_elements)\n",
    "MbppEval/582": "def my_dict(dict1):\n    return not bool(dict1)\n",
    "MbppEval/581": "def surface_Area(b, s):\n    # Step 0: Calculate the perimeter of the base and the slant height\n    perimeter = 4 * b\n    slant = (b**2 + s**2)**0.5\n    \n    # Step 1: Calculate the lateral surface area\n    LSA = 0.5 * perimeter * slant\n    \n    # Step 2: Calculate the base area\n    B = b**2\n    \n    # Step 3: Calculate the total surface area\n    TSA = LSA + B\n    \n    return TSA\n",
    "MbppEval/111": "def common_in_nested_lists(nestedlist):\n    common_elements = []\n\n    if not nestedlist:\n        return common_elements\n\n    first_list = nestedlist[0]\n    \n    common_elements.extend(first_list)\n    \n    for sub_list in nestedlist[1:]:\n        common_elements = [element for element in common_elements if element in sub_list]\n\n    return common_elements\n",
    "MbppEval/583": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef catalan_number(n):\n    return factorial(2*n) // (factorial(n) * factorial(n+1))\n",
    "MbppEval/584": "import re\n\ndef find_adverbs(text):\n    adverb_pattern = r'\\b\\w+ly\\b'\n    match = re.search(adverb_pattern, text)\n    \n    if match:\n        start = match.start()\n        end = match.end()\n        adverb = match.group()\n        return f'{start}-{end}: {adverb}'\n",
    "MbppEval/586": "def split_Arr(l, n):\n    if n > len(l):\n        return \"Invalid input: n is greater than the length of the list.\"\n\n    second_part = l[n:]\n    first_part = l[:n]\n\n    return second_part + first_part\n",
    "MbppEval/587": "def list_tuple(listx):\n    tuple_result = tuple(listx)\n    return tuple_result\n",
    "MbppEval/588": "def big_diff(nums):\n    max_num = max(nums)\n    min_num = min(nums)\n    diff = max_num - min_num\n    return diff\n",
    "MbppEval/580": "def even_ele(test_tuple, even_fnc):\n    if not isinstance(test_tuple, tuple):\n        raise TypeError(\"Input should be a tuple\")\n    \n    def is_even(num):\n        try:\n            return even_fnc(num)\n        except Exception as e:\n            raise Exception(\"Error occurred while checking if the number is even: {}\".format(e))\n\n    def remove_odd_elements(tup):\n        new_tuple = ()\n        for elem in tup:\n            if isinstance(elem, tuple):\n                new_tuple += (remove_odd_elements(elem),)\n            else:\n                new_tuple += (elem,) if is_even(elem) else ()\n        return new_tuple\n\n    return remove_odd_elements(test_tuple)\n",
    "MbppEval/590": "import cmath\n\ndef polar_rect(r, theta):\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y\n",
    "MbppEval/591": "def swap_List(newList): \n    if len(newList) <= 1:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n",
    "MbppEval/592": "from math import factorial\n\ndef sum_of_product(n):\n    sum_product = 0\n    for k in range(1, n):\n        product = factorial(n) / (factorial(k) * factorial(n - k))\n        sum_product += product * factorial(k) * factorial(n - k)\n    return sum_product\n",
    "MbppEval/589": "import math\n\ndef perfect_squares(a, b):\n    perfect_squares_list = []\n    smallest_square = math.ceil(math.sqrt(a))\n    largest_square = math.floor(math.sqrt(b))\n\n    for i in range(smallest_square, largest_square + 1):\n        square = i * i\n        if a <= square <= b:\n            perfect_squares_list.append(square)\n\n    return perfect_squares_list\n",
    "MbppEval/593": "def remove_leading_zeroes(component):\n    return str(int(component))\n\ndef removezero_ip(ip):\n    components = ip.split(\".\")\n    components_no_zeroes = [remove_leading_zeroes(component) for component in components]\n    modified_ip = \".\".join(components_no_zeroes)\n    \n    return modified_ip\n",
    "MbppEval/594": "def diff_even_odd(list1):\n    first_even = None\n    first_odd = None\n\n    for num in list1:\n        if num % 2 == 0:\n            if first_even is None:\n                first_even = num\n        else:\n            if first_odd is None:\n                first_odd = num\n\n    if first_even is not None and first_odd is not None:\n        return abs(first_even - first_odd)\n    else:\n        return 0\n",
    "MbppEval/596": "import sys\n\ndef tuple_size(tuple_list):\n    total_size = sys.getsizeof(tuple_list)\n    for item in tuple_list:\n        total_size += sys.getsizeof(item)\n    return total_size\n",
    "MbppEval/597": "def find_kth(arr1, arr2, k):\n    # Merge the two sorted arrays\n    merged_arr = []\n    i = 0\n    j = 0\n    \n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            merged_arr.append(arr1[i])\n            i += 1\n        else:\n            merged_arr.append(arr2[j])\n            j += 1\n\n    # Handle remaining elements in arr1 and arr2\n    merged_arr.extend(arr1[i:])\n    merged_arr.extend(arr2[j:])\n    \n    # Return the element at index (k-1) for 0-based indexing\n    return merged_arr[k - 1]\n",
    "MbppEval/595": "def min_Swaps(str1, str2):\n    if len(str1) != len(str2):\n        return \"Not Possible\"\n\n    swaps_count = 0\n\n    for char1, char2 in zip(str1, str2):\n        if char1 != char2:\n            swaps_count += 1\n    \n    if swaps_count % 2 != 0:\n        return \"Not Possible\"\n    \n    return swaps_count\n",
    "MbppEval/600": "def is_Even(n):\n    return n % 2 == 0\n",
    "MbppEval/602": "def first_repeated_char(str1):\n    char_count = {}\n    \n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1\n\n    return \"None\"\n",
    "MbppEval/599": "def sum_average(number):\n    sum = 0\n    \n    for i in range(1, number+1):\n        sum += i\n        \n    average = sum / number\n    \n    return sum, average\n\n# Test cases\nprint(sum_average(10))  # Expected output: (55, 5.5)\nprint(sum_average(15))  # Expected output: (120, 8.0)\nprint(sum_average(20))  # Expected output: (210, 10.5)\n",
    "MbppEval/604": "def reverse_words(s):\n    words = s.split()\n    return \" \".join(reversed(words))\n",
    "MbppEval/598": "def armstrong_number(number):\n    sum_of_cubes = 0\n    number_str = str(number)\n    \n    for digit_str in number_str:\n        digit = int(digit_str)\n        cube = digit ** 3\n        sum_of_cubes += cube\n\n    return sum_of_cubes == number\n",
    "MbppEval/603": "import math\n\ndef is_ludic(num):\n    if num == 1:\n        return True\n    if num % 2 == 0:\n        return True\n    \n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    \n    return True\n\ndef get_ludic(n):\n    ludic_numbers = []\n    \n    for num in range(1, n+1):\n        if is_ludic(num):\n            ludic_numbers.append(num)\n    \n    return ludic_numbers\n",
    "MbppEval/606": "import math\n\ndef radian_degree(degree):\n    radians = degree * (math.pi / 180)\n    return radians\n",
    "MbppEval/463": "def max_subarray_product(arr):\n    max_product = arr[0]\n    min_product = arr[0]\n    result = max_product\n\n    for i in range(1, len(arr)):\n        prev_max = max_product\n        max_product = max(arr[i], arr[i] * max_product, arr[i] * min_product)\n        min_product = min(arr[i], arr[i] * prev_max, arr[i] * min_product)\n\n        result = max(result, max_product)\n\n    return result\n",
    "MbppEval/605": "import math\n\ndef prime_num(num):\n    if num < 2:\n        return False\n    \n    if num == 2:\n        return True\n    \n    if num % 2 == 0:\n        return False\n    \n    for i in range(3, int(math.sqrt(num)) + 1, 2):\n        if num % i == 0:\n            return False\n    \n    return True\n",
    "MbppEval/610": "def remove_kth_element(list1, k):\n    new_list = []\n    for i in range(len(list1)):\n        if i != k-1:\n            new_list.append(list1[i])\n    return new_list\n",
    "MbppEval/612": "def merge(lst):  \n    result1 = []\n    result2 = []\n    \n    for sublist in lst:\n        result1.append(sublist[0])\n        result2.append(sublist[1])\n        \n    return [result1, result2]\n",
    "MbppEval/608": "def bell_Number(n):\n    import math\n    bell_triangle = [[0 for _ in range(n)] for _ in range(n)]\n    bell_triangle[0][0] = 1\n    for i in range(1, n):\n        bell_triangle[i][0] = bell_triangle[i-1][i-1]\n        for j in range(1, i+1):\n            bell_triangle[i][j] = bell_triangle[i][j-1] + bell_triangle[i-1][j-1]\n    return bell_triangle[n-1][-1]\n",
    "MbppEval/614": "def cummulative_sum(test_list):\n    total_sum = 0\n\n    for tup in test_list:\n        sum_tuple = sum(tup)\n        total_sum += sum_tuple\n\n    return total_sum\n",
    "MbppEval/607": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n\n    Examples:\n    find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\n    find_literals('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)\n    find_literals('Hardest choices required strongest will', 'will') == ('will', 35, 39)\n    '''\n    match = re.search(pattern, text)\n    if match:\n        matched_substr = match.group()\n        start_index = match.start()\n        end_index = match.end() - 1  # Adjust end index to correctly represent the matched substring\n        return matched_substr, start_index, end_index\n    else:\n        return None\n",
    "MbppEval/615": "def average_tuple(nums):\n    averages = []\n    \n    for num_tuple in nums:\n        sum_tuple = sum(num_tuple)\n        avg_tuple = sum_tuple / len(num_tuple)\n        averages.append(avg_tuple)\n        \n    return averages\n",
    "MbppEval/617": "import math\n\ndef min_Jumps(steps, d): \n    if d == 0:\n        return 0\n    \n    distance = math.sqrt(d**2)\n    jumps = distance / steps\n    return round(jumps, 1)\n\n# Testing the function with given examples\nprint(min_Jumps(3, 4, 11))     # Expected output: 3.7\nprint(min_Jumps(3, 4, 0))      # Expected output: 0\nprint(min_Jumps(11, 14, 11))    # Expected output: 0.8\n",
    "MbppEval/618": "def div_list(nums1, nums2):\n    result = []\n    \n    for num1, num2 in zip(nums1, nums2):\n        division_result = num1 / num2\n        result.append(division_result)\n    \n    return result\n",
    "MbppEval/616": "def tuple_modulo(test_tup1, test_tup2):\n    if len(test_tup1) != len(test_tup2):\n        return \"Error: Tuples must be of the same length.\"\n    \n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    \n    return tuple(result)\n",
    "MbppEval/623": "def nth_nums(nums, n):\n    result = []\n    \n    for num in nums:\n        result.append(num**n)\n    \n    return result\n",
    "MbppEval/620": "def largest_subset(a):\n    max_subset_size = 0\n    \n    for num in a:\n        subset_size = 0\n        for other_num in a:\n            if num != other_num and num % other_num == 0:\n                subset_size += 1\n        \n        max_subset_size = max(max_subset_size, subset_size)\n    \n    return max_subset_size\n",
    "MbppEval/624": "def is_upper(string):\n    return string.upper()\n",
    "MbppEval/619": "def move_num(test_str):\n    result_str = \"\"\n    non_numeric = \"\"\n    numeric = \"\"\n\n    for char in test_str:\n        if char.isdigit():\n            numeric += char\n        else:\n            non_numeric += char\n    \n    result_str = non_numeric + numeric\n\n    return result_str\n",
    "MbppEval/625": "def swap_List(newList):\n    if len(newList) < 2:\n        return newList\n    \n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList\n",
    "MbppEval/626": "import math\n\ndef triangle_area(r):\n    if r < 0:\n        return -1\n    \n    side_length = 2 * r  # Side length of the equilateral triangle inscribed in the semicircle\n    area = (math.sqrt(3) / 4) * side_length**2  # Area of the equilateral triangle\n    \n    return area\n",
    "MbppEval/627": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i] != i:\n            return i\n    \n    return end + 1\n",
    "MbppEval/226": "def odd_values_string(str):\n    result = \"\"\n    \n    for index, char in enumerate(str):\n        if index % 2 != 0:  # Check if the index is odd\n            result += char\n    \n    return result\n",
    "MbppEval/628": "def replace_spaces(string):\n    result = ''\n    for char in string:\n        if char == ' ':\n            result += '%20'\n        else:\n            result += char\n    return result\n",
    "MbppEval/629": "def Split(lst): \n    even_numbers = []  # Step 1: Create an empty list to store even numbers\n    \n    for num in lst:  # Step 2: Iterate through the input list\n        if num % 2 == 0:  # Step 3.1: Check if the number is even\n            even_numbers.append(num)  # Step 3.2: Append even numbers to the list\n\n    return even_numbers  # Step 4: Return the list of even numbers\n",
    "MbppEval/630": "def adjac(ele, sub=[]):\n    x, y = ele  # Step 1: Get the x and y coordinates from the given element tuple\n    adjacent_coords = [(x+i, y+j) for i in range(-1, 2) for j in range(-1, 2)]  # Step 2: Generate adjacent coordinates around the given coordinate\n    adjacent_coords.remove(ele)  # Step 3: Exclude the current element from the adjacent coordinates\n    adjacent_coords = [list(coord) for coord in adjacent_coords]  # Step 4: Convert adjacent coordinates to list of lists\n    return adjacent_coords\n",
    "MbppEval/12": "def sort_matrix(M):\n    row_sums = [sum(row) for row in M]\n    rows_dict = dict(zip(row_sums, M))\n    \n    sorted_rows = dict(sorted(rows_dict.items(), key=lambda x: x[0]))\n    \n    sorted_matrix = list(sorted_rows.values())\n    return sorted_matrix\n",
    "MbppEval/633": "def pair_xor_Sum(arr, n):\n    xor_sum = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n            \n    return xor_sum\n",
    "MbppEval/632": "def move_zero(num_list):\n    new_list = []\n    \n    for num in num_list:\n        if num != 0:\n            new_list.append(num)\n    \n    zero_count = num_list.count(0)\n    \n    new_list.extend([0]*zero_count)\n    \n    return new_list\n",
    "MbppEval/635": "import heapq as hq\n\ndef heap_sort(iterable):\n    sorted_list = []\n    heap = list(iterable)\n    hq.heapify(heap)\n\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n\n    return sorted_list\n",
    "MbppEval/637": "def noprofit_noloss(actual_cost, sale_amount):\n    difference = sale_amount - actual_cost\n    return difference == 0\n",
    "MbppEval/641": "def is_nonagonal(n):\n    return n * (7 * n - 5) // 2\n\n# Testing the function with the examples provided\nprint(is_nonagonal(10))  # Output should be 325\nprint(is_nonagonal(15))  # Output should be 750\nprint(is_nonagonal(18))  # Output should be 1089\n",
    "MbppEval/638": "import math\n\ndef wind_chill(v, t):\n    # Step 1: Convert wind speed from km/h to m/s\n    v_ms = v * 1000 / 3600  # Convert km/h to m/s\n    \n    # Step 2: Compute the wind chill index\n    wind_chill_index = round(13.12 + 0.6215 * t - 11.37 * (v_ms**0.16) + 0.3965 * t * (v_ms**0.16))\n    \n    # Step 3: Return the rounded wind chill index\n    return wind_chill_index\n",
    "MbppEval/640": "import re\n\ndef remove_parenthesis(items):\n    # Remove the text inside parentheses from each item in the input list\n    pattern = r\"\\(.*?\\)\"\n    modified_items = tuple(re.sub(pattern, \"\", item) for item in items)\n    \n    return modified_items\n",
    "MbppEval/720": "    return new_tuple\n",
    "MbppEval/644": "def reverse_Array_Upto_K(input, k):\n    reversed_sublist = input[:k][::-1]\n    remaining_sublist = input[k:]\n    return reversed_sublist + remaining_sublist\n",
    "MbppEval/643": "import re\n\ndef text_match_wordz_middle(text):\n    matches = re.findall(r'\\bz\\w*z\\b', text)\n    if matches:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
    "MbppEval/722": "def filter_data(students, h, w):\n    filtered_students = {}\n    for student, data in students.items():\n        if data[0] > h and data[1] > w:\n            filtered_students[student] = data\n    return filtered_students\n",
    "MbppEval/639": "def remove_lowercase_names(names):\n    return [name for name in names if name[0].isupper()]\n\ndef calculate_total_length(names):\n    return sum(len(name) for name in names)\n\ndef sample_nam(sample_names):\n    filtered_names = remove_lowercase_names(sample_names)\n    total_length = calculate_total_length(filtered_names)\n    return total_length\n",
    "MbppEval/724": "def power_base_sum(base, power):\n    result = base ** power\n    result_str = str(result)\n    \n    digit_sum = 0\n    for digit in result_str:\n        if digit.isdigit():\n            digit_sum += int(digit)\n    \n    return digit_sum\n",
    "MbppEval/725": "import re\n\ndef extract_quotation(text1):\n    return re.findall(r'\"(.*?)\"', text1)\n",
    "MbppEval/723": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    if len(nums1) != len(nums2):\n        return \"Error: The lists must have the same length.\"\n    \n    count = 0\n    \n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    \n    return count\n",
    "MbppEval/631": "def replace_spaces(text):\n    result = \"\"\n    \n    for char in text:\n        if char == ' ':\n            result += '_'\n        elif char == '_':\n            result += ' '\n        else:\n            result += char\n    \n    return result\n",
    "MbppEval/731": "import math\n\ndef lateralsurface_cone(r, h):\n    l = math.sqrt(r**2 + h**2)\n    lateral_surface_area = math.pi * r * l\n    return lateral_surface_area\n",
    "MbppEval/728": "def sum_list(lst1, lst2):\n    return [a + b for a, b in zip(lst1, lst2)]\n",
    "MbppEval/730": "def consecutive_duplicates(nums):\n    result = []\n    \n    for i, num in enumerate(nums):\n        if i == len(nums) - 1 or num != nums[i + 1]:\n            result.append(num)\n            \n    return result\n",
    "MbppEval/726": "def multiply_elements(test_tup):\n    result = []\n    for i in range(len(test_tup) - 1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)\n",
    "MbppEval/732": "def replace_specialchar(text):\n    modified_text = text.replace(' ', ':').replace(',', ':').replace('.', ':')\n    return modified_text\n",
    "MbppEval/733": "def find_first_occurrence(A, x):\n    first_occurrence_index = -1\n    \n    for i in range(len(A)):\n        if A[i] == x:\n            first_occurrence_index = i\n            break\n            \n    return first_occurrence_index\n",
    "MbppEval/736": "import bisect\n\ndef left_insertion(a, x):\n    return bisect.bisect_left(a, x)\n",
    "MbppEval/735": "def toggle_middle_bits(n):\n    binary_num = bin(n)[2:]\n    toggled_bits = ['0', *('1' if bit == '0' else '0' for bit in binary_num[1:-1]), '0']\n    return int(''.join(toggled_bits), 2)\n",
    "MbppEval/734": "from itertools import chain, combinations\n\ndef subsets(arr):\n    return chain.from_iterable(combinations(arr, r) for r in range(len(arr)+1))\n\ndef sum_Of_Subarray_Prod(arr):\n    total_sum = sum([reduce(lambda x, y: x * y, sub, 1) for sub in subsets(arr)])\n    return total_sum\n",
    "MbppEval/738": "def geometric_sum(n):\n    '''\n    Calculate the geometric sum of n-1 terms.\n    '''\n    total_sum = 0\n    for i in range(n-1):\n        total_sum += 1/(2**i)\n    return total_sum\n\n# Testing the function\nprint(geometric_sum(7))  # Expected output: 1.9921875\nprint(geometric_sum(4))  # Expected output: 1.9375\nprint(geometric_sum(8))  # Expected output: 1.99609375\n",
    "MbppEval/740": "def tuple_to_dict(test_tup):\n    result_dict = {}\n    \n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        if i + 1 < len(test_tup):\n            value = test_tup[i + 1]\n            result_dict[key] = value\n    \n    return result_dict\n",
    "MbppEval/737": "import re \n\ndef check_str(string): \n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    \n    if re.match(regex, string):\n        return 'Valid'\n    else:\n        return 'Invalid'\n",
    "MbppEval/743": "return lst_copy\n",
    "MbppEval/741": "def all_Characters_Same(s):\n    if len(set(s)) == 1:\n        return True\n    else:\n        first_char = s[0]\n        for char in s[1:]:\n            if char != first_char:\n                return False\n        return True\n",
    "MbppEval/742": "import math\n\ndef area_tetrahedron(side):\n    height = (math.sqrt(6) / 3) * side\n    area = math.sqrt(3) * side**2 / 4\n    return area\n",
    "MbppEval/739": "import math\n\ndef find_Index(n):\n    index = 1\n    num_digits = 0\n    i = 2\n\n    while True:\n        # Calculate the next triangular number\n        triangular_num = i * (i + 1) // 2\n        i += 1\n\n        # Check the number of digits in the triangular number\n        num_digits = int(math.log10(triangular_num)) + 1\n\n        if num_digits == n:\n            return index\n\n        index += 1\n",
    "MbppEval/721": "def maxAverageOfPath(cost):\n    def isValid(row, col, size):\n        return 0 <= row < size and 0 <= col < size\n\n    N = len(cost)\n\n    dp = [[0] * N for _ in range(N)]\n\n    dp[0][0] = cost[0][0]\n\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                continue\n            if isValid(i - 1, j, N):\n                from_above = dp[i - 1][j]\n            else:\n                from_above = float('-inf')\n                \n            if isValid(i, j - 1, N):\n                from_left = dp[i][j - 1]\n            else:\n                from_left = float('-inf')\n                \n            dp[i][j] = max(from_above, from_left) + cost[i][j]\n\n    return dp[N-1][N-1] / (2*N-1)\n",
    "MbppEval/746": "import math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    else:\n        sector_area = (a / 360) * math.pi * (r ** 2)\n        return sector_area\n",
    "MbppEval/744": "def check_none(test_tup):\n    for element in test_tup:\n        if element is None:\n            return True\n    return False\n",
    "MbppEval/745": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        num_str = str(num)\n        divisible_by_all_digits = all(num % int(digit) == 0 for digit in num_str if int(digit) != 0)\n        if divisible_by_all_digits:\n            result.append(num)\n    return result\n",
    "MbppEval/750": "def add_tuple(test_list, test_tup):\n    new_list = list(test_list)\n    new_list += list(test_tup)\n    return new_list\n",
    "MbppEval/749": "def sort_numeric_strings(nums_str):\n    nums_int = [int(num) for num in nums_str]\n    nums_sorted = sorted(nums_int)\n    return nums_sorted\n",
    "MbppEval/752": "def jacobsthal_num(n): \n    if n <= 0:\n        return None\n        \n    a, b = 0, 1\n    \n    for _ in range(1, n):\n        jacobsthal = b + 2*a\n        a, b = b, jacobsthal\n        \n    return jacobsthal\n",
    "MbppEval/748": "import re\n\ndef capital_words_spaces(str1):\n    # Initializing an empty list to store words\n    words = []\n    \n    # Starting with an empty string 'current_word'\n    current_word = \"\"\n    \n    # Step 2: Iterate over each character in the input string\n    for char in str1:\n        # Step 3: Check if the current character is uppercase\n        if char.isupper():\n            # Step 4: Add the current_word to the list and start a new current_word\n            if current_word:\n                words.append(current_word)\n            current_word = char\n        else:\n            current_word += char  # Append the character to the current_word\n\n    # Append the last current_word to the list\n    words.append(current_word)\n\n    return ' '.join(words)\n",
    "MbppEval/753": "def min_k(test_list, K):\n    copied_list = test_list[:]\n    copied_list.sort(key=lambda x: x[1])\n    return copied_list[:K] if K <= len(copied_list) else copied_list\n",
    "MbppEval/754": "def extract_index_list(l1, l2, l3):\n    result = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            result.append(l1[i])\n    return result\n",
    "MbppEval/751": "def check_min_heap_helper(arr, i):\n    left_child_index = 2*i + 1\n    right_child_index = 2*i + 2\n    \n    if left_child_index < len(arr) and not check_min_heap_helper(arr, left_child_index):\n        return False\n    \n    if right_child_index < len(arr) and not check_min_heap_helper(arr, right_child_index):\n        return False\n    \n    if left_child_index < len(arr) and arr[left_child_index] < arr[i]:\n        return False\n    \n    if right_child_index < len(arr) and arr[right_child_index] < arr[i]:\n        return False\n    \n    return True\n",
    "MbppEval/756": "import re\n\ndef text_match_zero_one(text):\n    pattern = 'ab+'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
    "MbppEval/755": "def second_smallest(numbers):\n    unique_numbers = list(set(numbers))\n    sorted_numbers = sorted(unique_numbers)\n    \n    if len(sorted_numbers) < 2:\n        return None\n    return sorted_numbers[1]\n",
    "MbppEval/80": "def tetrahedral_number(n):\n    tetrahedral_num = n * (n + 1) * (n + 2) / 6\n    return float(tetrahedral_num)\n",
    "MbppEval/760": "def unique_Element(arr):\n    distinct_elements = set(arr)\n    if len(distinct_elements) == 1:\n        return 'YES'\n    else:\n        return 'NO'\n",
    "MbppEval/757": "def count_reverse_pairs(test_list):\n    reverse_pairs_count = 0\n    \n    for word in test_list:\n        reverse_word = word[::-1]\n        if reverse_word != word and reverse_word in test_list:\n            reverse_pairs_count += 1\n    \n    return str(reverse_pairs_count)\n",
    "MbppEval/759": "def is_decimal(num):\n    try:\n        decimal_num = float(num)\n        whole_part, decimal_part = str(decimal_num).split('.')\n        \n        if len(decimal_part) == 2:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False\n",
    "MbppEval/762": "def check_monthnumber_number(monthnum):\n    thirty_day_months = [4, 6, 9, 11]  # April, June, September, and November have 30 days\n    \n    return monthnum in thirty_day_months\n\n# Testing the function\nprint(check_monthnumber_number(6))  # Expected output: True\nprint(check_monthnumber_number(2))  # Expected output: False\nprint(check_monthnumber_number(12))  # Expected output: False\n",
    "MbppEval/764": "def number_ctr(str):\n    digit_count = 0\n    for char in str:\n        if char.isdigit():\n            digit_count += 1\n    return digit_count\n",
    "MbppEval/766": "return pairs\n",
    "MbppEval/763": "def find_min_diff(arr, n): \n    arr.sort()  # Step 1: Sorting the array in non-decreasing order\n    \n    min_diff = float('inf')  # Step 2: Initializing min_diff as a large value\n    \n    # Step 3: Calculating and updating min_diff\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff\n",
    "MbppEval/767": "def get_pairs_count(arr, sum):\n    count = 0\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    \n    return count\n",
    "MbppEval/769": "def Diff(li1, li2):\n    difference = []\n    \n    for ele in li1:\n        if ele not in li2:\n            difference.append(ele)\n    \n    return difference\n",
    "MbppEval/765": "import math\n\ndef is_polite(n):\n    k = int(math.log(n, 2))  # Step 0: Find the highest power of 2 that is less than or equal to n\n    \n    segment_size = 2**k  # Step 1: Calculate the current segment size\n    \n    offset = n - 2**k  # Step 3: Calculate the offset within the current segment\n    \n    max_distance = 2**(k-1)  # Step 4: Determine the maximum distance between polite numbers\n    \n    bottom_boundary = 2**k + 2**(k-1)  # Step 5: Calculate the bottom boundary of the current segment\n    \n    candidate = bottom_boundary + offset  # Step 6: Calculate the candidate polite number\n    \n    if candidate > n:  # Step 7: Check if the candidate is greater than n\n        return candidate - 2**(k-1)  # Step 8: Return the correct polite number\n    else:\n        return candidate\n",
    "MbppEval/771": "",
    "MbppEval/772": "def remove_length(test_str, K):\n    words = test_str.split()\n    filtered_words = [word for word in words if len(word) != K]\n    new_str = \" \".join(filtered_words)\n    return new_str\n",
    "MbppEval/770": "def odd_num_sum(n):\n    sum_odd = 0\n\n    for i in range(1, 2*n, 2):  \n        sum_odd += i ** 4\n\n    return sum_odd\n",
    "MbppEval/776": "def count_vowels(test_str):\n    count = 0\n    vowels = set(\"aeiou\")\n\n    for i in range(1, len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i-1] in vowels and test_str[i+1] in vowels:\n            count += 1\n\n    return count\n",
    "MbppEval/775": "def odd_position(nums):\n    result = True\n    \n    for i in range(1, len(nums), 2):  # Loop starts from index 1 with a step of 2\n        if nums[i] % 2 == 0:\n            result = False\n            break\n    \n    return result\n",
    "MbppEval/758": "def unique_sublists(list1):\n    sublist_count = {}\n    \n    for sublist in list1:\n        tuple_sublist = tuple(sublist)\n        \n        if tuple_sublist in sublist_count:\n            sublist_count[tuple_sublist] += 1\n        else:\n            sublist_count[tuple_sublist] = 1\n            \n    return sublist_count\n",
    "MbppEval/779": "",
    "MbppEval/778": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    packed_duplicates = []\n    \n    for key, group in groupby(list1):\n        group_list = list(group)\n        \n        if len(group_list) > 1:\n            packed_duplicates.append(group_list)\n        \n    return packed_duplicates\n",
    "MbppEval/777": "def find_sum(arr): \n    seen = set()\n    sum = 0\n\n    for num in arr:\n        if num not in seen:\n            sum += num\n            seen.add(num)\n\n    return sum\n",
    "MbppEval/782": "def odd_length_sum(arr):\n    total_sum = 0\n    for start in range(len(arr)):\n        for end in range(start, len(arr)):\n            subarray = arr[start:end+1]\n            if len(subarray) % 2 != 0:\n                total_sum += sum(subarray)\n    return total_sum\n",
    "MbppEval/783": "import colorsys\n\ndef rgb_to_hsv(r, g, b):\n    r_norm = r / 255\n    g_norm = g / 255\n    b_norm = b / 255\n    \n    h, s, v = colorsys.rgb_to_hsv(r_norm, g_norm, b_norm)\n    \n    h = h * 360\n    s = s * 100\n    v = v * 100\n    \n    return h, s, v\n",
    "MbppEval/784": "def mul_even_odd(list1):\n    even_num = None\n    odd_num = None\n\n    for num in list1:\n        if num % 2 == 0 and even_num is None:\n            even_num = num\n        elif num % 2 != 0 and odd_num is None:\n            odd_num = num\n        if even_num is not None and odd_num is not None:\n            break\n\n    return even_num * odd_num\n",
    "MbppEval/11": "def remove_Occ(s, ch):\n    first_occurrence = s.find(ch)\n    if first_occurrence == -1:\n        return s\n\n    last_occurrence = s.rfind(ch)\n    if first_occurrence == last_occurrence:\n        return s.replace(ch, '', 1)\n\n    modified_string = s[:first_occurrence] + s[first_occurrence + 1:last_occurrence] + s[last_occurrence + 1:]\n    return modified_string\n",
    "MbppEval/780": "from itertools import combinations\n\ndef find_combinations(test_list):\n    sums_list = []\n    for tpl in test_list:\n        for comb in combinations(tpl, 2):\n            sums_list.append((sum(comb),))\n    \n    return sums_list\n",
    "MbppEval/787": "import re\n\ndef text_match_three(text):\n    ''' text_match_three takes in a string and returns a tuple based on if the pattern 'ab{3}' is found '''\n    match = re.search(r'ab{3}', text)\n    if match:\n        return ('Found a match!')\n    else:\n        return ('Not matched!')\n",
    "MbppEval/786": "import bisect\n\ndef right_insertion(a, x):\n    return bisect.bisect_right(a, x)\n",
    "MbppEval/788": "def new_tuple(test_list, test_str):\n    return tuple(test_list) + (test_str,)\n",
    "MbppEval/781": "import math \n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 2\n            \n    if n == int(math.sqrt(n)) ** 2:  # Check if n is a perfect square\n        count -= 1\n        \n    if count % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n",
    "MbppEval/785": "def tuple_str_int(test_str):\n    test_str = test_str[1:-1]  # Remove the leading and trailing parentheses\n    num_strings = test_str.split(',')\n    num_ints = [int(num) for num in num_strings]\n    int_tuple = tuple(num_ints)\n    return int_tuple\n",
    "MbppEval/794": "import re\n\ndef text_starta_endb(text):\n    match = re.search(r'a.*b', text)\n    if match:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
    "MbppEval/791": "def remove_nested(test_tup):\n    non_nested_elements = []\n    \n    for elem in test_tup:\n        if not isinstance(elem, tuple):\n            non_nested_elements.append(elem)\n    \n    return tuple(non_nested_elements)\n",
    "MbppEval/792": "def count_list(input_list): \n    count = 0\n    for element in input_list:\n        if isinstance(element, list):\n            count += 1\n    return count\n",
    "MbppEval/798": "def _sum(arr):  \n    total_sum = 0\n    for num in arr:\n        total_sum += num\n    return total_sum\n",
    "MbppEval/796": "def return_sum(dict):\n    total_sum = 0\n    \n    for value in dict.values():\n        total_sum += value\n    \n    return total_sum\n",
    "MbppEval/797": "def sum_in_Range(n, m):\n    sum_odd = 0\n    for num in range(n, m + 1):\n        if num % 2 != 0:  # Check if the number is odd\n            sum_odd += num\n    return sum_odd\n",
    "MbppEval/790": "def even_position(nums):\n    for index in range(0, len(nums), 2):\n        num = nums[index]\n        if index % 2 == 0:\n            if num % 2 != 0:\n                return False\n    return True\n",
    "MbppEval/800": "import re\n\ndef remove_all_spaces(text):\n    return re.sub(r'\\s+', '', text)\n",
    "MbppEval/801": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y == z:\n        count = 3\n    elif x == y or y == z or x == z:\n        count = 2\n    else:\n        count = 0\n    return count\n",
    "MbppEval/793": "def last(arr, x):\n    last_pos = -1\n    \n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] == x:\n            last_pos = i\n            break\n\n    return last_pos\n",
    "MbppEval/803": "import math\n\ndef is_perfect_square(n):\n    if n < 0:\n        return False\n    \n    sqrt_n = math.isqrt(n)\n    rounded_sqrt_n = round(sqrt_n)\n    \n    return rounded_sqrt_n ** 2 == n\n",
    "MbppEval/802": "def count_rotation(arr):\n    min_element = float('inf')\n    rotation_count = 0\n\n    for i, num in enumerate(arr):\n        if num < min_element:\n            min_element = num\n            rotation_count = i\n\n    return rotation_count\n",
    "MbppEval/807": "def first_odd(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return num\n",
    "MbppEval/804": "def is_product_even(arr): \n    product = 1\n    \n    for num in arr:\n        product *= num\n    \n    return product % 2 == 0\n",
    "MbppEval/808": "def check_K(test_tup, K):\n    return K in test_tup\n\n# Test the function with examples\nprint(check_K((10, 4, 5, 6, 8), 6))  # Expected output: True\nprint(check_K((1, 2, 3, 4, 5, 6), 7))  # Expected output: False\nprint(check_K((7, 8, 9, 44, 11, 12), 11))  # Expected output: True\n",
    "MbppEval/805": "def max_sum_list(lists):\n    max_sum_list = None\n    max_sum = float('-inf')\n    \n    # Step 3, 4, 5\n    for lst in lists:\n        total_sum = sum(lst)\n        if total_sum > max_sum:\n            max_sum = total_sum\n            max_sum_list = lst\n\n    return max_sum_list\n",
    "MbppEval/806": "def max_run_uppercase(test_str):\n    max_run = 0\n    current_run = 0\n    \n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    \n    return max_run\n",
    "MbppEval/799": "def left_rotate(n, d):\n    bin_str = bin(n)[2:].zfill(32)\n    rotated_bin_str = bin_str[d:] + bin_str[:d]\n    rotated_num = int(rotated_bin_str, 2)\n    \n    return rotated_num\n",
    "MbppEval/773": "import re\n\ndef occurrence_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    \n    Args:\n    text (str): The input text to search for the pattern.\n    pattern (str): The substring pattern to find in the text.\n    \n    Returns:\n    tuple: If the pattern is found, return the pattern, start index, and end index of the first occurrence. Otherwise, return None.\n    '''\n    match = re.search(pattern, text)\n    \n    if match:\n        return match.group(0), match.start(), match.end()\n    else:\n        return None\n",
    "MbppEval/809": "def check_smaller(test_tup1, test_tup2):\n    for i in range(len(test_tup1)):\n        elem1 = test_tup1[i]\n        elem2 = test_tup2[i]\n        \n        if elem2 >= elem1:\n            return False\n            \n    return True\n",
    "MbppEval/747": "def lcs_of_three(X, Y, Z): \n    m, n, o = len(X), len(Y), len(Z)\n    \n    lcs = [[[0 for _ in range(o + 1)] for _ in range(n + 1)] for _ in range(m + 1)]\n    \n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, o + 1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n                else:\n                    lcs[i][j][k] = max(lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1])\n    \n    return lcs[m][n][o]\n",
    "MbppEval/462": "import itertools\n\ndef combinations_list(list1):\n    combinations = []\n\n    for r in range(len(list1) + 1):\n        for combination in itertools.combinations(list1, r):\n            combinations.append(list(combination))\n\n    return combinations\n",
    "MbppEval/20": "def is_woodall(x):\n    if x <= 1:\n        return False\n    \n    woodall_number = 1\n    \n    while woodall_number <= x:\n        woodall_value = woodall_number * (2 ** woodall_number - 1)\n        \n        if woodall_value == x:\n            return True\n        \n        woodall_number += 1\n    \n    return False\n",
    "MbppEval/301": "def dict_depth(d):\n    def depth_helper(d, depth):\n        if not isinstance(d, dict):\n            return depth\n        return max(depth_helper(val, depth + 1) for val in d.values())\n\n    if not isinstance(d, dict):\n        return \"Input is not a dictionary\"\n\n    if not d:\n        return 0\n\n    max_depth = 1\n    for val in d.values():\n        if isinstance(val, dict):\n            val_depth = depth_helper(val, 2)\n            max_depth = max(max_depth, val_depth)\n\n    return max_depth\n",
    "MbppEval/622": "def merge_sorted_lists(arr1, arr2):\n    merged = []\n    \n    i, j = 0, 0\n    \n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            merged.append(arr1[i])\n            i += 1\n        else:\n            merged.append(arr2[j])\n            j += 1\n    \n    while i < len(arr1):\n        merged.append(arr1[i])\n        i += 1\n    \n    while j < len(arr2):\n        merged.append(arr2[j])\n        j += 1\n    \n    return merged\n\ndef get_median(arr1, arr2, n):\n    merged_list = merge_sorted_lists(arr1, arr2)\n    middle_index = n // 2 if n % 2 != 0 else (n // 2) - 1\n\n    if n % 2 != 0:\n        return float(merged_list[middle_index])\n    else:\n        return (merged_list[middle_index] + merged_list[middle_index - 1]) / 2\n\n# Test the get_median function\narr1 = [3, 6, 14, 23, 36, 42]\narr2 = [2, 18, 27, 39, 49, 55]\nmedian = get_median(arr1, arr2, 6)\nprint(median)\n",
    "MbppEval/556": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            xor_value = A[i] ^ A[j]\n            if xor_value & 1 == 1:\n                count += 1\n    return count\n",
    "MbppEval/611": "def max_of_nth(test_list, N):\n    if not test_list:  # Step 1\n        return None\n    \n    if N < 0 or N >= len(test_list[0]):  # Step 2\n        return None\n    \n    column_values = [row[N] for row in test_list]  # Step 3\n    \n    max_value = max(column_values)  # Step 4\n    \n    return max_value  # Step 5\n",
    "MbppEval/145": "def max_Abs_Diff(arr):\n    return abs(max(arr) - min(arr))\n",
    "MbppEval/2": "def similar_elements(test_tup1, test_tup2):\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    shared_elements = set1.intersection(set2)\n    \n    return tuple(shared_elements)\n",
    "MbppEval/91": "def find_substring(str1, sub_str):\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False\n",
    "MbppEval/142": "def count_samepair(list1, list2, list3):\n    count = 0\n    \n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    \n    return count\n",
    "MbppEval/256": "def count_Primes_nums(n):\n    count = 0\n    for num in range(2, n):\n        if is_prime(num):\n            count += 1\n    return count\n",
    "MbppEval/266": "def lateralsurface_cube(l):\n    if l <= 0:\n        raise ValueError(\"Side length of the cube must be a positive number\")\n    \n    lateral_surface_area = 4 * l * l\n    return lateral_surface_area\n",
    "MbppEval/585": "import heapq\n\ndef expensive_items(items, n):\n    heap = []\n    \n    for item in items:\n        heapq.heappush(heap, (-item['price'], item))\n        if len(heap) > n:\n            heapq.heappop(heap)\n    \n    result = [heapq.heappop(heap)[1] for _ in range(n)][::-1]  # Extract items and sort by price in descending order\n    \n    return result\n"
}