{
    "MbppEval/2": [
        "def similar_elements(test_tup1, test_tup2):\n    common_elements = set()\n    \n    for element in test_tup1:\n        if element in test_tup2:\n            common_elements.add(element)\n    \n    return tuple(common_elements)\n",
        "def similar_elements(test_tup1, test_tup2):\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    shared_elements = set1.intersection(set2)\n    \n    return tuple(shared_elements)\n",
        "def similar_elements(test_tup1, test_tup2):\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    shared_elements = set1.intersection(set2)\n\n    return tuple(shared_elements)\n",
        "def similar_elements(test_tup1, test_tup2):\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    shared_elements = tuple(set1 & set2)\n    return shared_elements\n",
        "def similar_elements(test_tup1, test_tup2):\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    shared_elements = set1.intersection(set2)\n    result = tuple(shared_elements)\n    \n    return result\n"
    ],
    "MbppEval/3": [
        "import math\n\ndef is_not_prime(n):\n    if n < 2:\n        return True\n    if n == 2:\n        return False\n    if n > 2:\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return True\n    return False\n",
        "import math\n\ndef is_not_prime(n):\n    if n < 2:\n        return True\n    \n    if n == 2:\n        return False\n    \n    sqrt_n = math.isqrt(n)  # Calculate the square root of n\n\n    for i in range(2, sqrt_n + 1):\n        if n % i == 0:\n            return True  # n is not a prime number\n\n    return False  # n is a prime number\n",
        "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n\n    Examples:\n    is_not_prime(2) == False\n    is_not_prime(10) == True\n    is_not_prime(35) == True\n    '''\n    if n < 2:\n        return True\n    \n    limit = math.isqrt(n)\n    \n    for i in range(2, limit + 1):\n        if n % i == 0:\n            return True\n            \n    return False\n",
        "import math\n\ndef is_not_prime(n):\n    if n < 2:\n        return True\n    for i in range(2, math.isqrt(n) + 1):\n        if n % i == 0:\n            return True\n    return False\n",
        "import math\ndef is_not_prime(n):\n    if n < 2:\n        return True\n    \n    if n == 2:\n        return False\n    \n    if n % 2 == 0:\n        return True\n    \n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return True\n\n    return False\n"
    ],
    "MbppEval/4": [
        "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    heap = []\n    \n    for num in nums:\n        hq.heappush(heap, -num)\n    \n    result = []\n    for _ in range(n):\n        result.append(-hq.heappop(heap))\n\n    return result\n",
        "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    largest_integers = []\n    max_heap = [-num for num in nums]\n    hq.heapify(max_heap)\n    \n    for _ in range(n):\n        if max_heap:\n            largest_integers.append(-hq.heappop(max_heap))\n            \n    largest_integers = largest_integers[::-1]\n    \n    return largest_integers\n",
        "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    heap = []\n    \n    for num in nums:\n        hq.heappush(heap, -num)\n        \n    result = []\n    for _ in range(n):\n        result.append(-hq.heappop(heap))\n        \n    return result\n",
        "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num)  # Using negative values for max heap\n\n    while len(heap) > n:\n        hq.heappop(heap)\n\n    return [-hq.heappop(heap) for _ in range(n)]\n",
        "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    largest_n = []\n    \n    hq.heapify(nums)\n    \n    for _ in range(n):\n        largest_n.append(hq.heappop(nums))\n    \n    largest_n.reverse()\n    \n    return largest_n\n"
    ],
    "MbppEval/6": [
        "def is_Power_Of_Two(x, y):\n    xor_result = x ^ y\n    return xor_result & (xor_result - 1) == 0 and xor_result != 0\n",
        "def differ_At_One_Bit_Pos(x, y):\n    xor_result = x ^ y\n    return bin(xor_result).count('1') == 1\n\n# Testing the function with the given examples\n\n\n\n",
        "def differ_At_One_Bit_Pos(num1, num2):\n    xor_result = num1 ^ num2\n    set_bits_count = bin(xor_result).count('1')\n\n    return set_bits_count == 1\n",
        "def is_Power_Of_Two(x, y):\n    binary_x = bin(x)[2:]\n    binary_y = bin(y)[2:]\n    \n    differing_bit_count = 0\n    differing_bit_position = -1\n    \n    for i, (bit_x, bit_y) in enumerate(zip(binary_x[::-1], binary_y[::-1])):\n        if bit_x != bit_y:\n            differing_bit_count += 1\n            differing_bit_position = i\n    \n    return differing_bit_count == 1\n",
        "def count_set_bits(num):\n    count = 0\n    while num:\n        count += num & 1\n        num >>= 1\n    return count\n\ndef differ_At_One_Bit_Pos(a, b):\n    return count_set_bits(a ^ b) == 1\n\n# Test the function with the given examples\n\n\n\n"
    ],
    "MbppEval/7": [
        "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\w+', text)\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words\n",
        "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b[a-zA-Z]+\\b', text)\n    filtered_words = [word for word in words if len(word) >= 4]\n    return filtered_words\n",
        "long_words = [word for word in words if len(word) >= 4]\nreturn long_words\n",
        "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w+\\b', text)\n    filtered_words = [word for word in words if len(word) >= 4]\n    return filtered_words\n",
        "import re\n\ndef find_char_long(text):\n    words = text.split()\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words\n"
    ],
    "MbppEval/8": [
        "def square_nums(nums):\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result\n",
        "def square_nums(nums):\n    square_list = []\n    \n    for num in nums:\n        square_list.append(num ** 2)\n\n    return square_list\n",
        "def square_nums(nums):\n    squared_nums = []\n    \n    for num in nums:\n        squared_num = num ** 2\n        squared_nums.append(squared_num)\n    \n    return squared_nums\n",
        "def square_nums(nums):\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result\n",
        "def square_nums(nums):\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums\n"
    ],
    "MbppEval/9": [
        "def find_Rotations(input_str): \n    if len(input_str) <= 1:\n        return 0\n        \n    rotation = 0\n    \n    for i in range(1, len(input_str)//2 + 1):\n        rotated_str = input_str[i:] + input_str[:i]\n        \n        if rotated_str == input_str:\n            rotation = i\n            break\n    \n    return rotation\n",
        "def find_Rotations(str): \n    count = 1\n    if len(str) == 1:\n        return count\n    \n    rotated = str\n    while rotated != str:\n        count += 1\n        rotated = rotated[-1] + rotated[:-1]\n    \n    return count\n",
        "def find_Rotations(input_str):\n    str_len = len(input_str)\n\n    if str_len < 2:\n        return 0\n    \n    for i in range(1, str_len):\n        rotated_str = input_str[i:] + input_str[:i]\n        if input_str == rotated_str:\n            return i\n",
        "def find_Rotations(str): \n    n = len(str)\n    for i in range(1, n):\n        rotated_str = str[i:] + str[:i]\n        if rotated_str == str:\n            return i\n    return -1\n",
        "def find_Rotations(str): \n    if len(str) <= 1:\n        return 0\n    \n    rotations = [str[i:] + str[:i] for i in range(len(str))]\n    \n    for idx, rotation in enumerate(rotations):\n        if rotation == str:\n            return idx + 1\n\n    return 0\n"
    ],
    "MbppEval/11": [
        "def remove_Occ(s, ch):\n    first_occurrence = s.find(ch)\n    last_occurrence = s.rfind(ch)\n    if first_occurrence != -1 and last_occurrence != -1:\n        modified_string = s[:first_occurrence] + s[first_occurrence+1:last_occurrence] + s[last_occurrence+1:]\n        return modified_string\n    else:\n        return s\n\n# Test the function\n\n\n\n",
        "def remove_Occ(s, ch):\n    first_occurrence = s.find(ch)\n    if first_occurrence == -1:\n        return s\n\n    last_occurrence = s.rfind(ch)\n    if first_occurrence == last_occurrence:\n        return s.replace(ch, '', 1)\n\n    modified_string = s[:first_occurrence] + s[first_occurrence + 1:last_occurrence] + s[last_occurrence + 1:]\n    return modified_string\n",
        "def remove_Occ(s, ch):\n    if s.count(ch) < 2:\n        return s\n    \n    first_occ = s.index(ch)\n    last_occ = s.rindex(ch)\n    \n    new_str = s[:first_occ] + s[first_occ+1:last_occ] + s[last_occ+1:]\n    \n    return new_str\n",
        "def remove_Occ(s, ch):\n    first_occurrence = s.find(ch)\n    last_occurrence = s.rfind(ch)\n    \n    if first_occurrence != -1 and last_occurrence != -1:\n        modified_string = s[:first_occurrence] + s[first_occurrence+1:last_occurrence] + s[last_occurrence+1:]\n        return modified_string\n    else:\n        return s\n",
        "def remove_Occ(s, ch): \n    '''\n    Remove the first and last occurrence of a given character from the string.\n\n    Parameters:\n    s (str): Input string\n    ch (str): Character to be removed\n\n    Returns:\n    str: Updated string after removing first and last occurrences of specified character\n    '''\n    first_occurrence = s.find(ch)\n    last_occurrence = s.rfind(ch)\n\n    if first_occurrence != -1:\n        s = s[:first_occurrence] + s[first_occurrence+1:]\n\n        if last_occurrence != first_occurrence:\n            s = s[:last_occurrence] + s[last_occurrence+1:]\n\n    return s\n"
    ],
    "MbppEval/12": [
        "def sort_matrix(M):\n    return sorted(M, key=lambda row: sum(row))\n",
        "def sort_matrix(M):\n    row_sums = [sum(row) for row in M]\n    rows_dict = dict(zip(row_sums, M))\n    \n    sorted_rows = dict(sorted(rows_dict.items(), key=lambda x: x[0]))\n    \n    sorted_matrix = list(sorted_rows.values())\n    return sorted_matrix\n",
        "def sort_matrix(M):\n    row_sums = []\n    for row in M:\n        row_sums.append(sum(row))\n\n    sorted_indices = sorted(range(len(M)), key=lambda x: row_sums[x])\n    sorted_matrix = [M[i] for i in sorted_indices]\n\n    return sorted_matrix\n",
        "def sort_matrix(M):\n    row_sums = []\n    row_to_sum = {}\n    for row in M:\n        row_sum = sum(row)\n        row_sums.append(row_sum)\n        row_to_sum[row_sum] = row\n\n    sorted_keys = sorted(row_to_sum.keys())\n    sorted_matrix = [row_to_sum[key] for key in sorted_keys]\n\n    return sorted_matrix\n",
        "def sort_matrix(M):\n    row_sums = [sum(row) for row in M]\n    rows_with_sums = list(enumerate(row_sums))\n    rows_with_sums.sort(key=lambda x: x[1])\n    \n    sorted_matrix = [M[row[0]] for row in rows_with_sums]\n    return sorted_matrix\n"
    ],
    "MbppEval/14": [
        "def find_Volume(l, b, h):\n    base_area = 0.5 * b * h\n    volume = base_area * l\n    return volume\n",
        "def find_volume(l, b, h):\n    # Step 1: Calculate the volume of the triangular prism\n    base_area = 0.5 * b * h\n    volume = base_area * l\n    return volume\n\n# Testing the function\n\n\n\n",
        "def find_Volume(l, b, h):\n    area_base = 0.5 * b * h\n    volume = area_base * l\n    return volume\n",
        "def find_Volume(l, b, h):\n    base_area = 0.5 * l * b\n    volume = base_area * h\n    return volume\n",
        "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n\n    Examples:\n    find_Volume(10,8,6) == 240\n    find_Volume(3,2,2) == 6\n    find_Volume(1,2,1) == 1\n    '''\n    area = 0.5 * b * h\n    volume = area * l\n    return volume\n"
    ],
    "MbppEval/16": [
        "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z]+_[a-z]+'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
        "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    result = re.search(pattern, text)\n    if result:\n        return 'Found a match!'\n    else:\n        return 'Notlake bracketed'''\n",
        "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z]+_[a-z]+'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
        "import re\n\ndef text_lowercase_underscore(text):\n    if re.search(r'\\b[a-z]+_[a-z]+\\b', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
        "import re\n\ndef text_lowercase_underscore(text):\n    match = re.search(r'\\b[a-z]+_[a-z]+\\b', text)\n    if match:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n"
    ],
    "MbppEval/17": [
        "# Step 0: Define the function square_perimeter(a)\ndef square_perimeter(a):\n    # Step 1: Calculate the perimeter of the square\n    perimeter = 4 * a\n    return perimeter\n\n# Test cases\n\n\n\n",
        "def square_perimeter(a):\n    perimeter = 4 * a\n    return perimeter\n",
        "def square_perimeter(a):\n    perimeter = 4 * a\n    return perimeter\n",
        "def square_perimeter(a):\n    return 4 * a\n",
        "def square_perimeter(a):\n    return 4 * a\n"
    ],
    "MbppEval/18": [
        "NO_OF_CHARS = 256\n\ndef str_to_list(string): \n    dirty_chars = [False] * NO_OF_CHARS\n    \n    for char in string: \n        dirty_chars[ord(char)] = True\n        \n    return dirty_chars\n\ndef remove_dirty_chars(str1, str2):\n    dirty_chars_list = str_to_list(str2)\n    \n    filtered_str = \"\"\n    \n    for char in str1:\n        if not dirty_chars_list[ord(char)]:\n            filtered_str += char\n    \n    return filtered_str\n",
        "def remove_dirty_chars(str1, str2):\n    clean_chars = []\n\n    for char in str1:\n        if char not in str2:\n            clean_chars.append(char)\n\n    clean_string = ''.join(clean_chars)\n    return clean_string\n",
        "NO_OF_CHARS = 256\n\ndef create_char_count_list(s):\n    char_count = [0] * NO_OF_CHARS\n    for char in s:\n        char_count[ord(char)] += 1\n    return char_count\n\ndef str_to_list(string): \n    char_count_list = create_char_count_list(string)\n    dirty_chars = []\n    for i in range(NO_OF_CHARS):\n        if char_count_list[i] > 0:\n            dirty_chars.append(chr(i))\n    result = \"\"\n    for char in string:\n        if char not in dirty_chars:\n            result += char\n    return result\n",
        "    return ''.join(new_list)\n",
        "NO_OF_CHARS = 256\n\ndef remove_dirty_chars(string1, string2): \n    result = []\n    \n    # Create a set from string2 for faster lookup\n    set_string2 = set(string2)\n    \n    # Loop through each character in string1\n    for char in string1:\n        if char not in set_string2:\n            result.append(char)\n            \n    return ''.join(result)\n"
    ],
    "MbppEval/19": [
        "def test_duplicate(arraynums):\n    seen = set()\n\n    for num in arraynums:\n        if num in seen:  # Step 3\n            return True\n        seen.add(num)\n    \n    return False  # Step 4\n",
        "def test_duplicate(arraynums):\n    num_set = set(arraynums)\n    return len(num_set) < len(arraynums)\n",
        "def test_duplicate(arraynums):\n    unique_set = set()\n    for num in arraynums:\n        if num in unique_set:\n            return True\n        unique_set.add(num)\n    return False\n",
        "def test_duplicate(arraynums):\n    unique_nums = set()\n\n    for num in arraynums:\n        if num in unique_nums:\n            return True\n        unique_nums.add(num)\n\n    return False\n",
        "def test_duplicate(arraynums):\n    unique_set = set(arraynums)\n    \n    if len(arraynums) != len(unique_set):\n        return True\n    else:\n        return False\n"
    ],
    "MbppEval/20": [
        "def is_woodall(x):\n    n = 1\n    while n * (2**n - 1) < x:\n        n += 1\n    woodall_num = n * (2**n - 1)\n    \n    return woodall_num == x\n",
        "def is_woodall(x):\n    if x <= 1:\n        return False\n    \n    woodall_number = 1\n    \n    while woodall_number <= x:\n        woodall_value = woodall_number * (2 ** woodall_number - 1)\n        \n        if woodall_value == x:\n            return True\n        \n        woodall_number += 1\n    \n    return False\n",
        "import math\n\ndef is_woodall(x):\n    if x <= 0:\n        return False\n\n    n = 1\n    woodall_num = n * x - 1\n\n    while woodall_num < x:\n        n += 1\n        woodall_num = n * x - 1\n\n    if woodall_num == x:\n        return True\n\n    return False\n",
        "def is_woodall(x): \n    if x <= 1:\n        return False\n    \n    n = 1\n    while n * (2 ** n - 1) < x:\n        n += 1\n    \n    if x == n * (2 ** n - 1):\n        return True\n    else:\n        return False\n",
        "def is_woodall(x):\n    k = 1\n    while k * (2 ** k) - 1 < x:\n        k += 1\n    return k * (2 ** k) - 1 == x\n"
    ],
    "MbppEval/56": [
        "def rev(num):\n    rev_num = int(str(num)[::-1])\n    if num == 2*rev_num + 1:\n        return True\n    else:\n        return False\n",
        "def rev(num):\n    num_str = str(num)\n    reversed_num_str = num_str[::-1].lstrip('0')\n    return int(reversed_num_str)\n\ndef check(num):\n    doubled_num = num * 2\n    reversed_doubled_num = rev(doubled_num)\n    return num - 1 == reversed_doubled_num\n",
        "def check(num):\n    num_str = str(num)\n    reversed_num = int(num_str[::-1])\n    \n    twice_reversed = 2 * reversed_num\n    \n    return num == twice_reversed - 1\n",
        "def check(num):    \n    num_str = str(num)\n    \n    # Reverse the string\n    reversed_num_str = num_str[::-1]\n    \n    # Convert the reversed string back to an integer\n    reversed_num = int(reversed_num_str)\n    \n    # Check if the given number is one less than twice its reverse\n    if num == 2*reversed_num + 1:\n        return True\n    else:\n        return False\n",
        "def check(num):\n    rev_num = int(str(num)[::-1])  # reversing the number\n    rev_times_2 = rev_num * 2  # multiplying the reversed number by 2\n    \n    is_condition_met = num == rev_times_2 - 1\n    return is_condition_met\n"
    ],
    "MbppEval/57": [
        "def find_Max_Num(arr):\n    str_arr = [str(x) for x in arr]  \n    sorted_str = ''.join(sorted(str_arr, reverse=True))\n    max_num = int(sorted_str)  \n    return max_num\n",
        "def find_Max_Num(arr):\n    str_arr = [str(num) for num in arr]\n    sorted_str_arr = sorted(str_arr, reverse=True)\n    final_num = int(\"\".join(sorted_str_arr))\n    return final_num\n",
        "def find_Max_Num(arr):\n    result = \"\"\n    \n    arr.sort(reverse=True)\n    \n    result = ''.join(map(str, arr))\n    \n    result = int(result)\n    return result\n",
        "def find_Max_Num(arr):\n    arr.sort(reverse=True)\n    return int(''.join(map(str, arr)))\n",
        "def find_Max_Num(arr):\n    arr_str = [str(num) for num in arr]\n    arr_str.sort(key=lambda x: x*3, reverse=True)\n    max_num_str = ''.join(arr_str)\n    return int(max_num_str)\n"
    ],
    "MbppEval/58": [
        "def opposite_Signs(x, y):\n    if (x > 0 and y > 0) or (x < 0 and y < 0):\n        return False\n    else:\n        return True\n",
        "def opposite_Signs(x, y):\n    if x * y < 0:\n        return True\n    else:\n        return False\n",
        "def opposite_Signs(x, y):\n    if (x < 0 and y > 0) or (x > 0 and y < 0):\n        return True\n    else:\n        return False\n",
        "def opposite_signs(x, y):\n    if x * y < 0:\n        return True\n    return False\n",
        "def opposite_Signs(x, y):\n    if (x < 0 and y > 0) or (x > 0 and y < 0):\n        return True\n    else:\n        return False\n"
    ],
    "MbppEval/59": [
        "def is_octagonal(n):\n    # input: n (integer)\n    \n    # Calculate the nth octagonal number using the formula: n(3n-1)(2n+1)\n    octagonal_number = n * (3*n - 1) * (2*n + 1)\n\n    return octagonal_number\n",
        "def is_octagonal(n):\n    return n * (3*n - 2)\n\n# Testing the function with examples\n\n\n\n",
        "def is_octagonal(n):\n    octagonal_number = 3 * n * (n - 1) + 1\n    return octagonal_number\n",
        "def is_octagonal(n):\n    octagonal_number = 2 * n**2 - n\n    return octagonal_number\n",
        "def is_octagonal(n):\n    octagonal_num = n * (3 * n - 2)\n    return octagonal_num\n"
    ],
    "MbppEval/61": [
        "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = 0\n    prefix_sums = defaultdict(int)\n\n    for i in range(len(s)):\n        digit = int(s[i])\n        prefix_sums[i+1] = prefix_sums[i] + digit\n\n        if prefix_sums[i+1] == (i+1):\n            count += 1\n\n    return count\n",
        "def calculate_digit_sum(s):\n    return sum(int(d) for d in s)\n\ndef is_valid_substring(sub):\n    return calculate_digit_sum(sub) == len(sub)\n\ndef count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if is_valid_substring(s[i:j]):\n                count += 1\n                \n    return count\n",
        "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = 0\n    prefix_sums = defaultdict(int)\n    prefix_sum = 0\n    \n    for c in s:\n        num = int(c)\n        prefix_sum += num\n        \n        for i in range(1, prefix_sum + 1):\n            if prefix_sum - i in prefix_sums:\n                count += prefix_sums[prefix_sum - i]\n        \n        prefix_sums[prefix_sum] += 1\n    \n    return count\n",
        "def count_substrings(s):\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(num))\n    \n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            if sum_of_digits(int(substring)) == len(substring):\n                count += 1\n                \n    return count\n",
        "def get_substrings(s):\n    substrings = []\n    for start in range(len(s)):\n        for end in range(start + 1, len(s) + 1):\n            substrings.append(s[start:end])\n    return substrings\n\ndef get_digit_sum(s):\n    return sum(int(d) for d in s if d.isdigit())\n\ndef count_substrings(s):\n    substrings = get_substrings(s)\n    count = 0\n    for substring in substrings:\n        if len(substring) == get_digit_sum(substring):\n            count += 1\n    return count\n"
    ],
    "MbppEval/62": [
        "def smallest_num(xs):\n    # Step 0: Define the function smallest_num\n    smallest = xs[0]  # Step 1: Initialize smallest to the first element of the list\n    \n    # Step 2: Iterate through the list and update the smallest variable if a smaller number is found\n    for num in xs:\n        if num < smallest:\n            smallest = num  # Update smallest if a smaller number is found\n    \n    return smallest\n",
        "def smallest_num(xs):\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest\n",
        "def smallest_num(xs):\n    if not xs:\n        return None\n    \n    smallest = xs[0]\n    \n    for num in xs[1:]:\n        if num < smallest:\n            smallest = num\n    \n    return smallest\n",
        "def smallest_num(xs):\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    \n    return smallest\n",
        "def smallest_num(xs):\n    '''\n    Find the smallest number in a list.\n    \n    Parameters:\n    xs (list): A list of numbers\n    \n    Returns:\n    int: The smallest number in the list\n    '''\n    if not xs:\n        return None\n    \n    smallest = xs[0]\n    \n    for num in xs:\n        if num < smallest:\n            smallest = num\n            \n    return smallest\n"
    ],
    "MbppEval/63": [
        "def max_difference(test_list):\n    max_diff = 0\n    \n    for pair in test_list:\n        diff = abs(pair[0] - pair[1])\n        if diff > max_diff:\n            max_diff = diff\n            \n    return max_diff\n",
        "def max_difference(test_list):\n    max_diff = 0\n    \n    for tup in test_list:\n        difference = max(tup) - min(tup)\n        if difference > max_diff:\n            max_diff = difference\n        \n    return max_diff\n",
        "def max_difference(test_list):\n    max_diff = 0\n\n    for pair in test_list:\n        a, b = pair\n        diff = abs(a - b)\n        \n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff\n",
        "def max_difference(test_list):\n    max_diff = 0\n\n    for pair in test_list:\n        diff = abs(pair[0] - pair[1])\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff\n",
        "def max_difference(test_list):\n    max_diff = 0\n    \n    for pair in test_list:\n        diff = abs(pair[1] - pair[0])\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff\n"
    ],
    "MbppEval/64": [
        "def subject_marks(subjectmarks):\n    sorted_subjects = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_subjects\n",
        "def subject_marks(subjectmarks):\n    return sorted(subjectmarks, key=lambda x: x[1])\n",
        "def subject_marks(subjectmarks):\n    return sorted(subjectmarks, key=lambda x: x[1])\n",
        "",
        "def subject_marks(subjectmarks):\n    return sorted(subjectmarks, key=lambda x: x[1])\n"
    ],
    "MbppEval/65": [
        "def recursive_list_sum(data_list):\n    total_sum = 0\n    \n    if not data_list:\n        return total_sum\n    \n    for element in data_list:\n        if isinstance(element, list):\n            total_sum += recursive_list_sum(element)\n        else:\n            total_sum += element\n            \n    return total_sum\n",
        "def recursive_list_sum(data_list):\n    total_sum = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total_sum += recursive_list_sum(element)\n        else:\n            total_sum += element\n    return total_sum\n",
        "def recursive_list_sum(data_list):\n    total_sum = 0\n    \n    for element in data_list:\n        if isinstance(element, list):\n            total_sum += recursive_list_sum(element)\n        else:\n            total_sum += element\n    \n    return total_sum\n",
        "def recursive_list_sum(data_list):\n    total_sum = 0\n    for element in data_list:\n        if isinstance(element, int):\n            total_sum += element\n        elif isinstance(element, list):\n            total_sum += recursive_list_sum(element)\n    return total_sum\n",
        "def recursive_list_sum(data_list):\n    total_sum = 0\n    \n    for item in data_list:\n        total_sum += item if isinstance(item, int) else 0\n        \n    for item in data_list:\n        if isinstance(item, list):\n            total_sum += recursive_list_sum(item)\n\n    return total_sum\n"
    ],
    "MbppEval/66": [
        "def pos_count(lst):\n    count = 0\n\n    for num in lst:\n        if num > 0:\n            count += 1\n    \n    return count\n",
        "def pos_count(lst):\n    count = 0  # Step 0\n\n    for num in lst:  # Step 1\n        if num > 0:  # Step 2\n            count += 1  # Step 3\n\n    return count  # Step 4\n",
        "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n",
        "def pos_count(lst):\n    count = 0\n\n    for num in lst:\n        if num > 0:\n            count += 1\n\n    return count\n",
        "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n"
    ],
    "MbppEval/67": [
        "import math\n\ndef bell_number(n):   \n    if n < 0:\n        return 0\n    \n    bell = [0] * (n + 1)\n    bell[0] = 1\n    \n    for j in range(1, n + 1):\n        for i in range(1, j + 1):\n            bell[j] += bell[j - i] * math.factorial(j - 1) // (math.factorial(i) * math.factorial(j - i))\n    \n    return bell[n]\n",
        "def bell_number(n):\n    bell_triangle = [[1]]\n\n    for i in range(1, n):\n        prev_row = bell_triangle[-1]\n        new_row = [prev_row[-1]]\n\n        for j in range(i):\n            new_row.append(new_row[j] + prev_row[j])\n\n        bell_triangle.append(new_row)\n\n    return bell_triangle[n - 1][0]\n",
        "def bell_number(n):\n    bell = [[0 for _ in range(n)] for _ in range(n)]\n    bell[0][0] = 1\n    \n    return bell\n",
        "def bell_number(n):\n    bell_numbers = [0] * (n + 1)  # Initialize a list to store the Bell numbers\n    bell_numbers[0] = 1  # Set the first Bell number as 1\n    \n    for i in range(1, n + 1):\n        bell_numbers[i] = 0  # Initialize each Bell number as 0\n    \n    return bell_numbers[n]\n",
        "def bell_number(n):   \n    bell_triangle = [[1]]\n\n    for i in range(1, n):\n        row = [bell_triangle[i - 1][0]]\n\n        for j in range(1, i + 1):\n            row.append(row[j - 1] + bell_triangle[i - 1][j - 1])\n\n        bell_triangle.append(row)\n\n    return bell_triangle[-1][-1]\n"
    ],
    "MbppEval/68": [
        "def is_Monotonic(A):\n    is_increasing = True\n    is_decreasing = True\n    \n    for i in range(1, len(A)):\n        if A[i] < A[i - 1]:\n            is_increasing = False\n        if A[i] > A[i - 1]:\n            is_decreasing = False\n            \n    return is_increasing or is_decreasing\n",
        "def is_Monotonic(A):\n    inc = dec = False\n    \n    for i in range(1, len(A)):\n        if A[i] > A[i - 1]:\n            inc = True\n        elif A[i] < A[i - 1]:\n            dec = True\n            \n        if inc and dec:\n            return False\n        \n    return True\n",
        "def is_Monotonic(A):\n    increasing = all(A[i] <= A[i + 1] for i in range(len(A) - 1))\n    decreasing = all(A[i] >= A[i + 1] for i in range(len(A) - 1))\n    \n    return increasing or decreasing\n",
        "def is_Monotonic(A):\n    return all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or all(A[i] >= A[i + 1] for i in range(len(A) - 1))\n",
        "def is_Monotonic(A):\n    increasing = all(A[i] <= A[i + 1] for i in range(len(A) - 1))\n    decreasing = all(A[i] >= A[i + 1] for i in range(len(A) - 1))\n    \n    if not (increasing or decreasing):\n        return False\n    \n    return True\n"
    ],
    "MbppEval/69": [
        "def is_sublist(l, s):\n    if len(s) > len(l):\n        return False\n\n    for i in range(len(l)):\n        if l[i:i+len(s)] == s:\n            return True\n\n    return False\n\n# Test cases\n\n\n\n",
        "def is_sublist(l, s):\n    for i in range(len(l)):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n",
        "def is_sublist(l, s):\n    for i in range(len(l)):\n        if l[i] == s[0] and l[i:i+len(s)] == s:\n            return True\n    return False\n",
        "def is_sublist(l, s):\n    if len(s) > len(l):\n        return False\n\n    for i in range(len(l) - len(s) + 1):\n        sublist = l[i:i+len(s)]\n        \n        if sublist == s:\n            return True\n    \n    return False\n",
        "def is_sublist(l, s):\n    if len(s) == 0:\n        return True\n\n    for i in range(len(l)):\n        if l[i:i+len(s)] == s:\n            return True\n\n    return False\n"
    ],
    "MbppEval/70": [
        "def find_equal_tuple(Input, length):\n    for tup in Input:\n        if len(tup) != length:\n            return 'All tuples do not have the same length'\n    return 'All tuples have the same length'\n",
        "def find_equal_tuple(tuples_list, length):\n    for tuple_elem in tuples_list:\n        if len(tuple_elem) != length:\n            return 'All tuples do not have same length'\n    \n    return 'All tuples have same length'\n",
        "def find_equal_tuple(Input, expected_length):\n    for tup in Input:\n        if len(tup) != expected_length:\n            return 'All tuples do not have same length'\n    return 'All tuples have same length'\n",
        "def find_equal_tuple(Input, length):\n    all_lengths = [len(t) for t in Input]\n    \n    if all(length == l for l in all_lengths):\n        return 'All tuples have same length'\n    else:\n        return 'All tuples do not have same length'\n",
        "def find_equal_tuple(Input, length):\n    for tuple_ in Input:\n        if len(tuple_) != length:\n            return 'All tuples do not have same length'\n    return 'All tuples have same length'\n"
    ],
    "MbppEval/71": [
        "def comb_sort(nums):\n    gap = len(nums)\n    shrink_factor = 1.3\n    flag = True\n\n    while gap > 1 or flag:\n        flag = False\n\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                flag = True\n\n        gap = int(gap / shrink_factor)\n        if gap < 1:\n            gap = 1\n\n    return nums\n",
        "def comb_sort(nums):\n    gap = len(nums)\n    shrink_factor = 1.3\n    swapped = True\n\n    while gap > 1 or swapped:\n        gap = int(gap / shrink_factor)\n        gap = max(1, gap)\n        swapped = False\n\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n    return nums\n",
        "def comb_sort(nums):\n    gap = len(nums)\n    swapped = True\n\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / 1.3))\n        swapped = False\n\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n    return nums\n",
        "def comb_sort(nums):\n    gap = len(nums)\n    shrink = 1.3\n    \n    swapped = True\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / shrink))\n        swapped = False\n        \n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    \n    return nums\n",
        "def comb_sort(nums):\n    gap = len(nums)\n    swapped = True\n    \n    while gap > 1 or swapped:\n        gap = max(1, int(gap / 1.3))\n        swapped = False\n        \n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    \n    return nums\n"
    ],
    "MbppEval/72": [
        "def dif_Square(n):\n    if int(n**0.5) ** 2 == n:\n        return True\n    else:\n        limit = int(n**0.5)\n        for x in range(1, limit+1):\n            y_square = x*x - n\n            if y_square >= 0 and int(y_square**0.5) == y_square**0.5:\n                return True\n        return False\n",
        "def dif_Square(n): \n    for a in range(int(n**0.5)+1):  # Square root limit to avoid duplicates\n        b_square = a**2 - n\n        if b_square >= 0:\n            b = int(b_square**0.5)\n            if b**2 == b_square and a > b and isinstance(a, int) and isinstance(b, int):\n                return True\n    return False\n",
        "import math\n\ndef dif_Square(n): \n    for a in range(1, int(math.sqrt(n)) + 1):\n        b = math.isqrt(a * a - n)\n        if a * a - b * b == n:\n            return True\n    return False\n",
        "def dif_Square(n): \n    if n < 0:\n        return False\n    \n    a = 1\n    b = 1\n    \n    while a**2 - b**2 <= n:\n        if a**2 - b**2 == n:\n            return True\n        elif a**2 - b**2 < n:\n            a += 1\n        else:\n            b += 1\n            a = b + 1\n    \n    return False\n",
        "import math\n\ndef dif_Square(n):\n    for i in range(1, int(math.sqrt(n))+1):\n        difference = i**2 - n\n        if math.sqrt(difference).is_integer():\n            return True\n    return False\n"
    ],
    "MbppEval/74": [
        "def is_samepatterns(colors, patterns):    \n    if len(colors) != len(patterns):\n        return False\n    \n    mapping = {}\n    \n    for color, pattern in zip(colors, patterns):\n        if color in mapping:\n            if mapping[color] != pattern:\n                return False\n        else:\n            if pattern in mapping.values():\n                return False\n            mapping[color] = pattern\n    \n    return True\n",
        "def is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n    \n    color_map = {}\n    \n    for color, pattern in zip(colors, patterns):\n        if color in color_map:\n            if color_map[color] != pattern:\n                return False\n        else:\n            color_map[color] = pattern\n    \n    return True\n",
        "def is_samepatterns(colors, patterns):\n    color_to_pattern = {}\n    \n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n    \n    return True\n",
        "def is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n\n    color_to_pattern = {}\n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            if pattern in color_to_pattern.values():\n                return False\n            color_to_pattern[color] = pattern\n\n    return True\n",
        "def is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n    \n    color_pattern_mapping = {}\n    for color, pattern in zip(colors, patterns):\n        if color not in color_pattern_mapping:\n            color_pattern_mapping[color] = pattern\n        else:\n            if color_pattern_mapping[color] != pattern:\n                return False\n    \n    return True\n"
    ],
    "MbppEval/75": [
        "def find_tuples(test_list, K):\n    result = []\n    \n    for tpl in test_list:\n        all_divisible = all(elem % K == 0 for elem in tpl)\n        if all_divisible:\n            result.append(tpl)\n        \n    return str(result)\n",
        "def find_tuples(test_list, K):\n    results = []  # Initialize a results list\n    for tpl in test_list:\n        if all(elem % K == 0 for elem in tpl):\n            results.append(tpl)  # Append the tuple to results if all elements are divisible by K\n    \n    return str(results)  # Return the results list as a string\n",
        "def find_tuples(test_list, K):\n    result_tuples = []\n    if not test_list:\n        return '[]'\n    \n    for tpl in test_list:\n        if all(elem % K == 0 for elem in tpl):\n            result_tuples.append(tpl)\n    \n    return str(result_tuples)\n",
        "def find_tuples(test_list, K):\n    result = []\n    for tup in test_list:\n        if all(elem % K == 0 for elem in tup):\n            result.append(tup)\n    \n    return result\n",
        "def find_tuples(test_list, K):\n    divisible_tuples = []\n    for tup in test_list:\n        if all(elem % K == 0 for elem in tup):\n            divisible_tuples.append(tup)\n    \n    return str(divisible_tuples)\n"
    ],
    "MbppEval/77": [
        "# Step 0: Define the function is_Diff\ndef is_Diff(n):\n    # Step 1: Separate the odd and even digits of n\n    odd_digits = [int(d) for i, d in enumerate(str(n)) if i % 2 != 0]\n    even_digits = [int(d) for i, d in enumerate(str(n)) if i % 2 == 0]\n",
        "def is_Diff(n): \n    sum_alt_digits = 0\n    for i, digit in enumerate(str(n)):\n        if i % 2 == 0:\n            sum_alt_digits += int(digit)\n        else:\n            sum_alt_digits -= int(digit)\n\n    return sum_alt_digits % 11 == 0\n",
        "    return absolute_difference % 11 == 0\n",
        "def is_Diff(n):\n    even_sum = 0\n    odd_sum = 0\n    str_n = str(n)\n    \n    for i in range(len(str_n)):\n        if i % 2 == 0:\n            even_sum += int(str_n[i])\n        else:\n            odd_sum += int(str_n[i])\n    \n    return abs(even_sum - odd_sum) % 11 == 0\n",
        "def is_Diff(n): \n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    ],
    "MbppEval/79": [
        "def word_len(s):\n    word_length = len(s)\n    is_odd_length = word_length % 2 != 0\n    return is_odd_length\n",
        "def word_len(s):\n    word_length = len(s)\n    \n    if word_length % 2 != 0:\n        return True\n    else:\n        return False\n",
        "def word_len(s):\n    word_length = len(s)\n    \n    if word_length % 2 == 0:\n        return False\n    else:\n        return True\n",
        "def word_len(s):\n    length = len(s)\n    is_odd = length % 2 != 0\n    return is_odd\n",
        "def word_len(s):\n    return len(s) % 2 != 0\n"
    ],
    "MbppEval/80": [
        "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n\n    Formula: Tn = n * (n + 1) * (n + 2) / 6\n    '''\n    \n    result = (n * (n + 1) * (n + 2)) / 6\n    return result\n",
        "def tetrahedral_number(n):\n    tetrahedral_num = n * (n + 1) * (n + 2) / 6\n    return float(tetrahedral_num)\n",
        "def tetrahedral_number(n):\n    tetrahedral_num = n*(n+1)*(n+2) / 6\n    return tetrahedral_num\n",
        "def tetrahedral_number(n):\n    tn = (n * (n + 1) * (n + 2)) / 6\n    return float(tn)\n",
        "def tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) / 6\n"
    ],
    "MbppEval/82": [
        "import math\n\ndef volume_sphere(r):\n    return (4/3) * math.pi * r**3\n",
        "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume\n",
        "import math\n\ndef volume_sphere(r):\n    volume = (4/3) * math.pi * (r ** 3)\n    return volume\n",
        "import math\n\ndef volume_sphere(r):\n    return (4/3) * math.pi * r**3\n",
        "import math\n\ndef volume_sphere(r):\n    return (4/3) * math.pi * r**3\n"
    ],
    "MbppEval/83": [
        "def get_Char(strr):\n    total_ascii = 0\n    for char in strr:\n        total_ascii += ord(char)\n    total_ascii %= 26\n    final_char = chr(total_ascii)\n    return final_char\n",
        "def get_Char(strr):\n    total_ascii = 0\n    for char in strr:\n        total_ascii += ord(char)\n        \n    remainder = total_ascii % 26\n    result_char = chr(remainder + 97)  # Adding 97 to get the ASCII corresponding to 'a'\n    \n    return result_char\n",
        "def get_Char(strr):\n    total_ascii = 0\n    for char in strr:\n        total_ascii += ord(char)\n    \n    char_val = chr((total_ascii % 26) + ord('a'))\n    \n    return char_val\n",
        "def get_Char(strr):\n    sum_ascii = 0\n    for char in strr:\n        ascii_val = ord(char)\n        sum_ascii += ascii_val\n    sum_mod_26 = sum_ascii % 26\n    result_char = chr(sum_mod_26)\n    return result_char\n",
        "def get_Char(strr):\n    total_sum = 0\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\n    for char in strr:\n        total_sum += ord(char)\n    \n    index = total_sum % 26\n    return alphabet[index]\n"
    ],
    "MbppEval/84": [
        "def sequence(n): \n    if n == 0:\n        return 0\n    if n == 1 or n == 2:\n        return 1\n    \n    seq = [0, 1, 1]  # Initialize with the base cases\n    \n    for i in range(3, n+1):\n        seq.append(seq[seq[i-1]] + seq[i - seq[i-1]])\n    \n    return seq[n]\n",
        "def sequence(n): \n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n\n    conway_seq = [0, 1, 1]\n\n    for i in range(3, n + 1):\n        conway_seq.append(conway_seq[conway_seq[i - 1]] + conway_seq[i - conway_seq[i - 1]])\n\n    return conway_seq[n]\n",
        "def sequence(n): \n    '''\n    Find the nth number in the Newman-Conway sequence.\n\n    Examples:\n    sequence(10) == 6\n    sequence(2) == 1\n    sequence(3) == 2\n    '''\n    if n <= 0:\n        return \"Invalid input\"\n    if n == 1 or n == 2:\n        return 1\n\n    sequence = [0, 1, 1]  # Initialize with the first two elements of the sequence\n\n    for i in range(3, n+1):\n        sequence.append(sequence[sequence[i - 1]] + sequence[i - sequence[i - 1]])\n\n    return sequence[n]\n",
        "def sequence(n):\n    dp = [0, 1, 1] + [0] * (n - 2)\n    \n    for i in range(3, n + 1):\n        dp[i] = dp[dp[i-1]] + dp[i - dp[i-1]]\n    \n    return dp[n]\n",
        "def newman_conway_sequence(n):\n    if n == 0:\n        return [0]\n    if n == 1:\n        return [0, 1]\n\n    sequence = [0, 1, 1]  # Initialize the sequence with the first two numbers\n\n    for i in range(3, n + 1):\n        sequence.append(sequence[sequence[i - 1]] + sequence[i - sequence[i - 1]])\n    \n    return sequence[1:]  # Exclude the first element (0) when returning\n\ndef sequence(n):\n    sequence = newman_conway_sequence(n)\n    \n    if n <= 0 or n > len(sequence):\n        return None\n    \n    return sequence[n - 1]\n"
    ],
    "MbppEval/85": [
        "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Calculate the surface area of a sphere.\n\n    Parameters:\n    r (float): Radius of the sphere\n\n    Returns:\n    float: Surface area of the sphere\n    '''\n    surface_area = 4 * math.pi * (r ** 2)\n    return surface_area\n",
        "import math\n\ndef surfacearea_sphere(r):\n    return 4 * math.pi * r**2\n\n# Testing the function\n\n\n\n",
        "import math\n\ndef surfacearea_sphere(r):\n    surface_area = 4 * math.pi * r**2\n    return surface_area\n",
        "import math\n\ndef surfacearea_sphere(r):\n    sa = 4 * math.pi * r**2\n    return sa\n",
        "import math\n\ndef surfacearea_sphere(r):\n    return 4 * math.pi * r**2\n"
    ],
    "MbppEval/86": [
        "def centered_hexagonal_number(n):\n    return 3 * n * n - 3 * n + 1\n",
        "def centered_hexagonal_number(n):\n    return 3*n*(n-1) + 1\n",
        "def centered_hexagonal_number(n):\n    return n*(2*n-1)*3\n",
        "def centered_hexagonal_number(n):\n    return n * (2*n - 1)\n",
        "def centered_hexagonal_number(n):\n    return 2 * n**2 - n\n"
    ],
    "MbppEval/87": [
        "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    \n    all_dicts = [dict1, dict2, dict3]\n    \n    for current_dict in all_dicts:\n        for key, value in current_dict.items():\n            if key not in merged_dict:\n                merged_dict[key] = value\n    \n    return merged_dict\n",
        "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    \n    for d in (dict1, dict2, dict3):\n        for key, value in d.items():\n            if key not in merged_dict:\n                merged_dict[key] = value\n            elif merged_dict[key] != value:\n                # Update the value if the existing value is different\n                merged_dict[key] = value\n                \n    return merged_dict\n",
        "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n\n    # Plan step 1 - Update the empty dictionary with key-value pairs from each dictionary\n    for d in [dict1, dict2, dict3]:\n        merged_dict.update(d)\n\n    return merged_dict\n\n# Testing the implementation\ndict1 = { \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }\ndict2 = { \"G\": \"Green\", \"W\": \"White\" }\ndict3 = { \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" }\n\n",
        "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n\n    for d in (dict1, dict2, dict3):\n        merged_dict.update(d)\n    \n    return merged_dict\n",
        "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    \n    return merged_dict\n"
    ],
    "MbppEval/88": [
        "import collections\n\ndef freq_count(list1):\n    freq_dict = collections.Counter(list1)\n    return dict(freq_dict)\n",
        "import collections\n\ndef freq_count(list1):\n    freq_dict = {}\n    \n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    \n    return freq_dict\n",
        "def freq_count(list1):\n    freq_dict = {}  # Step 1: Create an empty dictionary to store frequency count\n    \n    for element in list1:  # Step 2: Loop through each element in the list\n        if element in freq_dict:  # Step 3: Check if element is already in dictionary\n            freq_dict[element] += 1  # Step 4: Increment the count for existing element\n        else:\n            freq_dict[element] = 1  # Step 5: Add element to dictionary with count of 1\n\n    return freq_dict  # Step 6: Return the dictionary with frequency count\n",
        "import collections\ndef freq_count(list1):\n    frequency_dict = {}\n    for elem in list1:\n        if elem in frequency_dict:\n            frequency_dict[elem] += 1\n        else:\n            frequency_dict[elem] = 1\n    return frequency_dict\n",
        "import collections\ndef freq_count(list1):\n    freq_dict = {}\n    \n    for elem in list1:\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        else:\n            freq_dict[elem] = 1\n\n    return freq_dict\n"
    ],
    "MbppEval/89": [
        "def closest_num(N):\n    if not isinstance(N, int):\n        raise ValueError(\"Input must be an integer\")\n        \n    closest_smaller_num = N - 1\n    return closest_smaller_num\n",
        "def closest_num(N):\n    smaller_num = N - 1\n    if smaller_num < N:\n        return smaller_num\n    else:\n        return \"No smaller number found\"\n",
        "def closest_num(N):\n    if not isinstance(N, int):\n        return 'Invalid input. Please enter an integer.'\n    \n    return N - 1\n\n\n",
        "def closest_num(N):\n    closest_smaller_num = N - 1\n    return closest_smaller_num\n",
        "def closest_num(N):\n    closest_smaller = N - 1\n    return closest_smaller\n"
    ],
    "MbppEval/90": [
        "def len_log(list1):\n    max_length = 0\n    \n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    \n    return max_length\n",
        "def len_log(list1):\n    max_length = 0\n    \n    for word in list1:\n        word_length = len(word)\n        if word_length > max_length:\n            max_length = word_length\n    \n    return max_length\n",
        "def len_log(list1):\n    max_length = 0\n    for word in list1:\n        word_length = len(word)\n        if word_length > max_length:\n            max_length = word_length\n\n    return max_length\n",
        "def len_log(list1):\n    max_length = 0\n    \n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    \n    return max_length\n",
        "def len_log(list1):\n    max_length = 0\n\n    for word in list1:\n        word_length = len(word)\n        \n        if word_length > max_length:\n            max_length = word_length\n    \n    return max_length\n"
    ],
    "MbppEval/91": [
        "def find_substring(str1, sub_str):\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False\n",
        "def find_substring(str1, sub_str):\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False\n",
        "def find_substring(str1, sub_str):\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False\n",
        "def find_substring(str1, sub_str):\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False\n",
        "def find_substring(str1, sub_str):\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False\n"
    ],
    "MbppEval/92": [
        "def is_undulating(n): \n    if len(n) < 3:\n        return False\n    \n    for i in range(2, len(n)):\n        if (int(n[i]) - int(n[i-1])) * (int(n[i-1]) - int(n[i-2])) >= 0:\n            return False\n\n    return True\n",
        "def is_undulating(n): \n    if len(n) < 3:\n        return False\n\n    is_diff_positive = n[0] != n[1]\n    for i in range(2, len(n)):\n        if n[i] == n[i - 1] or (int(n[i]) - int(n[i - 1])) * (int(n[i - 1]) - int(n[i - 2])) >= 0:\n            return False\n\n    return True\n",
        "def is_undulating(n):\n    if len(n) < 3:\n        return False\n    \n    if not n.isdigit():\n        return False\n    \n    if n[0] == n[1]:\n        return False\n\n    for i in range(2, len(n)):\n        if n[i] == n[i - 1] or n[i] != n[i - 2]:\n            return False\n    \n    return True\n",
        "def is_undulating(n):\n    if len(str(n)) < 3 or not str(n).isdigit():\n        return False\n\n    n_str = str(n)\n    for i in range(len(n_str) - 2):\n        if not (n_str[i] != n_str[i + 1] and n_str[i + 1] != n_str[i + 2] and n_str[i] != n_str[i + 2]):\n            return False\n    return True\n",
        "def is_undulating(n): \n    n = str(n)\n    if len(n) < 3:\n        return False\n    \n    for i in range(2, len(n)):\n        if n[i] == n[i-1] or n[i] == n[i-2]:\n            return False\n        \n    return True\n"
    ],
    "MbppEval/93": [
        "def power(a, b):\n    result = 1\n    for i in range(b):\n        result *= a\n    return result\n",
        "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n\n    Examples:\n    power(3,4) == 81\n    power(2,3) == 8\n    power(5,5) == 3125\n    '''\n    return a**b\n",
        "def power(a, b):\n    result = a ** b\n    return result\n",
        "def power(a, b):\n    result = 1\n    for i in range(b):\n        result *= a\n    return result\n",
        "def power(a, b):\n    return a ** b\n\n\n\n\n"
    ],
    "MbppEval/94": [
        "from operator import itemgetter\n\ndef index_minimum(test_list):\n    if not test_list:\n        return None\n    \n    sorted_list = sorted(test_list, key=itemgetter(1))\n    \n    return sorted_list[0][0]\n",
        "from operator import itemgetter \n\ndef index_minimum(test_list):\n    min_value = float('inf')\n    \n    for name, value in test_list:\n        if value < min_value:\n            min_value = value\n\n    result = next(filter(lambda x: x[1] == min_value, test_list))[0]\n\n    return result\n",
        "from operator import itemgetter\n\ndef index_minimum(test_list):\n    min_second_value = float('inf')  # Initialize with positive infinity to find the smallest value\n    min_first_value = None\n    \n    for first_value, second_value in test_list:\n        if second_value < min_second_value:\n            min_second_value = second_value\n            min_first_value = first_value\n    \n    return min_first_value\n",
        "from operator import itemgetter\n\ndef index_minimum(test_list):\n    min_value = float('inf')  # Initialize to a large value\n    min_element = None\n    \n    for item in test_list:\n        if item[1] < min_value:\n            min_value = item[1]\n            min_element = item[0]\n    \n    return min_element\n",
        "from operator import itemgetter \n\ndef index_minimum(test_list):\n    min_tuple = None\n    min_second_val = float('inf')\n    for item in test_list:\n        name, value = item\n        if value < min_second_val:\n            min_second_val = value\n            min_tuple = item\n\n    return min_tuple[0]\n\n# Test the function\n\n\n\n"
    ],
    "MbppEval/95": [
        "def Find_Min_Length(lst):  \n    min_length = float('inf')\n    \n    for lst_item in lst:\n        current_length = len(lst_item)\n        if current_length < min_length:\n            min_length = current_length\n    \n    return min_length\n",
        "def Find_Min_Length(lst):  \n    min_length = len(lst[0])\n    \n    for inner_lst in lst:\n        if len(inner_lst) < min_length:\n            min_length = len(inner_lst)\n    \n    return min_length\n",
        "def Find_Min_Length(lst):\n    min_length = float('inf')\n\n    for sub_lst in lst:\n        if len(sub_lst) < min_length:\n            min_length = len(sub_lst)\n\n    return min_length\n",
        "def Find_Min_Length(lst):\n    min_length = float('inf')\n    \n    for sub_list in lst:\n        if len(sub_list) < min_length:\n            min_length = len(sub_list)\n    \n    return min_length\n",
        "def Find_Min_Length(lst):\n    min_length = float('inf')\n    \n    for l in lst:\n        length = len(l)\n        \n        if length < min_length:\n            min_length = length\n\n    return min_length\n"
    ],
    "MbppEval/96": [
        "    return count\n",
        "def divisor(n):\n    count = 0\n    \n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    \n    return count\n",
        "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n",
        "import math\n\ndef divisor(n):\n    count = 0\n    sqrt_n = int(math.sqrt(n))\n    \n    for i in range(1, sqrt_n + 1):\n        if n % i == 0:\n            count += 2  # Increment count for both 'i' and 'n // i'\n    \n    if sqrt_n * sqrt_n == n:\n        count -= 1  # Decrement count if sqrt(n) is a divisor\n    \n    return count\n",
        "def divisor(n):\n    count = 0\n    \n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n            \n    return count\n"
    ],
    "MbppEval/97": [
        "def frequency_lists(list1):\n    freq_dict = {}\n    \n    for sublist in list1:\n        for element in sublist:\n            if element in freq_dict:\n                freq_dict[element] += 1\n            else:\n                freq_dict[element] = 1\n\n    return freq_dict\n",
        "def frequency_lists(list1):\n    freq_dict = {}\n    \n    flattened_list = [element for sublist in list1 for element in sublist]\n    \n    for element in flattened_list:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    \n    return freq_dict\n",
        "def frequency_lists(list1):\n    freq_dict = {}\n    for sublist in list1:\n        for element in sublist:\n            if element in freq_dict:\n                freq_dict[element] += 1\n            else:\n                freq_dict[element] = 1\n    return freq_dict\n",
        "def frequency_lists(list1):\n    frequency_dict = {}\n    flattened_list = [elem for sublist in list1 for elem in sublist]\n    \n    for elem in flattened_list:\n        if elem in frequency_dict:\n            frequency_dict[elem] += 1\n        else:\n            frequency_dict[elem] = 1\n    \n    return frequency_dict\n",
        "def frequency_lists(list1):\n    frequency_dict = {}\n\n    for sublist in list1:\n        for element in sublist:\n            if element in frequency_dict:\n                frequency_dict[element] += 1\n            else:\n                frequency_dict[element] = 1\n    \n    return frequency_dict\n"
    ],
    "MbppEval/98": [
        "from functools import reduce\n\ndef multiply_num(numbers):\n    total_product = reduce(lambda x, y: x * y, numbers)\n    list_length = len(numbers)\n    result = total_product / list_length\n    return result\n",
        "def multiply_num(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n\n    result /= len(numbers)\n    \n    return result\n",
        "def multiply_num(numbers):\n    product = 1\n    \n    for num in numbers:\n        product *= num\n        \n    result = product / len(numbers)\n    \n    return result\n",
        "def multiply_num(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result\n",
        "def multiply_num(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)\n"
    ],
    "MbppEval/99": [
        "def decimal_to_binary(n): \n    binary_digits = []\n    \n    while n > 0:\n        binary_digits.append(str(n % 2))\n        n = n // 2\n        \n    binary_digits.reverse()\n    binary_string = ''.join(binary_digits)\n    return binary_string\n",
        "def decimal_to_binary(n):\n    binary_str = bin(n)[2:]  # Remove '0b' prefix\n    binary_str = binary_str.zfill(4)  # Left-pad with zeros to ensure a minimum length of 4 characters\n    return binary_str\n",
        "def decimal_to_binary(n):\n    if n < 0:\n        return 'Error: Input number should be a non-negative integer.'\n    elif n == 0:\n        return '0'\n    \n    binary_digits = []\n    \n    while n > 0:\n        remainder = n % 2\n        binary_digits.append(str(remainder))\n        n = n // 2\n    \n    binary_digits.reverse()\n\n    return ''.join(binary_digits)\n\n\n",
        "def decimal_to_binary(n): \n    if n == 0:\n        return '0'\n    \n    binary_representation = ''\n    while n > 0:\n        binary_representation = str(n % 2) + binary_representation\n        n = n // 2\n    \n    return binary_representation.lstrip('0')\n",
        "def decimal_to_binary(n):\n    binary_num = bin(n)[2:]  # Remove '0b' prefix\n    binary_num = binary_num.lstrip('0') if n != 0 else '0'  # Remove leading zeros for non-zero values\n    return binary_num\n"
    ],
    "MbppEval/100": [
        "import sys\n\ndef next_smallest_palindrome(num):\n    def is_palindrome(num_str):\n        return num_str == num_str[::-1]\n    \n    num_str = str(num)\n    if is_palindrome(num_str):\n        return num\n    else:\n        return None\n\n# Implementing step 2 correctly\ndef next_smallest_palindrome(num):\n    def is_palindrome(num_str):\n        return num_str == num_str[::-1]\n    \n    num_str = str(num)\n    if is_palindrome(num_str):\n        return num\n    else:\n        return int(num_str)\n\n\n\n\n",
        "def next_smallest_palindrome(num):\n    num_str = str(num)\n    num_len = len(num_str)\n\n    while True:\n        if num_str == num_str[::-1]:\n            return int(num_str)\n        num += 1\n        num_str = str(num)\n\ndef get_middle_index(num_len):\n    return num_len // 2\n\ndef split_number(num_str, middle):\n    if len(num_str) % 2 == 0:  # Handle even length\n        return num_str[:middle], num_str[middle:]\n    else:  # Handle odd length\n        return num_str[:middle], num_str[middle+1:]\n\ndef mirror_first_half(first_half_str):\n    return first_half_str[::-1]\n\ndef construct_palindrome(first_half, second_half):\n    return int(first_half + second_half)\n",
        "def next_smallest_palindrome(num):\n    def is_palindrome(num_str):\n        return num_str == num_str[::-1]\n\n    if is_palindrome(str(num)):\n        num += 1\n        return num\n    else:\n        num_str = str(num)\n        mid = len(num_str) // 2\n        left_half = num_str[:mid]\n        right_half = num_str[mid + len(num_str) % 2:]\n        if int(right_half) < int(left_half[::-1]):\n            new_num = int(left_half + left_half[-1] + left_half[::-1])\n        else:\n            new_num = int(left_half + left_half[-1::-1])\n\n        return new_num\n",
        "def next_smallest_palindrome(num):\n    def is_smallest_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    if is_smallest_palindrome(num):\n        return num\n    else:\n        num_str = str(num)\n        n = len(num_str)\n        mid = n // 2\n\n        left_half = num_str[:mid]\n        right_half = num_str[mid + n % 2:]\n\n        # Include the middle digit if the original number has an odd number of digits\n        potential_palindrome = int(left_half + num_str[mid] + left_half[::-1])\n        return potential_palindrome\n\n# Testing next_smallest_palindrome function with example cases\n\n\n",
        "def next_smallest_palindrome(num):\n    num_str = str(num)\n    \n    n = len(num_str)\n    is_odd = n % 2 != 0\n    left_half = num_str[:n//2]\n    middle_char = num_str[n//2] if is_odd else ''\n    \n    new_palindrome = left_half + middle_char + left_half[::-1]\n    \n    return int(new_palindrome)\n\n# Testing the function with examples\n\n\n\n"
    ],
    "MbppEval/101": [
        "def kth_element(arr, k):\n    if not arr:\n        return None\n    # continue with step 2 here\n",
        "def kth_element(arr, k):\n    k -= 1\n    return arr[k]\n",
        "def kth_element(arr, k):\n    if k <= 0 or k > len(arr):\n        return \"Invalid value of k\"\n    \n    return arr[k-1]\n",
        "def kth_element(arr, k):\n    if k < 1 or k > len(arr):\n        return None\n    \n    return arr[k-1]\n",
        "def kth_element(arr, k):\n    k -= 1\n    return arr[k]\n"
    ],
    "MbppEval/102": [
        "def snake_to_camel(word):\n    words = word.split('_')\n    camel_case_words = [words[0].capitalize()] + [word.capitalize() for word in words[1:]]\n    return ''.join(camel_case_words)\n",
        "def snake_to_camel(word):\n    words = word.split('_')\n    # Convert all words in the list to lowercase\n    words = [w.lower() for w in words]\n\n    # Capitalize the first letter of each word after the first word\n    camel_words = [words[0]]\n    camel_words.extend([w.capitalize() for w in words[1:]])\n\n    return ''.join(camel_words)\n",
        "def snake_to_camel(word):\n    words = word.split('_')\n    camel_case_string = words[0] + ''.join([word.capitalize() for word in words[1:]])\n    return camel_case_string\n",
        "def snake_to_camel(word):\n    words = word.split('_')\n    \n    # Capitalize the first letter of each word except for the first word\n    camel_words = [words[0]] + [word.capitalize() for word in words[1:]]\n    \n    # Step 3: Join the words back together to form the camel case string\n    camel_case_string = ''.join(camel_words)\n    \n    return camel_case_string\n\n# Test the function with examples\n\n\n\n",
        "def snake_to_camel(word):\n    words = word.split('_')\n    camel_words = [words[0]] + [word.capitalize() for word in words[1:]]\n    camel_case_word = ''.join(camel_words)\n    return camel_case_word\n"
    ],
    "MbppEval/103": [
        "def eulerian_num(n, m):\n    eulerian = [[0] * (m + 1) for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        eulerian[i][0] = 1\n    for j in range(1, m + 1):\n        eulerian[0][j] = 0\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            eulerian[i][j] = (i - 1) * eulerian[i - 1][j - 1] + (i - 1) * eulerian[i - 1][j]\n\n    return eulerian[n][m]\n",
        "def eulerian_num(n, m):\n    if n == 0 and m == 0:\n        return 1\n    \n    if n == 1 and m == 0:\n        return 0\n    \n    if m > n:\n        return 0\n    \n    return (n-m) * eulerian_num(n-1, m-1) + (m+1) * eulerian_num(n-1, m)\n",
        "def eulerian_num(n, m): \n    if n == 0:\n        return 1\n    elif m == 0:\n        return 0\n    elif m == 1:\n        return n + 1\n    \n    def eulerian_helper(i, j, memo):\n        if i == 0:\n            return 1\n        elif j == 0:\n            return 0\n        elif memo[i][j] != -1:\n            return memo[i][j]\n        \n        result = (j + 1) * eulerian_helper(i - 1, j, memo) + (i - j) * eulerian_helper(i - 1, j - 1, memo)\n        memo[i][j] = result\n        return result\n    \n    memo = [[-1 for _ in range(m + 1)] for _ in range(n + 1)]\n    \n    return eulerian_helper(n, m, memo)\n",
        "def eulerian_num(n, m):\n    def eulerian_recursive(n, m):\n        if m > n:\n            return 0\n        if m == 0:\n            return 1 if n == 0 else 0\n        \n        return (n - m) * eulerian_recursive(n - 1, m) + (m + 1) * eulerian_recursive(n - 1, m - 1)\n    \n    return eulerian_recursive(n, m)\n",
        "import math\n\ndef eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n\n    Examples:\n    eulerian_num(3, 1) == 4\n    eulerian_num(4, 1) == 11\n    eulerian_num(5, 3) == 26\n    '''\n    def binomial_coefficient(n, k):\n        return math.factorial(n) // (math.factorial(k) * math.factorial(n - k))\n    \n    def eulerian_number(n, m):\n        result = 0\n        for k in range(m + 1):\n            result += ((-1) ** k) * binomial_coefficient(n + 1, k) * ((m + 1 - k) ** n)\n        return result\n    \n    return eulerian_number(n, m)\n"
    ],
    "MbppEval/104": [
        "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()\n    return input_list\n",
        "def sort_sublists(input_list):\n    sorted_sublists = []\n    \n    for sublist in input_list:\n        sorted_sublist = sorted(sublist)\n        sorted_sublists.append(sorted_sublist)\n\n    return sorted_sublists\n",
        "def sort_sublists(input_list):\n    # Step 0: Define a function named sort_sublists that takes one parameter, input_list\n    sorted_list = []\n    \n    # Step 1: Create an empty list sorted_list to store the sorted sublists\n    for sublist in input_list:\n        sorted_sublist = sorted(sublist)\n        sorted_list.append(sorted_sublist)\n    \n    return sorted_list\n",
        "def sort_sublists(input_list):\n    sorted_sublists = []\n    for sublist in input_list:\n        sorted_sublist = sorted(sublist)\n        sorted_sublists.append(sorted_sublist)\n    \n    return sorted_sublists\n",
        "def sort_sublists(input_list):\n    result = []\n\n    for sublist in input_list:\n        sorted_sublist = sorted(sublist)\n        result.append(sorted_sublist)\n\n    return result\n"
    ],
    "MbppEval/105": [
        "def count(lst):   \n    count_true = 0\n    \n    for element in lst:\n        if element == True:\n            count_true += 1\n    \n    return count_true\n",
        "def count(lst):\n    true_count = 0\n\n    for item in lst:\n        if item == True:\n            true_count += 1\n\n    return true_count\n",
        "def count(lst):\n    count = 0\n    for elem in lst:\n        if elem is True:\n            count += 1\n    return count\n",
        "    return count\n",
        "return count\n"
    ],
    "MbppEval/106": [
        "def add_lists(test_list, test_tup):\n    new_list = list(test_tup) + test_list\n    new_tuple = tuple(new_list)\n    return new_tuple\n",
        "def add_lists(test_list, test_tup):\n    new_list = list(test_tup)\n    new_list.extend(test_list)\n    return tuple(new_list)\n",
        "def add_lists(test_list, test_tup):\n    new_tuple = (*test_tup, *test_list)\n    return new_tuple\n",
        "def add_lists(test_list, test_tup):\n    new_list = list(test_tup) + test_list\n    new_tuple = tuple(new_list)\n    return new_tuple\n",
        "def add_lists(test_list, test_tup):\n    new_list = list(test_tup)\n    new_list.extend(test_list)\n    return tuple(new_list)\n"
    ],
    "MbppEval/108": [
        "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    combined_list = list(heapq.merge(num1, num2, num3))\n    heapq.heapify(combined_list)\n    \n    result = []\n    while combined_list:\n        smallest = heapq.heappop(combined_list)\n        result.append(smallest)\n        \n    return result\n",
        "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    combined_list = num1 + num2 + num3\n    heapq.heapify(combined_list)\n    \n    final_sorted_list = []\n    \n    while combined_list:\n        final_sorted_list.append(heapq.heappop(combined_list))\n    \n    return final_sorted_list\n",
        "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    merged_list = num1 + num2 + num3\n    heapq.heapify(merged_list)\n    sorted_list = []\n    while merged_list:\n        sorted_list.append(heapq.heappop(merged_list))\n    return sorted_list\n",
        "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    merged_list = num1 + num2 + num3\n    heapq.heapify(merged_list)\n\n    sorted_result = []\n    while merged_list:\n        sorted_result.append(heapq.heappop(merged_list))\n\n    return sorted_result\n",
        "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    combined_list = num1 + num2 + num3\n    heapq.heapify(combined_list)\n    \n    sorted_output = []\n    \n    while combined_list:\n        sorted_output.append(heapq.heappop(combined_list))\n\n    return sorted_output\n"
    ],
    "MbppEval/109": [
        "def odd_equivalent(binary_string, n):\n    rotated_string = binary_string[-n % len(binary_string):] + binary_string[:-n % len(binary_string)]\n    count = sum(1 for char in rotated_string if int(char) % 2 != 0)\n    return count\n",
        "def odd_Equivalent(s, n):\n    count = 0\n    \n    for _ in range(n):\n        s = s[-1] + s[:-1]\n        \n        if int(s[-1]) % 2 != 0:\n            count += 1\n    \n    return count\n",
        "def odd_equivalent(s, n):\n    count = 0\n    for _ in range(n):\n        s = s[-1] + s[:-1]  # Rotate the binary string\n        decimal_num = int(s, 2)  # Convert binary string to decimal number\n        if decimal_num % 2 != 0:  # Check if decimal number is odd\n            count += 1\n    return count\n",
        "def odd_Equivalent(s, n):\n    count = 0\n\n    if s.count('1') % 2 != 0:\n        count += 1\n\n    for i in range(n):\n        ones_count = s.count('1')\n        if ones_count % 2 != 0:\n            count += 1\n        s = s[1:] + s[0]\n\n    return count\n",
        "def odd_Equivalent(s, n):\n    count = 0\n    for i in range(n):\n        new_s = s[-1] + s[:-1]  # Rotate the binary string by moving the last character to the front\n        s = new_s\n        \n        # Count the number of odd values in the rotated binary string\n        count += sum(int(digit) % 2 != 0 for digit in s)\n        \n    return count\n"
    ],
    "MbppEval/111": [
        "def common_in_nested_lists(nestedlist):\n    common_elements_set = set(nestedlist[0])\n    \n    # Iterate over the remaining lists in the nested list\n    for lst in nestedlist[1:]:\n        current_set = set(lst)\n        \n        # Intersect the current_set with the common_elements_set\n        common_elements_set = common_elements_set.intersection(current_set)\n    \n    # After iterating through all lists\n    common_elements_list = list(common_elements_set)\n    \n    return common_elements_list\n",
        "def common_in_nested_lists(nestedlist):\n    common_elements = []\n\n    if not nestedlist:\n        return common_elements\n\n    first_list = nestedlist[0]\n    \n    common_elements.extend(first_list)\n    \n    for sub_list in nestedlist[1:]:\n        common_elements = [element for element in common_elements if element in sub_list]\n\n    return common_elements\n",
        "def common_in_nested_lists(nestedlist):\n    result = []\n    \n    if nestedlist:\n        result = nestedlist[0]\n    \n    for sublist in nestedlist[1:]:\n        common_elements = [element for element in result if element in sublist]\n        result = common_elements\n    \n    return result\n",
        "def common_in_nested_lists(nestedlist):\n    common_elements = set()\n    \n    # Step 0: Initialize a set to store the common elements\n    \n    # Step 1: Iterate through the first list and add all elements to the set\n    common_elements.update(nestedlist[0])\n    \n    # Step 2: Iterate through the rest of the lists\n    for sublist in nestedlist[1:]:\n        common_elements.intersection_update(set(sublist))\n\n    return list(common_elements)\n",
        "def common_in_nested_lists(nestedlist):\n    common_elements = set(nestedlist[0])  # Step 0\n    \n    for nested_list in nestedlist:  # Step 1 corrected\n        common_elements = common_elements.intersection(set(nested_list))  # Step 2\n        \n    return list(common_elements)  # Step 3\n"
    ],
    "MbppEval/113": [
        "def check_integer(text):\n    if not isinstance(text, str):\n        return False\n\n    return text.isdigit()\n",
        "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n\n# Testing the function with examples\n\n\n\n",
        "def check_integer(text):\n    if text.isdigit():\n        return True\n    else:\n        return False\n",
        "def check_integer(text):\n    if not text:\n        return False\n\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "def check_integer(text):\n    if not text:\n        return False\n\n    for char in text:\n        if not char.isdigit():\n            return False\n\n    return True\n"
    ],
    "MbppEval/115": [
        "def empty_dit(list1):\n    for dictionary in list1:\n        if not bool(dictionary):\n            return False\n    return True\n",
        "def empty_dit(list1):\n    for dictionary in list1:\n        if not isinstance(dictionary, dict) or dictionary:\n            return False\n    return True\n",
        "def empty_dit(list1):\n    result = True\n    \n    for dictionary in list1:\n        if dictionary:\n            result = False\n            break\n    \n    return result\n",
        "def empty_dit(list1):\n    for dictionary in list1:\n        if not isinstance(dictionary, dict):\n            return False\n        if len(dictionary) != 0:\n            return False\n    return True\n",
        "def empty_dit(list1):\n    for d in list1:\n        if not isinstance(d, dict):\n            return False\n        if d:\n            return False\n    return True\n"
    ],
    "MbppEval/116": [
        "def tuple_to_int(nums):\n    result_str = ''\n    \n    for num in nums:\n        result_str += str(num)\n    \n    int_result = int(result_str)\n    \n    return int_result\n",
        "def tuple_to_int(nums):\n    result_str = ''\n\n    for num in nums:\n        result_str += str(num)\n\n    return int(result_str)\n",
        "def tuple_to_int(nums):\n    int_str = ''\n    \n    for num in nums:\n        int_str += str(num)\n    \n    return int(int_str)\n",
        "def tuple_to_int(nums):\n    num_str = [str(num) for num in nums]\n    combined_str = ''.join(num_str)\n    final_int = int(combined_str)\n    return final_int\n",
        "def tuple_to_int(nums):\n    result_str = ''\n\n    for num in nums:\n        result_str += str(num)\n        \n    int_val = int(result_str)\n    \n    return int_val\n"
    ],
    "MbppEval/117": [
        "def list_to_float(test_list):\n    modified_list = []\n    for sublist in test_list:\n        modified_sublist = []\n        for element in sublist:\n            try:\n                modified_sublist.append(float(element))\n            except ValueError:\n                modified_sublist.append(element)\n        modified_list.append(tuple(modified_sublist))  # Convert to tuple before appending\n    return modified_list\n",
        "def list_to_float(test_list):\n    converted_list = []\n    \n    for sublist in test_list:\n        converted_sublist = []\n        \n        for item in sublist:\n            try:\n                converted_item = float(item)\n            except ValueError:\n                converted_item = item\n            converted_sublist.append(converted_item)\n        \n        converted_list.append(tuple(converted_sublist))\n    \n    return converted_list\n",
        "def list_to_float(test_list):\n    converted_list = []\n    \n    for tup in test_list:\n        converted_tuple = []\n        \n        for elem in tup:\n            try:\n                converted_tuple.append(float(elem))\n            except ValueError:\n                converted_tuple.append(elem)\n        \n        converted_list.append(tuple(converted_tuple))\n    \n    return converted_list\n",
        "def list_to_float(test_list):\n    converted_list = []\n    \n    for sublist in test_list:\n        converted_sublist = []\n        for element in sublist:\n            try:\n                converted_element = float(element)\n                converted_sublist.append(converted_element)\n            except ValueError:\n                converted_sublist.append(element)\n        \n        converted_list.append(tuple(converted_sublist))\n    \n    return converted_list\n",
        "def list_to_float(test_list):\n    converted_list = []\n\n    for tup in test_list:\n        converted_tup = []\n\n        for elem in tup:\n            try:\n                converted_elem = float(elem)\n            except ValueError:\n                converted_elem = elem\n            converted_tup.append(converted_elem)\n\n        converted_list.append(tuple(converted_tup))\n\n    return converted_list\n"
    ],
    "MbppEval/118": [
        "def string_to_list(string):\n    return string.split()\n",
        "def string_to_list(string):\n    return string.split()\n",
        "def string_to_list(string): \n    return string.split()\n",
        "def string_to_list(string):\n    return string.split()\n",
        "def string_to_list(string):\n    return string.split(' ')\n"
    ],
    "MbppEval/119": [
        "def search(arr):\n    unique_element = None\n    n = len(arr)\n    \n    for i in range(0, n, 2):\n        if i == n - 1 or arr[i] != arr[i + 1]:\n            unique_element = arr[i]\n            break\n    \n    return unique_element\n",
        "def search(arr):\n    if len(arr) == 1:\n        return arr[0]\n\n    start, end = 0, len(arr) - 1\n\n    while start < end:\n        mid = (start + end) // 2\n\n        if arr[mid] != arr[mid - 1] and arr[mid] != arr[mid + 1]:\n            return arr[mid]\n        elif mid % 2 == 0 and arr[mid] == arr[mid + 1]:\n            start = mid + 2\n        else:\n            end = mid\n",
        "def search(arr):\n    # Check if the array is empty\n    if not arr:\n        return None\n    \n    for i in range(0, len(arr), 2):\n        # Check if the next element is out of bounds or current element is not equal to next element\n        if i == len(arr)-1 or arr[i] != arr[i+1]:\n            return arr[i]\n",
        "def search(arr):\n    index = 0\n    n = len(arr)\n    \n    while index < n:\n        if index == n - 1 or arr[index] != arr[index + 1]:\n            return arr[index]\n        \n        index += 2\n",
        "def search(arr):\n    if len(arr) == 1:\n        return arr[0]\n    \n    for i in range(0, len(arr)-1, 2):\n        if arr[i] != arr[i+1]:\n            return arr[i]\n    \n    return arr[-1]\n"
    ],
    "MbppEval/120": [
        "def max_product_tuple(list1):\n    max_product = float('-inf')  # Initialize max_product to negative infinity\n    \n    for tup in list1:  # Iterate through each tuple in the list\n        product = abs(tup[0]) * abs(tup[1])  # Calculate the product of the absolute values of the numbers in the tuple\n        max_product = max(max_product, product)  # Update max_product if the calculated product is larger\n        \n    return max_product  # Return the maximum product found\n",
        "def max_product_tuple(list1):\n    max_product = 0\n    for pair in list1:\n        abs_product = abs(pair[0] * pair[1])\n        if abs_product > max_product:\n            max_product = abs_product\n    return max_product\n",
        "def max_product_tuple(list1):\n    max_product = float('-inf')\n    \n    for tup in list1:\n        absolute_product = abs(tup[0]) * abs(tup[1])\n        if absolute_product > max_product:\n            max_product = absolute_product\n    \n    return max_product\n",
        "def max_product_tuple(list1):\n    max_product = 0\n\n    for tuple1 in list1:\n        product = abs(tuple1[0] * tuple1[1])\n        if product > max_product:\n            max_product = product\n\n    return max_product\n",
        "def max_product_tuple(list1):\n    max_product = 0\n    \n    for tuple_pair in list1:\n        product = abs(tuple_pair[0] * tuple_pair[1])\n        if product > max_product:\n            max_product = product\n    \n    return max_product\n"
    ],
    "MbppEval/123": [
        "def amicable_numbers_sum(limit):\n    def proper_divisors_sum(n):\n        return sum([i for i in range(1, n) if n % i == 0])\n\n    def is_amicable(a):\n        b = proper_divisors_sum(a)\n        return a != b and a == proper_divisors_sum(b)\n\n    amicable_sum = sum([i for i in range(1, limit) if is_amicable(i)])\n\n    return amicable_sum\n",
        "def amicable_numbers_sum(limit):\n    def find_divisors(num):\n        divisors = []\n        for i in range(1, num):\n            if num % i == 0:\n                divisors.append(i)\n        return divisors\n\n    def sum_divisors(num):\n        return sum(find_divisors(num))\n\n    amicable_sum = 0\n    for num in range(1, limit + 1):\n        divisor_sum = sum_divisors(num)\n        if divisor_sum != num and sum_divisors(divisor_sum) == num:\n            amicable_sum += num\n\n    return amicable_sum\n",
        "def amicable_numbers_sum(limit):\n    def sum_divisors(n):\n        divisors_sum = 1\n        for i in range(2, n):\n            if n % i == 0:\n                divisors_sum += i\n        return divisors_sum\n\n    total_sum = 0\n    for n in range(1, limit + 1):\n        sum_div_n = sum_divisors(n)\n        sum_div_sum_div_n = sum_divisors(sum_div_n)\n\n        if n != sum_div_n and n == sum_div_sum_div_n:\n            total_sum += n\n\n    return total_sum\n",
        "def amicable_numbers_sum(limit):\n    def sum_proper_divisors(num):\n        divisors_sum = 0\n        for i in range(1, num):\n            if num % i == 0:\n                divisors_sum += i\n        return divisors_sum\n\n    total_sum = 0\n    for i in range(1, limit + 1):\n        divisors_sum_i = sum_proper_divisors(i)\n        \n        if divisors_sum_i != i and divisors_sum_i <= limit:\n            if i == sum_proper_divisors(divisors_sum_i):\n                total_sum += i\n\n    return total_sum\n",
        "def sum_divisors(num):\n    divisors_sum = 0\n    for i in range(1, num):\n        if num % i == 0:\n            divisors_sum += i\n    return divisors_sum\n\ndef amicable_numbers_sum(limit):\n    total_sum = 0\n    for num in range(1, limit + 1):\n        sum_of_divisors = sum_divisors(num)\n        if sum_of_divisors != num and sum_divisors(sum_of_divisors) == num:\n            total_sum += num\n    return total_sum\n"
    ],
    "MbppEval/124": [
        "import cmath\n\ndef angle_complex(a, b):\n    return cmath.phase(a + b*1j)\n",
        "import cmath\n\ndef angle_complex(a, b):\n    angle = cmath.phase(complex(a, b))\n    return angle\n",
        "import cmath\n\ndef angle_complex(a, b):\n    complex_num = a + b * 1j\n    angle = cmath.phase(complex_num)\n    return angle\n",
        "import cmath\n\ndef angle_complex(a, b):\n    return cmath.phase(complex(a, b))\n",
        "import cmath\ndef angle_complex(a, b):\n    complex_number = complex(a, b)\n    phase = cmath.phase(complex_number)\n    return phase\n"
    ],
    "MbppEval/125": [
        "def find_length(string):\n    max_diff = 0\n    count_zero = 0\n    count_one = 0\n    \n    for char in string:\n        if char == '0':\n            count_zero += 1\n        else:\n            count_one += 1\n            \n        diff = abs(count_zero - count_one)\n        max_diff = max(max_diff, diff)\n    \n    return max_diff\n",
        "def find_length(string): \n    max_diff = 0\n    count = 0\n    \n    for char in string:\n        if char == '0':\n            count += 1\n        else:\n            count -= 1\n        \n        diff = abs(count)\n        max_diff = max(max_diff, diff)\n    \n    return max_diff\n",
        "def find_length(string):\n    max_diff = 0\n    \n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            substr = string[i:j+1]\n            count_0 = substr.count('0')\n            count_1 = len(substr) - count_0\n            diff = abs(count_0 - count_1)\n            max_diff = max(max_diff, diff)\n\n    return max_diff\n",
        "def find_length(string):\n    max_diff = 0\n    \n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            count_0 = 0\n            count_1 = 0\n            for k in range(i, j+1):\n                if string[k] == '0':\n                    count_0 += 1\n                else:\n                    count_1 += 1\n            diff = abs(count_0 - count_1)\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff\n",
        "def find_length(string):\n    max_diff = 0\n    count = 0\n\n    for char in string:\n        if char == '0':\n            count -= 1\n        else:\n            count += 1\n\n        max_diff = max(max_diff, abs(count))\n\n    return max_diff\n"
    ],
    "MbppEval/126": [
        "def sum(a, b):\n    common_divisors_list = common_divisors(a, b)\n    return sum(common_divisors_list)\n",
        "def common_divisors(a, b):\n    def find_divisors(num):\n        divisors = set()\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                divisors.add(i)\n                divisors.add(num // i)\n        return divisors\n\n    divisors_a = find_divisors(a)\n    divisors_b = find_divisors(b)\n    \n    common_divisors = divisors_a.intersection(divisors_b)\n    \n    return sum(common_divisors)\n",
        "def sum(a,b):\n    common_divisors = []\n    for i in range(1, min(a,b)+1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    return sum_common_divisors(common_divisors)\n\ndef sum_common_divisors(common_divisors):\n    return sum(common_divisors)\n\n# Testing the function\n\n",
        "def sum_of_common_divisors(a, b):\n    common_divisors = []\n    \n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    \n    return sum(common_divisors)\n\n# Test the function with examples\n\n\n\n",
        "def sum(a, b):\n    def common_divisors(a, b):\n        divisors_a = [i for i in range(1, a+1) if a % i == 0]\n        divisors_b = [i for i in range(1, b+1) if b % i == 0]\n        \n        common_divisors = set(divisors_a) & set(divisors_b)\n        \n        return list(common_divisors)\n    \n    common_div = common_divisors(a, b)\n    return sum(common_div)\n"
    ],
    "MbppEval/127": [
        "def multiply_int(x, y):\n    return x * y\n",
        "def multiply_int(x, y):\n    result = x * y\n    return result\n",
        "def multiply_int(x, y):\n    result = x * y\n    return result\n",
        "def multiply_int(x, y):\n    result = x * y\n    return result\n",
        "def multiply_int(x, y):\n    result = x * y\n    return result\n"
    ],
    "MbppEval/128": [
        "import re\n\ndef long_words(n, input_str):\n    words_list = re.findall(r'\\b\\w+\\b', input_str)\n    long_words_list = []\n\n    for word in words_list:\n        if len(word) > n:\n            long_words_list.append(word)\n\n    return long_words_list\n",
        "def long_words(n, input_string):\n    words = input_string.split()\n    return [word for word in words if len(word) > n]\n",
        "def long_words(n, str):\n    words = str.split()\n    long_words_list = [word for word in words if len(word) > n]\n    return long_words_list\n",
        "def long_words(n, s):\n    words = s.split()\n    long_words_list = [word for word in words if len(word) > n]\n    return long_words_list\n",
        "def long_words(n, s):\n    words = s.split()\n    long_words_list = [word for word in words if len(word) > n]\n    return long_words_list\n"
    ],
    "MbppEval/129": [
        "def magic_square_test(my_matrix):\n    # Check if the input matrix is not empty\n    if len(my_matrix) == 0:\n        return False\n    \n    # Check if the matrix is square\n    if len(my_matrix) != len(my_matrix[0]):\n        return False\n\n    # Calculate the sum of the first row\n    magic_sum = sum(my_matrix[0])\n\n    # Check the sum of each row\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return False\n\n    # Transpose the matrix to calculate column sums\n    transposed_matrix = list(zip(*my_matrix))\n\n    # Check the sum of each column\n    for col in transposed_matrix:\n        if sum(col) != magic_sum:\n            return False\n\n    # Check the sum of the main diagonal\n    main_diagonal_sum = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    if main_diagonal_sum != magic_sum:\n        return False\n\n    # Check the sum of the secondary diagonal\n    secondary_diagonal_sum = sum(my_matrix[i][len(my_matrix) - i - 1] for i in range(len(my_matrix)))\n    if secondary_diagonal_sum != magic_sum:\n        return False\n\n    # If all conditions are met, it's a Magic Square\n    return True\n",
        "def magic_square_test(my_matrix):\n    reference_sum = sum(my_matrix[0])\n\n    # Check rows\n    for row in my_matrix:\n        if sum(row) != reference_sum:\n            return False\n\n    # Check columns\n    for i in range(len(my_matrix)):\n        col_sum = sum(row[i] for row in my_matrix)\n        if col_sum != reference_sum:\n            return False\n\n    # Check main diagonal\n    if sum(my_matrix[i][i] for i in range(len(my_matrix))) != reference_sum:\n        return False\n\n    # Check secondary diagonal\n    if sum(my_matrix[i][len(my_matrix)-1-i] for i in range(len(my_matrix))) != reference_sum:\n        return False\n\n    return True\n",
        "def magic_square_test(my_matrix):\n    def is_square_matrix(matrix):\n        num_rows = len(matrix)\n        for row in matrix:\n            if len(row) != num_rows:\n                return False\n        return True\n\n    if not is_square_matrix(my_matrix):\n        return False\n\n    target_sum = sum(my_matrix[0])\n\n    for row in my_matrix[1:]:\n        if sum(row) != target_sum:\n            return False\n\n    for col in range(len(my_matrix)):\n        col_sum = sum(row[col] for row in my_matrix)\n        if col_sum != target_sum:\n            return False\n\n    diagonal_sum1 = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    diagonal_sum2 = sum(my_matrix[i][len(my_matrix)-1-i] for i in range(len(my_matrix)))\n\n    return diagonal_sum1 == target_sum and diagonal_sum2 == target_sum\n\n# Test the function\n\n\n\n",
        "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n    if n == 0:\n        return False  # Empty matrix is not a magic square\n        \n    # Calculate sum of the first row\n    sum_row = sum(my_matrix[0])\n    \n    # Check sum of the rows\n    for i in range(1, n):\n        if sum(my_matrix[i]) != sum_row:\n            return False  # Rows don't have the same sum\n            \n    # Check sum of the columns\n    for i in range(n):\n        col_sum = sum(row[i] for row in my_matrix)\n        if col_sum != sum_row:\n            return False  # Columns don't have the same sum\n    \n    # Check sum of the diagonals\n    diag_sum1 = sum(my_matrix[i][i] for i in range(n))\n    diag_sum2 = sum(my_matrix[i][n-1-i] for i in range(n))\n    if diag_sum1 != sum_row or diag_sum2 != sum_row:\n        return False  # Diagonals don't have the same sum\n        \n    # Check if all sums are equal\n    if sum_row != diag_sum1 or sum_row != diag_sum2:\n        return False  # Sums are not equal\n        \n    return True  # Matrix is a magic square\n",
        "def magic_square_test(my_matrix):\n    num_rows = len(my_matrix)\n    num_cols = len(my_matrix[0]) if num_rows > 0 else 0\n    if num_rows != num_cols:\n        return False\n\n    expected_sum = sum(my_matrix[0])\n\n    for row in my_matrix:\n        if len(row) != num_cols:\n            return False\n\n        row_sum = sum(row)\n        if row_sum != expected_sum:\n            return False\n\n    for col_idx in range(num_cols):\n        col_sum = sum(row[col_idx] for row in my_matrix)\n        if col_sum != expected_sum:\n            return False\n\n    diagonal_sum = sum(my_matrix[i][i] for i in range(num_cols))\n    if diagonal_sum != expected_sum:\n        return False\n\n    secondary_diagonal_sum = sum(my_matrix[i][num_cols - 1 - i] for i in range(num_cols))\n    if secondary_diagonal_sum != expected_sum:\n        return False\n\n    return True\n"
    ],
    "MbppEval/130": [
        "from collections import defaultdict\n\ndef max_occurrences(nums):\n    frequency_dict = defaultdict(int)\n\n    for num in nums:\n        frequency_dict[num] += 1\n\n    max_item = max(frequency_dict, key=frequency_dict.get)\n    max_freq = frequency_dict[max_item]\n\n    return max_item, max_freq\n",
        "from collections import defaultdict\n\ndef max_occurrences(nums):\n    frequency_map = defaultdict(int)\n    \n    for num in nums:\n        frequency_map[num] += 1\n    \n    max_item = max(frequency_map, key=frequency_map.get)\n    max_count = frequency_map[max_item]\n    \n    return max_item, max_count\n",
        "from collections import defaultdict\n\ndef max_occurrences(nums):\n    counts = defaultdict(int)\n    \n    for num in nums:\n        counts[num] += 1\n\n    max_num = max(counts, key=counts.get)\n    \n    return (max_num, counts[max_num])\n",
        "from collections import defaultdict\n\ndef max_occurrences(nums):\n    freq_dict = defaultdict(int)\n    \n    for num in nums:\n        freq_dict[num] += 1\n    \n    max_element = max(freq_dict, key=freq_dict.get)\n    max_freq = freq_dict[max_element]\n    \n    return (max_element, max_freq)\n",
        "from collections import defaultdict\n\ndef max_occurrences(nums):\n    freq_dict = defaultdict(int)\n    \n    # Count the frequency of each item in the list\n    for item in nums:\n        freq_dict[item] += 1\n        \n    # Find the item with the maximum frequency\n    max_item = max(freq_dict, key=freq_dict.get)\n    \n    return max_item, freq_dict[max_item]\n"
    ],
    "MbppEval/131": [
        "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    \n    vowel_list = [char for char in str1 if char in vowels]\n    \n    reversed_vowels = vowel_list[::-1]\n\n    reversed_str = ''\n    index = 0\n    for char in str1:\n        if char in vowels:\n            reversed_str += reversed_vowels[index]\n            index += 1\n        else:\n            reversed_str += char\n    \n    return reversed_str\n",
        "def reverse_vowels(str1):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    char_list = list(str1)\n    \n    start = 0\n    end = len(char_list) - 1\n    \n    while start < end:\n        if char_list[start].lower() in vowels and char_list[end].lower() in vowels:\n            char_list[start], char_list[end] = char_list[end], char_list[start]\n            \n        start += 1\n        end -= 1\n    \n    return \"\".join(char_list)\n",
        "def reverse_vowels(str1):\n    left = 0\n    right = len(str1) - 1\n    \n    str_list = list(str1)\n    \n    vowels = set(\"aeiouAEIOU\")\n    \n    while left < right:\n        if str_list[left] not in vowels:\n            left += 1\n        elif str_list[right] not in vowels:\n            right -= 1\n        else:\n            str_list[left], str_list[right] = str_list[right], str_list[left]\n            left += 1\n            right -= 1\n    \n    return \"\".join(str_list)\n",
        "def reverse_vowels(str1):\n    vowels = set(\"aeiouAEIOU\")\n    vowels_found = []\n    \n    for char in str1:\n        if char in vowels:\n            vowels_found.append(char)\n    \n    reversed_vowels = vowels_found[::-1]\n\n    modified_str = \"\"\n    for char in str1:\n        if char in vowels:\n            modified_str += reversed_vowels.pop()\n        else:\n            modified_str += char\n    \n    return modified_str\n",
        "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    str_list = list(str1)\n    \n    left_ptr, right_ptr = 0, len(str_list) - 1\n    \n    while left_ptr < right_ptr:\n        if str_list[left_ptr] in vowels and str_list[right_ptr] in vowels:\n            str_list[left_ptr], str_list[right_ptr] = str_list[right_ptr], str_list[left_ptr]\n            left_ptr += 1\n            right_ptr -= 1\n        elif str_list[left_ptr] not in vowels:\n            left_ptr += 1\n        elif str_list[right_ptr] not in vowels:\n            right_ptr -= 1\n\n    return ''.join(str_list)\n"
    ],
    "MbppEval/132": [
        "def tup_string(tup1):\n    result = \"\"\n    \n    for element in tup1:\n        result += str(element)\n    \n    return result\n",
        "def tup_string(tup1):\n    result = \"\"\n    for char in tup1:\n        result += char\n    return result\n",
        "def tup_string(tup1):\n    result = \"\"  # Step 0: Create an empty string\n    \n    for char in tup1:  # Step 1: Loop through each element in the input tuple\n        result += char  # Step 2: Add each element to the string\n    \n    return result  # Step 3: Return the final string\n",
        "def tup_string(tup1):\n    return ''.join(map(str, tup1))\n",
        "def tup_string(tup1):\n    return ''.join(tup1)\n"
    ],
    "MbppEval/133": [
        "def sum_negativenum(nums):\n    negative_sum = 0\n    \n    for num in nums:\n        if num < 0:\n            negative_sum += num\n\n    return negative_sum\n",
        "def sum_negativenum(nums):\n    sum_neg = 0\n\n    for num in nums:\n        if num < 0:\n            sum_neg += num\n\n    return sum_neg\n",
        "def sum_negativenum(nums):\n    negative_sum = 0\n    \n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    \n    return negative_sum\n",
        "def sum_negativenum(nums):\n    neg_sum = 0\n    \n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    \n    return neg_sum\n",
        "def sum_negativenum(nums):\n    neg_sum = 0\n    \n    for num in nums:\n        if num < 0:\n            neg_sum += num\n            \n    return neg_sum\n"
    ],
    "MbppEval/135": [
        "def hexagonal_num(n):\n    if not isinstance(n, int) or n <= 0:\n        return None\n    \n    hexagonal_number = n * (2*n - 1)\n    return hexagonal_number\n",
        "def hexagonal_num(n):\n    # Step 0: Verify input\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n    \n    # Step 2: Calculate hexagonal number\n    hexagonal_number = n * (2*n - 1)\n    \n    return hexagonal_number\n",
        "def hexagonal_num(n): \n    if n <= 0:\n        return None\n    return n * (2*n - 1)\n",
        "def hexagonal_num(n): \n    if not isinstance(n, int) or n <= 0:\n        return \"Input must be a positive integer\"\n    else:\n        hexagonal_number = n * (2 * n - 1)\n        return hexagonal_number\n",
        "def hexagonal_num(n):\n    if not isinstance(n, int) or n <= 0:\n        return \"Input must be a positive integer.\"\n\n    return n * (2 * n - 1)\n"
    ],
    "MbppEval/137": [
        "from array import array\n\ndef zero_count(nums):\n    zero_count = 0\n    non_zero_count = 0\n    \n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    \n    if non_zero_count == 0:\n        ratio = 0\n    else:\n        ratio = zero_count / non_zero_count\n    \n    return round(ratio, 2)\n",
        "from array import array\n\ndef zero_count(nums):\n    zero_count = 0\n    total_count = len(nums)\n    \n    for num in nums:\n        if num == 0:\n            zero_count += 1\n    \n    ratio = zero_count / total_count if total_count > 0 else 0\n    return round(ratio, 2)\n",
        "from array import array\n\ndef zero_count(nums):\n    zero_count = nums.count(0)\n    non_zero_count = len(nums) - zero_count\n    \n    if non_zero_count == 0:\n        return 0.00\n    \n    ratio = zero_count / non_zero_count\n    return round(ratio, 2)\n\n# Test the function with examples\n\n\n\n",
        "from array import array\n\ndef zero_count(nums):\n    zero_count = 0\n    non_zero_count = 0\n\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n\n    ratio = round(zero_count / non_zero_count, 2) if non_zero_count > 0 else 0.00\n\n    return ratio\n",
        "from array import array\n\ndef zero_count(nums):\n    zero_count = 0\n    \n    # Step 0: Count the number of zeroes in the array\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n    \n    # Step 1: Calculate the ratio of zeroes to the total number of elements in the array\n    total_count = zero_count + len(nums)\n    ratio = float(zero_count) / total_count\n    \n    # Step 2: Return the ratio as a float\n    return round(ratio, 2)\n"
    ],
    "MbppEval/138": [
        "def is_Sum_Of_Powers_Of_Two(n): \n    if n <= 0:\n        return False\n    \n    power = 1\n    while power <= n:\n        if n % power != 0:\n            power *= 2\n\n            if power > n:\n                return False\n\n    return True\n",
        "def is_Sum_Of_Powers_Of_Two(n): \n    power = 1\n    \n    while power < n:\n        power *= 2\n        \n    power //= 2\n    \n    if n == power:\n        return True\n    elif power > n:\n        return False\n    else:\n        return is_Sum_Of_Powers_Of_Two(n - power)\n",
        "def is_Sum_Of_Powers_Of_Two(n): \n    if n < 1:\n        return False\n    \n    for i in range(n, 0, -1):\n        if 2**i <= n:\n            n -= 2**i\n            if n == 0:\n                return True\n    \n    return False\n",
        "def is_Sum_Of_Powers_Of_Two(n):\n    power_of_2 = 0\n    \n    while 2**power_of_2 <= n:\n        power_of_2 += 1\n    \n    power_of_2 -= 1  # Move back to the last valid power of 2\n\n    while power_of_2 >= 0:\n        if n >= 2**power_of_2:\n            n -= 2**power_of_2\n            if n == 0:\n                return True\n        power_of_2 -= 1\n\n    return False\n",
        "def is_Sum_Of_Powers_Of_Two(n): \n    if n < 1:\n        return False\n    \n    while n > 1:\n        if n % 2 != 0:\n            return False\n        n = n / 2\n    \n    return n == 1\n"
    ],
    "MbppEval/139": [
        "import math\n\ndef circle_circumference(r):\n    pi = math.pi\n    circumference = 2 * pi * r\n    return circumference\n",
        "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n\n    Examples:\n    circle_circumference(10) == 62.830\n    circle_circumference(5) == 31.415\n    circle_circumference(4) == 25.132\n    '''\n    circumference = 2 * math.pi * r\n    return round(circumference, 3)\n",
        "import math\n\ndef circle_circumference(r):\n    circumference = 2 * math.pi * r\n    return circumference\n",
        "import math\n\ndef circle_circumference(r):\n    pi = math.pi\n    circumference = 2 * pi * r\n    return circumference\n",
        "import math\n\ndef circle_circumference(r):\n    return 2 * math.pi * r\n"
    ],
    "MbppEval/140": [
        "def extract_singly(test_list):\n    result = []\n    \n    for tpl in test_list:\n        for num in tpl:\n            result.append(num)\n    \n    return result\n",
        "def extract_singly(test_list):\n    result = []  # Initialize an empty list to store the final output\n    \n    for tpl in test_list:  # Iterate over each tuple in the input list\n        for num in tpl:  # Iterate over each element in the tuple\n            result.append(num)  # Append each element to the result list\n    \n    return result  # Return the result list with all the elements flattened\n",
        "def extract_singly(test_list):\n    extracted_numbers = []\n    \n    for sublist in test_list:\n        for num in sublist:\n            extracted_numbers.append(num)\n    \n    return extracted_numbers\n",
        "def extract_singly(test_list):\n    unique_numbers = set()\n    \n    for sub_list in test_list:\n        for num in sub_list:\n            unique_numbers.add(num)\n    \n    return list(unique_numbers)\n",
        "def extract_singly(test_list):\n    unique_numbers = set()\n    for tup in test_list:\n        for num in tup:\n            unique_numbers.add(num)\n    \n    return list(unique_numbers)\n"
    ],
    "MbppEval/141": [
        "def pancake_sort(nums):\n    def find_max_index(nums):\n        max_index = 0\n        for i in range(len(nums)):\n            if nums[i] > nums[max_index]:\n                max_index = i\n        return max_index\n\n    def reverse_subarray(nums, end):\n        start = 0\n        while start < end:\n            nums[start], nums[end] = nums[end], nums[start]\n            start += 1\n            end -= 1\n        return nums\n\n    for size in range(len(nums), 1, -1):\n        max_index = find_max_index(nums[:size])\n        nums = reverse_subarray(nums, max_index)\n        nums = reverse_subarray(nums, size - 1)\n\n    return nums\n",
        "def pancake_sort(nums):\n    def find_max_index(arr):\n        max_index = 0\n        for i in range(1, len(arr)):\n            if arr[i] > arr[max_index]:\n                max_index = i\n        return max_index\n\n    def pancake_reverse(arr, k):\n        return arr[:k+1][::-1] + arr[k+1:]\n\n    sorted_nums = []\n    n = len(nums)\n    for i in range(n, 1, -1):\n        max_index = find_max_index(nums[:i])\n        nums = pancake_reverse(nums, max_index)\n        nums = pancake_reverse(nums, i-1)\n        sorted_nums.insert(0, nums.pop())\n    sorted_nums.insert(0, nums[0])  # Insert the remaining element\n    return sorted_nums\n",
        "def pancake_sort(nums):\n    def find_max_index(lst):\n        return max(range(len(lst)), key=lst.__getitem__)\n    \n    def flip(lst, k):\n        return lst[:k+1][::-1] + lst[k+1:]\n    \n    n = len(nums)\n    for size in range(n, 1, -1):\n        max_index = find_max_index(nums[:size])\n        if max_index != size - 1:\n            nums = flip(nums, max_index)\n            nums = flip(nums, size - 1)\n    \n    return nums\n",
        "def pancake_sort(nums):\n    n = len(nums)\n    sorted_flag = False\n    while not sorted_flag:\n        sorted_flag = True\n        for i in range(n-1, 0, -1):\n            if nums[i] < nums[i-1]:\n                max_index = nums.index(max(nums[:i+1]))\n                nums[:max_index+1] = nums[:max_index+1][::-1]\n                nums[:i+1] = nums[:i+1][::-1]\n                sorted_flag = False\n                break\n                \n    return nums\n",
        "def pancake_sort(nums):\n    def flip(nums, k):\n        start = 0\n        while start < k:\n            nums[start], nums[k] = nums[k], nums[start]\n            start += 1\n            k -= 1\n\n    n = len(nums)\n    for i in range(n - 1, 0, -1):\n        max_index = nums.index(max(nums[:i + 1]))\n        if max_index != i:\n            flip(nums, max_index)\n            flip(nums, i)\n\n    return nums\n"
    ],
    "MbppEval/142": [
        "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n",
        "def count_samepair(list1, list2, list3):\n    count = 0\n    \n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    \n    return count\n",
        "def count_samepair(list1, list2, list3):\n    count = 0\n    \n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    \n    return count\n",
        "def count_samepair(list1, list2, list3):\n    count = 0\n    if len(list1) != len(list2) or len(list1) != len(list3):\n        raise ValueError(\"Input lists must be of the same length\")\n    \n    for item1, item2, item3 in zip(list1, list2, list3):\n        if item1 == item2 == item3:\n            count += 1\n    \n    return count\n",
        "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(min(len(list1), len(list2), len(list3))):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n"
    ],
    "MbppEval/143": [
        "def find_lists(Input): \n    if not isinstance(Input, tuple):\n        return \"Input should be a tuple.\"\n    \n    count = 0\n    \n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    \n    return count\n",
        "def find_lists(Input): \n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    return count\n",
        "def find_lists(Input):\n    count = 0  # Step 2: Initialize a variable to count the number of lists in the tuple\n\n    for element in Input:\n        if isinstance(element, list):  # Step 4: Check if the current element is a list\n            count += 1\n\n    return count  # Step 5: Return the count of lists in the tuple\n",
        "def find_lists(Input):\n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    \n    return count\n",
        "def find_lists(Input): \n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    \n    return count\n"
    ],
    "MbppEval/145": [
        "def max_Abs_Diff(arr):\n    max_diff = None\n    min_val = None\n    \n    for num in arr:\n        if min_val is None or num < min_val:\n            min_val = num\n    \n    max_diff = None\n\n    for num in arr:\n        if min_val is None or num < min_val:\n            min_val = num\n        if max_diff is None or abs(num - min_val) > max_diff:\n            max_diff = abs(num - min_val)\n\n    return max_diff\n",
        "def max_Abs_Diff(arr):\n    return abs(max(arr) - min(arr))\n",
        "def max_Abs_Diff(arr): \n    if len(arr) < 2:\n        return 0\n    \n    min_val = arr[0]\n    max_val = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] < min_val:\n            min_val = arr[i]\n        elif arr[i] > max_val:\n            max_val = arr[i]\n\n    return abs(max_val - min_val)\n",
        "def max_Abs_Diff(arr): \n    max_val = max(arr)\n    min_val = min(arr)\n    return abs(max_val - min_val)\n",
        "def max_Abs_Diff(arr): \n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    ],
    "MbppEval/160": [
        "def extended_gcd(a, b):\n    if b == 0:\n        return a, 1, 0\n    else:\n        gcd, x, y = extended_gcd(b, a % b)\n        return gcd, y, x - (a // b) * y\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef find_solution(a, b, n):\n    if a == 0 and b == 0:\n        if n == 0:\n            return ('x = ', 0, ', y = ', 0)\n        else:\n            return 'No solution'\n\n    if a == 0:\n        y = n // b\n        return ('x = ', 0, ', y = ', y)\n\n    if b == 0:\n        x = n // a\n        return ('x = ', x, ', y = ', 0)\n    \n    if a == 0 or b == 0:\n        return 'No solution'\n\n    if n % gcd(a, b) != 0:\n        return 'No solution'\n\n    gcd_val, x_gcd, y_gcd = extended_gcd(a, b)\n\n    x_solution = x_gcd * (n // gcd(a, b))\n    y_solution = y_gcd * (n // gcd(a, b))\n\n    return ('x = ', x_solution, ', y = ', y_solution)\n",
        "def extended_gcd(a, b):\n    if a == 0:\n        return b, 0, 1\n    else:\n        g, y, x = extended_gcd(b % a, a)\n        return g, x - (b // a) * y, y\n\ndef find_solution(a, b, n):\n    if a == 0 and b == 0:\n        return 'No solution'\n\n    if a == 0:\n        if n % b == 0:\n            return 'x = 0, y = {}'.format(n // b)\n        else:\n            return 'No solution'\n\n    if b == 0:\n        if n % a == 0:\n            return 'x = {}, y = 0'.format(n // a)\n        else:\n            return 'No solution'\n\n    g, x, y = extended_gcd(a, b)\n\n    if n % g == 0:\n        x *= n // g\n        y *= n // g\n        return 'x = {}, y = {}'.format(x, y)\n    else:\n        return 'No solution'\n",
        "def find_solution(a, b, n):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def extended_gcd(a, b):\n        if a == 0:\n            return (b, 0, 1)\n        else:\n            g, y, x = extended_gcd(b % a, a)\n            return (g, x - (b // a) * y, y)\n\n    g = gcd(a, b)\n    if n % g != 0:\n        return 'No solution'\n\n    x, y = extended_gcd(a, b)[1:]\n    \n    return 'x = ', x * (n // g), ', y = ', y * (n // g)\n",
        "from math import gcd\n\ndef find_solution(a, b, n):\n    if a == 0 or b == 0:\n        return None\n    \n    if n % gcd(a, b) != 0:\n        return 'No solution'\n\n    def extended_gcd(a, b):\n        if a == 0:\n            return b, 0, 1\n        else:\n            gcd, x, y = extended_gcd(b % a, a)\n            return gcd, y - (b // a) * x, x\n\n    gcd_val, x0, y0 = extended_gcd(a, b)\n\n    multiplier = n // gcd(a, b)\n    x = x0 * multiplier\n    y = y0 * multiplier\n    \n    return ('x =', x, ', y =', y)\n",
        "def find_solution(a, b, n):\n    if a == 0:\n        if b != 0 and n % b == 0:\n            return (0, n // b)\n        else:\n            return None\n    if b == 0:\n        if a != 0 and n % a == 0:\n            return (n // a, 0)\n        else:\n            return None\n"
    ],
    "MbppEval/161": [
        "return result_list\n",
        "def remove_elements(list1, list2):\n    result = []\n\n    for num in list1:\n        if num not in list2:\n            result.append(num)\n\n    return result\n",
        "def remove_elements(list1, list2):\n    result = []\n    \n    for elem in list1:\n        if elem not in list2:\n            result.append(elem)\n    \n    return result\n",
        "def remove_elements(list1, list2):\n    new_list = []\n    \n    for element in list1:\n        if element not in list2:\n            new_list.append(element)\n    \n    return new_list\n",
        "def remove_elements(list1, list2):\n    result = []\n    \n    for elem in list1:\n        if elem not in list2:\n            result.append(elem)\n    \n    return result\n"
    ],
    "MbppEval/162": [
        "def sum_series(n):\n    upper_limit = n // 2\n    total_sum = 0\n    \n    for i in range(upper_limit + 1):\n        total_sum += n - 2*i\n\n    return total_sum\n",
        "def sum_series(n):\n    total_sum = 0\n    \n    for i in range(n // 2 + 1):\n        term = n - 2*i\n        total_sum += term\n    \n    return total_sum\n",
        "def sum_series(n):\n    total = 0\n\n    for i in range(n // 2 + 1):\n        total += n - 2*i\n\n    return total\n",
        "def sum_series(n):\n    total_sum = 0\n    for i in range(n // 2):\n        value = n - 2*i\n        total_sum += value\n        \n    return total_sum\n\n# Test the function with some example inputs\n\n\n\n",
        "def sum_series(n):\n    result = 0\n    for i in range(n // 2 + 1):\n        result += n - 2*i\n    return result\n"
    ],
    "MbppEval/163": [
        "from math import tan, pi\n\ndef area_polygon(s, l):\n    a = s / (2 * tan(pi / l))\n    area = 0.5 * l * s * a\n    return area\n",
        "from math import tan, pi\n\ndef area_polygon(s, l):\n    a = l / (2 * tan(pi / s))\n    area = 0.5 * s * a * l\n    return area\n",
        "from math import tan, pi\n\ndef area_polygon(s, l):\n    a = l / (2 * tan(pi/s))\n    area = (s * l * a) / 2\n    \n    return area\n",
        "from math import tan, pi\n\ndef area_polygon(s, n):\n    a = s / (2 * tan(pi / n))\n    area = 0.5 * n * s * a\n    return area\n",
        "from math import tan, pi\n\ndef area_polygon(s, l):\n    if s <= 0 or l < 3:\n        raise ValueError(\"Invalid input values. Side length should be positive and number of sides should be at least 3.\")\n    \n    a = s / (2 * tan(pi / l))\n    area = (l * s * a) / 2\n    \n    return area\n"
    ],
    "MbppEval/164": [
        "import math\n\ndef areEquivalent(x, y): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n\n    Examples:\n    areEquivalent(36,57) == False\n    areEquivalent(2,4) == False\n    areEquivalent(23,47) == True\n    '''\n    \n    def divisors_sum(n):\n        div_sum = 0\n        for i in range(1, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                div_sum += i\n                if i != n // i:\n                    div_sum += n // i\n        return div_sum\n    \n    # Implementing step 2\n    div_sum_x = divisors_sum(x)\n    div_sum_y = divisors_sum(y)\n    \n    # Implementing step 3\n    return div_sum_x == div_sum_y\n",
        "import math\n\ndef get_divisors(n):\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != n // i:\n                divisors.append(n // i)\n    divisors.remove(n)\n    return divisors\n\ndef areEquivalent(num1, num2):\n    sum_divisors_num1 = sum(get_divisors(num1))\n    sum_divisors_num2 = sum(get_divisors(num2))\n    return sum_divisors_num1 == sum_divisors_num2\n\n# Test cases\n\n\n\n",
        "import math \n\ndef areEquivalent(num1, num2): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n\n    Examples:\n    areEquivalent(36, 57) == False\n    areEquivalent(2, 4) == False\n    areEquivalent(23, 47) == True\n    '''\n    def divisor_sum(n): \n        sum_divisors = 1\n        for i in range(2, int(math.sqrt(n)) + 1): \n            if n % i == 0: \n                if i == (n / i): \n                    sum_divisors += i \n                else : \n                    sum_divisors += (i + n // i) \n        return sum_divisors\n    \n    sum_divisors_num1 = divisor_sum(num1) \n    sum_divisors_num2 = divisor_sum(num2) \n    \n    return sum_divisors_num1 == sum_divisors_num2\n",
        "import math \n\ndef div_sum(n1, n2): \n    def sum_of_divisors(num):\n        div_sum = 0\n        for i in range(1, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                div_sum += i\n                if i != num // i:\n                    div_sum += num // i\n        return div_sum\n    \n    sum1 = sum_of_divisors(n1)\n    sum2 = sum_of_divisors(n2)\n    \n    return sum1 == sum2\n",
        "import math \n\ndef div_sum(n): \n    sum_divisors = sum(get_divisors(n))\n    return sum_divisors\n\ndef get_divisors(n):\n    divisors = [1]  # Include 1 as a divisor\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != n // i:  # Avoid duplicate square root divisor\n                divisors.append(n // i)\n    return divisors\n\ndef are_equivalent(m, n):\n    return div_sum(m) == div_sum(n)\n\n# Test cases\nassert are_equivalent(36, 57) == False\nassert are_equivalent(2, 4) == False\nassert are_equivalent(23, 47) == True\n"
    ],
    "MbppEval/165": [
        "def count_char_position(str1): \n    count = 0\n    str1 = str1.lower()  # Step 0\n    for i in range(len(str1)):  # Step 1\n        if str1[i].isalpha():  # Step 2\n            position = ord(str1[i]) - ord('a')  # Step 3\n            if position == i:  # Step 4\n                count += 1  # Step 5\n    return count  # Step 6: Return the count\n",
        "def count_char_position(str1): \n    count = 0\n    str1 = str1.lower()\n    for i in range(len(str1)):\n        if str1[i].isalpha():\n            position = ord(str1[i]) - ord('a') + 1\n            if position == i + 1:\n                count += 1\n    return count\n",
        "def count_char_position(str1): \n    count = 0\n    str1 = str1.lower()\n\n    for index, char in enumerate(str1):\n        if char.isalpha():\n            char_index = ord(char) - ord('a') + 1\n            if char_index == index + 1:\n                count += 1\n\n    return count\n",
        "def count_char_position(str1): \n    count = 0\n    str1 = str1.lower()\n    \n    for char in str1:\n        if char.isalpha():\n            char_position = ord(char) - ord('a') + 1\n            if char_position == str1.index(char) + 1:\n                count += 1\n\n    return count\n",
        "def count_char_position(str1):\n    count = 0\n    str1 = str1.lower()\n\n    for char in str1:\n        if char.isalpha() and ord(char) - 96 == ord(char.lower()) - ord('a') + 1:\n            count += 1\n\n    return count\n"
    ],
    "MbppEval/166": [
        "def find_even_pair(A):\n    count = 0\n\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_result = A[i] ^ A[j]\n            if xor_result % 2 == 0:\n                count += 1\n\n    return count\n",
        "def find_even_pair(A): \n    count = 0\n\n    # Step 1: Loop through each pair of elements in the list\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            # Step 2: Calculate the xor of the pair\n            xor_result = A[i] ^ A[j]\n\n            # Step 3: Increment the count if the xor is even\n            if xor_result % 2 == 0:\n                count += 1\n    \n    # Step 4: Return the count of pairs that xor to an even number\n    return count\n",
        "def find_even_pair(A): \n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2 == 0:\n                count += 1\n    return count\n",
        "",
        "def find_even_pair(A): \n    count = 0\n    \n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_result = A[i] ^ A[j]  # XOR operation\n            if xor_result % 2 == 0:\n                count += 1\n                \n    return count\n"
    ],
    "MbppEval/167": [
        "def next_power_of_2(n):\n    if n <= 0:\n        return 1\n    if n & (n - 1) == 0:  # Check if n is already a power of 2\n        return n\n    else:\n        return 2**(n.bit_length())\n",
        "def next_power_of_2(n): \n    power = 1\n    while power < n:\n        power *= 2\n    return power\n",
        "def next_power_of_2(n): \n    power = 1\n",
        "def next_power_of_2(n): \n    power_of_2 = 1\n    \n    if n > 0:\n        while power_of_2 < n:\n            power_of_2 *= 2\n    \n    return power_of_2\n",
        "def next_power_of_2(n):\n    if n <= 1:\n        return 1\n\n    power = 1\n    while power < n:\n        power *= 2\n\n    return power\n"
    ],
    "MbppEval/168": [
        "def frequency(a, x):\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count\n",
        "def frequency(a, x):\n    count = 0\n    \n    for num in a:\n        if num == x:\n            count += 1\n        \n    return count\n",
        "def frequency(a, x): \n    count = 0\n    \n    for num in a:\n        if num == x:\n            count += 1\n            \n    return count\n",
        "def frequency(a, x):\n    count = 0\n    \n    for num in a:\n        if num == x:\n            count += 1\n            \n    return count\n",
        "def frequency(a, x): \n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count\n"
    ],
    "MbppEval/170": [
        "def sum_range_list(list1, m, n):\n    sum_range = 0\n    \n    for i in range(m, n+1):\n        sum_range += list1[i]\n\n    return sum_range\n",
        "def sum_range_list(list1, m, n):\n    total_sum = 0\n    \n    for num in list1[m:n+1]:\n        total_sum += num\n        \n    return total_sum\n",
        "def sum_range_list(list1, m, n):\n    if m < 0 or n >= len(list1) or m > n:\n        return \"Invalid range indices\"\n    \n    sum_range = sum(list1[m:(n+1)])\n    \n    return sum_range\n",
        "def sum_range_list(list1, m, n):\n    if m < 0 or n > len(list1):\n        return \"Indices are out of range\"\n\n    sublist = list1[m:n + 1]\n    sublist_sum = sum(sublist)\n\n    return sublist_sum\n",
        "def sum_range_list(list1, m, n):\n    sublist = list1[m:n+1]\n    sum_sublist = sum(sublist)\n    return sum_sublist\n"
    ],
    "MbppEval/171": [
        "import math\n\ndef perimeter_pentagon(a):\n    perimeter = 5 * a\n    return perimeter\n",
        "import math\ndef perimeter_pentagon(a):\n    return 5 * a\n",
        "import math\n\ndef perimeter_pentagon(a):\n    perimeter = 5 * a\n    return perimeter\n",
        "import math\ndef perimeter_pentagon(a):\n    # Calculate the perimeter of a regular pentagon\n    perimeter = 5 * a\n    return perimeter\n",
        "import math\n\ndef perimeter_pentagon(a):\n    perimeter = 5 * a\n    return perimeter\n"
    ],
    "MbppEval/172": [
        "def count_occurance(s):\n    count = 0\n    \n    for i in range(len(s) - 2):\n        if s[i:i+3] == 'std':\n            count += 1\n    \n    return count\n",
        "def count_occurance(s):\n    count = 0\n    # Step 1: Initialize count to 0\n\n    for i in range(len(s)-2):\n        if s[i:i+3] == \"std\":\n            count += 1\n            # Step 3: Check if current characters form 'std' substring\n\n    return count\n",
        "def count_occurrence(s):\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] == 'std':\n            count += 1\n    return count\n",
        "def count_occurance(s):\n    count = 0\n    for i in range(len(s) - 2):\n        if s[i:i+3] == 'std':\n            count += 1\n    return count\n",
        "    return count  # Step 5: Return the count of occurrences of the substring 'std'\n"
    ],
    "MbppEval/222": [
        "def check_type(test_tuple):\n    data_type = type(test_tuple[0])\n\n    for element in test_tuple:\n        if type(element) != data_type:\n            return False\n\n    return True\n",
        "def check_type(test_tuple):\n    if len(test_tuple) == 0:  # Check if the tuple is empty\n        return True\n    \n    first_type = type(test_tuple[0])  # Get the data type of the first element in the tuple\n    \n    for item in test_tuple[1:]:  # Iterate through the elements starting from the second element\n        if type(item) != first_type:  # Check if the data type of the element is not equal to the data type of the first element\n            return False\n    \n    return True  # If all types match, return True\n",
        "def check_type(test_tuple):\n    if not test_tuple:\n        return False\n    \n    reference_type = type(test_tuple[0])\n    \n    for element in test_tuple:\n        if type(element) != reference_type:\n            return False\n    \n    return True\n",
        "def check_type(test_tuple):\n    if not test_tuple:\n        return False\n    \n    first_type = type(test_tuple[0])\n    \n    for element in test_tuple:\n        if type(element) != first_type:\n            return False\n    \n    return True\n",
        "def check_type(test_tuple):\n    data_type = type(test_tuple[0])\n    \n    for elem in test_tuple:\n        if type(elem) != data_type:\n            return False\n    \n    return True\n"
    ],
    "MbppEval/223": [
        "def is_majority(arr, n, x):\n    if n <= 0:\n        return False\n\n    count_x = arr.count(x)\n\n    return count_x > n/2\n",
        "def is_majority(arr, n, x):\n    if n <= 0:\n        return False\n\n    min_count = n // 2\n\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n\n    if count > min_count:\n        return True\n\n    return False\n",
        "def is_majority(arr, n, x):\n    if n % 2 != 0:\n        return False\n\n    index_x = arr.index(x)\n\n    if len(arr) - index_x > len(arr) / 2:\n        return True\n    else:\n        return False\n",
        "from collections import Counter\n\ndef is_majority(arr, n, x):\n    if n % 2 == 0:\n        return False\n    \n    count_x = arr.count(x)\n    if count_x > n // 2:\n        return True\n    return False\n\n# Test the function\n\n",
        "def is_majority(arr, n, x):\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    if count > n / 2:\n        return True\n    else:\n        return False\n"
    ],
    "MbppEval/224": [
        "def count_Set_Bits(n):\n    count = 0\n    binary_str = bin(n)[2:]\n    \n    for digit in binary_str:\n        if digit == '1':\n            count += 1\n            \n    return count\n",
        "def count_Set_Bits(n):\n    count = 0\n    \n    while n > 0:\n        if n & 1:\n            count += 1\n        \n        n >>= 1\n    \n    return count\n",
        "def count_Set_Bits(n): \n    count = 0\n    \n    while n:\n        count += n & 1\n        n >>= 1\n\n    return count\n",
        "def count_Set_Bits(n):\n    count = 0\n\n    while n > 0:\n        if n & 1:\n            count += 1\n        \n        n = n >> 1\n\n    return count\n",
        "def count_Set_Bits(n):\n    binary = bin(n)[2:]\n    count = binary.count('1')\n    return count\n"
    ],
    "MbppEval/226": [
        "def odd_values_string(str):\n    result = ''\n    for index in range(len(str)):\n        if index % 2 == 0:\n            result += str[index]\n    return result\n",
        "def odd_values_string(str):\n    result = \"\"\n    \n    for index, char in enumerate(str):\n        if index % 2 != 0:  # Check if the index is odd\n            result += char\n    \n    return result\n",
        "def odd_values_string(str):\n    result = \"\"\n    \n    for index, char in enumerate(str):\n        if index % 2 == 0:\n            result += char\n            \n    return result\n",
        "def odd_values_string(str):\n    result = ''  # Step 2: Create an empty string variable to store the result\n    \n    for i in range(len(str)):  # Step 3: Iterate over the characters in the input string using a loop\n        if i % 2 == 0:  # Step 4: Check if the index of the character is even\n            result += str[i]  # Step 5: Add the character to the result string\n    \n    return result  # Step 5: Finally, return the result string\n",
        "def odd_values_string(input_str):\n    result = \"\"\n    \n    for index, char in enumerate(input_str):\n        if index % 2 == 0:\n            result += char\n    \n    return result\n"
    ],
    "MbppEval/227": [
        "def min_of_three(a, b, c):\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c\n",
        "def min_of_three(a, b, c):\n    if a < b:\n        min_value = a\n    else:\n        min_value = b\n        \n    if c < min_value:\n        min_value = c\n\n    return min_value\n",
        "def min_of_three(a, b, c):\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\n",
        "def min_of_three(a, b, c):\n    min_num = a if a < b else b\n    min_num = c if c < min_num else min_num\n    return min_num\n",
        "def min_of_three(a, b, c):\n    return min(a, b, c)\n"
    ],
    "MbppEval/228": [
        "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    mask = (1 << (r - l + 1)) - 1 << l\n    return n & mask == 0\n",
        "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    binary_representation = bin(n)[2:]\n    \n    for i in range(l, r+1):\n        if len(binary_representation) < i or binary_representation[-i] != '1':\n            return False\n\n    return True\n",
        "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    mask = ~(2 ** (r - l + 1) - 1) << l\n    return n & mask == 0\n",
        "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    bits_in_range = get_bits_in_range(n, l, r)\n    return bits_in_range == 0\n",
        "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    binary_n = bin(n)[2:]\n    \n    for i in range(l-1, r):\n        if i < len(binary_n) and binary_n[-i-1] == '1':\n            return False\n    \n    return True\n"
    ],
    "MbppEval/229": [
        "def re_arrange_array(arr, n):\n    neg_elements = []\n    pos_elements = []\n    \n    for i in range(n):\n        element = arr[i]\n        \n        if element < 0:\n            neg_elements.append(element)\n        else:\n            pos_elements.append(element)\n    \n    return neg_elements + pos_elements\n",
        "def re_arrange_array(arr, n):\n    neg_nums = []\n    pos_nums = []\n    \n    for i in range(n):\n        if arr[i] < 0:\n            neg_nums.append(arr[i])\n        else:\n            pos_nums.append(arr[i])\n            \n    rearranged_arr = neg_nums + pos_nums\n    return rearranged_arr\n",
        "def re_arrange_array(arr, n):\n    neg_elements = []\n    pos_elements = []\n    \n    for num in arr[:n]:\n        if num < 0:\n            neg_elements.append(num)\n        else:\n            pos_elements.append(num)\n    \n    re_arranged_arr = neg_elements + pos_elements\n    \n    return re_arranged_arr\n",
        "def re_arrange_array(arr, n):\n    rearranged_arr = []\n    \n    # Step 1: Traverse the array from the beginning to n\n    for i in range(n):\n        # Step 2: Check for negative elements and append them to the new list\n        if arr[i] < 0:\n            rearranged_arr.append(arr[i])\n    \n    # Step 3: Traverse the array from the beginning to n again\n    for i in range(n):\n        # Step 4: Check for positive elements and append them to the new list\n        if arr[i] >= 0:\n            rearranged_arr.append(arr[i])\n    \n    return rearranged_arr\n",
        "def re_arrange_array(arr, n):\n    neg_nums = []\n    pos_nums = []\n\n    for i in range(n):\n        if arr[i] < 0:\n            neg_nums.append(arr[i])\n        else:\n            pos_nums.append(arr[i])\n\n    rearranged_arr = neg_nums + pos_nums\n\n    return rearranged_arr\n"
    ],
    "MbppEval/230": [
        "def replace_blank(str1, char):\n    modified_str = str1.replace(' ', char)\n    return modified_str\n\n# Test cases\n\n\n\n",
        "def replace_blank(str1, char):\n    # Step 0: Check if the inputs are valid\n    if not isinstance(str1, str) or len(str1) == 0 or not isinstance(char, str) or len(char) != 1:\n        return \"Invalid input. Please provide a non-empty string and a single character.\"\n\n    # Step 1: Replace all occurrences of blank spaces with the character\n    new_str = str1.replace(' ', char)\n\n    # Step 2: Return the modified string\n    return new_str\n",
        "def replace_blank(str1, char):\n    return str1.replace(\" \", char)\n",
        "def replace_blank(str1, char):\n    return str1.replace(' ', char)\n",
        "def replace_blank(str1, char):\n    # Step 2: Replace blank spaces in the string with the character\n    replaced_str = str1.replace(' ', char)\n    return replaced_str\n"
    ],
    "MbppEval/232": [
        "import heapq\n\ndef larg_nnum(list1, n):\n    max_heap = list1[:]\n    heapq.heapify(max_heap)\n    \n    neg_max_heap = [-x for x in max_heap]\n    heapq.heapify(neg_max_heap)\n    \n    n_largest = []\n    for i in range(n):\n        n_largest.append(-heapq.heappop(neg_max_heap))\n    \n    return n_largest\n",
        "import heapq\n\ndef larg_nnum(list1, n):\n    return heapq.nlargest(n, list1)\n",
        "import heapq\n\ndef larg_nnum(list1, n):\n    return heapq.nlargest(n, list1)\n",
        "import heapq\n\ndef larg_nnum(list1, n):\n    n_largest = []\n    heap = []\n\n    for ele in list1:\n        heapq.heappush(heap, ele)\n        if len(heap) > n:\n            heapq.heappop(heap)\n\n    return heap\n",
        "import heapq\n\ndef larg_nnum(list1, n):\n    return heapq.nlargest(n, list1)\n"
    ],
    "MbppEval/233": [
        "import math\n\ndef lateralsurface_cylinder(r, h):\n    lateral_surface_area = 2 * math.pi * r * h\n    return round(lateral_surface_area, 2)\n",
        "def lateralsuface_cylinder(r,h):\n    lateral_surface_area = 2 * 3.14159 * r * h\n    return lateral_surface_area\n",
        "import math\n\ndef lateralsuface_cylinder(r, h):\n    return 2 * math.pi * r * h\n",
        "import math\n\ndef lateralsuface_cylinder(r, h):\n    return 2 * math.pi * r * h\n",
        "import math\n\ndef lateralsurface_cylinder(r, h):\n    lateral_surface_area = 2 * math.pi * r * h\n    return lateral_surface_area\n"
    ],
    "MbppEval/234": [
        "def volume_cube(l):\n    '''\n    Calculate the volume of a cube given its side length.\n    \n    Parameters:\n    l (int or float): Side length of the cube\n    \n    Returns:\n    int or float: Volume of the cube\n    '''\n    volume = l ** 3\n    return volume\n",
        "def volume_cube(l):\n    # Calculate volume of the cube\n    volume = l ** 3\n    return volume\n",
        "def volume_cube(l):\n    '''\n    This function calculates the volume of a cube given its side length.\n    \n    :param l: side length of the cube\n    :return: volume of the cube\n    '''\n    volume = l**3\n    return volume\n",
        "def volume_cube(l):\n    volume = l ** 3\n    return volume\n",
        "def volume_cube(l):\n    volume = l ** 3\n    return volume\n"
    ],
    "MbppEval/235": [
        "def even_bit_set_number(n):\n    even_mask = 0b1010101010101010\n    result = n | even_mask\n    return result\n",
        "def even_bit_set_number(n):\n    binary_number = bin(n)[2:].zfill(32)  # Pad the binary number with zeros to have 32 bits\n\n    # Create a mask with all even bits set to 1\n    mask = int(''.join(['1' if i % 2 == 0 else '0' for i in range(32)]), 2)\n    \n    # Perform a bitwise OR operation between the binary number and the mask\n    modified_binary = int(binary_number, 2) | mask\n\n    return modified_binary\n",
        "def even_bit_set_number(n):\n    # Step 0: Convert the given number to binary\n    binary_n = bin(n)[2:]\n\n    # Step 1: Initialize a mask to set all even bits to 1 in binary (10 in binary)\n    mask = int(''.join(['10' * (len(binary_n)//2)]), 2)\n\n    # Step 2: Perform a bitwise OR operation between the number and the mask to set all even bits\n    result = n | mask\n\n    return result\n\n# Test the function\n\n\n\n",
        "def even_bit_set_number(n): \n    input_number = n\n    mask = 0b1010101010101010\n    result = input_number | mask\n    return result\n",
        "def even_bit_set_number(n):\n    # Using a 32-bit integer mask to set all even bits to 1\n    even_bits_mask = 0xAAAAAAAA\n    \n    result = n | even_bits_mask\n    return result\n\n# Test cases\n\n\n\n"
    ],
    "MbppEval/237": [
        "from collections import Counter\n\ndef check_occurrences(test_list):\n    counts = Counter()\n    \n    for tup in test_list:\n        counts[tup] += 1\n\n    return dict(counts)\n",
        "from collections import Counter\n\ndef check_occurrences(test_list):\n    occurrences = dict(Counter(test_list))\n    return occurrences\n",
        "from collections import Counter\n\ndef check_occurrences(test_list):\n    tuple_counter = Counter(test_list)\n    return dict(tuple_counter)\n",
        "def check_occurrences(test_list):\n    occurrences = {}\n    \n    for item in test_list:\n        key = tuple(sorted(item))\n        if key in occurrences:\n            occurrences[key] += 1\n        else:\n            occurrences[key] = 1\n\n    return occurrences\n",
        "from collections import Counter \n\ndef check_occurrences(test_list):\n    occurrences = Counter()\n    \n    for tpl in test_list:\n        if tpl in occurrences:\n            occurrences[tpl] += 1\n        else:\n            occurrences[tpl] = 1\n\n    return occurrences\n"
    ],
    "MbppEval/238": [
        "def number_of_substrings(string): \n    count = 0\n    \n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            count += 1\n    \n    return count\n",
        "def number_of_substrings(str): \n    count = 0\n    \n    for i in range(len(str)):\n        count += len(str) - i\n\n    return count\n",
        "def number_of_substrings(str):\n    count = 0\n    \n    n = len(str)\n    \n    for i in range(n):\n        for j in range(i, n):\n            count += 1\n    \n    return count\n",
        "def number_of_substrings(s):\n    count = 0\n    n = len(s)\n    count = n * (n + 1) // 2\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            count += 1\n    return count\n",
        "def number_of_substrings(str): \n    count = 0\n    n = len(str)\n    for i in range(n):\n        count += n - i\n    return count\n"
    ],
    "MbppEval/239": [
        "def get_total_number_of_sequences(m, n):\n    def count_sequences(prev, curr_len, n, m):\n        if curr_len == n:\n            return 1\n\n        total_sequences = 0\n        for next_num in range(2 * prev, m + 1):\n            total_sequences += count_sequences(next_num, curr_len + 1, n, m)\n\n        return total_sequences\n\n    total_sequences = 0\n    for start_num in range(1, m - n + 2):\n        total_sequences += count_sequences(start_num, 1, n, m)\n\n    return total_sequences\n",
        "def get_total_number_of_sequences(m, n):\n    count = 0\n    \n    def count_sequences(start, length):\n        nonlocal count\n        if length == 0:\n            count += 1\n            return\n        for i in range(start, m + 1):\n            if i >= 2 * start and i <= m:\n                count_sequences(i, length - 1)\n    \n    count_sequences(1, n)\n    return count\n",
        "def get_total_number_of_sequences(m, n): \n    count = 0\n\n    def generate_sequences(length, max_val, sequence):\n        nonlocal count\n        if length == n:\n            count += 1\n            return\n        for value in range(max_val * 2, m+1):\n            if all(value >= 2 * elem and value <= m for elem in sequence):\n                generate_sequences(length + 1, value, sequence + [value])\n\n    generate_sequences(0, 1, [])\n\n    return count\n",
        "def get_total_number_of_sequences(m, n): \n    count = 0\n    \n    def generate_sequence(current_seq, m, previous_value, n):\n        nonlocal count\n        \n        if len(current_seq) == n:\n            valid = all(prev * 2 <= curr <= m for prev, curr in zip(current_seq, current_seq[1:]))\n            if valid:\n                count += 1\n        else:\n            for num in range(previous_value*2, m+1):\n                generate_sequence(current_seq + [num], m, num, n)\n    \n    generate_sequence([], m, 0, n)\n    \n    return count\n",
        "def generate_sequences(m, n, sequence=[], start=1):\n    if len(sequence) == n:\n        return [sequence]\n    sequences = []\n    for i in range(start, m+1):\n        sequences.extend(generate_sequences(m, n, sequence + [i], 2*i))\n    return sequences\n\ndef get_total_number_of_sequences(m, n):\n    def helper(m, n, sequence=[], start=1):\n        if len(sequence) == n:\n            return [sequence]\n        sequences = []\n        for i in range(start, m+1):\n            sequences.extend(helper(m, n, sequence + [i], 2 * i))\n        return sequences\n    \n    valid_sequences = [sequence for sequence in helper(m, n) if all(sequence[i] >= 2 * sequence[i-1] for i in range(1, len(sequence)))]\n    return len(valid_sequences)\n"
    ],
    "MbppEval/240": [
        "def replace_list(list1, list2):\n    list1.pop()\n    list1.extend(list2)\n    return list1\n",
        "def replace_list(list1, list2):\n    list1.pop()\n    list1.extend(list2)\n    return list1\n",
        "def replace_list(list1, list2):\n    new_list = list(list1)  # Create a new list by copying all elements from list1\n    if len(new_list) > 0:\n        new_list[-1:] = list2  # Replace the last element of new_list with elements from list2\n    return new_list\n",
        "def replace_list(list1, list2):\n    last_element_list1 = list1[-1]\n    list1.pop()\n    list1.extend(list2)\n    return list1\n",
        "def replace_list(list1, list2):\n    list1.pop()\n    list1.extend(list2)\n    return list1\n"
    ],
    "MbppEval/242": [
        "def count_charac(str1):\n    return len(str1)\n",
        "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n\n    Examples:\n    count_charac(\"python programming\") == 18\n    count_charac(\"language\") == 8\n    count_charac(\"words\") == 5\n    '''\n    count = 0\n    \n    for char in str1:\n        count += 1\n    \n    return count\n",
        "def count_charac(str1):\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n\n# Let's test the function with some examples\n\n\n\n",
        "def count_charac(str1):\n    count = 0  # Step 2: Initialize a variable count to 0 to keep track of the count of characters\n\n    for char in str1:\n        count += 1\n        # Step 3: Loop through each character in the input string\n\n    # Step 4: For each character, increment the count by 1\n\n    return count\n",
        "def count_charac(str1):\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n\n# Testing the function with examples\n\n\n\n"
    ],
    "MbppEval/244": [
        "import math\n\ndef next_Perfect_Square(N): \n    '''\n    Find the next perfect square greater than a given number.\n\n    Parameters:\n    N (int): Given number for which we need to find the next perfect square.\n\n    Returns:\n    int: Next perfect square greater than N.\n    '''\n    square_root = math.ceil(math.sqrt(N))\n    next_square = (square_root + 1) ** 2\n    return next_square\n",
        "import math\n\ndef next_Perfect_Square(N):\n    square_root = math.sqrt(N)\n    next_square = math.ceil(square_root)\n    next_perfect_square = next_square ** 2\n    return next_perfect_square\n",
        "import math\n\ndef next_Perfect_Square(N):\n    square_root = math.sqrt(N)\n    if square_root.is_integer():\n        next_square = (int(square_root) + 1) ** 2\n    else:\n        next_square = math.ceil(square_root) ** 2\n\n    return next_square\n",
        "import math\n\ndef next_Perfect_Square(N):\n    square_root = math.sqrt(N)\n    next_int = int(square_root) + 1\n    next_square = next_int ** 2\n    return next_square\n",
        "import math\n\ndef next_Perfect_Square(N):\n    square_root = math.sqrt(N)\n    next_square_root = square_root + 1\n    next_perfect_square = next_square_root ** 2\n    return next_perfect_square\n"
    ],
    "MbppEval/245": [
        "def max_sum(arr):\n    # Step 0: Finding the longest increasing subsequence array\n    def longest_increasing_subsequence(arr):\n        lis = [arr[i] for i in range(len(arr))]\n        for i in range(1, len(arr)):\n            for j in range(i):\n                if arr[i] > arr[j] and lis[i] < lis[j] + arr[i]:\n                    lis[i] = lis[j] + arr[i]\n        return lis\n\n    # Step 1: Finding the longest increasing subsequence array\n    lis = longest_increasing_subsequence(arr)\n\n    # Step 2: Finding the longest decreasing subsequence array from the right side\n    def longest_decreasing_subsequence(arr):\n        lds = [arr[i] for i in range(len(arr))]\n        for i in range(len(arr) - 2, -1, -1):\n            for j in range(len(arr) - 1, i, -1):\n                if arr[i] > arr[j] and lds[i] < lds[j] + arr[i]:\n                    lds[i] = lds[j] + arr[i]\n        return lds\n\n    # Step 3: Finding the maximum sum of a bitonic subsequence\n    lds = longest_decreasing_subsequence(arr)\n    max_sum = 0\n    for i in range(len(arr)):\n        bitonic_sum = lis[i] + lds[i] - arr[i]\n        if bitonic_sum > max_sum:\n            max_sum = bitonic_sum\n\n    return max_sum\n",
        "def max_sum(arr): \n    n = len(arr)\n    \n    inc_sum = [0] * n\n    dec_sum = [0] * n\n    \n    for i in range(n):\n        inc_sum[i] = arr[i]\n        dec_sum[i] = arr[i]\n        \n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                inc_sum[i] = max(inc_sum[i], inc_sum[j] + arr[i])\n    \n    for i in range(n-2, -1, -1):\n        for j in range(n-1, i, -1):\n            if arr[i] > arr[j]:\n                dec_sum[i] = max(dec_sum[i], dec_sum[j] + arr[i])\n    \n    max_bitonic_sum = 0\n    for i in range(n):\n        max_bitonic_sum = max(max_bitonic_sum, inc_sum[i] + dec_sum[i] - arr[i])\n    \n    return max_bitonic_sum\n",
        "def max_sum(arr): \n    inc_sum = [0] * len(arr)\n    dec_sum = [0] * len(arr)\n    \n    # Calculate the maximum increasing subsequence sum ending at each index\n    for i in range(len(arr)):\n        inc_sum[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j]:\n                inc_sum[i] = max(inc_sum[i], inc_sum[j] + arr[i])\n    \n    # Calculate the maximum decreasing subsequence sum starting at each index\n    for i in range(len(arr) - 1, -1, -1):\n        dec_sum[i] = arr[i]\n        for j in range(i + 1, len(arr)):\n            if arr[i] > arr[j]:\n                dec_sum[i] = max(dec_sum[i], dec_sum[j] + arr[i])\n    \n    max_sum_bitonic = 0\n    for i in range(len(arr)):\n        max_sum_bitonic = max(max_sum_bitonic, inc_sum[i] + dec_sum[i] - arr[i])\n    \n    return max_sum_bitonic\n",
        "import numpy as np\n\ndef max_sum(arr):\n    dp = np.zeros(len(arr))\n    increasing_dp = np.zeros(len(arr))\n    decreasing_dp = np.zeros(len(arr))\n\n    for i in range(len(arr)):\n        dp[i] = arr[i]  # Initialize the value with the element itself\n        for j in range(i):\n            if arr[j] < arr[i]:  # If the element at j can be appended to the subsequence ending at i\n                dp[i] = max(dp[i], dp[j] + arr[i])  # Update to the maximum sum\n\n    return dp\n",
        "def max_sum(arr): \n    '''\n    Finds the maximum sum of a bitonic subsequence for the given array.\n    \n    Args:\n    arr (list): Input array\n    \n    Returns:\n    int: Maximum sum of a bitonic subsequence\n    '''\n    n = len(arr)\n    increasing = [0] * n\n    decreasing = [0] * n\n    bitonic = [0] * n\n\n    for i in range(n):\n        increasing[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j]:\n                increasing[i] = max(increasing[i], increasing[j] + arr[i])\n\n    for i in range(n - 1, -1, -1):\n        decreasing[i] = arr[i]\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                decreasing[i] = max(decreasing[i], decreasing[j] + arr[i])\n\n    for i in range(n):\n        bitonic[i] = increasing[i] + decreasing[i] - arr[i]\n\n    max_sum = max(bitonic)\n\n    return max_sum\n"
    ],
    "MbppEval/246": [
        "def babylonian_squareroot(number):\n    guess = number/2\n    precision = 0.0001\n    while abs(guess*guess - number) > precision:\n        guess = (guess + number/guess) / 2\n    return guess\n\n# Testing\n\n",
        "def babylonian_squareroot(number):\n    guess = number / 2\n    tolerance = 0.0000001\n\n    while abs(guess * guess - number) > tolerance:\n        guess = (guess + number / guess) / 2\n\n    return guess\n",
        "def babylonian_squareroot(number):\n    guess = number / 2\n    \n    while True:\n        improved_guess = (guess + number / guess) / 2\n        if abs(improved_guess - guess) < 0.00001:  # Check if the guess is close enough to the actual square root\n            return improved_guess\n        guess = improved_guess\n",
        "def babylonian_squareroot(number):\n    guess = 1\n    tolerance = 0.000001\n    diff = tolerance + 1\n    \n    while diff > tolerance:\n        new_guess = 0.5 * (guess + number / guess)\n        diff = abs(guess - new_guess)\n        guess = new_guess\n        \n    return guess\n",
        "def babylonian_squareroot(number):\n    guess = number / 2.0\n    \n    while True:\n        new_guess = 0.5 * (guess + number / guess)\n        \n        if abs(guess - new_guess) < 1e-9:\n            return new_guess\n        \n        guess = new_guess\n"
    ],
    "MbppEval/247": [
        "def lps(s):\n    n = len(s)\n    \n    dp = [[0] * n for _ in range(n)]\n    \n    for i in range(n):\n        dp[i][i] = 1\n\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n    return dp[0][n - 1]\n",
        "def lps(s):\n    n = len(s)\n    if n == 0:\n        return 0\n\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for cl in range(2, n + 1): \n        for i in range(n - cl + 1): \n            j = i + cl - 1\n            if s[i] == s[j] and cl == 2: \n                dp[i][j] = 2\n            elif s[i] == s[j]: \n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else: \n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n\n    return dp[0][n-1]\n\n# Test the function with the given examples\n\n\n\n",
        "def lps(s):\n    n = len(s)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    \n    for i in range(n):\n        dp[i][i] = 1\n    \n    for end in range(1, n):\n        for start in range(end - 1, -1, -1):\n            if s[start] == s[end]:\n                dp[start][end] = dp[start + 1][end - 1] + 2\n            else:\n                dp[start][end] = max(dp[start + 1][end], dp[start][end - 1])\n    \n    return dp[0][-1]\n",
        "def lps(s):\n    n = len(s)\n    if n == 0:\n        return 0\n    \n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    \n    for i in range(n):\n        dp[i][i] = 1\n    \n    for l in range(2, n+1):\n        for i in range(n-l+1):\n            j = i + l - 1\n            if s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    \n    return dp[0][n-1]\n",
        "def lps(s):\n    n = len(s)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    \n    for i in range(n):\n        dp[i][i] = 1\n    \n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if s[i] == s[j] and length == 2:\n                dp[i][j] = 2\n            elif s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    \n    return dp[0][-1]\n"
    ],
    "MbppEval/248": [
        "def harmonic_sum(n):\n    result = 0\n    for i in range(1, n):\n        result += 1 / i\n    return round(result, 15)\n",
        "def harmonic_sum(n):\n    sum = 0\n    for i in range(1, n):\n        sum += 1 / i\n    return sum\n",
        "def harmonic_sum(n):\n    sum = 0\n    \n    for i in range(1, n):\n        sum += 1/i\n    \n    return sum\n",
        "def harmonic_sum(n):\n    if n <= 1:\n        return 0\n    \n    total = 0\n    for i in range(1, n):\n        total += 1 / i\n        \n    return total\n",
        "def harmonic_sum(n):\n    if not isinstance(n, int) or n <= 1:\n        return \"Please provide an integer greater than 1.\"\n    \n    sum_harmonic = 0\n    for i in range(1, n):\n        sum_harmonic += 1 / i\n\n    return sum_harmonic\n"
    ],
    "MbppEval/249": [
        "def intersection_array(array_nums1, array_nums2):\n    common_elements = []\n    \n    for num in array_nums1:\n        if num in array_nums2:\n            common_elements.append(num)\n    \n    return common_elements\n",
        "def intersection_array(array_nums1, array_nums2):\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    return list(set1.intersection(set2))\n",
        "def intersection_array(array_nums1, array_nums2):\n    intersection = []\n\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.append(num)\n\n    return intersection\n",
        "    return sorted(list(intersection_set))\n",
        "def intersection_array(array_nums1, array_nums2):\n    intersection = []\n\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n\n    for num in set_nums1:\n        if num in set_nums2:\n            intersection.append(num)\n\n    return intersection\n"
    ],
    "MbppEval/250": [
        "def count_X(tup, x): \n    count = 0\n\n    for elem in tup:\n        if elem == x:\n            count += 1\n\n    return count\n",
        "def count_X(tup, x): \n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n",
        "def count_X(tup, x): \n    countght = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count\n",
        "def count_X(tup, x):\n    count = 0\n\n    for element in tup:\n        if element == x:\n            count += 1\n\n    return count\n",
        "def count_X(tup, x):\n    count = 0\n    \n    for element in tup:\n        if element == x:\n            count += 1\n            \n    return count\n"
    ],
    "MbppEval/251": [
        "def insert_element(lst, element):\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result\n",
        "def insert_element(lst, element):\n    modified_list = []\n    \n    for item in lst:\n        modified_list.append(element)\n        modified_list.append(item)\n        \n    return modified_list\n",
        "def insert_element(lst, element):\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result\n",
        "def insert_element(list, element):\n    result = []\n    for item in list:\n        result.append(element + item)\n    return result\n",
        "def insert_element(lst, elem):\n    result = []\n    for item in lst:\n        result.append(elem)\n        result.append(item)\n    \n    return result\n"
    ],
    "MbppEval/252": [
        "import cmath\n\ndef convert(numbers):\n    complex_number = numbers + 0j\n    polar_coordinates = cmath.polar(complex_number)\n    return polar_coordinates\n",
        "import cmath\n\ndef convert(numbers):\n    # Use cmath.polar to convert the complex number to polar form\n    polar_coordinates = cmath.polar(numbers)\n    \n    # Return the polar coordinates as a tuple of the form (r, phi)\n    return polar_coordinates\n",
        "import cmath\n\ndef convert(complex_number):\n    return cmath.polar(complex_number)\n\nnumbers = [1, 4, 5]\npolar_coords = []\n\nfor number in numbers:\n    polar_coords.append(convert(complex(number)))\n\n\n",
        "import cmath\n\ndef convert(numbers):\n    if isinstance(numbers, (int, float)):\n        complex_number = complex(numbers)\n    elif isinstance(numbers, complex):\n        complex_number = numbers\n    else:\n        raise ValueError(\"Input must be a real or complex number.\")\n    \n    return cmath.polar(complex_number)\n",
        "import cmath\n\ndef convert(numbers):\n    numbers = complex(numbers, 0)\n    polar_coordinates = cmath.polar(numbers)\n    magnitude, phase = polar_coordinates\n    return magnitude, phase\n"
    ],
    "MbppEval/253": [
        "def count_integer(list1):\n    count = 0\n    for elem in list1:\n        if isinstance(elem, int):\n            count += 1\n    return count\n",
        "def count_integer(list1):\n    count = 0\n    if not list1:\n        return 0\n\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    \n    return count\n",
        "def count_integer(list1):\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count\n",
        "def count_integer(list1):\n    count = 0\n    \n    for num in list1:\n        if isinstance(num, int):\n            count += 1\n    \n    return count\n",
        "def count_integer(list1):\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count\n"
    ],
    "MbppEval/255": [
        "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l, n))\n",
        "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    comb = combinations_with_replacement(l, n)\n    result = list(comb)\n    return result\n",
        "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l, n))\n",
        "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l, n))\n",
        "from itertools import product\n\ndef combinations_colors(l, n):\n    if not l:\n        raise ValueError(\"Input list is empty\")\n    \n    return list(product(l, repeat=n))\n"
    ],
    "MbppEval/256": [
        "def count_Primes_nums(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n\n    return count\n",
        "def count_Primes_nums(n):\n    count = 0\n    for num in range(2, n):\n        if is_prime(num):\n            count += 1\n    return count\n",
        "def count_Primes_nums(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n\n    return count\n",
        "def count_Primes_nums(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n            \n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n                \n        return True\n    \n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n            \n    return count\n",
        "def count_Primes_nums(n):\n    count = 0\n    \n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    for num in range(2, n):\n        if is_prime(num):\n            count += 1\n    \n    return count\n"
    ],
    "MbppEval/257": [
        "def swap_numbers(a, b):\n    return (b, a)\n",
        "def swap_numbers(a, b):\n    return (b, a)\n",
        "def swap_numbers(a, b):\n    return (b, a)\n",
        "def swap_numbers(a, b):\n    result = (b, a)\n    return result\n",
        "def swap_numbers(a, b):\n    return (b, a)\n\n# Test cases\n\n\n\n"
    ],
    "MbppEval/259": [
        "def maximize_elements(test_tup1, test_tup2):\n    result = []\n    \n    for tup1, tup2 in zip(test_tup1, test_tup2):\n        max_tuple = tuple(max(t1, t2) for t1, t2 in zip(tup1, tup2))\n        result.append(max_tuple)\n    \n    return tuple(result)\n",
        "def maximize_elements(test_tup1, test_tup2):\n    result = []\n    for tup1, tup2 in zip(test_tup1, test_tup2):\n        max_tup = tuple(max(val1, val2) for val1, val2 in zip(tup1, tup2))\n        result.append(max_tup)\n    return tuple(result)\n",
        "def maximize_elements(test_tup1, test_tup2):\n    res = []\n    \n    for tup1, tup2 in zip(test_tup1, test_tup2):\n        max_values = [max(val1, val2) for val1, val2 in zip(tup1, tup2)]\n        \n        res.append(tuple(max_values))\n    \n    return tuple(res)\n",
        "def maximize_elements(test_tup1, test_tup2):\n    result = []\n    for tup1, tup2 in zip(test_tup1, test_tup2):\n        max_tup = tuple(max(x, y) for x, y in zip(tup1, tup2))\n        result.append(max_tup)\n    return tuple(result)\n",
        "def maximize_elements(test_tup1, test_tup2):\n    result = []\n    for i in range(len(test_tup1)):\n        tuple_max = ()\n        for j in range(len(test_tup1[i])):\n            tuple_max += (max(test_tup1[i][j], test_tup2[i][j]),)\n        result.append(tuple_max)\n    return tuple(result)\n"
    ],
    "MbppEval/260": [
        "def newman_prime(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def generate_newman_shanks_williams_numbers(length):\n        nsw_numbers = [1, 2, 3]\n        for i in range(3, length):\n            new_num = 2 * nsw_numbers[i-1] + nsw_numbers[i-2] - 2 * nsw_numbers[i-3]\n            nsw_numbers.append(new_num)\n        return nsw_numbers\n\n    index = 0\n    count = 0\n    while count < n:\n        index += 1\n        if is_prime(generate_newman_shanks_williams_numbers(index)[-1]):\n            count += 1\n\n    return generate_newman_shanks_williams_numbers(index)[-1]\n\n",
        "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef newman_prime(n): \n    def ns_prime(candidate):\n        return is_prime((2**candidate) * candidate - 1)\n    \n    count = 0\n    num = 0\n    \n    while count < n:\n        if ns_prime(num):\n            count += 1\n            if count == n:\n                return num\n        num += 1\n",
        "def newman_prime(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def generate_prime_numbers(n):\n        prime_numbers = []\n        num = 2\n        \n        while len(prime_numbers) < n:\n            if is_prime(num):\n                prime_numbers.append(num)\n            num += 1\n            \n        return prime_numbers\n\n    def newman_shanks_williams_prime(k, previous_nsw_primes):\n        if k == 0:\n            return 1\n        elif k == 1:\n            return 1\n        else:\n            return 2**k * previous_nsw_primes[k-1] - previous_nsw_primes[k-2] + 1\n\n    prime_numbers = generate_prime_numbers(n)\n    nsw_primes = [newman_shanks_williams_prime(k, nsw_primes) for k, nsw_primes in enumerate([1] + prime_numbers)]\n    \n    return nsw_primes[n-1]\n",
        "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n\n    Examples:\n    newman_prime(3) == 7\n    newman_prime(4) == 17\n    newman_prime(5) == 41\n    '''\n\n    def calculate_nswn(x):\n        if x == 0:\n            return 1\n        if x == 1:\n            return 2\n        return 2 * calculate_nswn(x - 1) - calculate_nswn(x - 2)\n\n    return calculate_nswn(n)\n",
        "def newman_prime(n): \n    coefficients = expand_expression(n)\n    return coefficients[2**n]\n\ndef expand_expression(n):\n    coefficients = [1]  # Initial coefficient\n    for _ in range(2**n):\n        new_coefficients = [0] * (len(coefficients) + 2)\n        for i in range(len(coefficients)):\n            new_coefficients[i] += coefficients[i]  # Coefficient for x^0\n            new_coefficients[i+1] += coefficients[i]  # Coefficient for x^1\n            new_coefficients[i+2] += coefficients[i]  # Coefficient for x^2\n        coefficients = new_coefficients\n    return coefficients\n"
    ],
    "MbppEval/261": [
        "def division_elements(test_tup1, test_tup2):\n",
        "def division_elements(test_tup1, test_tup2):\n    result = []\n    \n    for num1, num2 in zip(test_tup1, test_tup2):\n        division_result = num1 / num2\n        result.append(division_result)\n    \n    return tuple(result)\n",
        "def division_elements(test_tup1, test_tup2):\n    result = []\n    \n    for elem1, elem2 in zip(test_tup1, test_tup2):\n        result.append(elem1 / elem2)\n    \n    return tuple(result)\n",
        "def division_elements(test_tup1, test_tup2):\n    return tuple(ele1 / ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n",
        "def division_elements(test_tup1, test_tup2):\n    if len(test_tup1) != len(test_tup2):\n        return \"Error: Tuples must be of the same length.\"\n\n    result = []\n\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n\n    return tuple(result)\n"
    ],
    "MbppEval/262": [
        "def split_two_parts(list1, L):\n    first_part = list1[:L]\n    second_part = list1[L:]\n    \n    return first_part, second_part\n",
        "def split_two_parts(list1, L):\n    length = len(list1)\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)\n",
        "def split_two_parts(list1, L):\n    if len(list1) < L:\n        return \"Error: Length of list is less than L.\"\n    \n    part1 = list1[:L]\n    part2 = list1[L:]\n    \n    return (part1, part2)\n",
        "def split_two_parts(list1, L):\n    split_parts = []\n    \n    part1 = list1[:L]\n    part2 = list1[L:]\n    \n    split_parts.append(part1)\n    split_parts.append(part2)\n    \n    return tuple(split_parts)\n",
        "def split_two_parts(list1, L):\n    part1 = list1[:L]\n    part2 = list1[L:]\n    \n    return (part1, part2)\n"
    ],
    "MbppEval/264": [
        "def dog_age(h_age):\n    dog_age = 0\n    \n    if h_age <= 0:\n        return dog_age\n    \n    if h_age == 1:\n        dog_age += 10.5\n    elif h_age == 2:\n        dog_age += 10.5 + 4\n    else:\n        dog_age += 10.5 + 4 + (h_age - 2) * 4\n    \n    return dog_age\n",
        "def dog_age(h_age):\n    dog_age_first_two_years = 1 + 9\n    remaining_age = h_age - 2\n    remaining_age_in_dog_years = remaining_age * 4\n    age_in_dog_years = dog_age_first_two_years + remaining_age_in_dog_years\n    return age_in_dog_years\n",
        "import math\n\ndef dog_age(h_age):\n    ''' \n    Calculate a dog's age in dog's years.\n\n    Examples:\n    dog_age(12) == 61\n    dog_age(15) == 73\n    dog_age(24) == 109\n    '''\n    human_years = h_age * 7\n    \n    dog_years = 16 * math.log(human_years) + 31\n    \n    return dog_years\n",
        "def dog_age(h_age):\n    # Step 1: Convert human age to dog years\n    if h_age <= 2:\n        dog_years = h_age * 10.5\n    else:\n        dog_years = 2 * 10.5 + (h_age - 2) * 4\n        \n    return dog_years\n",
        "def dog_age(h_age):\n    return h_age * 5.25\n"
    ],
    "MbppEval/265": [
        "def list_split(S, step):\n    result = []\n    for i in range(0, len(S), step):\n        sublist = S[i:i+step]\n        result.append(sublist)\n    return result\n",
        "def list_split(S, step):\n    result = []\n    \n    for i in range(0, len(S), step):\n        sub_list = S[i:i+step]\n        result.append(sub_list)\n    \n    return result\n",
        "def list_split(S, step):\n    result_lists = []\n    for i in range(step):\n        sublist = S[i::step]\n        result_lists.append(sublist)\n    return result_lists\n",
        "def list_split(S, step):\n    result = []\n    \n    for i in range(0, step):\n        result.append([])\n    \n    for i in range(0, len(S), step):\n        sublist = S[i:i+step]\n        \n        for j in range(len(sublist)):\n            result[j].append(sublist[j])\n    \n    return result\n",
        "def list_split(S, step):\n    result = []\n    for i in range(step):\n        sublist = S[i::step]\n        result.append(sublist)\n    return result\n"
    ],
    "MbppEval/266": [
        "def lateralsurface_cube(l):\n    return 4 * (l ** 2)\n",
        "def lateralsurface_cube(l):\n    if l <= 0:\n        raise ValueError(\"Side length of the cube must be a positive number\")\n    \n    lateral_surface_area = 4 * l * l\n    return lateral_surface_area\n",
        "def lateralsurface_cube(l):\n    return 4 * l**2\n",
        "def lateralsurface_cube(l):\n    # Step 4: As there are four lateral faces, the lateral surface area is 4 * l^2\n    return 4 * l**2\n",
        "def lateralsurface_cube(l):\n    # Step 1: Define the function lateralsurface_cube with parameter l for side length\n    lateral_surface_area = 4 * l * l  # Calculate lateral surface area of cube\n\n    return lateral_surface_area\n\n# Test the function with examples\n\n\n\n"
    ],
    "MbppEval/267": [
        "def square_Sum(n):  \n    sum_squares = 0\n\n    for i in range(1, n + 1):\n        odd_number = 2 * i - 1\n        square = odd_number ** 2\n        sum_squares += square\n\n    return sum_squares\n",
        "def square_Sum(n):\n    sum_squares = 0\n    for i in range(1, 2*n, 2):\n        sum_squares += i**2\n    return sum_squares\n",
        "def square_Sum(n):\n    sum_squares = 0\n\n    for i in range(1, 2*n+1, 2):\n        square = i * i\n        sum_squares += square\n\n    return sum_squares\n",
        "def square_Sum(n):  \n    sum_squares = 0\n    odd_number = 1\n\n    for i in range(n):\n        sum_squares += odd_number ** 2\n        odd_number += 2\n\n    return sum_squares\n",
        "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n\n    Examples:\n    square_Sum(2) == 10\n    square_Sum(3) == 35\n    square_Sum(4) == 84\n    '''\n    sum_squares = 0\n    \n    for i in range(1, 2*n, 2):\n        sum_squares += i*i\n\n    return sum_squares\n"
    ],
    "MbppEval/268": [
        "def find_star_num(n):\n    return n**2 + (n+1)**2\n",
        "def find_star_num(n):\n    return n**2 * 6 + 1\n",
        "def find_star_num(n): \n    star_number = 6 * n * (n - 1) + 1\n    return star_number\n",
        "def find_star_num(n):\n    result = 1\n    while n > 0:\n        result += 2\n        n -= 1\n    return result\n",
        "def find_star_num(n):\n    return n**3 + 6*n**2 + 11*n + 6\n"
    ],
    "MbppEval/269": [
        "def ascii_value(k):\n    if isinstance(k, str) and len(k) == 1:\n        ascii_val = ord(k)\n        return ascii_val\n    else:\n        return \"Input should be a single character.\"\n",
        "def ascii_value(k):\n    return ord(k)\n",
        "def ascii_value(k):\n    ascii_val = ord(k)\n    return ascii_val\n",
        "def ascii_value(k):\n    return ord(k)\n",
        "def ascii_value(k):\n    return ord(k)\n"
    ],
    "MbppEval/270": [
        "def sum_even_and_even_index(arr):\n    # Step 1: Initialize a variable `sum_even` to 0\n    sum_even = 0\n\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum_even += arr[i]\n\n    return sum_even\n",
        "def sum_even_and_even_index(arr):\n    sum_even = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum_even += arr[i]\n    return sum_even\n",
        "def sum_even_and_even_index(arr):\n    even_sum = 0\n    for index, num in enumerate(arr):\n        if num % 2 == 0 and index % 2 == 0:\n            even_sum += num\n    \n    return even_sum\n",
        "def sum_even_and_even_index(arr):  \n    sum_even = 0\n    \n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum_even += arr[i]\n    \n    return sum_even\n",
        "def sum_even_and_even_index(arr):\n    sum_even = 0\n\n    for i, num in enumerate(arr):\n        if i % 2 == 0 and num % 2 == 0:\n            sum_even += num\n\n    return sum_even\n"
    ],
    "MbppEval/271": [
        "def even_Power_Sum(n):\n    sum_result = 0\n    count = 0\n    num = 2\n\n    while count < n:\n        if num % 2 == 0:\n            sum_result += num ** 5\n            count += 1\n        num += 2\n\n    return sum_result\n",
        "def even_Power_Sum(n):\n    sum_even_power = 0\n    even_number = 2\n    \n    for _ in range(n):\n        sum_even_power += even_number**5\n        even_number += 2\n        \n    return sum_even_power\n",
        "def even_Power_Sum(n): \n    if not isinstance(n, int) or n <= 0:\n        return \"Please enter a positive integer value for n.\"\n    \n    even_numbers = [2*i for i in range(1, n+1)]\n    \n    fifth_powers = [num**5 for num in even_numbers]\n    \n    sum_fifth_powers = sum(fifth_powers)\n\n    return sum_fifth_powers\n",
        "def even_Power_Sum(n): \n    sum_power = 0\n    \n    for i in range(1, n + 1):\n        even_num = 2 * i\n        power = even_num ** 5\n        sum_power += power\n        \n    return sum_power\n",
        "    return sum_result\n"
    ],
    "MbppEval/272": [
        "def rear_extract(test_list):\n    rear_elements = []\n    for tup in test_list:\n        rear_elements.append(tup[-1])\n    return rear_elements\n",
        "def rear_extract(test_list):\n    result = []\n    \n    for tpl in test_list:\n        result.append(tpl[-1])\n    \n    return result\n",
        "def rear_extract(test_list):\n    rear_elements = []  # Step 0: Create an empty list to store the rear elements of the tuples.\n    \n    for tup in test_list:  # Step 1: Iterate through each tuple in the input list.\n        rear_element = tup[-1]  # Step 2: Get the last element (rear element) of the tuple.\n        rear_elements.append(rear_element)  # Step 3: Append the rear element to the list.\n        \n    return rear_elements  # Step 4: Return the list containing the rear elements.\n",
        "def rear_extract(test_list):\n    rear_elements = []\n\n    for tup in test_list:\n        rear_elements.append(tup[-1])\n\n    return rear_elements\n",
        "def rear_extract(test_list):\n    rear_elements = []\n    \n    for item in test_list:\n        rear_element = item[-1]\n        rear_elements.append(rear_element)\n    \n    return rear_elements\n"
    ],
    "MbppEval/273": [
        "def substract_elements(test_tup1, test_tup2):\n    result = ()\n    for i in range(min(len(test_tup1), len(test_tup2))):\n        result += (test_tup1[i] - test_tup2[i],)\n    return result\n",
        "def substract_elements(test_tup1, test_tup2):\n    result = []\n    \n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n        \n    return tuple(result)\n",
        "def substract_elements(test_tup1, test_tup2):\n    result = []\n    \n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    \n    return tuple(result)\n",
        "def substract_elements(test_tup1, test_tup2):\n    result = []\n    for i in range(len(test_tup1)):\n        diff = test_tup1[i] - test_tup2[i]\n        result.append(diff)\n    return tuple(result)\n",
        "def substract_elements(test_tup1, test_tup2):\n    result = []\n    for elem1, elem2 in zip(test_tup1, test_tup2):\n        result.append(elem1 - elem2)\n    return tuple(result)\n"
    ],
    "MbppEval/274": [
        "import math  \ndef even_binomial_Coeff_Sum(n): \n    if not isinstance(n, int) or n <= 0:\n        return \"Please enter a positive integer for n\"\n    \n    # Step 1: Calculate the sum of even index binomial coefficients\n    sum_even_binomial = 2**n\n    \n    return sum_even_binomial\n",
        "import math\n\ndef binomial_coefficient(n, k):\n    return math.factorial(n) // (math.factorial(k) * math.factorial(n - k))\n\ndef even_binomial_coefficients(n):\n    return [binomial_coefficient(n, k) for k in range(0, n+1, 2)]\n\ndef even_binomial_Coeff_Sum(n):\n    even_coeffs = even_binomial_coefficients(n)\n    return sum(even_coeffs)\n",
        "import math\n\ndef even_binomial_Coeff_Sum(n):\n    result = 0\n    for i in range(n+1):\n        if i % 2 == 0:\n            result += math.comb(n, i)\n    return result\n",
        "import math\n\ndef even_binomial_Coeff_Sum(n):\n    total_sum = 0\n\n    for k in range(n + 1):\n        binomial_coefficient = math.comb(n, k)\n        if k % 2 == 0:  # Check if index k is even\n            total_sum += binomial_coefficient\n\n    return total_sum\n",
        "import math\n\ndef even_binomial_Coeff_Sum(n):\n    sum_even = 0\n    for i in range(0, n+1, 2):\n        sum_even += math.comb(n, i)\n    return sum_even\n"
    ],
    "MbppEval/276": [
        "import math\n\ndef volume_cylinder(r, h):\n    volume = math.pi * (r**2) * h\n    return volume\n",
        "import math\n\ndef volume_cylinder(r, h):\n    pi = math.pi\n    volume = pi * r**2 * h\n    \n    return volume\n",
        "import math\n\ndef volume_cylinder(r, h):\n    '''\n    Calculates the volume of a cylinder given its radius and height.\n    \n    :param r: radius of the cylinder\n    :param h: height of the cylinder\n    :return: calculated volume of the cylinder\n    '''\n    pi = math.pi\n    volume = pi * r**2 * h\n    \n    return volume\n",
        "import math\n\ndef volume_cylinder(r, h):\n    volume = math.pi * (r ** 2) * h\n    return round(volume, 14)\n",
        "import math\n\ndef volume_cylinder(r, h):\n    volume = math.pi * (r**2) * h\n    return volume\n"
    ],
    "MbppEval/277": [
        "def dict_filter(my_dict, n):\n    filtered_dict = {}\n    \n    for key, value in my_dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    \n    return filtered_dict\n",
        "def dict_filter(dict, n):\n    filtered_dict = {}\n\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n\n    return filtered_dict\n",
        "def dict_filter(dict, n):\n    filtered_dict = {}\n    \n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n            \n    return filtered_dict\n",
        "def dict_filter(dict, n):\n    filtered_dict = {}\n    \n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    \n    return filtered_dict\n",
        "def dict_filter(d, n):\n    filtered_dict = {}  # Empty dictionary to store filtered entries\n\n    for key, value in d.items():\n        if value >= n:\n            filtered_dict[key] = value\n\n    return filtered_dict\n"
    ],
    "MbppEval/278": [
        "def count_first_elements(test_tup):\n    count = 0\n    for elem in test_tup:\n        if isinstance(elem, tuple):\n            return count\n        count += 1\n    return -1\n",
        "def count_first_elements(test_tup):\n    count = 0\n    tup_elem = None\n    for elem in test_tup:\n        if elem == tup_elem:\n            break\n        count += 1\n    \n    return count\n",
        "def count_first_elements(test_tup):\n    count = 0\n    for elem in test_tup:\n        if elem == test_tup:\n            return count\n        count += 1\n    return count\n",
        "def count_first_elements(test_tup):\n    for index, element in enumerate(test_tup):\n        if isinstance(element, tuple):\n            return index\n    return 0\n",
        "def count_first_elements(test_tup):\n    count = 0\n    for elem in test_tup:\n        if isinstance(elem, tuple):\n            break\n        count += 1\n    return count\n"
    ],
    "MbppEval/279": [
        "def is_num_decagonal(n):\n    return n * (7 * n - 5)\n",
        "def is_num_decagonal(n): \n    decagonal_number = n * (7 * n - 5)\n    return decagonal_number\n",
        "def is_num_decagonal(n): \n    return n * (7*n - 5)\n",
        "def is_num_decagonal(n):\n    if not isinstance(n, int) or n <= 0:\n        return None\n\n    decagonal_number = n * (7*n - 5)\n\n    return decagonal_number\n",
        "def is_num_decagonal(n): \n    decagonal_number = n * (7*n - 5)\n    return decagonal_number\n"
    ],
    "MbppEval/280": [
        "def sequential_search(dlist, item):\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n",
        "def sequential_search(dlist, item):\n    for index, value in enumerate(dlist):\n        if value == item:\n            return True, index\n    return False, -1\n",
        "def sequential_search(dlist, item):\n    for index, element in enumerate(dlist):\n        if element == item:\n            return True, index\n    return False, -1\n",
        "def sequential_search(dlist, item):\n    for index, element in enumerate(dlist):\n        if element == item:\n            return (True, index)\n    \n    return (False, -1)\n",
        "def sequential_search(dlist, item):\n    found = False\n    index = -1\n    \n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    \n    return (found, index)\n"
    ],
    "MbppEval/281": [
        "def all_unique(test_list):\n    unique_elements = set()\n    \n    for element in test_list:\n        if element in unique_elements:\n            return False\n        unique_elements.add(element)\n    \n    return True\n",
        "def all_unique(test_list):\n    unique_set = set()\n    \n    for element in test_list:\n        if element in unique_set:\n            return False\n        unique_set.add(element)\n    \n    return True\n",
        "def all_unique(test_list):\n    unique_set = set()\n\n    for elem in test_list:\n        if elem in unique_set:\n            return False\n        unique_set.add(elem)\n    \n    return True\n",
        "def all_unique(test_list):\n    unique_set = set()\n    \n    for elem in test_list:\n        if elem in unique_set:\n            return False\n        else:\n            unique_set.add(elem)\n    \n    return True\n",
        "def all_unique(test_list):\n    unique_set = set()\n    \n    for elem in test_list:\n        if elem in unique_set:\n            return False\n        unique_set.add(elem)\n    \n    return True\n"
    ],
    "MbppEval/282": [
        "def sub_list(nums1, nums2):\n    result = []\n    \n    if len(nums1) != len(nums2):\n        raise ValueError(\"Input lists must be of the same length\")\n    \n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    return result\n",
        "def sub_list(nums1, nums2):\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result\n",
        "def sub_list(nums1, nums2):\n    if len(nums1) != len(nums2):\n        return \"Error: Lists must be of equal length\"\n    \n    result = []\n    for n1, n2 in zip(nums1, nums2):\n        result.append(n1 - n2)\n    return result\n",
        "def sub_list(nums1, nums2):\n    result = []\n    for n1, n2 in zip(nums1, nums2):\n        sub = n1 - n2\n        result.append(sub)\n    return result\n",
        "def sub_list(nums1, nums2):\n    return [nums1[i] - nums2[i] for i in range(min(len(nums1), len(nums2))]\n"
    ],
    "MbppEval/283": [
        "def validate(n):\n    num_str = str(n)\n    digit_count = {}\n    \n    for digit in num_str:\n        if digit in digit_count:\n            digit_count[digit] += 1\n        else:\n            digit_count[digit] = 1\n    \n    for digit, count in digit_count.items():\n        if int(digit) < count:\n            return False\n    \n    return True\n",
        "def validate(n): \n    '''\n    Write a python function that takes in an integer and checks whether the frequency of each digit in the integer is \n    less than or equal to the digit itself.\n\n    Examples:\n    validate(1234) == True\n    validate(51241) == False\n    validate(321) == True\n    '''\n    num_str = str(n)\n    digit_freq = {}\n\n    for digit in num_str:\n        if digit in digit_freq:\n            digit_freq[digit] += 1\n        else:\n            digit_freq[digit] = 1\n\n    for digit, freq in digit_freq.items():\n        if int(digit) < freq:\n            return False\n    \n    return True\n",
        "def validate(n):\n    # Step 1: Define a dictionary to store the frequency of each digit\n    digit_freq = {}\n    \n    # Step 2: Convert the integer 'n' to a string\n    n_str = str(n)\n    \n    # Step 3: Iterate over each digit in the string representation of 'n'\n    for digit in n_str:\n        # Step 3a: Check if digit is in the dictionary, if yes, increment its frequency\n        if digit in digit_freq:\n            digit_freq[digit] += 1\n        else:\n            digit_freq[digit] = 1\n        \n        # Step 3b: Check if the frequency of digit is greater than the digit itself\n        if digit_freq[digit] > int(digit):\n            return False\n    \n    return True\n",
        "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\n    Examples:\n    validate(1234) == True\n    validate(51241) == False\n    validate(321) == True\n    '''\n    n_str = str(n)  # Convert the integer n to a string\n    result = True   # Assume the result is True initially\n    \n    for digit in n_str:  # Iterate through each digit in the string\n        digit_count = n_str.count(digit)  # Count the frequency of each digit\n        if digit_count > int(digit):  # Check if the frequency is greater than the digit itself\n            result = False\n            break  # Exit the loop if a digit violates the condition\n    \n    return result\n",
        "def validate(n): \n    digits = str(n)\n    freq = {}\n    for digit in digits:\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n\n    for digit in digits:\n        if freq[digit] > int(digit):\n            return False\n    \n    return True\n"
    ],
    "MbppEval/284": [
        "def check_element(lst, element):\n    for item in lst:\n        if item != element:\n            return False\n    return True\n",
        "def check_element(lst, element):\n    result = True\n    for item in lst:\n        if item != element:\n            result = False\n            break\n    return result\n",
        "def check_element(list, element):\n    for item in list:\n        if item != element:\n            return False\n    return True\n",
        "def check_element(lst, element):\n    for item in lst:\n        if item != element:\n            return False\n    return True\n",
        "def check_element(list, element):\n    for item in list:\n        if item != element:\n            return False\n\n    return True\n"
    ],
    "MbppEval/285": [
        "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile('ab{2,3}')\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
        "import re\n\ndef text_match_two_three(text):\n    match = re.search(r'ab{2,3}', text)\n    \n    if match:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
        "import re\n\ndef text_match_two_three(text):\n    pattern = 'ab{2,3}'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
        "import re\n\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}'\n    \n    if re.match(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
        "import re\n\ndef text_match_two_three(text):\n    if re.search(r'a[b]{2,3}', text) is not None:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n"
    ],
    "MbppEval/286": [
        "def max_sub_array_sum_repeated(a, n, k):\n    modified_list = a * k\n    max_sum_found = float('-inf')\n\n    for i in range(len(modified_list) - n + 1):\n        subarray = modified_list[i:i+n]\n        subarray_sum = sum(subarray)\n        max_sum_found = max(max_sum_found, subarray_sum)\n\n    return max_sum_found\n\n# Test the function with the examples provided\n\n\n\n",
        "def max_sub_array_sum_repeated(a, n, k):\n    repeated_array = a * (k - 1) + a  # Repeat (k-1) times and add the original array once\n    max_sum = float('-inf')  # Initialize max_sum to negative infinity\n    \n    # Loop through all possible subarrays of length n\n    for i in range(len(repeated_array) - n + 1):\n        current_sum = sum(repeated_array[i:i+n])\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum\n",
        "def max_sub_array_sum_repeated(a, n, k): \n    new_array = a * k\n    max_sum = float('-inf')\n    current_sum = float('-inf')\n    \n    for i in range(len(new_array) - n + 1):\n        sub_array = new_array[i:i+n]\n        current_sum = sum(sub_array)\n        \n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum\n",
        "def max_sub_array_sum_repeated(a, n, k): \n    modified_array = a * k\n    max_sum = float('-inf')\n    \n    # Iterate over all possible subarrays of length n\n    for i in range(len(modified_array) - n + 1):\n        current_sum = sum(modified_array[i:i+n])\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum\n",
        "def max_sub_array_sum_repeated(a, n, k):\n    # Step 1: Concatenate the given array a k times to form the modified array\n    modified_array = a * k\n    \n    # Step 2: Find the largest sum of a contiguous subarray\n    max_sum = current_sum = modified_array[0]\n    \n    for num in modified_array[1:]:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum\n\n# Test the function\n\n"
    ],
    "MbppEval/287": [
        "def square_Sum(n):  \n    sum_squares = 0\n    for i in range(1, n+1):\n        num = 2*i\n        sum_squares += num**2\n    return sum_squares\n",
        "def square_Sum(n):\n    sum_squares = 0\n    \n    for even_number in range(2, 2 * n + 1, 2):\n        sum_squares += even_number ** 2\n        \n    return sum_squares\n",
        "def square_Sum(n):\n    return n * (2 * n + 2) * (n + 1) // 2\n",
        "def square_Sum(n):  \n    sum_squares = 0\n    even_number = 2\n\n    for i in range(n):\n        square = even_number ** 2\n        sum_squares += square\n        even_number += 2\n\n    return sum_squares\n",
        "def square_Sum(n):\n    sum_squares = 0\n\n    for i in range(1, n+1):\n        even_number = 2*i\n        \n        square = even_number ** 2\n        sum_squares += square\n    \n    return sum_squares\n"
    ],
    "MbppEval/290": [
        "def max_length(list1):\n    max_len = 0\n    max_list = []\n\n    for sublist in list1:\n        sublist_len = len(sublist)\n        if sublist_len > max_len:\n            max_len = sublist_len\n            max_list = sublist\n\n    return max_len, max_list\n",
        "def max_length(list1):\n    max_len = 0\n    max_list = []\n    \n    for sublist in list1:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_list = sublist\n    \n    return max_len, max_list\n",
        "def max_length(list1):\n    max_len = 0\n    max_list = None\n    \n    for lst in list1:\n        length = len(lst)\n        \n        if length > max_len:\n            max_len = length\n            max_list = lst\n            \n    return max_len, max_list\n",
        "def max_length(list1):\n    max_len = 0\n    max_list = None\n    \n    for sub_list in list1:\n        if len(sub_list) > max_len:\n            max_len = len(sub_list)\n            max_list = sub_list\n\n    return (max_len, max_list)\n",
        "def max_length(list1):\n    max_len = 0\n    max_list = []\n    \n    for sublist in list1:\n        sublist_length = len(sublist)\n        \n        if sublist_length > max_len:\n            max_len = sublist_length\n            max_list = sublist\n            \n    return max_len, max_list\n"
    ],
    "MbppEval/291": [
        "def count_no_of_ways(n, k):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return k\n    elif n == 2:\n        return k * k\n    \n    same_color = k\n    diff_color = k * (k - 1)\n    \n    for i in range(3, n + 1):\n        new_same_color = diff_color\n        new_diff_color = (same_color + diff_color) * (k - 1)\n        \n        same_color = new_same_color\n        diff_color = new_diff_color\n    \n    total_ways = same_color + diff_color\n    \n    return total_ways\n",
        "def count_no_of_ways(n, k):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return k\n    \n    same_color = k  # Number of ways when the last two posts have the same color\n    diff_color = k * (k - 1)  # Number of ways when the last two posts have different colors\n    \n    for _ in range(3, n + 1):\n        new_same_color = diff_color\n        new_diff_color = (same_color + diff_color) * (k - 1)\n        \n        same_color, diff_color = new_same_color, new_diff_color\n        \n    return same_color + diff_color\n",
        "def count_no_of_ways(n, k):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return k\n    else:\n        total_ways_two_posts = k * k\n        same_color, diff_color = k, k * (k - 1)\n\n        for _ in range(2, n):\n            same_color, diff_color = diff_color, (same_color + diff_color) * (k - 1)\n\n        return same_color + diff_color\n",
        "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\n    Examples:\n    count_no_of_ways(2, 4) == 16\n    count_no_of_ways(3, 2) == 6\n    count_no_of_ways(4, 4) == 228\n    '''\n    \n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n    \n    same_color = k\n    diff_color = k\n    \n    for i in range(3, n+1):\n        prev_same_color = same_color\n        same_color = diff_color\n        diff_color = (prev_same_color + diff_color) * (k - 1)\n    \n    return same_color + diff_color\n",
        "def count_no_of_ways(n, k): \n    total_ways = k * k\n    dp_same = k\n    dp_diff = k\n    \n    for i in range(3, n+1):\n        new_dp_same = dp_diff\n        new_dp_diff = (dp_same + dp_diff) * (k-1)\n        dp_same = new_dp_same\n        dp_diff = new_dp_diff\n        \n    return dp_same + dp_diff\n"
    ],
    "MbppEval/292": [
        "def find(n, m):\n    quotient = n // m\n    return quotient\n",
        "import math\n\ndef find(n, m):\n    quotient = n / m\n    rounded_down_quotient = math.floor(quotient)\n    return rounded_down_quotient\n",
        "def find(n, m):\n    result = n // m\n    return result\n",
        "def find(n, m):\n    quotient = n / m\n    rounded_down_quotient = int(quotient)\n    return rounded_down_quotient\n",
        "import math\n\ndef find(n, m):\n    quotient = n // m\n    rounded_down_quotient = math.floor(quotient)\n    return rounded_down_quotient\n"
    ],
    "MbppEval/293": [
        "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Find the length of the third side of a right-angled triangle.\n\n    Args:\n    w (float): Length of one side of the triangle.\n    h (float): Length of the other side of the triangle.\n\n    Returns:\n    float: Length of the third side of the triangle.\n    '''\n    return math.sqrt(w**2 + h**2)\n",
        "import math\n\ndef otherside_rightangle(w, h):\n    return math.sqrt(w ** 2 + h ** 2)\n",
        "import math\n\ndef otherside_rightangle(w, h):\n    if w <= 0 or h <= 0:\n        return \"Invalid input. Sides of a triangle must be positive numbers.\"\n    else:\n        third_side = math.sqrt(w**2 + h**2)\n        return third_side\n",
        "import math\n\ndef otherside_rightangle(w, h):\n    # Calculate the length of the hypotenuse\n    c = math.sqrt(w**2 + h**2)\n    return c\n\n\n\n\n",
        "import math\n\ndef otherside_rightangle(w, h):\n    c = math.sqrt(w**2 + h**2)\n    return c\n"
    ],
    "MbppEval/294": [
        "def max_val(listval):\n    max_value = None  # Initialize max_value to None to avoid assuming a specific initial value\n    \n    for val in listval:\n        if isinstance(val, (int, float)):\n            if max_value is None or val > max_value:\n                max_value = val\n    \n    return max_value\n",
        "def max_val(listval):\n    max_value = None\n    for val in listval:\n        if isinstance(val, (int, float)):\n            if max_value is None or val > max_value:\n                max_value = val\n    return max_value\n",
        "def max_val(listval):\n    maximum = None\n    for val in listval:\n        if isinstance(val, (int, float)):\n            if maximum is None or val > maximum:\n                maximum = val\n    return maximum\n",
        "def max_val(listval):\n    max_value = float('-inf')  # Step 0\n    \n    for elem in listval:\n        if isinstance(elem, (int, float)):\n            if elem > max_value:\n                max_value = elem  # Update max_value if current element is greater\n\n    return max_value\n",
        "def max_val(listval):\n    max_value = None\n\n    for val in listval:\n        if isinstance(val, (int, float)):\n            if max_value is None or val > max_value:\n                max_value = val\n\n    return max_value\n"
    ],
    "MbppEval/295": [
        "def sum_div(number):\n    sum_divisors = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum_divisors += i\n    return sum_divisors\n",
        "def sum_div(number):\n    sum_of_divisors = 0\n\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum_of_divisors += i\n\n    return sum_of_divisors\n",
        "def sum_div(number):\n    total_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            total_sum += i\n    \n    return total_sum\n",
        "def sum_div(number):\n    sum_divisors = 0\n\n    for i in range(1, number // 2 + 1):\n        if number % i == 0:\n            sum_divisors += i\n\n    return sum_divisors\n",
        "def sum_div(number):\n    sum_of_divisors = 0\n    \n    for i in range(1, number//2 + 1):\n        if number % i == 0:\n            sum_of_divisors += i\n    \n    return sum_of_divisors\n"
    ],
    "MbppEval/296": [
        "def get_Inv_Count(arr):\n    count = 0\n    \n    def merge(arr1, arr2):\n        nonlocal count\n        i = j = 0\n        merged = []\n        while i < len(arr1) and j < len(arr2):\n            if arr1[i] <= arr2[j]:\n                merged.append(arr1[i])\n                i += 1\n            else:\n                merged.append(arr2[j])\n                count += len(arr1) - i\n                j += 1\n        merged += arr1[i:]\n        merged += arr2[j:]\n        return merged\n\n    def sort_and_count(arr):\n        if len(arr) <= 1:\n            return arr\n        mid = len(arr) // 2\n        left = sort_and_count(arr[:mid])\n        right = sort_and_count(arr[mid:])\n        return merge(left, right)\n\n    sort_and_count(arr)\n\n    return count\n",
        "def get_Inv_Count(arr):\n    count = 0\n\n    def merge_sort_and_count_inversions(arr):\n        if len(arr) <= 1:\n            return arr, 0\n        \n        mid = len(arr) // 2\n        left, inv_count_left = merge_sort_and_count_inversions(arr[:mid])\n        right, inv_count_right = merge_sort_and_count_inversions(arr[mid:])\n        \n        inv_count_merge = 0\n        sorted_arr = []\n        i, j = 0, 0\n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                sorted_arr.append(left[i])\n                i += 1\n            else:\n                sorted_arr.append(right[j])\n                j += 1\n                inv_count_merge += len(left) - i\n                count += len(left) - i\n\n        sorted_arr.extend(left[i:])\n        sorted_arr.extend(right[j:])\n        \n        return sorted_arr, inv_count_left + inv_count_right + inv_count_merge\n\n    sorted_arr, _ = merge_sort_and_count_inversions(arr)\n    \n    return count\n",
        "def get_Inv_Count(arr): \n    inv_count = 0\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n                \n    return inv_count\n",
        "def get_Inv_Count(arr): \n    inv_count = 0\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    \n    return inv_count\n",
        "def get_Inv_Count(arr): \n    inv_count = 0\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n\n    return inv_count\n"
    ],
    "MbppEval/297": [
        "def flatten_list(list1):\n    flattened_list = []\n    \n    for element in list1:\n        if isinstance(element, list):\n            flattened_list.extend(flatten_list(element))\n        else:\n            flattened_list.append(element)\n    \n    return flattened_list\n",
        "def flatten_list(list1):\n    flattened_list = []\n    \n    def flatten_helper(nested_list):\n        for element in nested_list:\n            if isinstance(element, list):\n                flatten_helper(element)\n            else:\n                flattened_list.append(element)\n    \n    for element in list1:\n        flatten_helper(element)\n    \n    return flattened_list\n",
        "def flatten_list(list1):\n    flattened_list = []\n\n    for elem in list1:\n        if isinstance(elem, list):\n            flattened_list.extend(flatten_list(elem))\n        else:\n            flattened_list.append(elem)\n\n    return flattened_list\n",
        "def flatten_list(list1):\n    def flatten_recursive(nested_list):\n        result = []\n        for element in nested_list:\n            if isinstance(element, list):\n                result.extend(flatten_recursive(element))\n            else:\n                result.append(element)\n        return result\n\n    return flatten_recursive(list1)\n",
        "def flatten_list(list1):\n    flattened_list = []\n    for element in list1:\n        if isinstance(element, list):\n            flattened_list.extend(flatten_list(element))\n        else:\n            flattened_list.append(element)\n    return flattened_list\n"
    ],
    "MbppEval/299": [
        "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    aggregate_scores = defaultdict(int)\n    for name, score in stdata:\n        aggregate_scores[name] += score\n\n    max_student = max(aggregate_scores, key=aggregate_scores.get)\n    \n    return max_student, aggregate_scores[max_student]\n",
        "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    aggregate_scores = defaultdict(int)\n    \n    for student, score in stdata:\n        if student in aggregate_scores:\n            aggregate_scores[student] += score\n        else:\n            aggregate_scores[student] = score\n\n    max_student = max(aggregate_scores, key=aggregate_scores.get)\n\n    return max_student, aggregate_scores[max_student]\n",
        "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    aggregate_scores = defaultdict(int)\n    \n    for student, score in stdata:\n        aggregate_scores[student] += score\n\n    max_student = max(aggregate_scores, key=aggregate_scores.get)\n    \n    return (max_student, aggregate_scores[max_student])\n",
        "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    aggregated_scores = defaultdict(int)\n\n    for student, score in stdata:\n        aggregated_scores[student] += score\n\n    max_student = max(aggregated_scores, key=aggregated_scores.get)\n    \n    return max_student, aggregated_scores[max_student]\n",
        "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    aggregate_scores = defaultdict(int)\n    \n    for name, score in stdata:\n        aggregate_scores[name] += score\n    \n    max_name = max(aggregate_scores, key=aggregate_scores.get)\n    max_aggregate_score = aggregate_scores[max_name]\n    \n    return max_name, max_aggregate_score\n"
    ],
    "MbppEval/300": [
        "def count_binary_seq(n):\n    def generate_binary_sequences(n):\n        if n == 0:\n            return ['']\n        \n        prev_sequences = generate_binary_sequences(n - 1)\n        new_sequences = []\n        \n        for seq in prev_sequences:\n            new_sequences.append(seq + '0')\n            new_sequences.append(seq + '1')\n        \n        return new_sequences\n\n    def calculate_sums(seq, n):\n        first_half = seq[:n]\n        last_half = seq[n:]\n        \n        sum_first_half = sum(int(bit) for bit in first_half)\n        sum_last_half = sum(int(bit) for bit in last_half)\n        \n        return sum_first_half, sum_last_half\n\n    def count_equal_sums(n):\n        sequences = generate_binary_sequences(n)\n        count = 0\n        \n        for seq in sequences:\n            sum_first_half, sum_last_half = calculate_sums(seq, n)\n            if sum_first_half == sum_last_half:\n                count += 1\n        \n        return count\n    \n    return count_equal_sums(n)\n",
        "def generate_binary_sequences(n, sequence=[], prefix_sum=0):\n    if len(sequence) == 2*n:\n        return [sequence] if prefix_sum == 0 else []\n    \n    sequences = []\n    for bit in [0, 1]:\n        new_sequence = sequence + [bit]\n        new_prefix_sum = prefix_sum + (-1) ** bit\n        sequences += generate_binary_sequences(n, new_sequence, new_prefix_sum)\n        \n    return sequences\n\ndef count_binary_seq(n):\n    binary_sequences = generate_binary_sequences(n)\n    return len(binary_sequences)\n",
        "def count_binary_seq(n): \n    count = 0  # Variable to count sequences where sums are equal\n    \n    for i in range(2**(2*n)):\n        seq = format(i, f'0{2*n}b')  # Get the binary sequence for current number\n        first_n_sum = sum(int(bit) for bit in seq[:n])  # Sum of first n bits\n        last_n_sum = sum(int(bit) for bit in seq[n:])  # Sum of last n bits\n        \n        if first_n_sum == last_n_sum:\n            count += 1\n    \n    return count\n",
        "import math\n\ndef count_binary_seq(n): \n    count = math.comb(2*n, n)\n    \n    return count\n",
        "import math\n\ndef count_binary_seq(n):\n    total_count = 2**(2*n)  # Total number of possible binary sequences of length 2n\n    valid_count = 0\n    \n    for i in range(n+1):\n        count_first_n_bits = i\n        count_last_n_bits = n - i\n        valid_count += math.comb(n, count_first_n_bits) * (2 ** count_last_n_bits)  # Count valid sequences for each case\n    \n    return valid_count\n"
    ],
    "MbppEval/301": [
        "def dict_depth(d):\n    if not d:\n        return 0\n    \n    max_depth = 0\n\n    def calculate_depth(dictionary, depth):\n        nonlocal max_depth\n        if not dictionary:\n            max_depth = max(max_depth, depth)\n            return\n        for key, value in dictionary.items():\n            if isinstance(value, dict):\n                calculate_depth(value, depth + 1)\n                \n    for key, value in d.items():\n        if isinstance(value, dict):\n            calculate_depth(value, 2)\n            max_depth = max(max_depth, 2)\n\n    return max_depth\n",
        "def dict_depth(d):\n    def depth_helper(d, depth):\n        if not isinstance(d, dict):\n            return depth\n        return max(depth_helper(val, depth + 1) for val in d.values())\n\n    if not isinstance(d, dict):\n        return \"Input is not a dictionary\"\n\n    if not d:\n        return 0\n\n    max_depth = 1\n    for val in d.values():\n        if isinstance(val, dict):\n            val_depth = depth_helper(val, 2)\n            max_depth = max(max_depth, val_depth)\n\n    return max_depth\n",
        "def dict_depth(d):\n    depth = 0\n    \n    if not d:\n        return 0\n    \n    max_depth = 0\n    \n    if not isinstance(d, dict):\n        return depth\n    \n    for key, value in d.items():\n        if isinstance(value, dict):\n            curr_depth = dict_depth(value)\n            max_depth = max(max_depth, curr_depth + 1)\n    \n    return max_depth\n",
        "def dict_depth(d):\n    if not d:\n        return 0\n    \n    max_depth = 0\n    \n    for value in d.values():\n        if isinstance(value, dict):\n            max_depth = max(max_depth, dict_depth(value) + 1)\n\n    return max_depth\n",
        "def dict_depth(d, depth=1):\n    if isinstance(d, dict):\n        max_depth = 0\n        for value in d.values():\n            if isinstance(value, dict):\n                max_depth = max(max_depth, dict_depth(value, depth + 1))\n        return max_depth + depth\n    return depth\n"
    ],
    "MbppEval/304": [
        "def find_Element(arr, ranges, rotations, index):\n    current_index = index\n    \n    for i in range(rotations):\n        for r in ranges:\n            start, end = r\n            if current_index >= start and current_index <= end:\n                current_index = end - (current_index - start)\n    \n    return arr[current_index]\n",
        "def find_Element(arr, ranges, rotations, index):\n    total_rotations = sum([r[1] for r in ranges]) * rotations\n    effective_index = (index + total_rotations) % len(arr)\n    return arr[effective_index]\n",
        "def find_element(arr, ranges, rotations, index):\n    \n    def rotate_array(arr, rotations):\n        rotations = rotations % len(arr)\n        return arr[-rotations:] + arr[:-rotations]\n\n    rotated_arr = rotate_array(arr, rotations)\n    \n    for start, end in ranges:\n        subarray = rotated_arr[start:end+1]\n        \n        if index < len(subarray):\n            return subarray[index]\n    \n    return None\n",
        "def rotate(arr, times):\n    n = len(arr)\n    times = times % n\n    \n    return arr[-times:] + arr[:-times]\n\ndef find_Element(arr, ranges, rotations, index):\n    for r in ranges:\n        arr = rotate(arr, r[1] - r[0])\n    \n    rotated_arr = rotate(arr, rotations)\n    \n    return rotated_arr[index]\n",
        "def find_Element(arr, ranges, rotations, index):\n    cur_index = index\n    \n    for rotation in rotations:\n        actual_rotation = rotation % len(arr)\n        cur_index = (cur_index + actual_rotation) % len(arr)\n    \n    return arr[cur_index]\n"
    ],
    "MbppEval/305": [
        "import re\ndef start_withp(words):\n    # Step 1\n    words_list = [word for sentence in words for word in sentence.split()]\n    \n    # Step 2\n    p_words = [word for word in words_list if re.match(r'^[Pp]', word)]\n    \n    # Step 3\n    return tuple(p_words[:2])\n",
        "import re\n\ndef start_withp(words):\n    result = []\n    count = 0\n    for word_str in words:\n        for word in word_str.split():\n            if re.match(r'[pP]\\w+', word):\n                result.append(word)\n                count += 1\n                if count == 2:\n                    return tuple(result)\n\n# Testing the function\n\n",
        "import re\n\ndef start_withp(words):\n    p_words = []\n    for word in words:\n        p_words.extend(re.findall(r'\\b[pP]\\w+', word))\n        \n    return tuple(p_words[:2]) if len(p_words) >= 2 else None\n",
        "import re\ndef start_withp(words):\n    p_words = []\n    \n    for word in words:\n        word_list = word.split()\n        for w in word_list:\n            if re.match('p', w, re.I):\n                p_words.append(w)\n    \n    return tuple(p_words[:2])\n",
        "import re\n\ndef start_withp(words):\n    p_words = []\n\n    for word in words:\n        split_words = word.split()\n\n        for w in split_words:\n            if w.lower().startswith('p'):\n                p_words.append(w)\n\n    return tuple(p_words[:2])\n"
    ],
    "MbppEval/306": [
        "def max_sum_increasing_subseq(a, n, index, k):\n    max_sum = a[index]\n    \n    for i in range(index):\n        if a[i] < a[index]:\n            max_sum = max(max_sum, a[i] + max_sum_increasing_subseq(a, n, i, k))\n\n    return max_sum\n\n# Testing the function with the examples provided\n\n\n\n",
        "def max_sum_increasing_subseq(a, n, index, k):\n    if index >= n or k >= n:\n        return 0\n    \n    if a[index] < a[k]:\n        include_current = a[index] + max_sum_increasing_subseq(a, n, k, k+1)\n        exclude_current = max_sum_increasing_subseq(a, n, index, k+1)\n        \n        return max(include_current, exclude_current)\n    else:\n        return max_sum_increasing_subseq(a, n, k, k+1)\n",
        "def max_sum_increasing_subseq(a, n, index, k):\n    max_sum = [0] * n\n    \n    for i in range(index):\n        max_sum[i] = a[i]\n        for j in range(i):\n            if a[i] > a[j] and max_sum[i] < max_sum[j] + a[i]:\n                max_sum[i] = max_sum[j] + a[i]\n    \n    max_sum_ik = max_sum[index]\n    \n    for i in range(index+1, k):\n        for j in range(index):\n            if a[i] > a[j] and max_sum[i] < max_sum[j] + a[i]:\n                max_sum[i] = max_sum[j] + a[i]\n        max_sum_ik = max(max_sum_ik, max_sum[i])\n    \n    return max_sum_ik\n",
        "def max_sum_increasing_subseq(a, n, index, k):\n    if index == 0:\n        return a[0]\n    \n    dp = [0] * n\n    dp[0] = a[0]\n    \n    for i in range(1, index + 1):\n        dp[i] = a[i]\n        for j in range(i):\n            if a[i] > a[j]:\n                dp[i] = max(dp[i], dp[j] + a[i])\n    \n    max_sum = dp[index]\n    \n    for i in range(index+1, k):\n        if a[i] > a[index]:\n            max_sum = max(max_sum, dp[index] + a[i])\n\n    return max_sum\n",
        "def max_sum_increasing_subseq(a, n, index, k):\n    max_sum = [0] * (k - index + 1)\n    max_sum[0] = a[index]\n\n    for i in range(index + 1, k + 1):\n        curr_sum = a[i]\n        for j in range(index, i):\n            if a[i] > a[j]:\n                curr_sum = max(curr_sum, a[i] + max_sum[j - index])\n        max_sum[i - index] = curr_sum\n    \n    return max(max_sum)\n"
    ],
    "MbppEval/307": [
        "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    if m < 0 or m >= len(tuplex):\n        return \"Invalid index for the given tuple\"\n    \n    tuplex_copy = deepcopy(tuplex)\n    tuplex_copy[m] = [n]\n    \n    return tuple(tuplex_copy)\n",
        "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    tup_list = list(tuplex)\n    \n    if m < 0 or m >= len(tup_list):\n        return tuple(tup_list)\n    \n    tup_list[m] = [n]\n    return tuple(tup_list)\n",
        "",
        "from copy import deepcopy\ndef colon_tuplex(tuplex, m, n):\n    if m < 0 or m >= len(tuplex):\n        return \"Index out of range\"\n    \n    tup_copy = deepcopy(tuplex)  # Step 1: Create a deep copy of the input tuple\n    \n    tup_copy = list(tup_copy)  # Step 2: Convert the copied tuple to a list for modification\n    \n    tup_copy[m] = [n]  # Step 3: Modify the m-th element of the copied tuple to include the value n in a list\n    \n    return tuple(tup_copy)  # Convert the list back to a tuple for the final result\n",
        "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    updated_tuple = deepcopy(tuplex)\n    \n    if m < len(updated_tuple):\n        updated_tuple_lst = list(updated_tuple)\n        updated_tuple_lst[m].append(n)\n        return tuple(updated_tuple_lst)\n    else:\n        return updated_tuple\n"
    ],
    "MbppEval/308": [
        "def large_product(nums1, nums2, N):\n    products = []  \n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n    \n    products.sort(reverse=True)\n    \n    return products[:N]\n",
        "# Step 1: Define the function large_product\ndef large_product(nums1, nums2, N):\n    # Step 2: Multiply each element in nums1 with each element in nums2 to generate a list of products\n    products = [x * y for x in nums1 for y in nums2]\n    \n    # Step 3: Sort the list of products in descending order\n    products.sort(reverse=True)\n    \n    # Step 4: Return the first N elements of the sorted list\n    return products[:N]\n",
        "def large_product(nums1, nums2, N):\n    products = []\n    \n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1*num2)\n    \n    products.sort(reverse=True)\n    \n    return products[:N]\n",
        "def large_product(nums1, nums2, N):\n    # Input validation\n    if len(nums1) != len(nums2):\n        return \"Error: Input lists should be of the same length.\"\n    if N <= 0 or N > len(nums1):\n        return \"Error: Specified number N should be within the range [1, length of the lists].\"\n\n    # Generate products\n    products = [nums1[i] * nums2[i] for i in range(len(nums1))]\n\n    # Sort products in descending order\n    sorted_products = sorted(products, reverse=True)\n\n    return sorted_products[:N]\n",
        "def large_product(nums1, nums2, N):\n    product_list = []\n\n    for num1 in nums1:\n        for num2 in nums2:\n            product_list.append(num1 * num2)\n\n    product_list.sort(reverse=True)\n\n    return product_list[:N]\n"
    ],
    "MbppEval/309": [
        "def maximum(a, b):\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return a\n",
        "def maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b\n",
        "def maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b\n",
        "def maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b\n",
        "def maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b\n"
    ],
    "MbppEval/310": [
        "def string_to_tuple(str1):\n    result = tuple(str1)\n    return result\n",
        "def string_to_tuple(str1):\n    char_list = []\n    for char in str1:\n        char_list.append(char)\n    return tuple(char_list)\n",
        "    return tuple_result  # Return the tuple\n",
        "def string_to_tuple(str1):\n    chars_list = []\n    \n    for char in str1:\n        chars_list.append(char)\n    \n    return tuple(chars_list)\n",
        "def string_to_tuple(str1):\n    return tuple(str1)\n"
    ],
    "MbppEval/311": [
        "def set_left_most_unset_bit(n):\n    binary_str = bin(n)[2:]\n    unset_bit_position = binary_str.find('0')\n    result = n | (1 << (len(binary_str) - unset_bit_position - 1))\n    return result\n",
        "def find_leftmost_unset_bit_position(n):\n    position = 1\n    \n    while n & 1:\n        n >>= 1\n        position += 1\n\n    return position\n",
        "def set_left_most_unset_bit(n):\n    position = 0\n    while n & (1 << position):\n        position += 1\n    return n | (1 << position)\n",
        "def set_left_most_unset_bit(n): \n    binary_str = bin(n)[2:]\n    unset_bit_index = None\n    for i in range(len(binary_str)):\n        if binary_str[i] == '1' and (i+1 == len(binary_str) or binary_str[i+1] == '0'):\n            unset_bit_index = i\n            break\n\n    if unset_bit_index is not None:\n        modified_binary = binary_str[:unset_bit_index] + '1' + binary_str[unset_bit_index+1:]\n        modified_decimal = int(modified_binary, 2)\n        return modified_decimal\n    else:\n        return n\n",
        "def set_left_most_unset_bit(n):\n    binary_n = bin(n)[2:]\n    \n    # Find the position of the leftmost unset bit\n    unset_bit_pos = binary_n.rfind('0')\n\n    if unset_bit_pos == -1:\n        return n  # If all bits are set, return the input number\n    \n    # Set the leftmost unset bit to 1\n    new_binary = binary_n[:unset_bit_pos] + '1' + binary_n[unset_bit_pos+1:]\n    \n    return int(new_binary, 2)\n"
    ],
    "MbppEval/312": [
        "import math\n\ndef volume_cone(r, h):\n    V = (1/3) * math.pi * r**2 * h\n    return V\n",
        "import math\n\ndef volume_cone(r, h):\n    volume = (1/3) * math.pi * r**2 * h\n    return volume\n",
        "import math\n\ndef volume_cone(r, h):\n    return (1/3) * math.pi * r**2 * h\n",
        "import math\n\ndef volume_cone(r, h):\n    volume = (1/3) * math.pi * r**2 * h\n    return volume\n",
        "import math\n\ndef volume_cone(r, h):\n    return (1/3) * math.pi * r**2 * h\n"
    ],
    "MbppEval/388": [
        "def highest_Power_of_2(n): \n    power_of_2 = 1\n    return power_of_2\n\n# Testing step 0\n\n",
        "def highest_Power_of_2(n):\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power\n",
        "def highest_Power_of_2(n):\n    power_2 = 1\n    \n    while 2 * power_2 <= n:\n        power_2 *= 2\n        \n    return power_2\n",
        "def highest_Power_of_2(n):\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power\n",
        "def highest_Power_of_2(n): \n    power_of_2 = 1\n\n    while power_of_2 * 2 <= n:\n        power_of_2 *= 2\n\n    return power_of_2\n"
    ],
    "MbppEval/389": [
        "def find_lucas(n):\n    lucas_numbers = [2, 1]  # Lucas(0) and Lucas(1)\n\n    if n <= 1:\n        return lucas_numbers[n]\n    \n    for i in range(2, n+1):\n        lucas_numbers.append(lucas_numbers[i-1] + lucas_numbers[i-2])\n    \n    return lucas_numbers[n]\n",
        "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n\n    Examples:\n    find_lucas(9) == 76\n    find_lucas(4) == 7\n    find_lucas(3) == 4\n    '''\n    if not isinstance(n, int) or n <= 0:\n        return \"Input must be a positive integer.\"\n    \n    lucas_numbers = [2, 1]  # Initialize with first two Lucas numbers\n    \n    for i in range(2, n+1):\n        lucas_numbers.append(lucas_numbers[-1] + lucas_numbers[-2])  # Calculate the next Lucas number\n        \n    return lucas_numbers[n-1]  # Return the n-th Lucas number\n",
        "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        lucas_n_1 = 1\n        lucas_n_2 = 2\n",
        "def find_lucas(n): \n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n",
        "def find_lucas(n): \n    lucas_0 = 2\n    lucas_1 = 1\n"
    ],
    "MbppEval/390": [
        "def add_string(list_, string):\n    final_list = []\n\n    if not isinstance(string, str):\n        return \"Invalid format string\"\n\n    for elem in list_:\n        final_list.append(string.format(elem))\n\n    return final_list\n",
        "def add_string(list_, string):\n    formatted_list = []\n    \n    for element in list_:\n        formatted_list.append(string.format(element))\n    \n    return formatted_list\n",
        "    return result\n",
        "def add_string(list_, string):\n    formatted_list = []\n\n    for item in list_:\n        formatted_item = string.format(item)\n        formatted_list.append(formatted_item)\n\n    return formatted_list\n",
        "def add_string(list_, string):\n    formatted_list = []\n    \n    for element in list_:\n        formatted_list.append(string.format(element))\n    \n    return formatted_list\n"
    ],
    "MbppEval/391": [
        "def convert_list_dictionary(l1, l2, l3):\n    result = []  # Step 1\n\n    for i in range(len(l1)):  # Step 2\n        nested_dict = {l1[i]: {l2[i]: l3[i]}}  # Step 3\n        result.append(nested_dict)\n\n    return result  # Step 4\n",
        "def convert_list_dictionary(l1, l2, l3):\n    nested_dicts = []\n    if len(l1) == len(l2) == len(l3):\n        for i in range(len(l1)):\n            nested_dict = {l1[i]: {l2[i]: l3[i]}}\n            nested_dicts.append(nested_dict)\n        \n        return nested_dicts\n    else:\n        raise ValueError(\"Input lists are of different lengths\")\n",
        "def convert_list_dictionary(l1, l2, l3):\n    result = []\n    \n    for i in range(len(l1)):\n        nested_dict = { l1[i]: { l2[i]: l3[i] } }\n        result.append(nested_dict)\n    \n    return result\n",
        "def convert_list_dictionary(l1, l2, l3):\n    result = []  \n\n    for i in range(len(l1)):\n        nested_dict = {\n            l1[i]: {\n                l2[i]: l3[i]\n            }\n        }\n        result.append(nested_dict)\n\n    return result\n",
        "def convert_list_dictionary(l1, l2, l3):\n    result = []\n    \n    for i in range(len(l1)):\n        dict_item = {l1[i]: {l2[i]: l3[i]}}\n        result.append(dict_item)\n    \n    return result\n"
    ],
    "MbppEval/392": [
        "def get_max_sum(n, memo={}):\n    if n <= 1:\n        return n\n\n    if n in memo:\n        return memo[n]\n\n    memo[n] = max(get_max_sum(n//2, memo) + get_max_sum(n//3, memo) + get_max_sum(n//4, memo) + get_max_sum(n//5, memo), n)\n    return memo[n]\n",
        "def get_max_sum(n):\n    if n <= 1:\n        return n\n    \n    max_sum = max(n, get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5))\n    \n    return max_sum\n",
        "def get_max_sum(n):\n    # Base case\n    if n <= 1:\n        return n\n\n    # Calculate and return the maximum sum\n    max_sum = max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n    return max_sum\n",
        "def get_max_sum(n):\n    # Base case\n    if n <= 1:\n        return n\n    \n    # Calculate the maximum possible sum by recursively calling the function for n/2, n/3, n/4, and n/5\n    max_sum = max(get_max_sum(n//2), n//2) + \\\n              max(get_max_sum(n//3), n//3) + \\\n              max(get_max_sum(n//4), n//4) + \\\n              max(get_max_sum(n//5), n//5)\n\n    # Calculate the maximum of the sum obtained in step 2 and n\n    return max(max_sum, n)\n",
        "def get_max_sum(n):\n    if n <= 1:\n        return n\n    \n    memo = {}  # Memoization dictionary to store calculated values\n    \n    def max_sum_helper(n):\n        if n in memo:\n            return memo[n]\n        \n        max_sum = max(n, max_sum_helper(n//2) + max_sum_helper(n//3) + max_sum_helper(n//4) + max_sum_helper(n//5))\n        memo[n] = max_sum\n        return max_sum\n        \n    return max_sum_helper(n)\n"
    ],
    "MbppEval/393": [
        "def max_length_list(input_list):\n    max_length = 0\n    max_list = None\n    \n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    \n    return max_length, max_list\n",
        "def max_length_list(input_list):\n    max_length = 0\n    result_list = []\n\n    for sublist in input_list:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n            result_list = sublist\n\n    return (max_length, result_list)\n",
        "def max_length_list(input_list):\n    max_length = 0\n    max_list = None\n    \n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    \n    return max_length, max_list\n",
        "def max_length_list(input_list):\n    max_sublist = None\n    max_length = 0\n\n    if not input_list:\n        return None\n\n    for sublist in input_list:\n        sublist_length = len(sublist)\n\n        if sublist_length > max_length:\n            max_length = sublist_length\n            max_sublist = sublist\n\n    return max_length, max_sublist\n",
        "def max_length_list(input_list):\n    max_length = 0\n    max_length_list = None\n    \n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_length_list = lst\n    \n    return max_length, max_length_list\n"
    ],
    "MbppEval/394": [
        "def check_distinct(test_tup):\n    unique_set = set(test_tup)\n    return len(unique_set) == len(test_tup)\n",
        "def check_distinct(test_tup):\n    distinct_set = set()\n\n    for elem in test_tup:\n        if elem in distinct_set:\n            return False\n        distinct_set.add(elem)\n\n    return True\n",
        "def check_distinct(test_tup):\n    test_set = set(test_tup)\n    return len(test_set) == len(test_tup)\n",
        "def check_distinct(test_tup):\n    test_set = set(test_tup)\n    return len(test_set) == len(test_tup)\n",
        "def check_distinct(test_tup):\n    return len(set(test_tup)) == len(test_tup)\n"
    ],
    "MbppEval/395": [
        "def first_non_repeating_character(str1):\n    char_count = {}\n    \n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n            \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return None\n",
        "def first_non_repeating_character(str1):\n    char_count = {}\n    non_repeating_chars = []\n    \n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            non_repeating_chars.append(char)\n    \n    if non_repeating_chars:\n        return non_repeating_chars[0]\n    else:\n        return None\n",
        "def first_non_repeating_character(str1):\n    char_count = {}\n    for char in str1:\n        char_count[char] = char_count.get(char, 0) + 1\n\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n\n    return None\n",
        "def first_non_repeating_character(str1):\n    char_count = {}\n    \n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return None\n\n# Testing the function with the provided examples\n\n\n\n",
        "def first_non_repeating_character(str1):\n    char_freq = {}\n    \n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    \n    for char in str1:\n        if char_freq[char] == 1:\n            return char\n            \n    return None\n"
    ],
    "MbppEval/396": [
        "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    return \"Valid\" if re.match(regex, string) else \"Invalid\"\n",
        "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string): \n    if re.match(regex, string):\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n",
        "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    if re.match(regex, string):\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n",
        "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    if re.match(regex, string):\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n",
        "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string): \n    if re.match(regex, string):\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n"
    ],
    "MbppEval/397": [
        "def median_numbers(a, b, c):\n    numbers_list = [a, b, c]\n    sorted_numbers = sorted(numbers_list)\n    \n    n = len(sorted_numbers)\n    if n % 2 == 0:\n        median = (sorted_numbers[n//2] + sorted_numbers[n//2 - 1]) / 2\n    else:\n        median = sorted_numbers[n//2]\n    \n    return median\n",
        "def median_numbers(a, b, c):\n    numbers = [a, b, c]\n    numbers.sort()\n\n    if len(numbers) % 2 == 0:\n        mid_left = len(numbers) // 2 - 1\n        mid_right = len(numbers) // 2\n        median = (numbers[mid_left] + numbers[mid_right]) / 2\n    else:\n        median = numbers[len(numbers) // 2]\n\n    return median\n\n\n\n\n",
        "def median_numbers(a, b, c):\n    numbers = [a, b, c]\n    numbers.sort()\n    median = numbers[1]\n    \n    return median\n",
        "def median_numbers(a, b, c):\n    numbers = [a, b, c]\n    numbers.sort()\n    \n    if len(numbers) % 2 == 1:\n        return numbers[len(numbers)//2]\n    else:\n        mid = len(numbers)//2\n        return (numbers[mid-1] + numbers[mid]) / 2\n",
        "def median_numbers(a, b, c):\n    nums = [a, b, c]\n    nums.sort()\n    \n    if len(nums) % 2 != 0:\n        return nums[len(nums) // 2]\n    else:\n        mid1 = nums[len(nums) // 2 - 1]\n        mid2 = nums[len(nums) // 2]\n        return (mid1 + mid2) / 2\n"
    ],
    "MbppEval/398": [
        "def sum_of_digits(nums):\n    total_sum = 0\n    for num in nums:\n        if isinstance(num, int):\n            for digit in str(num):\n                if digit.isdigit():\n                    total_sum += int(digit)\n    \n    return total_sum\n",
        "def sum_of_digits(nums):\n    total_sum = 0\n\n    if not nums:\n        return total_sum\n\n    for num in nums:\n        if isinstance(num, (int, str)):\n            num_str = str(num)\n            num_sum = 0\n            for digit in num_str:\n                if digit.isdigit():\n                    num_sum += int(digit)\n            total_sum += num_sum\n\n    return total_sum\n",
        "def sum_of_digits(nums):\n    total_sum = 0\n\n    for num in nums:\n        if isinstance(num, int):\n            digit_sum = 0\n            for digit in str(num):\n                if digit.isdigit():\n                    digit_sum += int(digit)\n            total_sum += digit_sum\n        else:\n            print(f\"Ignoring non-integer element: {num}\")\n\n    return total_sum\n",
        "def sum_of_digits(nums):\n    total_sum = 0\n    for num in nums:\n        if isinstance(num, int):\n            num_str = str(num)\n            total_sum = 0\n            for digit in num_str:\n                if digit.isdigit():\n                    total_sum += int(digit)\n    return total_sum\n",
        "def sum_of_digits(nums):\n    total_sum = 0\n\n    for num in nums:\n        if isinstance(num, int):\n            digits = str(num)\n            for digit in digits:\n                if digit.isdigit():\n                    total_sum += int(digit)\n    \n    return total_sum\n"
    ],
    "MbppEval/399": [
        "def bitwise_xor(test_tup1, test_tup2):\n    result_list = []\n    \n    for i, j in zip(test_tup1, test_tup2):\n        result_list.append(i ^ j)\n    \n    result_tuple = tuple(result_list)\n    \n    return result_tuple\n",
        "def bitwise_xor(test_tup1, test_tup2):\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)\n",
        "def bitwise_xor(test_tup1, test_tup2):\n    result = []\n    \n    for i in range(len(test_tup1)):\n        xor_result = test_tup1[i] ^ test_tup2[i]\n        result.append(xor_result)\n    \n    return tuple(result)\n",
        "def bitwise_xor(test_tup1, test_tup2):\n    result = []\n    \n    for x, y in zip(test_tup1, test_tup2):\n        result.append(x ^ y)\n    \n    return tuple(result)\n",
        "def bitwise_xor(test_tup1, test_tup2):\n    result = [a ^ b for a, b in zip(test_tup1, test_tup2)]\n    return tuple(result)\n"
    ],
    "MbppEval/400": [
        "def extract_freq(test_list):\n    unique_tuples = set()\n    \n    for tup in test_list:\n        unique_tuples.add(tup)\n    \n    return len(unique_tuples)\n",
        "def extract_freq(test_list):\n    unique_tuples = set()\n    \n    for tup in test_list:\n        unique_tuples.add(tup)\n    \n    return len(unique_tuples)\n\n# Testing the implementation with the provided examples\n\n\n\n",
        "def extract_freq(test_list):\n    unique_tuples = set()\n    \n    for t in test_list:\n        unique_tuples.add(frozenset(t))\n    \n    return len(unique_tuples)\n",
        "def extract_freq(test_list):\n    unique_tuples = set()\n    \n    for tpl in test_list:\n        unique_tuples.add(tpl)\n    \n    return len(unique_tuples)\n",
        "def extract_freq(test_list):\n    unique_tuples = set()\n\n    for tup in test_list:\n        unique_tuples.add(tup)\n        \n    unique_tuple_count = len(unique_tuples)\n    return unique_tuple_count\n"
    ],
    "MbppEval/401": [
        "def add_nested_tuples(test_tup1, test_tup2):\n    result = []\n    \n    for tup1, tup2 in zip(test_tup1, test_tup2):\n        temp = []\n        # Iterating through the tuples inside the nested tuples\n        for val1, val2 in zip(tup1, tup2):\n            temp.append(val1 + val2)\n        result.append(tuple(temp))\n    \n    return tuple(result)\n",
        "def add_nested_tuples(test_tup1, test_tup2):\n    result = []\n    \n    for tup1, tup2 in zip(test_tup1, test_tup2):\n        sum_tuple = tuple(sum(x) for x in zip(tup1, tup2))\n        result.append(sum_tuple)\n    \n    return tuple(result)\n",
        "def add_nested_tuples(test_tup1, test_tup2):\n    if len(test_tup1) != len(test_tup2):\n        return \"Error: The lengths of the input tuples are not the same.\"\n    \n    result = []\n    \n    for tup1, tup2 in zip(test_tup1, test_tup2):\n        added_tup = tuple(a + b for a, b in zip(tup1, tup2))\n        result.append(added_tup)\n    \n    return tuple(result)\n",
        "def add_nested_tuples(test_tup1, test_tup2):\n    result = []\n    for tup1, tup2 in zip(test_tup1, test_tup2):\n        temp = []\n        for elem1, elem2 in zip(tup1, tup2):\n            temp.append(elem1 + elem2)\n        result.append(tuple(temp))\n    return tuple(result)\n",
        "def add_nested_tuples(test_tup1, test_tup2):\n    result = []\n    \n    for tup1, tup2 in zip(test_tup1, test_tup2):\n        added_tuple = [sum(pair) for pair in zip(tup1, tup2)]\n        result.append(tuple(added_tuple))\n    \n    return tuple(result)\n"
    ],
    "MbppEval/404": [
        "def minimum(a, b):\n    if a < b:\n        return a\n    else:\n        return b\n",
        "def minimum(a, b):\n    if a < b:\n        return a\n    else:\n        return b\n\n# Testing the function\n\n\n\n",
        "def minimum(a, b):\n    if a < b:\n        return a\n    else:\n        return b\n",
        "def minimum(a, b):\n    if a < b:\n        return a\n    else:\n        return b\n",
        "def minimum(a, b):\n    if a < b:\n        return a\n    elif b < a:\n        return b\n    else:\n        return a  # or return b since they are equal\n"
    ],
    "MbppEval/405": [
        "def check_tuplex(tuplex, element_to_check):\n    return element_to_check in tuplex\n",
        "def check_tuplex(tuplex, item):\n    return item in tuplex\n",
        "def check_tuplex(tuplex, element):\n    return element in tuplex\n\n# Testing the function\n\n\n\n",
        "def check_tuplex(tuplex, tuple1): \n    found = False\n    for i in tuplex:\n        if i == tuple1:\n            found = True\n            break\n    return found\n",
        "def check_tuplex(tuplex, element):\n    return element in tuplex\n"
    ],
    "MbppEval/406": [
        "def find_Parity(x): \n    if x % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n",
        "def find_Parity(x): \n    ''' Finds whether the parity of a given number is odd. '''\n\n    if x % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n",
        "def find_Parity(x):\n    if x % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n",
        "def find_Parity(x): \n    if x % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n",
        "def find_Parity(x):\n    if x % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n"
    ],
    "MbppEval/407": [
        "def rearrange_bigger(n):\n    digits = [int(d) for d in str(n)]\n    \n    i = len(digits) - 2\n    while i >= 0 and digits[i] >= digits[i + 1]:\n        i -= 1\n    \n    if i == -1:\n        return False\n    \n    j = len(digits) - 1\n    while j > i and digits[j] <= digits[i]:\n        j -= 1\n    \n    digits[i], digits[j] = digits[j], digits[i]\n    \n    digits[i + 1:] = digits[i + 1:][::-1]\n    \n    result = int(''.join(map(str, digits)))\n    \n    return result\n",
        "def rearrange_bigger(n):\n    if n < 10:\n        return False\n    \n    digits = [int(d) for d in str(n)]\n\n    for i in range(len(digits)-2, -1, -1):\n        if digits[i] < digits[i+1]:\n            break\n    else:\n        return False\n\n    for j in range(len(digits)-1, i, -1):\n        if digits[j] > digits[i]:\n            break\n\n    digits[i], digits[j] = digits[j], digits[i]\n    digits[i+1:] = sorted(digits[i+1:])\n\n    return int(''.join(map(str, digits)))\n\n\n\n\n",
        "def rearrange_bigger(n):\n    digits = [int(d) for d in str(n)]  # Convert the number to a list of digits\n    i = len(digits) - 2\n    while i >= 0 and digits[i] >= digits[i + 1]:  \n        i -= 1\n\n    if i == -1:\n        return False  # If no such index i exists, return False\n\n    j = len(digits) - 1\n    while digits[j] <= digits[i]:  \n        j -= 1\n\n    digits[i], digits[j] = digits[j], digits[i]  # Swap the digits at index i and index j\n    digits[i+1:] = digits[i+1:][::-1]  # Reverse the digits from index i+1 till the end\n\n    return int(''.join(map(str, digits)))  # Convert the list of digits back to a number and return it\n",
        "def rearrange_bigger(n):\n    digits = [int(d) for d in str(n)]\n    \n    for i in range(len(digits) - 1, 0, -1):\n        if digits[i - 1] < digits[i]:\n            break\n\n    if i == 1 and digits[i] <= digits[i - 1]:\n        return False\n\n    pivot = i - 1\n\n    for j in range(len(digits) - 1, pivot, -1):\n        if digits[j] > digits[pivot]:\n            break\n            \n    digits[pivot], digits[j] = digits[j], digits[pivot]\n    \n    digits[pivot+1:] = sorted(digits[pivot+1:])\n    \n    return int(''.join(map(str, digits)))\n",
        "def rearrange_bigger(n):\n    digits = [int(d) for d in str(n)]\n    for i in range(len(digits)-1, 0, -1):\n        if digits[i-1] < digits[i]:\n            smaller_digit_index = i - 1\n            break\n    else:\n        return False\n    for j in range(len(digits)-1, smaller_digit_index, -1):\n        if digits[j] > digits[smaller_digit_index]:\n            bigger_digit_index = j\n            break\n    digits[smaller_digit_index], digits[bigger_digit_index] = digits[bigger_digit_index], digits[smaller_digit_index]\n    digits[smaller_digit_index+1:] = sorted(digits[smaller_digit_index+1:])\n    result = int(''.join(map(str, digits)))\n    return result\n"
    ],
    "MbppEval/408": [
        "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    \n    if not nums1 or not nums2 or k == 0:\n        return pairs\n    \n    min_heap = []\n    \n    for n1 in nums1:\n        for n2 in nums2:\n            heapq.heappush(min_heap, (n1 + n2, [n1, n2]))\n    \n    for _ in range(min(k, len(min_heap))):\n        pairs.append(heapq.heappop(min_heap)[1])\n        \n    return pairs\n",
        "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    if not nums1 or not nums2:\n        return []\n\n    pairs = combine_pairs(nums1, nums2)\n    sums = sum_pairs(pairs)\n    pairs_with_sums = store_pairs_with_sums(pairs, sums)\n\n    min_heap = []\n    for pair, total in pairs_with_sums:\n        heapq.heappush(min_heap, (-total, pair))\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n\n    k_smallest = [pair for (_, pair) in min_heap]\n\n    return k_smallest\n\ndef combine_pairs(nums1, nums2):\n    pairs = []\n    for num1 in nums1:\n        for num2 in nums2:\n            pairs.append([num1, num2])\n    return pairs\n\ndef sum_pairs(pairs):\n    return [sum(pair) for pair in pairs]\n\ndef store_pairs_with_sums(pairs, sums):\n    return [(pairs[i], sums[i]) for i in range(len(pairs))]\n",
        "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    result = []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        heapq.heappush(heap, (nums1[i], nums2[0], i, 0))\n\n    while k > 0 and heap:\n        pair = heapq.heappop(heap)\n        result.append([pair[0], pair[1]])\n        k -= 1\n\n        if pair[3] < len(nums2) - 1:\n            heapq.heappush(heap, (pair[0], nums2[pair[3]+1], pair[2], pair[3] + 1))\n\n    return result\n",
        "import heapq\n\ndef calculate_pair_sum(pair):\n    return sum(pair)\n\ndef k_smallest_pairs(nums1, nums2, k):\n    heap = []\n    \n    for n1 in nums1:\n        for n2 in nums2:\n            pair = [n1, n2]\n            pair_sum = calculate_pair_sum(pair)\n            heapq.heappush(heap, (pair_sum, pair))\n            \n    k_smallest = []\n    for _ in range(k):\n        if heap:\n            k_smallest.append(heapq.heappop(heap)[1])\n    \n    return k_smallest\n",
        "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    result = []\n    \n    pairs = [[num1, num2] for num1 in nums1 for num2 in nums2]\n    \n    heap = []\n    for pair in pairs:\n        heapq.heappush(heap, (pair[0] + pair[1], pair))\n        if len(heap) > k:\n            heapq.heappop(heap)\n    \n    result = [pair[1] for pair in heap]\n    \n    return result\n"
    ],
    "MbppEval/409": [
        "def min_product_tuple(list1):\n    min_product = float('inf')\n\n    for pair in list1:\n        product = pair[0] * pair[1]\n        if product < min_product:\n            min_product = product\n\n    return min_product\n",
        "def min_product_tuple(list1):\n    min_product = float('inf')  # Step 2\n\n    for tup in list1:  # Step 3\n        product = tup[0] * tup[1]  # Step 4\n        if product < min_product:  # Step 5\n            min_product = product\n\n    return min_product  # Step 6\n",
        "def min_product_tuple(list1):\n    min_product = float('inf')\n\n    for i in range(len(list1)):\n        product = list1[i][0] * list1[i][1]\n        min_product = min(min_product, product)\n    \n    return min_product\n",
        "def min_product_tuple(list1):\n    min_product = float('inf')\n    for tuple in list1:\n        product = tuple[0] * tuple[1]\n        if product < min_product:\n            min_product = product\n    return min_product\n",
        "def min_product_tuple(list1):\n    min_product = float('inf')\n    \n    for tup in list1:\n        product = tup[0] * tup[1]\n        if product < min_product:\n            min_product = product\n            \n    return min_product\n"
    ],
    "MbppEval/410": [
        "def min_val(listval):\n    int_list = [x for x in listval if isinstance(x, int)]\n    return min(int_list)\n",
        "def min_val(listval):\n    min_value = None\n\n    for item in listval:\n        if isinstance(item, (int, float)):\n            if min_value is None or item < min_value:\n                min_value = item\n\n    return min_value\n",
        "def min_val(listval):\n    min_value = float('inf')\n    \n    for item in listval:\n        if isinstance(item, (int, float)) and item < min_value:  # Step 3\n            min_value = item\n    \n    return min_value  # Step 4\n",
        "def min_val(listval):\n    min_int = None\n    for val in listval:\n        if isinstance(val, int):\n            if min_int is None or val < min_int:\n                min_int = val\n    return min_int\n",
        "def min_val(listval):\n    for item in listval:\n        if isinstance(item, int):\n            min_value = item\n            break\n    else:\n        return None\n    \n    for item in listval:\n        if isinstance(item, int) and (min_value is None or item < min_value):\n            min_value = item\n    \n    return min_value\n"
    ],
    "MbppEval/411": [
        "import re\ndef snake_to_camel(word):\n    words = word.split('_')\n    camel_words = [words[0].capitalize()]\n    camel_words.extend([word.capitalize() for word in words[1:]])\n    return ''.join(camel_words)\n",
        "def snake_to_camel(word):\n    words = word.split('_')\n    words = [w.lower() for w in words]\n    \n    # Capitalize the first letter of each word except the first word\n    camel_words = [words[0]] + [w.capitalize() for w in words[1:]]\n    \n    # Concatenate the capitalized words\n    camel_case = ''.join(camel_words)\n    \n    return camel_case\n",
        "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n\n    Examples:\n    snake_to_camel('android_tv') == 'AndroidTv'\n    snake_to_camel('google_pixel') == 'GooglePixel'\n    snake_to_camel('apple_watch') == 'AppleWatch'\n    '''\n    \n    words = word.split('_')\n    camel_case = words[0] + ''.join(w.title() for w in words[1:])\n    return camel_case\n",
        "import re\n\ndef snake_to_camel(word):\n    if not re.match(r'^[a-z]+(_[a-z]+)*$', word):\n        return \"Input word is not in snake case format\"\n\n    words = word.split('_')\n    camel_case_words = [words[0].capitalize()] + [word.capitalize() for word in words[1:]]\n    return ''.join(camel_case_words)\n\n# Test the function\n\n\n\n",
        "import re\n\ndef snake_to_camel(word):\n    words = word.split('_')\n    camel_words = [words[0]] + [word.capitalize() for word in words[1:]]\n    camel_case = ''.join(camel_words)\n    return camel_case\n"
    ],
    "MbppEval/412": [
        "def remove_odd(l):\n    even_numbers = []  # Create an empty list to store the even numbers\n    \n    for num in l:  # Iterate through each number in the input list\n        if num % 2 == 0:  # Check if the number is even\n            even_numbers.append(num)  # If the number is even, add it to the new list\n            \n    return even_numbers  # Return the new list containing only even numbers\n",
        "def remove_odd(l):\n    result = []\n\n    for num in l:\n        if num % 2 == 0:  # Check if the number is even\n            result.append(num)  # If the number is even, add it to the result list\n    \n    return result\n",
        "def remove_odd(l):\n    even_numbers = []  \n    \n    for num in l:\n        if num % 2 == 0:\n            even_numbers.append(num)  \n            \n    return even_numbers  \n",
        "def remove_odd(l):\n    even_numbers = []\n    \n    for num in l:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    \n    return even_numbers\n",
        "def remove_odd(l):\n    result = []\n    \n    for num in l:\n        if num % 2 == 0:\n            result.append(num)\n    \n    return result\n"
    ],
    "MbppEval/413": [
        "def extract_nth_element(list1, n):\n    extracted_elements = []\n    \n    for tuple in list1:\n        extracted_elements.append(tuple[n])\n    \n    return extracted_elements\n",
        "def extract_nth_element(list1, n):\n    extracted_elements = []\n    for tup in list1:\n        extracted_elements.append(tup[n])\n    return extracted_elements\n",
        "def extract_nth_element(list1, n):\n    element_list = []\n    for tpl in list1:\n        element_list.append(tpl[n])\n\n    return element_list\n",
        "def extract_nth_element(list1, n):\n    extracted_elements = []\n    \n    for tup in list1:\n        extracted_elements.append(tup[n])\n    \n    return extracted_elements\n",
        "def extract_nth_element(list1, n):\n    extracted_elements = []\n    for tuple in list1:\n        extracted_elements.append(tuple[n])\n    return extracted_elements\n"
    ],
    "MbppEval/414": [
        "def overlapping(list1, list2):\n    for value in list1:\n        if value in list2:\n            return True\n    return False\n",
        "def overlapping(list1, list2):\n    for elem1 in list1:\n        if elem1 in list2:\n            return True\n    return False\n",
        "def overlapping(list1, list2):\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False\n",
        "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in another sequence or not.\n\n    Examples:\n    overlapping([1,2,3,4,5],[6,7,8,9]) == False\n    overlapping([1,2,3],[4,5,6]) == False\n    overlapping([1,4,5],[1,4,5]) == True\n    '''\n    found_overlap = False\n    for elem1 in list1:\n        if elem1 in list2:\n            found_overlap = True\n            break\n    return found_overlap\n",
        "def overlapping(list1, list2):\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False\n"
    ],
    "MbppEval/415": [
        "def max_Product(arr): \n    max_product = float('-inf')\n    pair = None\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                pair = (arr[i], arr[j])\n\n    return pair\n",
        "def max_Product(arr):\n    max_pair = None\n    max_product = None\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            pair = (arr[i], arr[j])\n            product = arr[i] * arr[j]\n            if max_product is None or product > max_product:\n                max_product = product\n                max_pair = pair\n            \n    return max_pair\n",
        "def max_product(arr): \n    max_pair = ()\n    max_product = None\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            \n            if max_product is None or product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n    \n    return max_pair\n",
        "def max_product(arr):\n    if len(arr) < 2:\n        return None\n    \n    max_pair = None\n    max_product = float('-inf')\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            pair_product = arr[i] * arr[j]\n            if pair_product > max_product:\n                max_product = pair_product\n                max_pair = (arr[i], arr[j])\n    \n    return max_pair\n",
        "def max_Product(arr): \n    max_product = 0\n    pair = ()\n    num_neg = 0\n    num_zeros = 0\n\n    def max_product_pair(arr):\n        nonlocal max_product, pair, num_neg, num_zeros\n\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                product = arr[i] * arr[j]\n                if product > max_product:\n                    max_product = product\n                    pair = (arr[i], arr[j])\n                if arr[i] < 0 or arr[j] < 0:\n                    num_neg += 1\n                if arr[i] == 0 or arr[j] == 0:\n                    num_zeros += 1\n\n    max_product_pair(arr)\n\n    if num_zeros == len(arr) or (num_neg == 0 and num_zeros > 0):\n        pair = (0, 0)\n    elif num_neg % 2 != 0:\n        max_product = 0\n\n    return pair\n"
    ],
    "MbppEval/417": [
        "def group_tuples(Input): \n    groups = {}\n    \n    for tup in Input:\n        first_element = tup[0]\n        if first_element in groups:\n            if tup not in groups[first_element]:\n                groups[first_element].append(tup)\n        else:\n            groups[first_element] = [tup]\n    \n    return [val for val in groups.values()]\n",
        "def group_tuples(Input):\n    grouped_dict = {}\n    \n    for tup in Input:\n        first_element = tup[0]\n        \n        if first_element in grouped_dict:\n            grouped_dict[first_element].append(tup)\n        else:\n            grouped_dict[first_element] = [tup]\n           \n    return list(grouped_dict.values())\n",
        "from itertools import chain\n\ndef group_tuples(Input): \n    grouped_dict = {}\n    \n    for tup in Input:\n        if tup[0] in grouped_dict:\n            grouped_dict[tup[0]].append(tup)\n        else:\n            grouped_dict[tup[0]] = [tup]\n    \n    return [tuple(chain.from_iterable(grouped_dict_val)) for grouped_dict_val in grouped_dict.values()]\n",
        "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n\n    Examples:\n    group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n    group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]\n    group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]\n    '''\n\n    group_dict = {}\n\n    for tup in Input:\n        key = tup[0]\n        value = tup[1:]\n\n        if key in group_dict:\n            group_dict[key].append(tup)\n        else:\n            group_dict[key] = [tup]\n\n    return [tuple(sum(values, ())) for values in group_dict.values()]\n",
        "def group_tuples(Input): \n    groups = {}\n\n    for tup in Input:\n        key = tup[0]\n\n        if key not in groups:\n            groups[key] = [tup]\n        else:\n            groups[key].append(tup)\n\n    return list(groups.values())\n"
    ],
    "MbppEval/418": [
        "def Find_Max(lst): \n    max_length = 0\n    max_element = []\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n            max_element = sublist\n    return max_element\n",
        "    return max_element\n",
        "def Find_Max(lst): \n    max_element = []\n    \n    for element in lst:\n        if len(element) > len(max_element):\n            max_element = element\n            \n    return max_element\n",
        "def Find_Max(lst): \n    max_length = 0\n    slashed_str = None\n    \n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            slashed_str = element\u00a0\n    \n    return slashed_str\n",
        "def Find_Max(lst): \n    max_length = 0\n    max_element = None\n    \n    for element in lst:\n        element_length = len(element)\n        \n        if element_length > max_length:\n            max_length = element_length\n            max_element = element\n        \n    return max_element\n"
    ],
    "MbppEval/419": [
        "def round_and_sum(list1):\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n\n    result = total_sum * len(list1)\n    return result\n",
        "def round_and_sum(list1):\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    return total_sum * len(list1)\n\n# Test cases\n\n\n\n",
        "def round_and_sum(list1):\n    rounded_list = [round(num) for num in list1]\n    total_sum = sum(rounded_list)\n    result = total_sum * len(list1)\n    return result\n",
        "def round_and_sum(list1):\n    rounded_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        rounded_sum += rounded_num\n    \n    total = rounded_sum * len(list1)\n    \n    return total\n",
        "def round_and_sum(list1):\n    total_sum = 0\n    \n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    \n    return total_sum * len(list1)\n"
    ],
    "MbppEval/420": [
        "def cube_Sum(n):\n    even_numbers = [2*i for i in range(1, n+1)]\n    cubes = [num**3 for num in even_numbers]\n    cube_sum = sum(cubes)\n    return cube_sum\n",
        "def cube_Sum(n):\n    def cube(num):\n        return num ** 3\n    \n    even_numbers = [2 * i for i in range(1, n+1)]\n    cubes = [cube(num) for num in even_numbers]\n    \n    return sum(cubes)\n",
        "def cube_Sum(n):\n    sum_cube = 0\n    \n    for i in range(1, 2*n+1, 2):\n        cube = i**3\n        sum_cube += cube\n        \n    return sum_cube\n",
        "def cube_Sum(n):\n    sum_cubes = 0\n    \n    for i in range(2, 2*n+1, 2):\n        sum_cubes += i**3\n    \n    return sum_cubes\n",
        "def cube_Sum(n):\n    sum_cubes = 0\n    for i in range(2, 2*n + 1, 2):\n        cube = i ** 3\n        sum_cubes += cube\n    return sum_cubes\n"
    ],
    "MbppEval/421": [
        "def concatenate_tuple(test_tup):\n    concatenated_str = ''\n    delimiter = '-'\n    \n    for element in test_tup:\n        concatenated_str += str(element) + delimiter\n    \n    concatenated_str = concatenated_str[:-1]  # Remove the last delimiter\n    \n    return concatenated_str\n",
        "def concatenate_tuple(test_tup):\n    result = \"\"\n    \n    for i in range(len(test_tup)):\n        element = str(test_tup[i])  # Convert each element to a string\n        result += element  # Concatenate the element to the result\n        \n        if i != len(test_tup) - 1:\n            result += '-'  # Append the delimiter '-' after each element except the last element\n\n    return result\n",
        "def concatenate_tuple(test_tup):\n    result = \"\"\n    \n    for idx, val in enumerate(test_tup):\n        if idx != 0:\n            result += '-' + str(val)\n        else:\n            result += str(val)\n    \n    return result\n",
        "def concatenate_tuple(test_tup):\n    result = \"\"\n    for element in test_tup:\n        result += str(element) + '-'\n    result = result[:-1]  # Remove the last '-' from the result string\n    return result\n",
        "def concatenate_tuple(test_tup):\n    concatenated_str = \"\"\n\n    for idx, elem in enumerate(test_tup):\n        concatenated_str += str(elem)\n        \n        if idx < len(test_tup) - 1:\n            concatenated_str += \"-\"\n    \n    return concatenated_str\n"
    ],
    "MbppEval/422": [
        "def find_Average_Of_Cube(n):\n    sum_cubes = 0\n\n    for i in range(1, n+1):\n        sum_cubes += i ** 3\n\n    return sum_cubes / n\n",
        "def find_Average_Of_Cube(n):\n    if n < 1:\n        return 0\n    \n    total = 0\n    \n    for i in range(1, n+1):\n        total += i ** 3\n    \n    average = total / n\n    \n    return average\n",
        "def find_Average_Of_Cube(n):\n    sum_cubes = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n    average = sum_cubes / n\n    return average\n",
        "def find_Average_Of_Cube(n):\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    average = sum_of_cubes / n\n    return average\n",
        "def find_Average_Of_Cube(n):  \n    total_cubes = 0\n    for i in range(1, n + 1):\n        cube = i ** 3\n        total_cubes += cube\n    avg_cube = total_cubes / n\n    return avg_cube\n"
    ],
    "MbppEval/424": [
        "def extract_rear(test_tuple):\n    rear_elements = []\n    for string in test_tuple:\n        rear_elements.append(string[-1])\n    return rear_elements\n",
        "def extract_rear(test_tuple):\n    rear_elements = []\n    \n    for string in test_tuple:\n        rear_index_element = string[-1]\n        rear_elements.append(rear_index_element)\n    \n    return rear_elements\n",
        "def extract_rear(test_tuple):\n    return [string[-1] for string in test_tuple]\n",
        "def extract_rear(test_tuple):\n    rear_elements = []\n    for string in test_tuple:\n        rear_elements.append(string[-1])\n    return rear_elements\n",
        "def extract_rear(test_tuple):\n    rear_elements = []\n    for word in test_tuple:\n        rear_element = word[-1]\n        rear_elements.append(rear_element)\n    return rear_elements\n"
    ],
    "MbppEval/425": [
        "def count_element_in_list(list1, x): \n    count = 0\n    \n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    \n    return count\n",
        "def count_element_in_list(list1, x): \n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n",
        "def count_element_in_list(list1, x):\n    count = 0\n\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n\n    return count\n",
        "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n",
        "def count_element_in_list(list1, x): \n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n"
    ],
    "MbppEval/426": [
        "def filter_oddnumbers(nums):\n    filtered_odd_numbers = []\n    \n    for num in nums:\n        if num % 2 != 0:\n            filtered_odd_numbers.append(num)\n    \n    return filtered_odd_numbers\n",
        "def filter_oddnumbers(nums):\n    odd_numbers = []\n    for num in nums:\n        if num % 2 != 0:\n            odd_numbers.append(num)\n    return odd_numbers\n",
        "def filter_oddnumbers(nums):\n    odd_nums = []\n\n    for num in nums:\n        if num % 2 != 0:\n            odd_nums.append(num)\n\n    return odd_nums\n",
        "def filter_oddnumbers(nums):\n    odd_numbers = []\n\n    for num in nums:\n        if num % 2 != 0:\n            odd_numbers.append(num)\n\n    return odd_numbers\n",
        "def filter_oddnumbers(nums):\n    odd_nums = []\n    \n    for num in nums:\n        if num % 2 != 0:\n            odd_nums.append(num)\n    \n    return odd_nums\n"
    ],
    "MbppEval/427": [
        "import re\ndef change_date_format(dt):\n    date_parts = dt.split('-')\n    day, month, year = date_parts[2], date_parts[1], date_parts[0]\n    return f'{day}-{month}-{year}'\n",
        "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\n    Examples:\n    change_date_format(\"2026-01-02\") == '02-01-2026'\n    change_date_format(\"2020-11-13\") == '13-11-2020'\n    change_date_format(\"2021-04-26\") == '26-04-2021'\n    '''\n\n    match = re.match(r'(\\d{4})-(\\d{2})-(\\d{2})', dt)\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n\n        formatted_date = f\"{day}-{month}-{year}\"\n        return formatted_date\n",
        "import re\n\ndef change_date_format(dt):\n    if not re.match(r'\\d{4}-\\d{2}-\\d{2}', dt):\n        return \"Invalid date format. Please enter date in yyyy-mm-dd format.\"\n    \n    match = re.match(r'(\\d{4})-(\\d{2})-(\\d{2})', dt)\n    year, month, day = match.groups()\n    \n    new_date = f\"{day}-{month}-{year}\"\n    \n    return new_date\n",
        "import re\n\ndef change_date_format(dt):\n    # Step 1: Use regex to match year, month, and day from input date\n    match = re.match(r\"(\\d{4})-(\\d{2})-(\\d{2})\", dt)\n    if match:\n        year, month, day = match.groups()\n        \n        # Step 2: Rearrange matched elements to form the desired format 'dd-mm-yyyy'\n        new_date = f\"{day}-{month}-{year}\"\n        \n        # Step 3: Return the converted date\n        return new_date\n",
        "import re\ndef change_date_format(dt):\n    date_parts = dt.split('-')\n    new_format = date_parts[::-1]\n    return '-'.join(new_format)\n"
    ],
    "MbppEval/428": [
        "def calculate_gap_sequence(n):\n    h = 1\n    gap_sequence = []\n    while h < n / 3:\n        h = 3 * h + 1\n        gap_sequence.append(h)\n    return gap_sequence\n\ndef shell_sort(my_list):\n    gap_sequence = calculate_gap_sequence(len(my_list))\n    \n    for h in gap_sequence:\n        for i in range(h, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= h and my_list[j - h] > temp:\n                my_list[j] = my_list[j - h]\n                j -= h\n            my_list[j] = temp\n    \n    return my_list\n",
        "def shell_sort(my_list):\n    gap = len(my_list) // 2\n    \n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_value = my_list[i]\n            position = i\n            \n            while position >= gap and my_list[position - gap] > current_value:\n                my_list[position] = my_list[position - gap]\n                position = position - gap\n            \n            my_list[position] = current_value\n            \n        gap = gap // 2\n\n    return my_list\n",
        "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            current_value = my_list[i]\n            position = i\n            \n            while position >= gap and my_list[position - gap] > current_value:\n                my_list[position] = my_list[position - gap]\n                position -= gap\n                \n            my_list[position] = current_value\n                \n        gap = gap // 2\n        \n    return my_list\n",
        "import math\n\ndef shell_sort(my_list):\n    gap_sequence = []\n    k = math.floor(math.log2(len(my_list)))\n    while k > 0:\n        gap = 2**k - 1\n        gap_sequence.append(gap)\n        k -= 1\n    gap_sequence.append(1)\n\n    for gap in gap_sequence:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n    \n    return my_list\n",
        "def shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n"
    ],
    "MbppEval/429": [
        "def and_tuples(test_tup1, test_tup2):\n    result = []\n    \n    for elem1, elem2 in zip(test_tup1, test_tup2):\n        result.append(elem1 & elem2)\n    \n    return tuple(result)\n",
        "def and_tuples(test_tup1, test_tup2):\n    result = []\n    \n    for x, y in zip(test_tup1, test_tup2):\n        result.append(x & y)\n    \n    return tuple(result)\n",
        "def and_tuples(test_tup1, test_tup2):\n    result = ()\n    \n    for elem1, elem2 in zip(test_tup1, test_tup2):\n        result += (elem1 & elem2,)\n    \n    return result\n",
        "def and_tuples(test_tup1, test_tup2):\n    result = []\n    \n    for ele1, ele2 in zip(test_tup1, test_tup2):\n        result.append(ele1 & ele2)\n        \n    return tuple(result)\n",
        "def and_tuples(test_tup1, test_tup2):\n    result = []\n    \n    for i in range(len(test_tup1)):\n        and_value = test_tup1[i] & test_tup2[i]\n        result.append(and_value)\n    \n    return tuple(result)\n"
    ],
    "MbppEval/430": [
        "def parabola_directrix(a, b, c): \n    directrix = c - (b**2 / (4*a))\n    return directrix\n",
        "def parabola_directrix(a, b, c): \n    directrix = -b / (2 * a)\n    return -directrix\n",
        "def parabola_directrix(a, b, c):\n    return (b ** 2 - 4 * a * c) / (4 * a)\n",
        "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n\n    Examples:\n    parabola_directrix(5,3,2) == -198\n    parabola_directrix(9,8,4) == -2336\n    parabola_directrix(2,4,6) == -130\n    '''\n    directrix = (c - (b**2 - 1)) / (4*a)\n    return directrix\n",
        "def parabola_directrix(a, b, c):\n    directrix = -1/(4*a) + c\n    return directrix\n"
    ],
    "MbppEval/431": [
        "def common_element(list1, list2):\n    set_list1 = set(list1)\n    \n    for elem in list2:\n        if elem in set_list1:\n            return True\n    \n    return False\n",
        "def common_element(list1, list2):\n    # Check if the current element of the first list exists in the second list\n    for element in list1:\n        if element in list2:\n            return True\n    \n    return False  # No common element found after iterating through all elements of the first list\n",
        "def common_element(list1, list2):\n    for element1 in list1:\n        if element1 in list2:\n            return True\n    return False\n",
        "def common_element(list1, list2):\n    for element in list1:\n        if element in list2:\n            return True\n    \n    return False\n",
        "def common_element(list1, list2):\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n"
    ],
    "MbppEval/432": [
        "def median_trapezium(base1, base2, height):\n    # Step 0: Calculate the sum of the two bases\n    bases_sum = base1 + base2\n    \n    # Step 1: Calculate the average of the bases\n    median = bases_sum / 2\n    \n    # Step 2: Return the average as the median length of the trapezium\n    return median\n",
        "def median_trapezium(base1, base2, height):\n    return (base1 + base2) / 2\n",
        "def median_trapezium(base1, base2, height):\n    average_bases = (base1 + base2) / 2\n    median_length = (average_bases * height) / (base1 + base2)\n    return median_length\n",
        "def median_trapezium(base1, base2, height):\n    median = (base1 + base2) / 2\n    return median\n",
        "def median_trapezium(base1, base2, height):\n    average_base = (base1 + base2) / 2\n    return average_base\n"
    ],
    "MbppEval/433": [
        "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n\n    Examples:\n    check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n    check_greater([2, 3, 4, 5, 6], 8) == 'Yes, the entered number is greater than those in the array'\n    check_greater([9, 7, 4, 8, 6, 1], 11) == 'Yes, the entered number is greater than those in the array'\n    '''\n    is_greater = False\n\n    for num in arr:\n        if num >= number:\n            is_greater = True\n            break\n\n    if is_greater:\n        return 'No, entered number is less than those in the array'\n    else:\n        return 'Yes, the entered number is greater than those in the array'\n",
        "def check_greater(arr, number):\n    max_num = max(arr)\n    \n    if max_num < number:\n        return 'Yes, the entered number is greater than those in the array'\n    else:\n        return 'No, entered number is less than those in the array'\n",
        "def check_greater(arr, number):\n    for elem in arr:\n        if number < elem:\n            return 'No, the entered number is less than those in the array'\n    return 'Yes, the entered number is greater than those in the array'\n",
        "def check_greater(arr, number):\n    for element in arr:\n        if element > number:\n            return 'No, entered number is less than those in the array'\n    \n    return 'Yes, the entered number is greater than those in the array'\n",
        "def check_greater(arr, number):\n    is_greater = False\n    \n    for elem in arr:\n        if number > elem:\n            is_greater = True\n    \n    if is_greater:\n        return 'Yes, the entered number is greater than those in the array'\n    else:\n        return 'No, entered number is less than those in the array'\n"
    ],
    "MbppEval/434": [
        "import re\n\ndef text_match_one(text):\n    if re.search(r'ab+', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
        "import re\n\ndef text_match_one(text):\n    pattern = \"ab+\"\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
        "import re\n\ndef text_match_one(text):\n    if re.search('ab+', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
        "import re\n\ndef text_match_one(text):\n    pattern = r'ab+'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
        "import re\n\ndef text_match_one(text):\n    '''\n    Matches a string that has an 'a' followed by one or more 'b's.\n\n    Args:\n    text (str): Input string to check for the pattern.\n\n    Returns:\n    str: 'Found a match!' if pattern found, 'Not matched!' otherwise.\n    '''\n    if re.search(r'ab+', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n"
    ],
    "MbppEval/435": [
        "def last_digit(n):\n    # Step 1\n    str_n = str(n)\n    # Step 2\n    return int(str_n[-1])\n",
        "def last_Digit(n):\n    return int(str(n)[-1])\n",
        "def last_Digit(n):\n    return int(str(n)[-1])\n",
        "def last_digit(n):\n    return n % 10\n",
        "def last_Digit(n):\n    return n % 10\n"
    ],
    "MbppEval/436": [
        "def neg_nos(list1):\n    neg_nums = []\n    \n    for num in list1:\n        if num < 0:\n            neg_nums.append(num)\n    \n    return neg_nums\n",
        "def neg_nos(list1):\n    neg_nums = []  # Create an empty list to store negative numbers\n    \n    for num in list1:\n        if num < 0:\n            neg_nums.append(num)  # Append negative number to the list\n    \n    return neg_nums  # Return the list of negative numbers\n",
        "def neg_nos(list1):\n    neg_nums = []\n    \n    for num in list1:\n        if num < 0:\n            neg_nums.append(num)\n    \n    return neg_nums\n",
        "def neg_nos(list1):\n    neg_numbers = []\n    for num in list1:\n        if num < 0:\n            neg_numbers.append(num)\n    return neg_numbers\n",
        "def neg_nos(list1):\n    neg_nums = []\n\n    for num in list1:\n        if num < 0:\n            neg_nums.append(num)\n\n    return neg_nums\n"
    ],
    "MbppEval/437": [
        "def remove_odd(str1):\n    result = \"\"\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            result += str1[i]\n    return result\n",
        "def remove_odd(str1):\n    result = \"\"\n    \n    for i in range(len(str1)):\n        char = str1[i]\n        if i % 2 == 0:\n            result += char\n            \n    return result\n",
        "def remove_odd(str1):\n    result = \"\"\n    \n    for i in range(len(str1)):\n        char = str1[i]\n        if i % 2 == 0:\n            result += char\n\n    return result\n",
        "def remove_odd(str1):\n    result = \"\"\n    \n    for index, char in enumerate(str1):\n        if index % 2 == 0:\n            result += char\n            \n    return result\n",
        "def remove_odd(str1):\n    result = \"\"\n    \n    for index, char in enumerate(str1):\n        if index % 2 == 0:\n            result += char\n    \n    return result\n"
    ],
    "MbppEval/438": [
        "def count_bidirectional(test_list):\n    count = 0\n    seen_pairs = set()\n    \n    for pair in test_list:\n        if (pair[1], pair[0]) in seen_pairs:\n            count += 1\n            seen_pairs.remove((pair[1], pair[0]))\n        else:\n            seen_pairs.add(pair)\n    \n    return str(count)\n",
        "def count_bidirectional(test_list):\n    count = 0\n    checked_pairs = set()\n    \n    for tup in test_list:\n        reverse_tup = (tup[1], tup[0])\n        \n        if tup not in checked_pairs and reverse_tup in test_list:\n            count += 1\n            checked_pairs.add(tup)\n    \n    return str(count)\n",
        "def count_bidirectional(test_list):\n    bidirectional_pairs = {}\n    \n    for pair in test_list:\n        sorted_pair = tuple(sorted(pair))\n        tuple_list = list(sorted_pair)\n        \n        if tuple_list in bidirectional_pairs:\n            bidirectional_pairs[tuple_list] += 1\n        else:\n            bidirectional_pairs[tuple_list] = 1\n    \n    count = 0\n    for pair_count in bidirectional_pairs.values():\n        if pair_count == 2:\n            count += 1\n    \n    return str(count)\n",
        "def count_bidirectional(test_list):\n    bidirectional_counts = {}\n    \n    for pair in test_list:\n        pair = tuple(sorted(pair))  # Sort the pair to ensure consistent comparison\n        \n        if pair not in bidirectional_counts:\n            bidirectional_counts[pair] = 1\n        else:\n            bidirectional_counts[pair] += 1\n    \n    bidirectional_pairs = sum(count for count in bidirectional_counts.values() if count >= 2)\n    \n    return str(bidirectional_pairs)\n",
        "def count_bidirectional(test_list):\n    bidirectional_pairs = {}\n    \n    for pair in test_list:\n        tuple_pair = tuple(sorted(pair))\n        \n        if tuple_pair in bidirectional_pairs:\n            bidirectional_pairs[tuple_pair] += 1\n        else:\n            bidirectional_pairs[tuple_pair] = 1\n\n    count = 0\n    for pair_count in bidirectional_pairs.values():\n        if pair_count >= 2:\n            count += pair_count // 2\n\n    return str(count)\n"
    ],
    "MbppEval/439": [
        "def multiple_to_single(L):\n    # Step 1: Convert each integer to a string\n    str_list = [str(num) for num in L]\n\n    # Step 2: Join the strings together\n    concatenated_str = ''.join(str_list)\n\n    # Step 3: Convert the concatenated string back to an integer\n    single_int = int(concatenated_str)\n    return single_int\n",
        "def multiple_to_single(L):\n    result = ''\n    \n    for num in L:\n        result += str(num)\n    \n    single_int = int(result)\n    return single_int\n",
        "def multiple_to_single(L):\n    result = \"\"\n    \n    for num in L:\n        result += str(num)\n        \n    final_integer = int(result)\n    \n    return final_integer\n",
        "def multiple_to_single(L):\n    result = ''\n    \n    for num in L:\n        result += str(num)  # Step 2\n\n    return int(result)  # Steps 3 and 4\n",
        "def multiple_to_single(L):\n    single_int = \"\".join(str(num) for num in L)\n    return int(single_int)\n"
    ],
    "MbppEval/440": [
        "import re\n\ndef find_adverb_position(text):\n    words = re.findall(r'\\b\\w+\\b', text)\n    \n    for i, word in enumerate(words):\n        if (word.endswith('ly') or word.endswith('ily')) and len(word) == text.index(word) + len(word):\n            return (text.index(word), text.index(word) + len(word) - 1, word)\n            break\n",
        "import re\ndef find_adverb_position(text):\n    adverb_pattern = r'\\b\\w+ly\\b'  # Regular expression pattern to match adverbs ending in 'ly'\n    \n    match = re.search(adverb_pattern, text)\n    \n    if match:\n        adverb = match.group()\n        start_index = match.start()\n        end_index = match.end()\n        return (start_index, end_index, adverb)\n    \n    return None\n",
        "import re\n\ndef find_adverb_position(text):\n    words = re.findall(r'\\w+|\\S', text)\n    \n    for idx, word in enumerate(words):\n        if word.endswith(\"ly\"):\n            return (text.find(word), text.find(word) + len(word) - 1, word)\n\n# Testing all steps\n\n\n\n",
        "import re\n\ndef find_adverb_position(text):\n    adverb_pattern = r'\\b\\w+ly\\b'\n    match = re.search(adverb_pattern, text)\n\n    if match:\n        adverb = match.group()\n        start_position = match.start()\n        end_position = match.end()\n        return (start_position, end_position, adverb)\n    \n    return None\n",
        "import re\n\ndef find_adverb_position(text):\n    adverb_regex = r'\\b\\w+ly\\b'\n    matches = re.search(adverb_regex, text)\n    if matches:\n        adverb = matches.group()\n        start_position = matches.start()\n        end_position = matches.end()\n        return start_position, end_position, adverb\n    return None\n"
    ],
    "MbppEval/441": [
        "def surfacearea_cube(l):\n    surface_area = 6 * l ** 2\n    return surface_area\n",
        "def surfacearea_cube(l):\n    surface_area = 6 * l**2\n    return surface_area\n",
        "def surfacearea_cube(l):\n    return 6 * l * l\n",
        "def surfacearea_cube(l):\n    return 6 * l**2\n",
        "def surfacearea_cube(l):\n    surface_area = 6 * l**2\n    return surface_area\n"
    ],
    "MbppEval/442": [
        "from array import array\n\ndef positive_count(nums):\n    total_elements = len(nums)\n    positive_elements = sum(1 for num in nums if num > 0)\n    positive_ratio = positive_elements / total_elements if total_elements > 0 else 0\n    return round(positive_ratio, 2)\n",
        "from array import array\n\ndef positive_count(nums):\n    total_count = len(nums)\n    positive_count = sum(1 for num in nums if num > 0)\n    positive_ratio = positive_count / total_count if total_count > 0 else 0\n    return positive_ratio\n",
        "from array import array\n\ndef positive_count(nums):\n    positive_nums_count = 0  # Step 0: Initialize a variable to count positive numbers\n    \n    # Step 1: Iterate through each number in nums\n    for num in nums:\n        if num > 0:\n            positive_nums_count += 1  # Step 2: Count positive numbers\n    \n    ratio = positive_nums_count / len(nums)  # Step 3: Calculate ratio of positive numbers\n    \n    return round(ratio, 2)  # Step 4: Return the ratio rounded to 2 decimal places\n",
        "from array import array\n\ndef positive_count(nums):\n    total_count = len(nums)\n    if total_count == 0:\n        return 0\n    positive_nums = sum(1 for num in nums if num > 0)\n    ratio = positive_nums / total_count\n    return round(ratio, 2)\n",
        "from array import array\n\ndef positive_count(nums):\n    '''Write a function to find the ratio of positive numbers in an array of integers.'''\n    \n    positive_nums = 0\n    total_nums = len(nums)\n    \n    for num in nums:\n        if num > 0:\n            positive_nums += 1\n    \n    positive_ratio = positive_nums / total_nums\n    \n    return round(positive_ratio, 2)\n"
    ],
    "MbppEval/443": [
        "def largest_neg(list1): \n    largest_neg_num = None\n    \n    for num in list1:\n        if num < 0:\n            if largest_neg_num is None or num < largest_neg_num:\n                largest_neg_num = num\n                \n    return largest_neg_num\n",
        "def largest_neg(list1): \n    largest_neg_num = None\n    \n    for num in list1:\n        if num < 0:\n            if largest_neg_num is None or num > largest_neg_num:\n                largest_neg_num = num\n    \n    return largest_neg_num\n",
        "def largest_neg(list1):\n    if not list1:\n        return None\n    \n    largest_neg = None\n    \n    for num in list1:\n        if num < 0:\n            if largest_neg is None or num > largest_neg:\n                largest_neg = num\n    \n    return largest_neg\n",
        "def largest_neg(list1): \n    negative_numbers = [num for num in list1 if num < 0]\n    \n    if not negative_numbers:\n        return None\n    \n    largest_neg_num = max(negative_numbers)\n    return largest_neg_num\n",
        "def largest_neg(list1): \n    largest_negative = None\n    \n    for num in list1:\n        if num < 0:\n            if largest_negative is None or num < largest_negative:\n                largest_negative = num\n\n    return largest_negative\n"
    ],
    "MbppEval/444": [
        "def trim_tuple(test_list, K):\n    trimmed_tuples = []\n\n    for tup in test_list:\n        trimmed_tup = tup[:K]  # Extract elements up to index K\n        trimmed_tuples.append(trimmed_tup)  # Append the trimmed tuple to the list\n    \n    return str(trimmed_tuples)\n",
        "def trim_tuple(test_list, K):\n    result = []\n    for tup in test_list:\n        new_tup = tup[K:]\n        result.append(new_tup)\n    return str(result)\n",
        "def trim_tuple(test_list, K):\n    trimmed_tuples = []\n    for tpl in test_list:\n        trimmed_tuples.append(tpl[K:])\n    return '[' + ', '.join([str(tuple(t)) for t in trimmed_tuples]) + ']'\n",
        "def trim_tuple(test_list, K):\n    result = []\n    for tup in test_list:\n        new_tup = tuple(tup[:K])\n        result.append(new_tup)\n    return result\n",
        "def trim_tuple(test_list, K):\n    trimmed_tuples = []\n    \n    for tpl in test_list:\n        trimmed_tpl = tpl[K:]\n        trimmed_tuples.append(trimmed_tpl)\n    \n    return str(trimmed_tuples)\n"
    ],
    "MbppEval/445": [
        "def index_multiplication(test_tup1, test_tup2):\n    result = []\n    \n    for tup1, tup2 in zip(test_tup1, test_tup2):\n        new_tup = tuple()\n        \n        for index in range(len(tup1)):\n            prod = tup1[index] * tup2[index]\n            new_tup += (prod,)\n        \n        result.append(new_tup)\n        \n    return tuple(result)\n",
        "def index_multiplication(test_tup1, test_tup2):\n    # Function to perform index wise multiplication of tuple elements in the given two tuples\n    result = []\n\n    # Iterate over the indices of the tuples\n    for i in range(len(test_tup1)):\n        result.append((test_tup1[i][0] * test_tup2[i][0], test_tup1[i][1] * test_tup2[i][1]))\n\n    return tuple(result)\n",
        "def index_multiplication(test_tup1, test_tup2):\n    result = []\n    \n    for tup1, tup2 in zip(test_tup1, test_tup2):\n        multiplied = tuple(x * y for x, y in zip(tup1, tup2))\n        result.append(multiplied)\n    \n    return tuple(result)\n",
        "def index_multiplication(test_tup1, test_tup2):\n    result = []\n    \n    for i in range(len(test_tup1)):\n        result.append((test_tup1[i][0]*test_tup2[i][0], test_tup1[i][1]*test_tup2[i][1]))\n    \n    return tuple(result)\n",
        "def index_multiplication(test_tup1, test_tup2):\n    result_list = []\n    \n    for i in range(len(test_tup1)):\n        multiplied_tuple = (test_tup1[i][0] * test_tup2[i][0], test_tup1[i][1] * test_tup2[i][1])\n        result_list.append(multiplied_tuple)\n    \n    result_tuple = tuple(result_list)\n    \n    return result_tuple\n"
    ],
    "MbppEval/446": [
        "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    tuple_elements_count = Counter(tup)\n    total_count = sum(tuple_elements_count[element] for element in lst)\n    return total_count\n",
        "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    elem_counts = Counter(tup)\n    total_count = 0\n\n    for ele in lst:\n        total_count += elem_counts[ele]\n\n    return total_count\n",
        "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    tup_counter = Counter(tup)\n    \n    total_count = sum(tup_counter[element] for element in lst)\n    \n    return total_count\n",
        "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    count_dict = Counter(tup)\n    \n    total_count = 0\n    for elem in lst:\n        total_count += count_dict.get(elem, 0)\n    \n    return total_count\n",
        "from collections import Counter\n\ndef count_Occurrence(tup_counter, lst): \n    count = 0\n    for ele in lst:\n        count += tup_counter[ele]\n    return count\n"
    ],
    "MbppEval/447": [
        "def cube_nums(nums):\n    result = [num ** 3 for num in nums]\n    return result\n",
        "def cube_nums(nums):\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes\n",
        "def cube_nums(nums):\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes\n",
        "def cube_nums(nums):\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes\n",
        "def cube_nums(nums):\n    cubes = []\n    \n    for num in nums:\n        cubes.append(num ** 3)  # Cube of each number\n        \n    return cubes\n"
    ],
    "MbppEval/448": [
        "def perrin(n):\n    if n == 0:\n        return 3\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    return perrin(n-2) + perrin(n-3)\n\ndef cal_sum(n):\n    total_sum = 0\n    for i in range(n + 1):\n        total_sum += perrin(i)\n    return total_sum\n",
        "perrin_numbers = [3, 0, 2]\n",
        "def cal_sum(n): \n    def perrin_number(n):\n        if n == 0:\n            return 3\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 2\n        else:\n            return perrin_number(n-2) + perrin_number(n-3)\n\n    sum_perrin = 0\n    for i in range(n + 1):\n        sum_perrin += perrin_number(i)\n\n    return sum_perrin\n",
        "def calculate_perrin_number(n):\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    \n    perrin = [3, 0, 2]\n    \n    for i in range(3, n+1):\n        next_perrin = perrin[-2] + perrin[-3]\n        perrin.append(next_perrin)\n    \n    return perrin[n]\n\ndef cal_sum(n):\n    total_sum = sum(calculate_perrin_number(i) for i in range(n))  # Calculate the sum of first n Perrin numbers\n    return total_sum\n\n# Test the function\n\n\n\n",
        "def cal_sum(n):\n    def perrin_number(n):\n        if n == 0:\n            return 3\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 2\n        else:\n            return perrin_number(n-2) + perrin_number(n-3)\n    \n    if n <= 0:\n        return 0\n    \n    perrin_sum = 0\n    for i in range(n):\n        perrin_sum += perrin_number(i)\n    \n    return perrin_sum\n"
    ],
    "MbppEval/450": [
        "def extract_string(str_list, length):\n    extracted_strings = []\n\n    for string in str_list:\n        if len(string) >= length:\n            extracted_strings.append(string)\n    \n    return extracted_strings\n",
        "def extract_string(str, l):\n    result = []\n    \n    for s in str:\n        if len(s) == l:\n            result.append(s)\n    \n    return result\n",
        "def extract_string(str, l):\n    result = []\n    for string in str:\n        if len(string) == l:\n            result.append(string)\n    return result\n",
        "def extract_string(str, l):\n    extracted_strings = []  \n  \n    for s in str: \n        if len(s) == l:  \n            extracted_strings.append(s)  \n    \n    return extracted_strings  \n",
        "def extract_string(str, l):\n    result = []\n\n    for s in str:\n        if len(s) == l:\n            result.append(s)\n\n    return result\n\n\n\n\n"
    ],
    "MbppEval/451": [
        "import re\n\ndef remove_whitespaces(text1):\n    regex_pattern = r'\\s+'\n    text_without_spaces = re.sub(regex_pattern, '', text1)\n    return text_without_spaces\n",
        "import re\n\ndef remove_whitespaces(text1):\n    return re.sub(r'\\s+', '', text1)\n",
        "import re\n\ndef remove_whitespaces(text1):\n    whitespace_pattern = r'\\s+'\n    whitespaces = re.findall(whitespace_pattern, text1)\n    for space in whitespaces:\n        text1 = text1.replace(space, '')\n    return text1\n",
        "import re\n\ndef remove_whitespaces(text1):\n    return re.sub(r'\\s+', '', text1)\n",
        "import re\n\ndef remove_whitespaces(text1):\n    return re.sub(r'\\s+', '', text1)\n\n# Test the function with the provided examples\n\n\n\n"
    ],
    "MbppEval/452": [
        "def loss_amount(actual_cost, sale_amount):\n    profit_loss = sale_amount - actual_cost\n    \n    if profit_loss < 0:  # Check for loss\n        return abs(profit_loss)\n    else:  # No loss\n        return 0\n",
        "def loss_amount(actual_cost, sale_amount):\n    loss = actual_cost - sale_amount\n    if loss > 0:\n        return loss\n    else:\n        return 0\n",
        "def loss_amount(actual_cost, sale_amount):\n    difference = sale_amount - actual_cost\n    if difference < 0:\n        return abs(difference)\n    else:\n        return 0\n",
        "def loss_amount(actual_cost, sale_amount): \n    difference = actual_cost - sale_amount\n    if difference > 0:\n        return difference\n    else:\n        return 0\n",
        "def loss_amount(actual_cost, sale_amount):\n    loss = actual_cost - sale_amount\n    if loss > 0:\n        return loss\n    else:\n        return 0\n"
    ],
    "MbppEval/453": [
        "def sumofFactors(n):\n    even_factors_sum = 0\n    \n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i % 2 == 0:\n                even_factors_sum += i\n            if i != n // i and (n // i) % 2 == 0:\n                even_factors_sum += n // i\n    \n    return even_factors_sum\n",
        "import math\n\ndef sumofFactors(n):\n    sum_even_factors = 0\n\n    for i in range(1, n+1):\n        if n % i == 0 and i % 2 == 0:\n            sum_even_factors += i\n        if n % i == 0 and n // i != i and (n // i) % 2 == 0:\n            sum_even_factors += n // i\n\n    return sum_even_factors\n",
        "import math \n\ndef sumofFactors(n): \n    sum_of_factors = 0\n    \n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum_of_factors += i\n                \n            if n//i != i and (n//i) % 2 == 0:\n                sum_of_factors += n // i\n                \n    return sum_of_factors\n",
        "import math \n\ndef sumofFactors(n):\n    sum_factors = 0\n\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum_factors += i\n\n            if i != n // i and (n // i) % 2 == 0:\n                sum_factors += n // i\n\n    return sum_factors\n",
        "import math\n\ndef sumofFactors(n):\n    sum_factors = 0\n\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum_factors += i\n            if n // i % 2 == 0 and i != n // i:\n                sum_factors += n // i\n\n    return sum_factors\n"
    ],
    "MbppEval/454": [
        "import re\n\ndef text_match_wordz(text):\n    if re.search(r'\\b\\w*z\\w*\\b', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
        "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*z\\w*\\b'  # Regular expression pattern to match a word containing 'z'\n    \n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
        "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
        "import re\n\ndef text_match_wordz(text):\n    match = re.search(r'\\b\\w*z\\w*\\b', text)\n    if match:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
        "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    \n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n"
    ],
    "MbppEval/455": [
        "def check_monthnumb_number(monthnum2):\n    if monthnum2 < 1 or monthnum2 > 12:\n        return False\n    \n    months_with_31_days = {1, 3, 5, 7, 8, 10, 12}\n\n    if monthnum2 in months_with_31_days:\n        return True\n    else:\n        return False\n",
        "def check_monthnumb_number(monthnum2):\n    thirty_one_days_months = [1, 3, 5, 7, 8, 10, 12]\n    if monthnum2 in thirty_one_days_months:\n        return True\n    else:\n        return False\n",
        "def check_monthnumb_number(monthnum2):\n    thirty_one_days_months = [1, 3, 5, 7, 8, 10, 12]\n\n    if monthnum2 in thirty_one_days_months:\n        return True\n    else:\n        return False\n",
        "def check_monthnumb_number(monthnum2):\n    if monthnum2 < 1 or monthnum2 > 12:\n        return False\n\n    days_in_month = {1: 31, 3: 31, 5: 31, 7: 31, 8: 31, 10: 31, 12: 31}\n\n    if monthnum2 in days_in_month.keys() and days_in_month[monthnum2] == 31:\n        return True\n    else:\n        return False\n",
        "def check_monthnumb_number(monthnum2):\n    days_in_31 = [1, 3, 5, 7, 8, 10, 12]\n    \n    return monthnum2 in days_in_31\n"
    ],
    "MbppEval/456": [
        "def reverse_string_list(stringlist):\n    reversed_strings = []\n    \n    for string in stringlist:\n        reversed_strings.append(string[::-1])\n        \n    return reversed_strings\n",
        "def reverse_string_list(stringlist):\n    reversed_strings = []\n\n    for string in stringlist:\n        reversed_string = string[::-1]\n        reversed_strings.append(reversed_string)\n    \n    return reversed_strings\n",
        "def reverse_string_list(stringlist):\n    reversed_list = []\n    for string in stringlist:\n        reversed_string = ''\n        for char in string:\n            reversed_string = char + reversed_string\n        reversed_list.append(reversed_string)\n    return reversed_list\n",
        "def reverse_string_list(stringlist):\n    reversed_strings = []\n    \n    for string in stringlist:\n        reversed_string = string[::-1]\n        reversed_strings.append(reversed_string)\n\n    return reversed_strings\n",
        "def reverse_string_list(stringlist):\n    reversed_strings = []\n    \n    for string in stringlist:\n        reversed_string = string[::-1]\n        reversed_strings.append(reversed_string)\n\n    return reversed_strings\n"
    ],
    "MbppEval/457": [
        "def find_min(lst): \n    min_length = float('inf')\n    min_sublist = []\n    \n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    \n    return min_sublist\n",
        "def Find_Min(lst):\n    min_length = float('inf')\n    min_sublist = None\n    \n    for sublist in lst:\n        sublist_length = len(sublist)\n        if sublist_length < min_length:\n            min_length = sublist_length\n            min_sublist = sublist\n    \n    return min_sublist\n",
        "def Find_Min(lst):\n    min_length = float('inf)\n    min_sublist = []\n\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist\n",
        "def Find_Min(lst):\n    min_len = float('inf')\n    min_sublist = []\n    \n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist\n",
        "def Find_Min(lst):\n    min_length_sublist = None\n    min_length = float('inf')\n    \n    for sublst in lst:\n        if len(sublst) < min_length:\n            min_length = len(sublst)\n            min_length_sublist = sublst\n    \n    return min_length_sublist\n"
    ],
    "MbppEval/458": [
        "def rectangle_area(l, b):\n    # Step 1: Define the function rectangle_area with parameters l and b\n    area = l * b  # Step 2: Calculate the area of the rectangle\n    return area  # Step 3: Return the calculated area\n",
        "def rectangle_area(l, b):\n    area = l * b\n    return area\n",
        "def rectangle_area(l, b):\n    area = l * b\n    return area\n",
        "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n\n    Examples:\n    rectangle_area(10,20) == 200\n    rectangle_area(10,5) == 50\n    rectangle_area(4,2) == 8\n    '''\n\n    area = l * b\n    return area\n",
        "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n\n    Examples:\n    rectangle_area(10, 20) == 200\n    rectangle_area(10, 5) == 50\n    rectangle_area(4, 2) == 8\n    '''\n    return l * b\n"
    ],
    "MbppEval/459": [
        "import re\n\ndef remove_uppercase(str1):\n    result = \"\"\n    previous_char_upper = False\n    for char in str1:\n        if char.isupper() and previous_char_upper:\n            pass\n        else:\n            result += char\n            previous_char_upper = char.isupper()\n    \n    # Remove consecutive uppercase characters\n    result = re.sub(r'([A-Z])\\1+', r'\\1', result)\n    \n    return result\n",
        "import re\n\ndef remove_uppercase(str1):\n    return re.sub('[A-Z]', '', str1)\n",
        "def remove_uppercase(str1):\n    result = ''\n    for char in str1:\n        if not char.isupper():\n            result += char\n    return result\n",
        "import re\n\ndef remove_uppercase(str1):\n    return re.sub(r'[A-Z]', '', str1)\n",
        "import re\ndef remove_uppercase(str1):\n    result = ''\n    uppercase_substrings = re.findall(r'[A-Z]+', str1)\n\n    for index, char in enumerate(str1):\n        is_upper = False\n        for substr in uppercase_substrings:\n            if str1[index:index+len(substr)].lower() == substr.lower():\n                is_upper = True\n                break\n        if not is_upper:\n            result += char\n    return result\n"
    ],
    "MbppEval/460": [
        "def Extract(lst):\n    first_elements = []\n    \n    for sublist in lst:\n        if sublist:  # Check if sublist is not empty\n            first_elements.append(sublist[0])\n        \n    return first_elements\n",
        "def Extract(lst):\n    return [sub_list[0] for sub_list in lst]\n",
        "def Extract(lst):\n    result = []\n    for sub_list in lst:\n        result.append(sub_list[0])\n\n    return result\n",
        "def Extract(lst):\n    first_elements = [sub_list[0] for sub_list in lst]\n    return first_elements\n",
        "def Extract(lst): \n    first_elements = []  # Step 0: Create an empty list to store the first elements of each sublist.\n    \n    for sub_list in lst:\n        first_element = sub_list[0]  # Step 2: Extract the first element of the sublist.\n        first_elements.append(first_element)  # Append the first element to the new list.\n    \n    return first_elements\n"
    ],
    "MbppEval/461": [
        "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n",
        "def upper_ctr(str):\n    count = 0\n    \n    for char in str:\n        if char.isupper():\n            count += 1\n    \n    return count\n",
        "def upper_ctr(s):\n    count = 0\n    for char in s:\n        if char.isupper():\n            count += 1\n    return count\n",
        "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    \n    Args:\n    str (str): Input string\n    \n    Returns:\n    int: Count of uppercase characters in the input string\n    '''\n    count = 0  # Initialize count to 0\n    \n    for char in str:\n        if char.isupper():\n            count += 1  # Increment count if character is uppercase\n    \n    return count  # Return the count of uppercase characters\n\n# Test the upper_ctr function\n\n\n\n",
        "def upper_ctr(input_str):\n    count = 0\n    for char in input_str:\n        if char.isupper():\n            count += 1\n    return count\n"
    ],
    "MbppEval/462": [
        "import itertools\n\ndef combinations_list(list1):\n    result = []\n    \n    for r in range(len(list1)+1):\n        for combination in itertools.combinations(list1, r):\n            result.append(list(combination))\n    \n    return result\n",
        "import itertools\n\ndef combinations_list(list1):\n    combinations = []\n\n    for r in range(len(list1) + 1):\n        for combination in itertools.combinations(list1, r):\n            combinations.append(list(combination))\n\n    return combinations\n",
        "def combinations_list(list1):\n    all_combinations = [[]]\n    \n    for element in list1:\n        new_combinations = []\n        for combination in all_combinations:\n            new_combinations.append(combination + [element])\n\n        all_combinations.extend(new_combinations)\n\n    return all_combinations\n\n# Testing the implementation with a sample list\n\n",
        "def combinations_list(list1):\n    import itertools\n    combs = []\n\n    for r in range(len(list1) + 1):\n        for subset in itertools.combinations(list1, r):\n            combs.append(list(subset))\n    \n    return combs\n",
        "import itertools\n\ndef combinations_list(list1):\n    combinations = []\n    \n    for r in range(len(list1)+1):\n        combinations.extend(list(itertools.combinations(list1, r)))\n    \n    return combinations\n"
    ],
    "MbppEval/463": [
        "def max_subarray_product(arr):\n    if not arr:\n        return 0\n\n    max_prod = arr[0]\n    min_prod = arr[0]\n    max_so_far = arr[0]\n\n    for num in arr[1:]:\n        max_prod, min_prod = max(num, num * max_prod, num * min_prod), min(num, num * max_prod, num * min_prod)\n\n        max_so_far = max(max_so_far, max_prod)\n\n    return max_so_far\n",
        "def max_subarray_product(arr):\n    max_product = arr[0]\n    min_product = arr[0]\n    result = max_product\n\n    for i in range(1, len(arr)):\n        prev_max = max_product\n        max_product = max(arr[i], arr[i] * max_product, arr[i] * min_product)\n        min_product = min(arr[i], arr[i] * prev_max, arr[i] * min_product)\n\n        result = max(result, max_product)\n\n    return result\n",
        "def max_subarray_product(arr):\n    if not arr:\n        return 0\n\n    max_product_so_far = arr[0]\n    current_max_product = arr[0]\n    current_min_product = arr[0]\n\n    for num in arr[1:]:\n        temp_max = current_max_product\n        current_max_product = max(num, num * current_max_product, num * current_min_product)\n        current_min_product = min(num, num * temp_max, num * current_min_product)\n        max_product_so_far = max(max_product_so_far, current_max_product)\n\n    return max_product_so_far\n",
        "def max_subarray_product(arr):\n    if not arr:\n        return None\n    \n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    \n    for i in range(1, len(arr)):\n        temp_max = max(arr[i], max_product * arr[i], min_product * arr[i])\n        temp_min = min(arr[i], max_product * arr[i], min_product * arr[i])\n        \n        max_product = temp_max\n        min_product = temp_min\n        \n        result = max(result, max_product)\n        \n    return result\n",
        "def max_subarray_product(arr):\n    if not arr:\n        return None\n    \n    current_max_product = current_min_product = result = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            current_max_product, current_min_product = current_min_product, current_max_product\n        \n        current_max_product = max(arr[i], current_max_product * arr[i])\n        current_min_product = min(arr[i], current_min_product * arr[i])\n        \n        result = max(result, current_max_product)\n    \n    return result\n"
    ],
    "MbppEval/464": [
        "def check_value(dict, n):\n    for value in dict.values():\n        if value != n:\n            return False\n    return True\n",
        "def check_value(dict, n):\n    for value in dict.values():\n        if value != n:\n            return False\n    return True\n",
        "def check_value(dict, n):\n    if not dict:\n        return False\n\n    for value in dict.values():\n        if value != n:\n            return False\n    \n    return True\n",
        "def check_value(dict, n):\n    all_same = True\n    \n    for value in dict.values():\n        if value != n:\n            all_same = False\n            break\n    \n    return all_same\n",
        "def check_value(dict, n):\n    for val in dict.values():\n        if val != n:\n            return False\n    return True\n"
    ],
    "MbppEval/465": [
        "def drop_empty(dict1):\n    result_dict = {}\n    for key, value in dict1.items():\n        if value is not None:\n            result_dict[key] = value\n    return result_dict\n",
        "def drop_empty(dict1):\n    non_empty_dict = {}\n    \n    for key, value in dict1.items():\n        if value is not None:\n            non_empty_dict[key] = value\n            \n    return non_empty_dict\n",
        "def drop_empty(dict1):\n    non_empty_dict = {}\n    \n    for key, value in dict1.items():\n        if value is not None and value != '':\n            non_empty_dict[key] = value\n            \n    return non_empty_dict\n",
        "def drop_empty(dict1):\n    non_empty_dict = {}\n\n    for key, value in dict1.items():\n        if value is not None:\n            non_empty_dict[key] = value\n\n    return non_empty_dict\n",
        "def drop_empty(dict1):\n    non_empty_dict = {}\n    \n    for key, value in dict1.items():\n        if value is not None:\n            non_empty_dict[key] = value\n    \n    return non_empty_dict\n"
    ],
    "MbppEval/468": [
        "def max_product(arr):   \n    arr.sort()\n    \n    max_prod = 1\n\n    for num in arr:\n        max_prod *= num\n\n    increasing_subsequence = []\n    for num in arr:\n        if not increasing_subsequence or num > increasing_subsequence[-1]:\n            increasing_subsequence.append(num)\n\n    temp_prod = 1\n    for num in increasing_subsequence:\n        temp_prod *= num\n        max_prod = max(max_prod, temp_prod)\n\n    return max_prod\n",
        "def max_product(arr):\n    arr.sort()\n    max_prod = 1\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[j] > arr[i]:\n                product = arr[i] * arr[j]\n                if product > max_prod:\n                    max_prod = product\n\n    return max_prod\n",
        "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    \n    n = len(arr)\n    max_product = arr[0]\n    \n    increasing_subsequences = [[arr[0]]]\n    \n    for i in range(1, n):\n        current = arr[i]\n        new_sequences = []\n        \n        for seq in increasing_subsequences:\n            if current > seq[-1]:\n                new_sequences.append(seq + [current])\n                \n        increasing_subsequences.extend(new_sequences)\n        increasing_subsequences.append([current])\n    \n    max_prod = float('-inf')\n    for seq in increasing_subsequences:\n        product = 1\n        for num in seq:\n            product *= num\n        max_prod = max(max_prod, product)\n    \n    return max_prod\n",
        "def max_product(arr):\n    arr = sorted(arr)\n    max_product = 1\n    current_product = 1\n    \n    for num in arr:\n        current_product = max(current_product * num, num)\n        max_product = max(max_product, current_product)\n\n    return max_product\n",
        "def max_product(arr):\n    dp = [1] * len(arr)  # Initialize the maximum product ending at each index\n    subsequences = []    # List to store increasing subsequences\n\n    for i in range(len(arr)):\n        # Add the element itself as a subsequence\n        subsequences.append([arr[i]])\n\n        for j in range(i):\n            if arr[i] > arr[j]:  # If increasing order, update the product\n                product = dp[j] * arr[i]\n                if product > dp[i]:\n                    dp[i] = product\n                    # Append the current element to the existing subsequence\n                    subsequences[i] = subsequences[j] + [arr[i]]\n\n    max_product = float('-inf')\n    for subsequence in subsequences:\n        product = 1\n        for num in subsequence:\n            product *= num\n        max_product = max(max_product, product)\n\n    return max_product\n"
    ],
    "MbppEval/470": [
        "def add_pairwise(test_tup):\n    result = []\n    \n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    \n    result_tuple = tuple(result)\n    \n    return result_tuple\n",
        "def add_pairwise(test_tup):\n    result = []  \n    \n    for i in range(1, len(test_tup)):\n        result.append(test_tup[i-1] + test_tup[i]) \n        \n    return tuple(result)  \n",
        "def add_pairwise(test_tup):\n    pairwise_sum = []\n\n    for i in range(len(test_tup) - 1):\n        pair_sum = test_tup[i] + test_tup[i + 1]\n        pairwise_sum.append(pair_sum)\n\n    return tuple(pairwise_sum)\n",
        "def add_pairwise(test_tup):\n    result = []\n    for i in range(len(test_tup)-1):  # Loop through indexes from 0 to length-1\n        sum_pair = test_tup[i] + test_tup[i+1]  # Add current element with the next element\n        result.append(sum_pair)  # Append the result to the result list\n\n    return tuple(result)  # Return the result as a tuple\n",
        "def add_pairwise(test_tup):\n    result = []\n    \n    for i in range(len(test_tup) - 1):\n        current_sum = test_tup[i] + test_tup[i+1]\n        result.append(current_sum)\n    \n    return tuple(result)\n"
    ],
    "MbppEval/471": [
        "def find_remainder(arr, n): \n    product = 1\n    \n    for num in arr:\n        product *= num\n        product %= n\n    \n    return product % n\n",
        "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    \n    return product\n",
        "def find_remainder(arr, n):\n    result = 1\n\n    for num in arr:\n        result *= num\n        result %= n\n\n    return result % n\n",
        "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n\n    Examples:\n    find_remainder([100, 10, 5, 25, 35, 14], 6) == 9\n    find_remainder([1, 1, 1], 3) == 0\n    find_remainder([1, 2, 1], 3) == 0\n    '''\n    \n    result = 1\n    \n    for num in arr:\n        result *= num\n\n    return result % n\n",
        "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product\n"
    ],
    "MbppEval/472": [
        "def has_duplicates(lst):\n    seen = set()\n    for x in lst:\n        if x in seen:\n            return True\n        seen.add(x)\n    return False\n\ndef check_Consecutive(l):\n    if len(l) < 2:\n        return True\n    for i in range(len(l) - 1):\n        if l[i] + 1 != l[i + 1]:\n            return False\n    if has_duplicates(l):\n        return False\n    return True\n",
        "def check_Consecutive(l): \n    if len(l) < 2:\n        return False\n\n    for i in range(1, len(l)):\n        if l[i] != l[i-1] + 1:\n            return False\n    \n    return True\n",
        "def check_Consecutive(l): \n    l.sort()\n    for i in range(len(l) - 1):\n        if l[i+1] != l[i] + 1:\n            return False\n    return True\n",
        "def check_Consecutive(l): \n    l.sort()\n    \n    for i in range(1, len(l)):\n        if l[i] != l[i-1] + 1:\n            return False\n    \n    return True\n",
        "def check_Consecutive(l):\n    for i in range(len(l) - 1):\n        if l[i] + 1 != l[i+1]:\n            return False\n    return True\n"
    ],
    "MbppEval/473": [
        "def tuple_intersection(test_list1, test_list2):\n    set1 = set([tuple(sorted(t)) for t in test_list1])\n    set2 = set([tuple(sorted(t)) for t in test_list2])\n    \n    intersection_set = set1.intersection(set2)\n    \n    result_set = set([tuple(sorted(t)) for t in intersection_set])\n    \n    return result_set\n",
        "def tuple_intersection(test_list1, test_list2):\n    intersection_set = set()\n\n    for tuple1 in test_list1:\n        for tuple2 in test_list2:\n            if set(tuple1) == set(tuple2):\n                intersection_set.add(tuple1)\n                intersection_set.add(tuple2)\n\n    return intersection_set\n",
        "test_list1 = [(3, 4), (5, 6), (9, 10), (4, 5)]\ntest_list2 = [(5, 4), (3, 4), (6, 5), (9, 11)]\n\nset1 = set(test_list1)\nset2 = set(test_list2)\n\nintersection_set = set(map(tuple, set1.intersection(set2)))\n\nreturn intersection_set\n",
        "def tuple_intersection(test_list1, test_list2):\n    set_list1 = {tuple(item) for item in test_list1}\n    set_list2 = {tuple(item) for item in test_list2}\n\n    intersection_set = set_list1.intersection(set_list2)\n\n    result = {tuple(item) for item in intersection_set}\n\n    return result\n",
        "def tuple_intersection(test_list1, test_list2):\n    set1 = set(map(tuple, test_list1))\n    set2 = set(map(tuple, test_list2))\n\n    intersection = set1.intersection(set2)\n\n    return intersection\n"
    ],
    "MbppEval/474": [
        "def replace_char(str1, ch, newch):\n    modified_str = ''\n\n    # Loop through each character in the input string\n    for char in str1:\n        # Check if the character matches the specific character 'ch' that needs to be replaced\n        if char == ch:\n            # If the character matches, replace it with the new character 'newch'\n            modified_str += newch\n        else:\n            modified_str += char\n    \n    return modified_str\n\n# Test the function\n\n",
        "def replace_char(str1, ch, newch):\n    new_str = ''\n\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    \n    return new_str\n",
        "def replace_char(str1, ch, newch):\n    if ch in str1:\n        modified_str = str1.replace(ch, newch)\n        return modified_str\n    else:\n        return str1\n\n# Testing the function with example cases\n\n\n\n",
        "def replace_char(str1, ch, newch):\n    modified_str = \"\"\n    for char in str1:\n        if char == ch:\n            modified_str += newch\n        else:\n            modified_str += char\n    return modified_str\n",
        "def replace_char(str1, ch, newch):\n    modified_str = \"\"\n    \n    for char in str1:\n        if char == ch:\n            modified_str += newch\n        else:\n            modified_str += char\n\n    return modified_str\n\n# Testing the function with examples\n\n\n\n"
    ],
    "MbppEval/475": [
        "from collections import Counter\n\ndef sort_counter(dict1):\n    sorted_counter = Counter(dict1)\n    sorted_list = sorted_counter.items()\n    return sorted_list\n",
        "from collections import Counter\n\ndef sort_counter(dict1):\n    counter_obj = Counter(dict1)\n    sorted_counter = sorted(counter_obj.items(), key=lambda x: x[1], reverse=True)\n    return sorted_counter\n",
        "def sort_counter(dict1):\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n",
        "def sort_counter(dict1):\n    dict_items = list(dict1.items())\n    sorted_items = sorted(dict_items, key=lambda x: x[1], reverse=True)\n    return sorted_items\n",
        "from collections import Counter\n\ndef sort_counter(dict1):\n    counter_dict = Counter(dict1)\n    sorted_tuples = counter_dict.most_common()\n    return sorted_tuples\n"
    ],
    "MbppEval/476": [
        "def big_sum(nums):\n    if not nums:\n        return 0\n    elif len(nums) == 1:\n        return nums[0]\n\n    max_val = max(nums)\n    min_val = min(nums)\n    return max_val + min_val\n",
        "def big_sum(nums):\n    max_val = max(nums)\n    min_val = min(nums)\n    return max_val + min_val\n",
        "def big_sum(nums):\n    largest = max(nums)\n    smallest = min(nums)\n    return largest + smallest\n",
        "def big_sum(nums):\n    sorted_nums = sorted(nums)\n    return sorted_nums[0] + sorted_nums[-1]\n",
        "def big_sum(nums):\n    max_val = max(nums)\n    min_val = min(nums)\n    sum_max_min = max_val + min_val\n    return sum_max_min\n"
    ],
    "MbppEval/477": [
        "def is_lower(string):\n    return string.lower()\n",
        "def is_lower(string):\n    return string.lower()\n",
        "def is_lower(string):\n    return string.lower()\n",
        "def is_lower(string):\n    return string.lower()\n\n# Test cases\n\n\n\n",
        "def is_lower(string):\n    # Step 1: Define the function is_lower that takes a string as input\n    # Step 2: Use the lower method of strings to convert the given string to lowercase\n    return string.lower()\n"
    ],
    "MbppEval/478": [
        "import re\n\ndef remove_lowercase(str1):\n    pattern = '[a-z]'\n    return re.sub(pattern, '', str1)\n",
        "import re\n\ndef remove_lowercase(str1):\n    return re.sub('[a-z]', '', str1)\n",
        "import re\n\ndef remove_lowercase(str1):\n    pattern = \"[a-z]\"\n    \n    return re.sub(pattern, '', str1)\n",
        "import re\n\ndef remove_lowercase(str1):\n    return re.sub('[a-z]', '', str1)\n",
        "# Step 2: Use the re.sub() function to replace all lowercase substrings with an empty string\ndef remove_lowercase(str1):\n    pattern = '[a-z]'\n    modified_str = re.sub(pattern, '', str1)\n    return modified_str\n"
    ],
    "MbppEval/479": [
        "def first_Digit(n):\n    # Step 0: Convert the number to a string\n    n_str = str(n)\n    \n    # Step 1: Get the first character of the string\n    first_char = n_str[0]\n    \n    # Step 2: Convert the first character back to an integer\n    first_digit = int(first_char)\n    \n    # Step 3: Return the integer value\n    return first_digit\n",
        "def first_Digit(n) :\n    num_str = str(n)\n    first_char = num_str[0]\n    first_digit = int(first_char)\n    return first_digit\n",
        "def first_Digit(n):\n    n_str = str(n)\n    return int(n_str[0])\n",
        "def first_Digit(n):\n    num_as_str = str(n)\n    return num_as_str[0]\n",
        "def first_Digit(n):\n    num_str = str(n)\n    return int(num_str[0])\n"
    ],
    "MbppEval/554": [
        "def Split(list): \n    odd_numbers = []\n    for num in list:\n        if num % 2 != 0:\n            odd_numbers.append(num)\n    return odd_numbers\n",
        "def Split(lst): \n    odd_numbers = []  \n    \n    for num in lst:\n        if num % 2 != 0:\n            odd_numbers.append(num)  \n    \n    return odd_numbers  \n",
        "def Split(list): \n    odd_integers = []\n    \n    for num in list:\n        if num % 2 != 0:\n            odd_integers.append(num)\n    \n    return odd_integers\n",
        "def Split(numbers): \n    odd_numbers = []\n    for num in numbers:\n        if num % 2 != 0:\n            odd_numbers.append(num)\n    return odd_numbers\n",
        "def split(lst): \n    result = []\n    for num in lst:\n        if num % 2 != 0:\n            result.append(num)\n    return result\n"
    ],
    "MbppEval/555": [
        "def difference(n):\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_numbers = sum(range(1, n+1))\n    result = sum_of_cubes - sum_of_numbers\n    return result\n",
        "def difference(n):\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_numbers = n * (n + 1) // 2\n    result = sum_of_cubes - sum_of_numbers\n    return result\n",
        "def difference(n):\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_natural_numbers = (n*(n+1)) // 2\n    difference = sum_of_cubes - sum_of_natural_numbers\n    return difference\n\n# Test the function with examples\n\n\n\n",
        "def difference(n):\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    sum_of_numbers = (n*(n+1)) // 2\n\n    return sum_of_cubes - sum_of_numbers\n",
        "def difference(n):\n    sum_of_cubes = (n * (n + 1) // 2)**2\n    sum_of_numbers = (n * (n + 1)) // 2\n    return sum_of_cubes - sum_of_numbers\n"
    ],
    "MbppEval/556": [
        "def find_Odd_Pair(A, N):\n    count = 0\n\n    for i in range(N):\n        for j in range(i + 1, N):\n            xor_val = A[i] ^ A[j]\n            if xor_val % 2 == 1:\n                count += 1\n\n    return count\n",
        "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            xor_value = A[i] ^ A[j]\n            if xor_value & 1 == 1:\n                count += 1\n    return count\n",
        "def find_Odd_Pair(A, N):\n    count = 0\n\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n\n    return count\n",
        "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):  # Start from i+1 to avoid repeated pairs\n            xor_val = A[i] ^ A[j]\n            for k in range(j + 1, N):\n                if (xor_val ^ A[k]) % 2 != 0:\n                    count += 1\n    return count\n",
        "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2 != 0:\n                count += 1\n    return count\n"
    ],
    "MbppEval/557": [
        "def toggle_string(string):\n    toggled_string = \"\"\n    \n    for char in string:\n        toggled_char = char.lower() if char.isupper() else char.upper()\n        toggled_string += toggled_char\n        \n    return toggled_string\n",
        "def toggle_string(string):\n    result = \"\"\n    \n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    \n    return result\n",
        "def toggle_string(string):\n    toggled_string = \"\"\n    \n    for char in string:\n        if char.isupper():\n            toggled_string += char.lower()\n        else:\n            toggled_string += char.upper()\n        \n    return toggled_string\n",
        "def toggle_string(string):\n    toggled_string = []\n    for char in string:\n        if char.isupper():\n            toggled_string.append(char.lower())\n        else:\n            toggled_string.append(char.upper())\n    \n    return ''.join(toggled_string)\n",
        "def toggle_string(string):\n    toggled_string = \"\"\n    \n    for char in string:\n        if char.isupper():\n            toggled_string += char.lower()\n        else:\n            toggled_string += char.upper()\n    \n    return toggled_string\n"
    ],
    "MbppEval/558": [
        "def digit_distance_nums(n1, n2):\n    sum_diff = 0\n    n1_str = str(n1)\n    n2_str = str(n2)\n    \n    min_len = min(len(n1_str), len(n2_str))\n    \n    sum_diff = 0\n    \n    for i in range(min_len):\n        digit_diff = abs(int(n1_str[i]) - int(n2_str[i]))\n        sum_diff += digit_diff\n        \n    if len(n1_str) > len(n2_str):\n        for i in range(min_len, len(n1_str)):\n            sum_diff += int(n1_str[i])\n    elif len(n2_str) > len(n1_str):\n        for i in range(min_len, len(n2_str)):\n            sum_diff += int(n2_str[i])\n    \n    return sum_diff\n",
        "def digit_distance_nums(n1, n2):\n    str_n1 = str(n1)\n    str_n2 = str(n2)\n\n    if len(str_n1) < len(str_n2):\n        str_n1 = str_n1.zfill(len(str_n2))\n    elif len(str_n2) < len(str_n1):\n        str_n2 = str_n2.zfill(len(str_n1))\n\n    total_distance = 0\n    for digit1, digit2 in zip(str_n1, str_n2):\n        total_distance += abs(int(digit1) - int(digit2))\n\n    return total_distance\n\n# Testing with examples\n\n\n\n",
        "def digit_distance_nums(n1, n2):\n    absolute_diff = abs(n1 - n2)\n    sum_diff = sum(abs(int(digit1) - int(digit2)) for digit1, digit2 in zip(str(n1), str(n2)))\n    \n    return sum_diff\n",
        "def digit_distance_nums(n1, n2):\n    num_str1 = str(n1)\n    num_str2 = str(n2)\n    \n    total_distance = 0\n    for digit1, digit2 in zip(num_str1, num_str2):\n        total_distance += abs(int(digit1) - int(digit2))\n    \n    return total_distance\n",
        "def digit_distance_nums(n1, n2):\n    str_n1 = str(n1)\n    str_n2 = str(n2)\n    \n    total_distance = 0\n    \n    for digit1, digit2 in zip(str_n1, str_n2):\n        total_distance += abs(int(digit1) - int(digit2))\n    \n    return total_distance\n"
    ],
    "MbppEval/559": [
        "def max_sub_array_sum(a, size):\n    max_so_far = a[0]\n    max_ending_here = a[0]\n\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far\n",
        "def max_sub_array_sum(a, size):\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    \n    for i in range(1, size):\n        max_ending_here = max(a[i], a[i] + max_ending_here)\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far\n",
        "def max_sub_array_sum(a, size):\n    max_so_far = a[0]\n    max_ending_here = a[0]\n\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far\n",
        "def max_sub_array_sum(a, size):\n    max_so_far = 0\n    max_ending_here = 0\n    \n    for i in range(size):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    \n    return max_so_far\n",
        "def max_sub_array_sum(a, size):\n    max_so_far = float('-inf')\n    max_ending_here = float('-inf')\n\n    for i in range(size):\n        max_ending_here = max(a[i], a[i] + max_ending_here)\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far\n"
    ],
    "MbppEval/560": [
        "def union_elements(test_tup1, test_tup2):\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    union_set = set1.union(set2)\n    union_tuple = tuple(union_set)\n    \n    sorted_union_tuple = tuple(sorted(union_tuple))\n    \n    return sorted_union_tuple\n",
        "def union_elements(test_tup1, test_tup2):\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    union_set = set1.union(set2)\n    \n    return tuple(sorted(union_set))\n",
        "def union_elements(test_tup1, test_tup2):\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    union_set = set1.union(set2)\n    result_tuple = tuple(union_set)\n    sorted_tuple = tuple(sorted(result_tuple))\n    return sorted_tuple\n",
        "def union_elements(test_tup1, test_tup2):\n    unique_elements = set(test_tup1 + test_tup2)\n    sorted_elements = sorted(unique_elements)\n    return tuple(sorted_elements)\n",
        "def union_elements(test_tup1, test_tup2):\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    union_set = set1.union(set2)\n    \n    result_tuple = tuple(union_set)\n    \n    sorted_tuple = tuple(sorted(result_tuple))\n    \n    return sorted_tuple\n"
    ],
    "MbppEval/562": [
        "def Find_Max_Length(lst):\n    max_length = 0\n    \n    for sublist in lst:\n        length = len(sublist)\n        if length >= max_length:\n            max_length = length\n            \n    return max_length\n",
        "def Find_Max_Length(lst):\n    max_length = 0\n    \n    for sublist in lst:\n        sublist_length = len(sublist)\n        \n        if sublist_length > max_length:\n            max_length = sublist_length\n            \n    return max_length\n",
        "def Find_Max_Length(lst):  \n    max_length = 0\n    \n    for sublist in lst:\n        sublist_length = len(sublist)\n        if sublist_length > max_length:\n            max_length = sublist_length\n\n    return max_length\n",
        "def Find_Max_Length(lst):\n    max_length = 0\n    \n    for sublst in lst:\n        length = len(sublst)\n        \n        if length > max_length:\n            max_length = length\n            \n    return max_length\n",
        "def Find_Max_Length(lst):\n    max_length = 0\n    for sublist in lst:\n        sublist_length = len(sublist)\n        if sublist_length > max_length:\n            max_length = sublist_length\n    \n    return max_length\n"
    ],
    "MbppEval/563": [
        "import re\n\ndef extract_values(text):\n    return re.findall(r'\"(.*?)\"', text)\n",
        "import re\n\ndef extract_values(text):\n    extracted_values = re.findall(r'\"(.*?)\"', text)\n    return extracted_values\n",
        "import re\n\ndef extract_values(text):\n    values = re.findall(r'\"(.*?)\"', text)\n    return values\n",
        "import re\n\ndef extract_values(text):\n    return re.findall(r'\"([^\"]*)\"', text)\n",
        "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    values = re.findall(pattern, text)\n    return values\n"
    ],
    "MbppEval/564": [
        "def count_Pairs(arr, n):\n    count = 0\n    \n    for i in range(n):  # Loop through each element in the list\n        for j in range(i + 1, n):  # Iterate over the remaining elements\n            if arr[i] != arr[j]:  # Check if the elements are unequal\n                count += 1  # Increment count by 1\n                \n    return count  # Return the final count\n",
        "def count_Pairs(arr, n): \n    count = 0\n    for i in range(n): \n        for j in range(i+1, n): \n            if arr[i] != arr[j]: \n                count += 1\n    \n    return count\n",
        "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n",
        "def count_Pairs(arr, n):\n    count = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] != arr[j]:\n                count += 1\n                \n    return count\n",
        "def count_Pairs(arr, n):\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] != arr[j]:\n                count += 1\n                \n    return count\n"
    ],
    "MbppEval/565": [
        "def split(word):\n    characters = []  # Initialize an empty list to store the individual characters.\n    \n    for char in word:  # Iterate through each character in the input string.\n        characters.append(char)  # Append each character to the list.\n\n    return characters  # Return the list containing the individual characters.\n",
        "def split(word): \n    result = []  # Initialize an empty list to store characters\n    \n    for char in word: \n        result.append(char)  # Append each character to the list\n        \n    return result\n",
        "def split(word): \n    characters = []\n    for char in word:\n        characters.append(char)\n    return characters\n",
        "def split(word):\n    characters = []\n    \n    for char in word:\n        characters.append(char)\n    \n    return characters\n",
        "def split(word): \n    '''\n    Write a python function to split a string into characters.\n\n    Examples:\n    split('python') == ['p','y','t','h','o','n']\n    split('Name') == ['N','a','m','e']\n    split('program') == ['p','r','o','g','r','a','m']\n    '''\n    characters = []\n    \n    for char in word:\n        characters.append(char)\n\n    return characters\n"
    ],
    "MbppEval/566": [
        "def sum_digits(n):\n    total_sum = 0\n    n_str = str(n)\n    for digit in n_str:\n        total_sum += int(digit)\n    return total_sum\n",
        "def sum_digits(n):\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    \n    total_sum = 0\n    n_str = str(n)\n    \n    for digit in n_str:\n        total_sum += int(digit)\n        \n    return total_sum\n",
        "def sum_digits(n):\n    total = 0\n    n_str = str(n)\n    for digit in n_str:\n        total += int(digit)\n    \n    return total\n",
        "def sum_digits(n):\n    sum_digits = 0\n    n_str = str(n)\n    \n    for digit in n_str:\n        sum_digits += int(digit)\n    \n    return sum_digits\n",
        "def sum_digits(n):\n    sum_digits = 0\n    \n    n_str = str(n)\n    \n    sum_digits = 0\n    \n    for digit in n_str:\n        sum_digits += int(digit)\n    \n    return sum_digits\n"
    ],
    "MbppEval/567": [
        "def issort_list(list1):\n    if len(list1) < 2:\n        return True\n    \n    for i in range(1, len(list1)):\n        if list1[i] < list1[i-1]:\n            return False\n        \n    return True\n",
        "def issort_list(list1):\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    return True\n",
        "def issort_list(list1):\n    for i in range(1, len(list1)):\n        if list1[i] < list1[i-1]:\n            return False\n    return True\n",
        "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    \n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    \n    return True\n",
        "def issort_list(list1):\n    if len(list1) == 0 or len(list1) == 1:\n        return True\n\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i+1]:\n            return False\n\n    return True\n"
    ],
    "MbppEval/568": [
        "def empty_list(length):\n    result = []\n    empty_dict = {}\n    for _ in range(length):\n        result.append(empty_dict.copy())\n    return result\n",
        "def empty_list(length):\n    empty_dicts = []\n    \n    for _ in range(length):\n        empty_dicts.append({})\n\n    return empty_dicts\n",
        "def empty_list(length):\n    result = []\n    for _ in range(length):\n        result.append({})\n    return result\n",
        "def empty_list(length):\n    return [{} for _ in range(length)]\n\n# Testing the function\n\n",
        "def empty_list(length):\n    result = []\n    for _ in range(length):\n        result.append({})\n    return result\n"
    ],
    "MbppEval/569": [
        "def sort_sublists(list1):\n    sorted_list = []\n    \n    for sublist in list1:\n        sorted_list.append(sorted(sublist))\n    \n    return sorted_list\n",
        "def sort_sublists(list1):\n    for sublist in list1:\n        sublist.sort()\n    return list1\n",
        "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n\n    Examples:\n    sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']]) == [['green', 'orange'], ['black'], ['green', 'orange'], ['white']]\n    sort_sublists([['a','b'],['d','c'],['g','h'] , ['f','e']]) == [['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]\n    '''\n    return [sorted(sublist) for sublist in list1]\n",
        "def sort_sublists(list1):\n    for sublist in list1:\n        sublist.sort()\n    return list1\n\n# Test the function with examples\n\n\n\n",
        "def sort_sublists(list1):\n    sorted_list = []\n    \n    for sublist in list1:\n        sorted_sublist = sorted(sublist)\n        sorted_list.append(sorted_sublist)\n    \n    return sorted_list\n"
    ],
    "MbppEval/572": [
        "def two_unique_nums(nums):\n    unique_nums = []\n\n    for num in nums:\n        if nums.count(num) == 1:\n            unique_nums.append(num)\n\n    return unique_nums  \n",
        "def two_unique_nums(nums):\n    unique_nums = []\n    \n    for num in nums:\n        if nums.count(num) == 1:\n            unique_nums.append(num)\n    \n    return unique_nums\n",
        "def two_unique_nums(nums):\n    unique_nums = []\n    \n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n\n    for num in nums:\n        if num in unique_nums and unique_nums.count(num) > 1:\n            unique_nums.remove(num)\n\n    return unique_nums\n",
        "def two_unique_nums(nums):\n    unique_nums = []\n    \n    for num in nums:\n        if nums.count(num) == 1:\n            unique_nums.append(num)\n    \n    return unique_nums\n",
        "def two_unique_nums(nums):\n    result = []\n    for num in nums:\n        if num not in result:\n            result.append(num)\n    return result\n"
    ],
    "MbppEval/573": [
        "return product\n",
        "def unique_product(list_data):\n    unique_numbers = set()\n    product = 1\n    \n    for num in list_data:\n        if num not in unique_numbers:\n            unique_numbers.add(num)\n            product *= num\n            \n    return product\n",
        "def unique_product(list_data):\n    unique_numbers = set()\n    product = 1\n    \n    for num in list_data:\n        unique_numbers.add(num)\n    \n    for unique_num in unique_numbers:\n        product *= unique_num\n    \n    return product\n",
        "def unique_product(list_data):\n    unique_numbers = set()\n    \n    for num in list_data:\n        if num not in unique_numbers:\n            unique_numbers.add(num)\n    \n    product = 1\n    for unique_num in unique_numbers:\n        product *= unique_num\n    \n    return product\n",
        "def unique_product(list_data):\n    unique_set = set()\n    \n    # Step 1: Iterate through the list and add unique elements to the set\n    for num in list_data:\n        unique_set.add(num)\n\n    # Step 2: Calculate the product of unique elements\n    unique_product = 1\n    for num in unique_set:\n        unique_product *= num\n\n    return unique_product\n"
    ],
    "MbppEval/574": [
        "import math\n\ndef surfacearea_cylinder(r, h):\n    base_area = 2 * math.pi * r**2\n    lateral_area = 2 * math.pi * r * h\n    return base_area + lateral_area\n",
        "import math\n\ndef surfacearea_cylinder(r, h):\n    lateral_area = 2 * math.pi * r * h\n    top_bottom_area = 2 * math.pi * r**2\n    total_area = lateral_area + top_bottom_area\n    return total_area\n",
        "def surfacearea_cylinder(r, h):\n    top_bottom_area = 2 * 3.14159 * r**2\n    side_area = 2 * 3.14159 * r * h\n    total_area = top_bottom_area + side_area\n    return total_area\n",
        "import math\n\ndef surfacearea_cylinder(r, h):\n    # Step 1: Calculate the surface area of the two circular ends of the cylinder\n    circular_end_area = 2 * math.pi * (r ** 2)\n    \n    # Step 2: Calculate the lateral surface area of the cylinder\n    lateral_area = 2 * math.pi * r * h\n    \n    # Step 3: Add the two calculated surface areas to get the total surface area of the cylinder\n    total_surface_area = circular_end_area + lateral_area\n    \n    return total_surface_area\n",
        "def surfacearea_cylinder(r,h):\n    lateral_area = 2 * 3.14159 * r * h\n    base_area = 2 * 3.14159 * r ** 2\n    total_area = lateral_area + base_area\n    return total_area\n"
    ],
    "MbppEval/576": [
        "def is_Sub_Array(A, B):\n    for i in range(len(A) - len(B) + 1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False\n",
        "def is_Sub_Array(A, B): \n    if len(B) > len(A):\n        return False\n    \n    for i in range(len(A) - len(B) + 1):\n        if A[i:i + len(B)] == B:\n            return True\n\n    return False\n",
        "def is_Sub_Array(A, B):\n    if not A or not B:\n        return False\n\n    if len(A) == 0 or len(B) == 0:\n        return False\n\n    if len(B) > len(A):\n        return False\n\n    for i in range(len(A)):\n        if A[i:i+len(B)] == B:\n            return True\n\n    return False\n",
        "def is_Sub_Array(A, B):\n    if len(B) > len(A):\n        return False\n\n    for i in range(len(A) - len(B) + 1):\n        if A[i:i+len(B)] == B:\n            return True\n\n    return False\n",
        "def is_Sub_Array(A, B):\n    if len(B) > len(A):\n        return False\n\n    for i in range(len(A)):\n        if A[i:i+len(B)] == B:\n            return True\n    return False\n"
    ],
    "MbppEval/577": [
        "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in the factorial of a given number.\n    \n    Examples:\n    last_Digit_Factorial(4) == 4\n    last_Digit_Factorial(21) == 0\n    last_Digit_Factorial(30) == 0\n    '''\n    fact = 1\n    \n    for i in range(1, n+1):\n        fact *= i\n    \n    last_digit = fact % 10\n    \n    return last_digit\n",
        "import math\n\ndef last_Digit_Factorial(n):\n    factorial_result = math.factorial(n)\n    last_digit = factorial_result % 10\n    return last_digit\n",
        "    return last_digit\n",
        "def last_Digit_Factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    \n    last_digit = result % 10\n    return last_digit\n",
        "def last_Digit_Factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    \n    last_digit = result % 10\n    \n    return last_digit\n"
    ],
    "MbppEval/578": [
        "def interleave_lists(list1, list2, list3):\n    interleaved_list = []\n    \n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    \n    return interleaved_list\n",
        "def interleave_lists(list1, list2, list3):\n    result = []\n    \n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n        \n    return result\n",
        "def interleave_lists(list1, list2, list3):\n    result = []\n    \n    for i in range(len(list1)):\n        for lst in [list1, list2, list3]:\n            result.append(lst[i])\n    \n    return result\n",
        "def interleave_lists(list1, list2, list3):\n    interleaved_list = []\n    \n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    \n    return interleaved_list\n",
        "def interleave_lists(list1, list2, list3):\n    if len(list1) == len(list2) == len(list3):\n        result = []\n        for i in range(len(list1)):\n            result.append(list1[i])\n            result.append(list2[i])\n            result.append(list3[i])\n        return result\n    else:\n        return \"Error: All lists must be of the same length.\"\n"
    ],
    "MbppEval/579": [
        "def find_dissimilar(test_tup1, test_tup2):\n    dissimilar = []\n    for element in test_tup1:\n        if element not in test_tup2:\n            dissimilar.append(element)\n    for element in test_tup2:\n        if element not in test_tup1:\n            dissimilar.append(element)\n    return tuple(dissimilar)\n",
        "def find_dissimilar(test_tup1, test_tup2):\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    dissimilar_elements = set1.symmetric_difference(set2)\n    return tuple(dissimilar_elements)\n",
        "def find_dissimilar(test_tup1, test_tup2):\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    dissimilar_elements = set1.symmetric_difference(set2)\n    return tuple(dissimilar_elements)\n",
        "    return result_tuple\n",
        "def find_dissimilar(test_tup1, test_tup2):\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    dissimilar_elements = set1.symmetric_difference(set2)\n    return tuple(dissimilar_elements)\n"
    ],
    "MbppEval/580": [
        "def even_ele(test_tuple, even_fnc):\n    if not test_tuple:\n        return ()\n    \n    even_elements = []\n    \n    for elem in test_tuple:\n        if isinstance(elem, tuple):\n            even_elements.append(even_ele(elem, even_fnc))\n        elif even_fnc(elem):\n            even_elements.append(elem)\n    \n    return tuple(even_elements)\n",
        "def even_ele(test_tuple, even_fnc):\n    if not isinstance(test_tuple, tuple):\n        raise TypeError(\"Input should be a tuple\")\n    \n    def is_even(num):\n        try:\n            return even_fnc(num)\n        except Exception as e:\n            raise Exception(\"Error occurred while checking if the number is even: {}\".format(e))\n\n    def remove_odd_elements(tup):\n        new_tuple = ()\n        for elem in tup:\n            if isinstance(elem, tuple):\n                new_tuple += (remove_odd_elements(elem),)\n            else:\n                new_tuple += (elem,) if is_even(elem) else ()\n        return new_tuple\n\n    return remove_odd_elements(test_tuple)\n",
        "def even_ele(test_tuple, even_fnc):\n    result_tuple = ()\n    \n    for element in test_tuple:\n        if isinstance(element, tuple):\n            result_tuple += (even_ele(element, even_fnc),)\n        elif even_fnc(element):\n            result_tuple += (element,)\n    \n    return result_tuple\n",
        "def even_ele(test_tuple, even_fnc): \n    even_elements = []\n    for element in test_tuple:\n        if isinstance(element, tuple):\n            even_tuple = even_ele(element, even_fnc)\n            if even_tuple:\n                even_elements.append(even_tuple)\n        else:\n            if even_fnc(element):\n                even_elements.append(element)\n    return tuple(even_elements)\n",
        "def even_ele(test_tuple, even_fnc):\n    def extract_even(element):\n        if isinstance(element, tuple):\n            return tuple(extract_even(e) for e in element)\n        elif even_fnc(element):\n            return element\n\n    return extract_even(test_tuple)\n"
    ],
    "MbppEval/581": [
        "import math\n\ndef surface_Area(b, s):\n    l = math.sqrt(b**2 + s**2)\n    \n    area = b**2 + 2*b*l\n    \n    return area\n",
        "def surface_Area(b, s):\n    # Step 0: Calculate the perimeter of the base and the slant height\n    perimeter = 4 * b\n    slant = (b**2 + s**2)**0.5\n    \n    # Step 1: Calculate the lateral surface area\n    LSA = 0.5 * perimeter * slant\n    \n    # Step 2: Calculate the base area\n    B = b**2\n    \n    # Step 3: Calculate the total surface area\n    TSA = LSA + B\n    \n    return TSA\n",
        "def surface_Area(b, s):\n    base_area = b**2\n    lateral_area = 0.5 * b * s\n    return base_area + lateral_area\n",
        "def surface_Area(b, s):\n    # Calculate the area of the base of the pyramid\n    base_area = b**2\n\n    # Calculate the lateral surface area of the pyramid\n    lateral_area = 2 * b * s\n\n    # Calculate the total surface area of the pyramid\n    total_area = base_area + lateral_area\n    return total_area\n",
        "def surface_Area(b, s):\n    base_area = b ** 2\n    lateral_area = 4 * (b * s / 2)\n    total_area = base_area + lateral_area\n    return total_area\n"
    ],
    "MbppEval/582": [
        "def my_dict(dict1):\n    if not bool(dict1):\n        return True\n    else:\n        return False\n",
        "def my_dict(dict1):\n    return not bool(dict1)\n",
        "def my_dict(dict1):\n    if not dict1:\n        return True\n    else:\n        return False\n",
        "def my_dict(dict1):\n    return len(dict1) == 0\n",
        "def my_dict(dict1):\n    return not bool(dict1)\n"
    ],
    "MbppEval/583": [
        "def catalan_number(num):\n    if num < 0:\n        return \"Please provide a non-negative number for calculating Catalan number.\"\n\n    if num == 0:\n        return 1\n    else:\n        c = [0] * (num+1)\n        c[0] = 1\n\n        def calculate_catalan(n):\n            if c[n] != 0:\n                return c[n]\n\n            res = 0\n            for i in range(n):\n                res += calculate_catalan(i) * calculate_catalan(n - i - 1)\n            c[n] = res\n            return res\n\n        return calculate_catalan(num)\n",
        "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef catalan_number(n):\n    return factorial(2*n) // (factorial(n) * factorial(n+1))\n",
        "import math\n\ndef catalan_number(num):\n    return math.factorial(2*num) // (math.factorial(num + 1) * math.factorial(num))\n\nn = 10\ncatalan_10 = catalan_number(n)\n\n",
        "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef catalan_number(num):\n    result = 1\n    for i in range(1, num+1):\n        result = result * (2 * (2 * i - 1)) // (i + 1)\n    \n    return result\n",
        "def catalan_number(num):\n    result = 1\n\n    if num == 0:\n        return result\n\n    for i in range(1, num + 1):\n        result = result * 2 * (2 * i - 1) // (i + 1)\n\n    return result\n"
    ],
    "MbppEval/584": [
        "import re\n\ndef find_adverbs(text):\n    adverbs = re.finditer(r'\\b\\w+ly\\b', text)\n    \n    for adverb in adverbs:\n        return f\"{adverb.start()}-{adverb.end()}: {adverb.group()}\"\n",
        "import re\n\ndef find_adverbs(text):\n    adverb_pattern = r'\\b\\w+ly\\b'\n    match = re.search(adverb_pattern, text)\n    \n    if match:\n        start = match.start()\n        end = match.end()\n        adverb = match.group()\n        return f'{start}-{end}: {adverb}'\n",
        "import re\ndef find_adverbs(text):\n    adverbs = re.finditer(r'\\b\\w+ly\\b', text)\n    first_adverb = next((adverb for adverb in adverbs), None)\n    if first_adverb:\n        return f'{first_adverb.start()}-{first_adverb.end()}: {first_adverb.group()}'\n    else:\n        return \"No adverbs ending with 'ly' found in the text.\"\n",
        "import re\n\ndef find_adverbs(text):\n    adverb_regex = r'\\b\\w+ly\\b'\n    matches = re.finditer(adverb_regex, text)\n    \n    for match in matches:\n        position = f\"{match.start()}-{match.end()}\"\n        adverb = match.group()\n        \n        return f\"{position}: {adverb}\"\n",
        "import re\n\ndef find_adverbs(text):\n    words = re.findall(r'\\b\\w+\\b', text)\n    \n    for i, word in enumerate(words):\n        if word.endswith('ly') and len(word) > 2:\n            start = sum(len(words[j])+1 for j in range(i))\n            end = start + len(word)\n            return f\"{start}-{end}: {word}\"\n    \n    return \"No adverb ending with 'ly' found.\"\n\n# Testing the function with examples\n\n\n\n"
    ],
    "MbppEval/585": [
        "import heapq\n\ndef expensive_items(items, n):\n    heap = [(-item['price'], item) for item in items]\n    heapq.heapify(heap)\n    most_expensive = [heapq.heappop(heap)[1] for _ in range(n)]\n    return most_expensive\n",
        "import heapq\n\ndef expensive_items(items, n):\n    heap = []\n    \n    for item in items:\n        heapq.heappush(heap, (-item['price'], item))\n        if len(heap) > n:\n            heapq.heappop(heap)\n    \n    result = [heapq.heappop(heap)[1] for _ in range(n)][::-1]  # Extract items and sort by price in descending order\n    \n    return result\n",
        "import heapq\n\ndef expensive_items(items, n):\n    expensive = []\n    for item in items:\n        heapq.heappush(expensive, (-item['price'], item))\n    \n    most_expensive = [heapq.heappop(expensive)[1] for _ in range(n)]\n    \n    return most_expensive\n",
        "import heapq\n\ndef expensive_items(items, n):\n    most_expensive = []\n    heap = []\n\n    for item in items:\n        heapq.heappush(heap, (-item['price'], item))\n\n    for _ in range(n):\n        if heap:\n            most_expensive.append(heapq.heappop(heap)[1])\n    \n    most_expensive.reverse()\n\n    return most_expensive\n",
        "import heapq\n\ndef expensive_items(items, n):\n    neg_prices = [(-item['price'], item) for item in items]\n    heapq.heapify(neg_prices)\n    return [heapq.heappop(neg_prices)[1] for _ in range(n)]\n"
    ],
    "MbppEval/586": [
        "def split_Arr(l, n, k):\n    first_part = l[k:]\n    second_part = l[:k]\n    result = first_part + second_part\n    return result\n",
        "def split_Arr(l, n):\n    if n > len(l):\n        return \"Invalid input: n is greater than the length of the list.\"\n\n    second_part = l[n:]\n    first_part = l[:n]\n\n    return second_part + first_part\n",
        "def split_Arr(l, n):\n    part_to_move = l[:n]\n    remaining_part = l[n:]\n    result = remaining_part + part_to_move\n    return result\n",
        "def split_Arr(l, n):\n    if len(l) > n:\n        first_part = l[:n]\n        second_part = l[n:]\n        \n        new_list = second_part + first_part\n        return new_list\n",
        "def split_Arr(l, n):\n    if not l:\n        return \"Input list is empty, please provide a non-empty list.\"\n    \n    split_idx = n % len(l)\n    \n    # Split the list at the specified index, reorder, and concatenate\n    reordered_list = l[split_idx:] + l[:split_idx]\n    \n    return reordered_list\n"
    ],
    "MbppEval/587": [
        "def list_tuple(listx):\n    return tuple(listx)\n",
        "def list_tuple(listx):\n    tuple_result = tuple(listx)\n    return tuple_result\n",
        "def list_tuple(listx):\n    return tuple(listx)\n",
        "def list_tuple(listx):\n    return tuple(listx)\n",
        "def list_tuple(listx):\n    return tuple(listx)\n"
    ],
    "MbppEval/588": [
        "def big_diff(nums):\n    max_value = max(nums)\n    min_value = min(nums)\n    diff = max_value - min_value\n    return diff\n",
        "def big_diff(nums):\n    max_num = max(nums)\n    min_num = min(nums)\n    diff = max_num - min_num\n    return diff\n",
        "def big_diff(nums):\n    max_value = max(nums)\n    min_value = min(nums)\n    return max_value - min_value\n",
        "def big_diff(nums):\n    max_val = max(nums)\n    min_val = min(nums)\n    diff = max_val - min_val\n    return diff\n",
        "def big_diff(nums):\n    max_val = max(nums)\n    min_val = min(nums)\n    return max_val - min_val\n"
    ],
    "MbppEval/589": [
        "import math\n\ndef perfect_squares(a, b):\n    result = []\n    \n    for num in range(a, b+1):\n        if math.isqrt(num) ** 2 == num:\n            result.append(num)\n    \n    return result\n",
        "import math\n\ndef perfect_squares(a, b):\n    perfect_squares_list = []\n    smallest_square = math.ceil(math.sqrt(a))\n    largest_square = math.floor(math.sqrt(b))\n\n    for i in range(smallest_square, largest_square + 1):\n        square = i * i\n        if a <= square <= b:\n            perfect_squares_list.append(square)\n\n    return perfect_squares_list\n",
        "import math\n\ndef perfect_squares(a, b):\n    squares_list = []\n    \n    for i in range(a, b+1):\n        if math.isqrt(i) ** 2 == i:\n            squares_list.append(i)\n    \n    return squares_list\n",
        "def perfect_squares(a, b):\n    perfect_squares_list = []\n\n    for i in range(a, b+1):\n        if (i ** 0.5) % 1 == 0:\n            perfect_squares_list.append(i)\n    \n    return perfect_squares_list\n",
        "from math import sqrt\n\ndef perfect_squares(a, b):\n    result = []\n    for i in range(a, b+1):\n        if sqrt(i).is_integer():\n            result.append(i)\n    return result\n"
    ],
    "MbppEval/590": [
        "import cmath\n\ndef polar_rect(r, theta):\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (abs(complex(x, y)), cmath.phase(complex(x, y))), complex(x, y)\n",
        "import cmath\n\ndef polar_rect(r, theta):\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y\n",
        "import cmath\nimport math\n\ndef polar_rect(r, theta_degrees):\n    # Convert angle from degrees to radians\n    theta = math.radians(theta_degrees)\n    \n    # Calculate the rectangular coordinates\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    \n    return ((r, theta), complex(x, y))\n",
        "import cmath\n\ndef polar_rect(r, theta):\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    \n    return ((r, theta), (x, y))\n\n# Testing the function with examples\n\n\n\n",
        "import cmath\n\ndef polar_rect(r, theta):\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x, y)\n"
    ],
    "MbppEval/591": [
        "def swap_List(newList):\n    if len(newList) > 1:\n        new_list = newList.copy()\n        new_list[0], new_list[-1] = new_list[-1], new_list[0]\n        return new_list\n    else:\n        return newList\n",
        "def swap_List(newList): \n    if len(newList) <= 1:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n",
        "def swap_List(newList):\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n",
        "def swap_List(newList): \n    if len(newList) < 2:  \n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n",
        "def swap_List(newList):\n    if not newList:\n        return \"Empty list\"\n    \n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList\n"
    ],
    "MbppEval/592": [
        "import math\n\ndef binomial_coeff(n, k):\n    return math.factorial(n) // (math.factorial(k) * math.factorial(n - k))\n\ndef sum_of_product(n):\n    result = sum(binomial_coeff(n, k) * binomial_coeff(n, k + 1) for k in range(1, n + 1))\n    return result\n",
        "from math import factorial\n\ndef sum_of_product(n):\n    sum_product = 0\n    for k in range(1, n):\n        product = factorial(n) / (factorial(k) * factorial(n - k))\n        sum_product += product * factorial(k) * factorial(n - k)\n    return sum_product\n",
        "def sum_of_product(n):\n    def calculate_binomial_coeff(n, k):\n        if k == 0 or k == n:\n            return 1\n        else:\n            return calculate_binomial_coeff(n-1, k-1) + calculate_binomial_coeff(n-1, k)\n\n    if n == 0:\n        return 0\n\n    total_sum = 0\n    for i in range(n):\n        total_sum += calculate_binomial_coeff(n-1, i) * calculate_binomial_coeff(n-1, i+1)\n\n    return total_sum\n",
        "def binomial_coeff(n, k):\n    if k == 0 or k == n:\n        return 1\n    if k > n - k:\n        k = n - k\n    res = 1\n    for i in range(k):\n        res = res * (n - i) // (i + 1)\n    return res\n\ndef sum_of_product(n):\n    total_sum = 0\n    if n < 2:\n        return n\n    for k in range(n - 1):\n        total_sum += binomial_coeff(n, k) + binomial_coeff(n, k + 1)\n    return total_sum\n",
        "import math\n\ndef binomial_coeff(n, k):\n    return math.factorial(n) // (math.factorial(k) * math.factorial(n - k))\n\ndef sum_of_product(n):\n    result = 0\n    for i in range(n - 1):\n        result += binomial_coeff(n, i) * binomial_coeff(n, i + 1)\n    return result\n"
    ],
    "MbppEval/593": [
        "import re\n\ndef removezero_ip(ip):\n    octets = ip.split('.')\n    octets = [re.sub(r'^0+', '', octet) for octet in octets]\n    modified_ip = '.'.join(octets)\n    return modified_ip\n",
        "def remove_leading_zeroes(component):\n    return str(int(component))\n\ndef removezero_ip(ip):\n    components = ip.split(\".\")\n    components_no_zeroes = [remove_leading_zeroes(component) for component in components]\n    modified_ip = \".\".join(components_no_zeroes)\n    \n    return modified_ip\n",
        "def removezero_ip(ip):\n    parts = ip.split('.')\n    updated_parts = [str(int(part)) for part in parts]\n    updated_ip = '.'.join(updated_parts)\n    return updated_ip\n",
        "import re\n\ndef removezero_ip(ip):\n    octets = ip.split('.')\n    \n    cleaned_octets = [re.sub(r'^0+', '', octet) for octet in octets]\n    \n    new_ip = '.'.join(cleaned_octets)\n    \n    return new_ip\n",
        "import re\ndef removezero_ip(ip):\n    parts = ip.split('.')\n    \n    # Remove leading zeros from each part\n    parts = [str(int(part)) for part in parts]\n    \n    # Join the parts back together using periods\n    modified_ip = '.'.join(parts)\n    \n    return modified_ip\n"
    ],
    "MbppEval/594": [
        "def diff_even_odd(list1):\n    first_even = None\n    first_odd = None\n    \n    for num in list1:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n    \n    if first_even is not None and first_odd is not None:\n        return abs(first_even - first_odd)\n    else:\n        return 0\n",
        "def diff_even_odd(list1):\n    first_even = None\n    first_odd = None\n\n    for num in list1:\n        if num % 2 == 0:\n            if first_even is None:\n                first_even = num\n        else:\n            if first_odd is None:\n                first_odd = num\n\n    if first_even is not None and first_odd is not None:\n        return abs(first_even - first_odd)\n    else:\n        return 0\n",
        "def diff_even_odd(list1):\n    even = None\n    odd = None\n\n    for num in list1:\n        if num % 2 == 0 and even is None:\n            even = num\n        elif num % 2 != 0 and odd is None:\n            odd = num\n\n        if even is not None and odd is not None:\n            break\n    \n    if even is not None and odd is not None:\n        return abs(even - odd)\n    else:\n        return None\n",
        "def diff_even_odd(list1):\n    even_index = None\n    odd_index = None\n    \n    for i in range(len(list1)):\n        if list1[i] % 2 == 0 and even_index is None:\n            even_index = i\n        elif list1[i] % 2 != 0 and odd_index is None:\n            odd_index = i\n            \n        if even_index is not None and odd_index is not None:\n            break\n    \n    if even_index is not None and odd_index is not None:\n        return abs(list1[even_index] - list1[odd_index])\n",
        "def diff_even_odd(list1):\n    even_index = None\n    odd_index = None\n\n    for i, num in enumerate(list1):\n        if num % 2 == 0:\n            even_index = i\n            break\n\n    for i, num in enumerate(list1):\n        if num % 2 != 0:\n            odd_index = i\n            break\n\n    if even_index is not None and odd_index is not None:\n        diff = abs(list1[even_index] - list1[odd_index])\n        return diff\n    else:\n        return None\n"
    ],
    "MbppEval/595": [
        "def min_Swaps(str1, str2):\n    swap_count = 0\n    \n    for bit1, bit2 in zip(str1, str2):\n        if bit1 != bit2:\n            swap_count += 1\n            \n    if str1.count('1') != str2.count('1'):\n        return \"Not Possible\"\n    \n    return swap_count\n",
        "def min_Swaps(str1, str2):\n    if len(str1) != len(str2):\n        return \"Not Possible\"\n\n    swaps_count = 0\n\n    for char1, char2 in zip(str1, str2):\n        if char1 != char2:\n            swaps_count += 1\n    \n    if swaps_count % 2 != 0:\n        return \"Not Possible\"\n    \n    return swaps_count\n",
        "def min_Swaps(str1, str2):\n    if len(str1) != len(str2):\n        return \"Not Possible\"\n    \n    swap_count = 0\n\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            swap_count += 1\n    \n    return swap_count\n",
        "def min_Swaps(str1, str2):\n    if len(str1) != len(str2):\n        return \"Not Possible\"\n    \n    swap_count = 0\n    \n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            swap_count += 1\n    \n    if swap_count % 2 != 0:\n        return \"Not Possible\"\n    \n    return swap_count // 2\n",
        "def min_Swaps(str1, str2):\n    if len(str1) != len(str2):\n        return \"Not Possible\"\n    \n    swap_count = 0\n\n    for char1, char2 in zip(str1, str2):\n        if char1 != char2:\n            swap_count += 1\n    \n    if swap_count % 2 == 0:\n        return swap_count // 2\n    else:\n        return \"Not Possible\"\n"
    ],
    "MbppEval/596": [
        "import sys\n\ndef tuple_size(tuple_list):\n    return sys.getsizeof(tuple_list)\n    \n# Test examples\n\n\n\n",
        "import sys\n\ndef tuple_size(tuple_list):\n    total_size = sys.getsizeof(tuple_list)\n    for item in tuple_list:\n        total_size += sys.getsizeof(item)\n    return total_size\n",
        "import sys\n\ndef tuple_size(tuple_list):\n    total_size = 0\n    for item in tuple_list:\n        total_size += sys.getsizeof(item)\n    return total_size\n\n# Test the function\n\n",
        "import sys \n\ndef tuple_size(tuple_list):\n    return sys.getsizeof(tuple_list)\n",
        "import sys\n\ndef tuple_size(tuple_list):\n    return sys.getsizeof(tuple_list)\n"
    ],
    "MbppEval/597": [
        "def merge_sorted_arrays(arr1, arr2):\n    merged = []\n    i = 0\n    j = 0\n\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            merged.append(arr1[i])\n            i += 1\n        else:\n            merged.append(arr2[j])\n            j += 1\n\n    while i < len(arr1):\n        merged.append(arr1[i])\n        i += 1\n\n    while j < len(arr2):\n        merged.append(arr2[j])\n        j += 1\n\n    return merged\n",
        "def find_kth(arr1, arr2, k):\n    # Merge the two sorted arrays\n    merged_arr = []\n    i = 0\n    j = 0\n    \n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            merged_arr.append(arr1[i])\n            i += 1\n        else:\n            merged_arr.append(arr2[j])\n            j += 1\n\n    # Handle remaining elements in arr1 and arr2\n    merged_arr.extend(arr1[i:])\n    merged_arr.extend(arr2[j:])\n    \n    # Return the element at index (k-1) for 0-based indexing\n    return merged_arr[k - 1]\n",
        "def find_kth(arr1, arr2, k):\n    if k > len(arr1) + len(arr2) or k < 1:\n        return None\n    \n    i = 0  # Pointer for arr1\n    j = 0  # Pointer for arr2\n    \n    for _ in range(k):\n        if i < len(arr1) and (j >= len(arr2) or arr1[i] < arr2[j]):\n            kth = arr1[i]\n            i += 1\n        else:\n            kth = arr2[j]\n            j += 1\n    \n    return kth\n",
        "def find_kth(arr1, arr2, k):\n    merged_arr = sorted(arr1 + arr2)\n    return merged_arr[k-1]\n",
        "def find_kth(arr1, arr2, k):\n    merged = sorted(arr1 + arr2)\n    return merged[k-1]\n"
    ],
    "MbppEval/598": [
        "def armstrong_number(number):\n    num_str = str(number)\n    num_digits = len(num_str)\n    \n    sum_powered_digits = sum(int(digit)**num_digits for digit in num_str)\n    \n    return sum_powered_digits == number\n",
        "def armstrong_number(number):\n    sum_of_cubes = 0\n    number_str = str(number)\n    \n    for digit_str in number_str:\n        digit = int(digit_str)\n        cube = digit ** 3\n        sum_of_cubes += cube\n\n    return sum_of_cubes == number\n",
        "def armstrong_number(number):\n    total = 0\n    num_str = str(number)\n    \n    num_digits = len(num_str)\n    \n    for digit in num_str:\n        total += int(digit) ** num_digits\n    \n    return total == number\n",
        "def armstrong_number(number):\n    num_str = str(number)  # Convert number to a string\n\n    total = 0\n    for digit in num_str:\n        digit_int = int(digit)\n        total += digit_int ** len(num_str)\n\n    if total == number:\n        return True\n    else:\n        return False\n\n# Testing the function\n\n\n\n",
        "def armstrong_number(number):\n    num_str = str(number)\n    \n    total_digits = len(num_str)\n    armstrong_sum = sum(int(digit)**total_digits for digit in num_str)\n    \n    return armstrong_sum == number\n"
    ],
    "MbppEval/599": [
        "def sum_average(number):\n    total_sum = 0\n    average = 0\n\n    total_sum = (number * (number + 1)) // 2\n    average = total_sum / number\n\n    return total_sum, average\n",
        "def sum_average(number):\n    sum = 0\n    \n    for i in range(1, number+1):\n        sum += i\n        \n    average = sum / number\n    \n    return sum, average\n\n# Test cases\n\n\n\n",
        "def sum_average(number):\n    sum_natural_numbers = (number * (number + 1)) // 2\n    average = sum_natural_numbers / number\n    return sum_natural_numbers, average\n",
        "def sum_average(number):\n    sum_of_numbers = (number * (number + 1)) // 2\n    average_of_numbers = sum_of_numbers / number\n    return sum_of_numbers, average_of_numbers\n",
        "def sum_average(number):\n    sum_numbers = number * (number + 1) // 2\n    average = sum_numbers / number\n    return (sum_numbers, average)\n"
    ],
    "MbppEval/600": [
        "def is_Even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n",
        "def is_Even(n):\n    return n % 2 == 0\n",
        "def is_Even(n):\n    return n % 2 == 0\n",
        "def is_Even(n):\n    return n % 2 == 0\n",
        "def is_Even(n):\n    return n % 2 == 0\n"
    ],
    "MbppEval/602": [
        "def first_repeated_char(str1):\n    seen_chars = set()\n\n    for char in str1:\n        if char in seen_chars:\n            return char\n        seen_chars.add(char)\n\n    return \"None\"\n",
        "def first_repeated_char(str1):\n    char_count = {}\n    \n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1\n\n    return \"None\"\n",
        "def first_repeated_char(str1):\n    seen_chars = set()\n    \n    for char in str1:\n        if char in seen_chars:\n            return char\n        seen_chars.add(char)\n    \n    return None\n",
        "def first_repeated_char(str1):\n    seen_chars = set()\n\n    for char in str1:\n        if char in seen_chars:\n            return char\n        \n        seen_chars.add(char)\n    \n    return \"None\"\n",
        "def first_repeated_char(str1):\n    seen_chars = set()\n    \n    for char in str1:\n        if char in seen_chars:\n            return char\n        \n        seen_chars.add(char)\n    \n    return \"None\"\n"
    ],
    "MbppEval/603": [
        "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef get_ludic(n):\n    ludic_numbers = []\n    \n    for num in range(1, n+1):\n        if is_prime(num):\n            if num <= n:\n                ludic_numbers.append(num)\n    \n    return ludic_numbers\n",
        "import math\n\ndef is_ludic(num):\n    if num == 1:\n        return True\n    if num % 2 == 0:\n        return True\n    \n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    \n    return True\n\ndef get_ludic(n):\n    ludic_numbers = []\n    \n    for num in range(1, n+1):\n        if is_ludic(num):\n            ludic_numbers.append(num)\n    \n    return ludic_numbers\n",
        "def get_ludic(n):\n    ludic_numbers = []\n\n    for num in range(1, n+1):\n        lucid = True\n\n        if num != 1:\n            for i in ludic_numbers[1:]:\n                if num % i == 0:\n                    lucid = False\n                    break\n\n        if lucid:\n            ludic_numbers.append(num)\n\n    return ludic_numbers\n",
        "def get_ludic(n):\n    ludic_numbers = []\n    \n    for num in range(1, n+1):\n        is_lucid = True\n        for ludic_num in ludic_numbers:\n            if num % ludic_num == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            ludic_numbers.append(num)\n    \n    return ludic_numbers\n",
        "def get_ludic(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    ludic_numbers = []\n    for i in range(1, n + 1):\n        if is_prime(i):\n            ludic_numbers.append(i)\n\n    return ludic_numbers\n"
    ],
    "MbppEval/604": [
        "def reverse_words(s):\n    '''\n    Write a function to reverse words separated by spaces in a given string.\n\n    Examples:\n    reverse_words(\"python program\") == (\"program python\")\n    reverse_words(\"java language\") == (\"language java\")\n    reverse_words(\"indian man\") == (\"man indian\")\n    '''\n    \n    if not s:\n        return \"\"\n    \n    words = s.split()\n    reversed_words = words[::-1]\n    reversed_string = \" \".join(reversed_words)\n    \n    return reversed_string\n",
        "def reverse_words(s):\n    words = s.split()\n    return \" \".join(reversed(words))\n",
        "def reverse_words(s):\n    words = s.split(' ')\n    reversed_words = list(reversed(words))\n    reversed_string = ' '.join(reversed_words)\n    return reversed_string\n",
        "def reverse_words(s):\n    words = s.split()\n    reversed_words = words[::-1]\n    reversed_str = ' '.join(reversed_words)\n    return reversed_str\n",
        "def reverse_words(s):\n    word_list = s.split()\n    reversed_words = ' '.join(word_list[::-1])\n    return reversed_words\n"
    ],
    "MbppEval/605": [
        "import math\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    \n    if num == 2:\n        return True\n    \n    for i in range(2, math.isqrt(num) + 1):\n        if num % i == 0:\n            return False\n    \n    return True\n",
        "import math\n\ndef prime_num(num):\n    if num < 2:\n        return False\n    \n    if num == 2:\n        return True\n    \n    if num % 2 == 0:\n        return False\n    \n    for i in range(3, int(math.sqrt(num)) + 1, 2):\n        if num % i == 0:\n            return False\n    \n    return True\n",
        "import math\n\ndef is_prime_num(num):\n    if num <= 1:\n        return False\n    \n    num = abs(num)\n\n    if num in (2, 3):\n        return True\n    \n    for i in range(2, math.isqrt(num) + 1):\n        if num % i == 0:\n            return False\n    \n    return True\n",
        "import math\n\ndef prime_num(num):\n    if num < 2:\n        return False\n\n    if num == 2:\n        return True\n",
        "import math\n\ndef is_prime(num):\n    if num < 2:\n        return False\n\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n\n    return True\n"
    ],
    "MbppEval/606": [
        "import math\n\ndef radian_degree(degree):\n    radians = degree * (math.pi / 180)\n    return radians\n",
        "import math\n\ndef radian_degree(degree):\n    radians = degree * (math.pi / 180)\n    return radians\n",
        "import math\n\ndef radian_degree(degree):\n    radians = degree * (math.pi / 180)\n    return radians\n",
        "import math\n\ndef radian_degree(degree):\n    radians = degree * (math.pi / 180)\n    return radians\n",
        "import math\ndef radian_degree(degree):\n    radians = degree * math.pi / 180\n    return radians\n"
    ],
    "MbppEval/607": [
        "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    \n    return None\n",
        "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n\n    Examples:\n    find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\n    find_literals('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)\n    find_literals('Hardest choices required strongest will', 'will') == ('will', 35, 39)\n    '''\n    match = re.search(pattern, text)\n    if match:\n        matched_substr = match.group()\n        start_index = match.start()\n        end_index = match.end() - 1  # Adjust end index to correctly represent the matched substring\n        return matched_substr, start_index, end_index\n    else:\n        return None\n",
        "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        start_index = match.start()\n        end_index = match.end()\n        matching_substring = match.group()\n        return matching_substring, start_index, end_index\n",
        "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        start_index = match.start()\n        end_index = match.end()\n        matched_substring = match.group()\n        return matched_substring, start_index, end_index\n",
        "import re\n\ndef find_literals(text, pattern):\n    '''\n    Search a string for a regex pattern and return the matching substring, start index, and end index.\n\n    Args:\n    text (str): The input string to search.\n    pattern (str): The regex pattern to search for in the text.\n\n    Returns:\n    tuple: A tuple containing the matching substring, start index, and end index. If no match is found, returns None.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    return None\n"
    ],
    "MbppEval/608": [
        "def generate_bell_triangle(rows):\n    bell_triangle = [[1]]\n    for i in range(1, rows):\n        prev_row = bell_triangle[-1]\n        current_row = [prev_row[-1]]\n        for j in range(i):\n            current_row.append(current_row[j] + prev_row[j])\n        bell_triangle.append(current_row)\n    return bell_triangle\n\ndef bell_Number(n):\n    triangle = generate_bell_triangle(n)\n    return triangle[n - 1][0]\n",
        "def bell_Number(n):\n    import math\n    bell_triangle = [[0 for _ in range(n)] for _ in range(n)]\n    bell_triangle[0][0] = 1\n    for i in range(1, n):\n        bell_triangle[i][0] = bell_triangle[i-1][i-1]\n        for j in range(1, i+1):\n            bell_triangle[i][j] = bell_triangle[i][j-1] + bell_triangle[i-1][j-1]\n    return bell_triangle[n-1][-1]\n",
        "    return bell_triangle[n][-1]\n",
        "from math import comb\n\ndef stirling_second(n, k):\n    if n == 0 and k == 0:\n        return 1\n    if n == 0 or k == 0:\n        return 0\n    return k*stirling_second(n-1, k) + stirling_second(n-1, k-1)\n\ndef bell_Number(n):\n    bell_numbers = [1, 1]  # Initializing Bell numbers for n = 0, 1\n    if n <= 1:\n        return bell_numbers[n]\n    \n    for i in range(2, n+1):\n        bell_numbers.append(sum(stirling_second(i-1, j)*bell_numbers[j] for j in range(i)))\n    \n    return bell_numbers[n]\n",
        "def bell_Number(n): \n    if n < 0:\n        return -1\n    \n    bell = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    bell[0][0] = 1\n    \n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n\n    return bell[n][n]\n"
    ],
    "MbppEval/610": [
        "def remove_kth_element(list1, k):\n    return list1[:k] + list1[k+1:]\n",
        "def remove_kth_element(list1, k):\n    new_list = []\n    for i in range(len(list1)):\n        if i != k-1:\n            new_list.append(list1[i])\n    return new_list\n",
        "def remove_kth_element(list1, k):\n    modified_list = []\n    \n    for i in range(len(list1)):\n        if i != k - 1:\n            modified_list.append(list1[i])\n    \n    return modified_list\n",
        "def remove_kth_element(list1, k):\n    if k >= 0 and k < len(list1):\n        return list1[:k] + list1[k+1:]\n    else:\n        return list1\n",
        "def remove_kth_element(list1, k):\n    list_copy = list1[:]\n    del list_copy[k]\n    return list_copy\n"
    ],
    "MbppEval/611": [
        "def max_of_nth(test_list, N):\n    col_values = [row[N-1] for row in test_list]\n    max_val = max(col_values)\n    return max_val\n",
        "def max_of_nth(test_list, N):\n    if not test_list:  # Step 1\n        return None\n    \n    if N < 0 or N >= len(test_list[0]):  # Step 2\n        return None\n    \n    column_values = [row[N] for row in test_list]  # Step 3\n    \n    max_value = max(column_values)  # Step 4\n    \n    return max_value  # Step 5\n",
        "def max_of_nth(test_list, N):\n    column_values = []\n    for row in test_list:\n        column_values.append(row[N])\n    max_value = max(column_values)\n    return max_value\n",
        "def max_of_nth(test_list, N):\n    max_val = float('-inf')\n    for sublist in test_list:\n        if sublist[N] > max_val:\n            max_val = sublist[N]\n    return max_val\n",
        "def max_of_nth(test_list, N):\n    max_val = float('-inf')  # Initialize max_val to negative infinity to handle negative values\n    for lst in test_list:\n        extracted_val = lst[N-1]  # Extract the element at index N-1\n        if extracted_val > max_val:\n            max_val = extracted_val\n    return max_val\n"
    ],
    "MbppEval/612": [
        "def merge(lst):\n    list1 = []\n    list2 = []\n    \n    for sub_lst in lst:\n        list1.append(sub_lst[0])\n        list2.append(sub_lst[1])\n    \n    return [list1, list2]\n",
        "def merge(lst):  \n    result1 = []\n    result2 = []\n    \n    for sublist in lst:\n        result1.append(sublist[0])\n        result2.append(sublist[1])\n        \n    return [result1, result2]\n",
        "def merge(lst):  \n    first_list = []\n    second_list = []\n    \n    for sub_list in lst:\n        first_list.append(sub_list[0])\n        second_list.append(sub_list[1])\n    \n    return [first_list, second_list]\n",
        "def merge(lst):\n    first_elements = []\n    second_elements = []\n    \n    for sublist in lst:\n        first_elements.append(sublist[0])\n        second_elements.append(sublist[1])\n    \n    return [first_elements, second_elements]\n",
        "def merge(lst):\n    result1 = []\n    result2 = []\n    for sublst in lst:\n        result1.append(sublst[0])\n        result2.append(sublst[1])\n    return [result1, result2]\n"
    ],
    "MbppEval/614": [
        "def cumulative_sum(test_list):\n    total_sum = 0\n    \n    for tuple_values in test_list:\n        for value in tuple_values:\n            total_sum += value\n    \n    return total_sum\n",
        "def cummulative_sum(test_list):\n    total_sum = 0\n\n    for tup in test_list:\n        sum_tuple = sum(tup)\n        total_sum += sum_tuple\n\n    return total_sum\n",
        "def cummulative_sum(test_list):\n    total_sum = 0\n    for tup in test_list:\n        for val in tup:\n            total_sum += val\n    return total_sum\n",
        "def cummulative_sum(test_list):\n    return sum(sum(tpl) for tpl in test_list)\n",
        "def cummulative_sum(test_list):\n    total_sum = 0\n    for tup in test_list:\n        tuple_sum = sum(tup)\n        total_sum += tuple_sum\n    return total_sum\n"
    ],
    "MbppEval/615": [
        "def average_tuple(nums):\n    avg_list = []\n    for tup in nums:\n        total = sum(tup)\n        avg = round(total / len(tup), 2)\n        avg_list.append(avg)\n    return avg_list\n",
        "def average_tuple(nums):\n    averages = []\n    \n    for num_tuple in nums:\n        sum_tuple = sum(num_tuple)\n        avg_tuple = sum_tuple / len(num_tuple)\n        averages.append(avg_tuple)\n        \n    return averages\n",
        "def average_tuple(nums):\n    average_values = []\n    \n    for tuple in nums:\n        avg = sum(tuple) / len(tuple)\n        average_values.append(avg)\n    \n    return average_values\n",
        "def average_tuple(nums):\n    average_values = []\n\n    for tpl in nums:\n        avg = sum(tpl) / len(tpl)\n        average_values.append(avg)\n\n    return average_values\n",
        "def average_tuple(nums):\n    averages = []\n\n    for num_tuple in nums:\n        avg = sum(num_tuple) / len(num_tuple)\n        averages.append(avg)\n\n    return averages\n"
    ],
    "MbppEval/616": [
        "def tuple_modulo(test_tup1, test_tup2):\n    if len(test_tup1) != len(test_tup2):\n        return \"Error: Input tuples must be of the same length.\"\n    \n    result = []\n    for ele1, ele2 in zip(test_tup1, test_tup2):\n        result.append(ele1 % ele2)\n    \n    return tuple(result)\n",
        "def tuple_modulo(test_tup1, test_tup2):\n    if len(test_tup1) != len(test_tup2):\n        return \"Error: Tuples must be of the same length.\"\n    \n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    \n    return tuple(result)\n",
        "def tuple_modulo(test_tup1, test_tup2):\n    if len(test_tup1) != len(test_tup2):\n        return \"Error: Input tuples must be of the same length.\"\n\n    result = []\n\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n\n    return tuple(result)\n",
        "def tuple_modulo(test_tup1, test_tup2):\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Input tuples must have the same length\")\n    \n    result_list = []\n    \n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] % test_tup2[i])\n\n    return tuple(result_list)\n",
        "def tuple_modulo(test_tup1, test_tup2):\n    result = []\n    \n    for val1, val2 in zip(test_tup1, test_tup2):\n        result.append(val1 % val2)\n\n    return tuple(result)\n"
    ],
    "MbppEval/617": [
        "import math\n\ndef min_Jumps(steps, d):\n    total_distance = math.sqrt(d**2)\n    jumps = total_distance / steps\n    return jumps\n",
        "import math\n\ndef min_Jumps(steps, d): \n    if d == 0:\n        return 0\n    \n    distance = math.sqrt(d**2)\n    jumps = distance / steps\n    return round(jumps, 1)\n\n# Testing the function with given examples\n\n\n\n",
        "import math\n\ndef min_Jumps(steps, d): \n    distance = abs(d) # Calculate the distance from origin to point (d, 0)\n    jumps_required = distance / steps # Calculate the number of jumps required to cover that distance\n    return jumps_required\n",
        "import math\n\ndef min_Jumps(steps, x, y):\n    x_distance = abs(x)\n    y_distance = abs(y)\n\n    total_distance = math.sqrt(x_distance**2 + y_distance**2)\n\n    jumps = total_distance / steps\n\n    if total_distance % steps == 0:\n        return jumps\n    else:\n        return jumps + 0.5\n",
        "def min_Jumps(steps, d): \n    total_distance = abs(d)\n    number_of_jumps = total_distance / steps\n    return number_of_jumps\n\n# Test the function\n\n"
    ],
    "MbppEval/618": [
        "def div_list(nums1, nums2):\n    result = []\n    \n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    \n    return result\n",
        "def div_list(nums1, nums2):\n    result = []\n    \n    for num1, num2 in zip(nums1, nums2):\n        division_result = num1 / num2\n        result.append(division_result)\n    \n    return result\n",
        "def div_list(nums1, nums2):\n    result = []\n    \n    for num1, num2 in zip(nums1, nums2):\n        result.append(num1 / num2)\n    \n    return result\n",
        "def div_list(nums1, nums2):\n    return [num1 / num2 for num1, num2 in zip(nums1, nums2)]\n",
        "def div_list(nums1, nums2):\n    division_results = []\n    \n    for num1, num2 in zip(nums1, nums2):\n        result = num1 / num2\n        division_results.append(result)\n    \n    return division_results\n"
    ],
    "MbppEval/619": [
        "def move_num(test_str):\n    non_numbers = []\n    numbers = []\n    \n    for char in test_str:\n        if char.isnumeric():\n            numbers.append(char)\n        else:\n            non_numbers.append(char)\n    \n    return ''.join(non_numbers) + ''.join(numbers)\n",
        "def move_num(test_str):\n    result_str = \"\"\n    non_numeric = \"\"\n    numeric = \"\"\n\n    for char in test_str:\n        if char.isdigit():\n            numeric += char\n        else:\n            non_numeric += char\n    \n    result_str = non_numeric + numeric\n\n    return result_str\n",
        "def move_num(test_str):\n    alpha_str = \"\"\n    num_str = \"\"\n\n    for char in test_str:\n        if char.isnumeric():\n            num_str += char\n        else:\n            alpha_str += char\n\n    alpha_num_str = alpha_str + num_str\n    return alpha_num_str\n",
        "def move_num(test_str):\n    alphabets = \"\"\n    numbers = \"\"\n    \n    for char in test_str:\n        if char.isnumeric():\n            numbers += char\n        else:\n            alphabets += char\n\n    return alphabets + numbers\n",
        "def move_num(test_str):\n    result_letters = ''\n    result_numbers = ''\n    \n    for char in test_str:\n        if char.isdigit():  # Check if the character is a number\n            result_numbers += char\n        else:\n            result_letters += char\n    \n    return result_letters + result_numbers\n"
    ],
    "MbppEval/620": [
        "def largest_subset(a):\n    max_subset = 0\n    \n    for i in range(len(a)):\n        subset = set()\n        \n        subset.add(a[i])\n        \n        for j in range(i+1, len(a)):\n            if a[j] % a[i] == 0 or a[i] % a[j] == 0:\n                subset.add(a[j])\n        \n        max_subset = max(max_subset, len(subset))\n    \n    return max_subset\n",
        "def largest_subset(a):\n    max_subset_size = 0\n    \n    for num in a:\n        subset_size = 0\n        for other_num in a:\n            if num != other_num and num % other_num == 0:\n                subset_size += 1\n        \n        max_subset_size = max(max_subset_size, subset_size)\n    \n    return max_subset_size\n",
        "def largest_subset(a):\n    max_subset_size = 0\n    \n    for i in range(len(a)):\n        subset = set([a[i])\n        \n        for j in range(i + 1, len(a)):\n            if all([a[j] % num == 0 for num in subset]):\n                subset.add(a[j])\n        \n        max_subset_size = max(max_subset_size, len(subset))\n    \n    return max_subset_size\n",
        "import itertools\n\ndef largest_subset(numbers):\n    def is_divisible(a, b):\n        if a % b == 0 or b % a == 0:\n            return True\n        return False\n\n    subset_size = 0\n\n    for i in range(1, len(numbers)+1):\n        for subset in itertools.combinations(numbers, i):\n            valid_subset = all(is_divisible(x, y) for x, y in itertools.combinations(subset, 2))\n            if valid_subset and len(subset) > subset_size:\n                subset_size = len(subset)\n\n    return subset_size\n\n# Test the function\n\n",
        "def largest_subset(a):\n    max_subset_size = 0\n\n    for num in a:\n        subset_size = 1  # At least one element in the subset\n        subset = [num]  # Initialize subset with num\n\n        for i in range(a.index(num) + 1, len(a)):\n            if all(a[i] % ele == 0 for ele in subset):\n                subset.append(a[i])\n                subset_size += 1\n\n        max_subset_size = max(max_subset_size, subset_size)\n\n    return max_subset_size\n"
    ],
    "MbppEval/622": [
        "def get_median(arr1, arr2, n):\n    combined_arr = arr1 + arr2\n    combined_arr.sort()\n    \n    if n % 2 == 0:\n        mid1 = combined_arr[n // 2]\n        mid2 = combined_arr[n // 2 - 1]\n        median = (mid1 + mid2) / 2\n    else:\n        median = combined_arr[n // 2]\n    \n    return median\n",
        "def merge_sorted_lists(arr1, arr2):\n    merged = []\n    \n    i, j = 0, 0\n    \n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            merged.append(arr1[i])\n            i += 1\n        else:\n            merged.append(arr2[j])\n            j += 1\n    \n    while i < len(arr1):\n        merged.append(arr1[i])\n        i += 1\n    \n    while j < len(arr2):\n        merged.append(arr2[j])\n        j += 1\n    \n    return merged\n\ndef get_median(arr1, arr2, n):\n    merged_list = merge_sorted_lists(arr1, arr2)\n    middle_index = n // 2 if n % 2 != 0 else (n // 2) - 1\n\n    if n % 2 != 0:\n        return float(merged_list[middle_index])\n    else:\n        return (merged_list[middle_index] + merged_list[middle_index - 1]) / 2\n\n# Test the get_median function\narr1 = [3, 6, 14, 23, 36, 42]\narr2 = [2, 18, 27, 39, 49, 55]\nmedian = get_median(arr1, arr2, 6)\n\n",
        "def get_median(arr1, arr2, n):\n    combined_list = sorted(arr1 + arr2)\n    return combined_list\n",
        "def get_median(arr1, arr2, n):\n    combined_arr = sorted(arr1 + arr2)\n    if n % 2 == 0:\n        median = (combined_arr[n//2 - 1] + combined_arr[n//2]) / 2\n    else:\n        median = combined_arr[n//2]\n        \n    return median\n",
        "def get_median(arr1, arr2, n):\n    merged_list = arr1 + arr2\n    sorted_merged_list = sorted(merged_list)\n    middle_index = n // 2\n    if n % 2 == 1:\n        return sorted_merged_list[middle_index]\n    else:\n        return (sorted_merged_list[middle_index - 1] + sorted_merged_list[middle_index]) / 2\n"
    ],
    "MbppEval/623": [
        "def nth_nums(nums, n):\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result\n",
        "def nth_nums(nums, n):\n    result = []\n    \n    for num in nums:\n        result.append(num**n)\n    \n    return result\n",
        "def nth_nums(nums, n):\n    result = []\n\n    for num in nums:\n        result.append(num**n)\n\n    return result\n",
        "def nth_nums(nums, n):\n    result = []\n\n    for num in nums:\n        result.append(num**n)\n\n    return result\n",
        "def nth_nums(nums, n):\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result\n"
    ],
    "MbppEval/624": [
        "def is_upper(string):\n    return string.upper()\n",
        "def is_upper(string):\n    return string.upper()\n",
        "def is_upper(string):\n    return string.upper()\n",
        "def is_upper(string):\n    return string.upper()\n",
        "def is_upper(string):\n    if string.isupper():\n        return string\n    else:\n        return string.upper()\n"
    ],
    "MbppEval/625": [
        "def swap_List(newList):\n    if len(newList) > 1:\n        new_list = newList[:]  # Create a copy of the original list to avoid modifying the input list directly\n        new_list[0], new_list[-1] = new_list[-1], new_list[0]  # Swap the first and last elements\n        return new_list\n    return newList  # Return the original list if its length is 0 or 1\n",
        "def swap_List(newList):\n    if len(newList) < 2:\n        return newList\n    \n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList\n",
        "def swap_List(newList):\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList\n",
        "def swap_List(newList):\n    total_elements = len(newList)\n    \n    if total_elements >= 2:\n        newList[0], newList[-1] = newList[-1], newList[0]\n\n    return newList\n",
        "def swap_List(newList):\n    if len(newList) > 1:\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    ],
    "MbppEval/626": [
        "import math\n\ndef triangle_area(r):\n    # Step 0: Find the height of the triangle inscribed in the semicircle\n    h = r\n    \n    # Step 1: Calculate the base of the triangle using the Pythagorean theorem\n    b = 2 * math.sqrt(r**2 - h**2)\n    \n    # Step 2: Calculate the area of the triangle\n    area = 0.5 * b * h\n    \n    return area\n",
        "import math\n\ndef triangle_area(r):\n    if r < 0:\n        return -1\n    \n    side_length = 2 * r  # Side length of the equilateral triangle inscribed in the semicircle\n    area = (math.sqrt(3) / 4) * side_length**2  # Area of the equilateral triangle\n    \n    return area\n",
        "def triangle_area(r):\n    base = 2 * r\n    height = r\n    area = (base * height) / 2\n    return area\n",
        "import math\n\ndef triangle_area(r):\n    diameter = 2 * r\n    base = diameter\n    height = r\n    return 0.5 * base * height\n",
        "import math\n\ndef triangle_area(r):\n    if r < 0:\n        return -1\n    \n    # Height of equilateral triangle (which is the radius of the semicircle) is half the side length\n    side = 2 * r  \n    area = (math.sqrt(3) / 4) * side**2\n\n    return area\n\n# Test cases\n\n\n\n"
    ],
    "MbppEval/627": [
        "def find_First_Missing(array, start=0, end=None):\n    missing_num = 0\n\n    for i in range(start, end):\n        if array[i] != missing_num:\n            return missing_num\n        \n        missing_num += 1\n    \n    return missing_num\n",
        "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i] != i:\n            return i\n    \n    return end + 1\n",
        "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n\n    missing_num = 0\n\n    for num in range(start, end + 1):\n        if array[num] != missing_num:\n            return missing_num\n        missing_num += 1\n\n    return missing_num\n",
        "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array)\n    \n    for index in range(end):\n        expected_value = start + index\n        if array[index] != expected_value:\n            return expected_value\n        \n    return 0\n",
        "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array)\n    \n    # Ensure start and end are within bounds\n    start = max(start, 0)\n    end = min(end, len(array)\n    \n    # Find the smallest missing number\n    for i in range(start, end):\n        if array[i] != i:\n            return i\n\n    return end\n"
    ],
    "MbppEval/628": [
        "def replace_spaces(string):\n    new_string = \"\"\n    for char in string:\n        if char == ' ':\n            new_string += '%20'\n        else:\n            new_string += char\n            \n    return new_string\n",
        "def replace_spaces(string):\n    result = ''\n    for char in string:\n        if char == ' ':\n            result += '%20'\n        else:\n            result += char\n    return result\n",
        "def replace_spaces(string):\n    return ''.join(['%20' if char == ' ' else char for char in string])\n\n# Testing the function\n\n\n\n",
        "def replace_spaces(string):\n    result = ''\n    for char in string:\n        if char == ' ':\n            result += '%20'\n        else:\n            result += char\n    return result\n",
        "def replace_spaces(string):\n    new_string = ''\n    for char in string:\n        if char == ' ':\n            new_string += '%20'\n        else:\n            new_string += char\n    return new_string\n"
    ],
    "MbppEval/629": [
        "def split(lst):\n    even_numbers = []\n    for num in lst:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers\n",
        "def Split(lst): \n    even_numbers = []  # Step 1: Create an empty list to store even numbers\n    \n    for num in lst:  # Step 2: Iterate through the input list\n        if num % 2 == 0:  # Step 3.1: Check if the number is even\n            even_numbers.append(num)  # Step 3.2: Append even numbers to the list\n\n    return even_numbers  # Step 4: Return the list of even numbers\n",
        "def Split(lst):\n    even_numbers = []\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    \n    return even_numbers\n",
        "def Split(input_list): \n    even_numbers = []\n    for number in input_list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers\n",
        "def split(lst):\n    result = []\n    \n    for num in lst:\n        if num % 2 == 0:\n            result.append(num)\n    \n    return result\n"
    ],
    "MbppEval/630": [
        "def adjac(ele, sub=[]): \n    x, y = ele\n    coordinates = []\n    \n    for i in range(x-1, x+2):\n        for j in range(y-1, y+2):\n            if (i, j) != (x, y):\n                coordinates.append([i, j])\n    \n    return coordinates\n\n# Testing the function\n\n",
        "def adjac(ele, sub=[]):\n    x, y = ele  # Step 1: Get the x and y coordinates from the given element tuple\n    adjacent_coords = [(x+i, y+j) for i in range(-1, 2) for j in range(-1, 2)]  # Step 2: Generate adjacent coordinates around the given coordinate\n    adjacent_coords.remove(ele)  # Step 3: Exclude the current element from the adjacent coordinates\n    adjacent_coords = [list(coord) for coord in adjacent_coords]  # Step 4: Convert adjacent coordinates to list of lists\n    return adjacent_coords\n",
        "def get_coordinates(coord):\n    row, col = coord[0], coord[1]\n\n    adjacent_coords = []\n\n    for r in range(row - 1, row + 2):\n        for c in range(col - 1, col + 2):\n            adjacent_coords.append([r, c])\n\n    return adjacent_coords\n",
        "def get_coordinates(coord):\n    adj_coords = []\n    \n    for i in range(max(0, coord[0] - 1), min(8, coord[0] + 2)):\n        for j in range(max(0, coord[1] - 1), min(8, coord[1] + 2)):\n            if (i, j) != coord:  # Exclude the center coordinate\n                adj_coords.append([i, j])\n    \n    return adj_coords\n",
        "def adjac(ele): \n    x, y = ele\n    result = [[x-1, y-1], [x-1, y], [x-1, y+1], [x, y-1], [x, y], [x, y+1], [x+1, y-1], [x+1, y], [x+1, y+1]]\n    return result\n"
    ],
    "MbppEval/631": [
        "def replace_spaces(text):\n    result = ''\n    \n    for char in text:\n        if char == ' ':\n            result += '_'\n        elif char == '_':\n            result += ' '\n        else:\n            result += char\n    \n    return result\n",
        "def replace_spaces(text):\n    result = \"\"\n    \n    for char in text:\n        if char == ' ':\n            result += '_'\n        elif char == '_':\n            result += ' '\n        else:\n            result += char\n    \n    return result\n",
        "def replace_spaces(text):\n    modified_text = ''\n    for char in text:\n        if char == ' ':\n            modified_text += '_'\n        elif char == '_':\n            modified_text += ' '\n        else:\n            modified_text += char\n    return modified_text\n",
        "def replace_spaces(text):\n    result = ''\n    \n    for char in text:\n        if char == ' ':\n            result += '_'\n        else:\n            result += char\n            \n    return result\n",
        "def replace_spaces(text):\n    modified_text = ''\n    for char in text:\n        if char == ' ':\n            modified_text += '_'\n        elif char == '_':\n            modified_text += ' '\n        else:\n            modified_text += char\n    return modified_text\n"
    ],
    "MbppEval/632": [
        "def move_zero(num_list):\n    zeros = []\n    non_zeros = []\n    \n    for num in num_list:\n        if num == 0:\n            zeros.append(num)\n        else:\n            non_zeros.append(num)\n    \n    return non_zeros + zeros\n",
        "def move_zero(num_list):\n    new_list = []\n    \n    for num in num_list:\n        if num != 0:\n            new_list.append(num)\n    \n    zero_count = num_list.count(0)\n    \n    new_list.extend([0]*zero_count)\n    \n    return new_list\n",
        "def move_zero(num_list):\n    non_zero_list = []\n    zero_count = 0\n\n    for num in num_list:\n        if num != 0:\n            non_zero_list.append(num)\n        else:\n            zero_count += 1\n\n    non_zero_list += [0] * zero_count\n\n    return non_zero_list\n",
        "def move_zero(num_list):\n    zero_count = 0\n    non_zero_nums = []\n    \n    for num in num_list:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_nums.append(num)\n    \n    return non_zero_nums + [0] * zero_count\n\n# Test the function with examples\n\n\n\n",
        "def move_zero(num_list):\n    zero_count = 0\n    for num in num_list:\n        if num == 0:\n            zero_count += 1\n    \n    non_zero_list = [num for num in num_list if num != 0]\n    \n    zero_list = [0] * zero_count\n    new_list = non_zero_list + zero_list\n    return new_list\n"
    ],
    "MbppEval/633": [
        "def pair_xor_Sum(arr, n):\n    result = 0\n\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_val = arr[i] ^ arr[j]\n            result += xor_val\n\n    return result\n",
        "def pair_xor_Sum(arr, n):\n    xor_sum = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n            \n    return xor_sum\n",
        "def pair_xor_Sum(arr, n):\n    result = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            result += arr[i] ^ arr[j]\n    \n    return result\n",
        "def pair_xor_Sum(arr, n):\n    result = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            result += arr[i] ^ arr[j]\n    return result\n",
        "def pair_xor_Sum(arr, n):\n    sum_xor_pairs = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            xor_pair = arr[i] ^ arr[j]\n            sum_xor_pairs += xor_pair\n    \n    return sum_xor_pairs\n"
    ],
    "MbppEval/635": [
        "import heapq as hq\n\ndef heap_sort(iterable):\n    heap = list(iterable)\n    hq.heapify(heap)\n    \n    sorted_list = []\n    \n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    \n    return sorted_list\n",
        "import heapq as hq\n\ndef heap_sort(iterable):\n    sorted_list = []\n    heap = list(iterable)\n    hq.heapify(heap)\n\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n\n    return sorted_list\n",
        "import heapq as hq\ndef heap_sort(iterable):\n    if not isinstance(iterable, list):\n        raise ValueError(\"Input must be a list\")\n    \n    heap = list(iterable)\n    hq.heapify(heap)\n    \n    sorted_list = [hq.heappop(heap) for _ in range(len(heap))]\n    \n    return sorted_list\n",
        "import heapq as hq\ndef heap_sort(iterable):\n    if not isinstance(iterable, list):\n        raise TypeError(\"Input must be a list\")\n    \n    heap = list(iterable)\n    hq.heapify(heap)\n    \n    sorted_list = []\n    \n    for _ in range(len(heap)):\n        sorted_list.append(hq.heappop(heap))\n    \n    return sorted_list\n",
        "import heapq as hq\n\ndef heap_sort(iterable):\n    sorted_list = []\n    heap = list(iterable)\n    hq.heapify(heap)\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list\n"
    ],
    "MbppEval/637": [
        "def noprofit_noloss(actual_cost, sale_amount):\n    return actual_cost == sale_amount\n",
        "def noprofit_noloss(actual_cost, sale_amount):\n    difference = sale_amount - actual_cost\n    return difference == 0\n",
        "def noprofit_noloss(actual_cost, sale_amount): \n    profit = sale_amount - actual_cost\n    \n    if profit == 0:\n        return True\n    else:\n        return False\n",
        "def noprofit_noloss(actual_cost, sale_amount): \n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n",
        "def noprofit_noloss(actual_cost, sale_amount):\n    return actual_cost == sale_amount\n"
    ],
    "MbppEval/638": [
        "import math\ndef wind_chill(v,t):\n    wind_chill_index = 13.12 + 0.6215*t - 11.37*v**0.16 + 0.3965*t*v**0.16\n    rounded_wind_chill_index = math.ceil(wind_chill_index)\n    return rounded_wind_chill_index\n",
        "import math\n\ndef wind_chill(v, t):\n    # Step 1: Convert wind speed from km/h to m/s\n    v_ms = v * 1000 / 3600  # Convert km/h to m/s\n    \n    # Step 2: Compute the wind chill index\n    wind_chill_index = round(13.12 + 0.6215 * t - 11.37 * (v_ms**0.16) + 0.3965 * t * (v_ms**0.16))\n    \n    # Step 3: Return the rounded wind chill index\n    return wind_chill_index\n",
        "import math\n\ndef wind_chill(v, t):\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16)\n    rounded_wind_chill = math.ceil(wind_chill_index)\n    return rounded_wind_chill\n",
        "import math\n\ndef wind_chill(v, t):\n    celsius_to_fahrenheit = (t * 9/5) + 32\n    wind_chill_index = 13.12 + 0.6215 * celsius_to_fahrenheit - 11.37 * v**0.16 + 0.3965 * celsius_to_fahrenheit * v**0.16\n    rounded_wind_chill_index = round(wind_chill_index)\n    return rounded_wind_chill_index\n",
        "import math\n\ndef wind_chill(v, t):\n    wind_chill = 13.12 + 0.6215 * t - 11.37 * v ** 0.16 + 0.3965 * t * v ** 0.16\n    return math.ceil(wind_chill)\n"
    ],
    "MbppEval/639": [
        "def sample_nam(sample_names):\n    filtered_names = [name for name in sample_names if not name[0].islower()]\n    \n    total_length = 0\n    for name in filtered_names:\n        total_length += len(name)\n        \n    return total_length\n",
        "def remove_lowercase_names(names):\n    return [name for name in names if name[0].isupper()]\n\ndef calculate_total_length(names):\n    return sum(len(name) for name in names)\n\ndef sample_nam(sample_names):\n    filtered_names = remove_lowercase_names(sample_names)\n    total_length = calculate_total_length(filtered_names)\n    return total_length\n",
        "def sample_nam(sample_names):\n    total_length = 0\n    for name in sample_names:\n        if not name[0].islower():\n            total_length += len(name)\n    return total_length\n",
        "def sample_nam(sample_names):\n    total_length = 0\n\n    for name in sample_names:\n        if not name[0].islower():\n            total_length += len(name)\n    \n    return total_length\n",
        "def sample_nam(sample_names):\n    total_length = 0\n    \n    for name in sample_names:\n        if name[0].islower():\n            continue\n\n        total_length += len(name)  # Implementing step 4\n    \n    return total_length\n"
    ],
    "MbppEval/640": [
        "import re\n\ndef remove_parenthesis(items):\n    pattern = r\"\\(.*?\\)\"\n    result = re.sub(pattern, \"\", items[0])\n    return result\n",
        "import re\n\ndef remove_parenthesis(items):\n    # Remove the text inside parentheses from each item in the input list\n    pattern = r\"\\(.*?\\)\"\n    modified_items = tuple(re.sub(pattern, \"\", item) for item in items)\n    \n    return modified_items\n",
        "import re\n\ndef remove_parenthesis(items):\n    modified_items = []  # Step 0: Initialize an empty list to hold the modified strings.\n    \n    for item in items:\n        modified_item = re.sub(r'\\(.*?\\)', '', item)  # Step 3: Remove text within parentheses\n        modified_items.append(modified_item.strip())  # Removing any leading or trailing whitespace\n        \n    return modified_items\n",
        "import re\n\ndef remove_parenthesis(items):\n    result = []\n    \n    for item in items:\n        modified_item = re.sub(r'\\(.*?\\)', '', item)  # Remove text within parenthesis\n        result.append(modified_item)\n    \n    return tuple(result)\n",
        "import re\n\ndef remove_parenthesis(items):\n    result = re.sub(r'\\(.*?\\)', '', items[0])\n    return result\n"
    ],
    "MbppEval/641": [
        "def is_nonagonal(n): \n    return n * (7*n - 5) / 2\n",
        "def is_nonagonal(n):\n    return n * (7 * n - 5) // 2\n\n# Testing the function with the examples provided\n\n\n\n",
        "def is_nonagonal(n): \n    return n * (7 * n - 5) // 2\n",
        "def is_nonagonal(n):\n    if not isinstance(n, int) or n <= 0:\n        return \"Input must be a positive integer.\"\n    \n    nonagonal_number = n * (7*n - 5) // 2\n    return nonagonal_number\n",
        "def is_nonagonal(n): \n    return n * (7*n - 5) // 2\n"
    ],
    "MbppEval/643": [
        "import re\n\ndef text_match_wordz_middle(text):\n    return re.search(r'\\Bz\\B', text) is not None and 'Found a match!' or 'Not matched!'\n",
        "import re\n\ndef text_match_wordz_middle(text):\n    matches = re.findall(r'\\bz\\w*z\\b', text)\n    if matches:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
        "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b\\w*z\\w*\\b'  # Regular expression pattern to match entire words containing 'z' not at the start or end\n    \n    matches = re.findall(pattern, text)\n    \n    if matches:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
        "import re\n\ndef text_match_wordz_middle(text):\n    match_result = re.findall(r'\\Bz\\B', text)\n    if match_result:\n        return ('Found a match!')\n    else:\n        return ('Not matched!')\n",
        "import re\ndef text_match_wordz_middle(text):\n    pattern = r'\\Bz\\B'\n    if re.search(pattern, text):\n        return ('Found a match!')\n    else:\n        return ('Not matched!')\n"
    ],
    "MbppEval/644": [
        "    return reversed_array\n",
        "def reverse_Array_Upto_K(input, k):\n    reversed_sublist = input[:k][::-1]\n    remaining_sublist = input[k:]\n    return reversed_sublist + remaining_sublist\n",
        "def reverse_Array_Upto_K(input, k):\n    reversed_list = input[:k]\n    reversed_list = reversed_list[::-1] + input[k:]\n    return reversed_list\n",
        "def reverse_Array_Upto_K(input, k): \n    reversed_array = input[:]\n    reversed_array[:k] = reversed_array[:k][::-1]\n    return reversed_array\n",
        "def reverse_Array_Upto_K(input, k): \n    if not input:\n        return \"Input array is empty\"\n    \n    if k >= len(input):\n        return \"k should be less than the length of the array\"\n\n    reversed_array = input[:k][::-1]\n\n    result = reversed_array + input[k:]\n\n    return result\n"
    ],
    "MbppEval/720": [
        "def add_dict_to_tuple(test_tup, test_dict):\n    return test_tup + tuple(test_dict.items())\n",
        "    return new_tuple\n",
        "def add_dict_to_tuple(test_tup, test_dict):\n    return test_tup + (test_dict,)\n",
        "def add_dict_to_tuple(test_tup, test_dict):\n    new_tuple = test_tup + tuple(test_dict.items())\n    return new_tuple\n",
        "def add_dict_to_tuple(test_tup, test_dict):\n    new_list = list(test_tup)\n    new_list.append(test_dict)\n    new_tuple = tuple(new_list)\n    return new_tuple\n"
    ],
    "MbppEval/721": [
        "def maxAverageOfPath(cost):\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    \n    dp[0][0] = cost[0][0]\n    \n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n    \n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    \n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    \n    return dp[-1][-1] / (2 * n - 1)\n",
        "def maxAverageOfPath(cost):\n    def isValid(row, col, size):\n        return 0 <= row < size and 0 <= col < size\n\n    N = len(cost)\n\n    dp = [[0] * N for _ in range(N)]\n\n    dp[0][0] = cost[0][0]\n\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                continue\n            if isValid(i - 1, j, N):\n                from_above = dp[i - 1][j]\n            else:\n                from_above = float('-inf')\n                \n            if isValid(i, j - 1, N):\n                from_left = dp[i][j - 1]\n            else:\n                from_left = float('-inf')\n                \n            dp[i][j] = max(from_above, from_left) + cost[i][j]\n\n    return dp[N-1][N-1] / (2*N-1)\n",
        "def maxAverageOfPath(cost):\n    n = len(cost)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    count = [[0 for _ in range(n)] for _ in range(n)]\n\n    dp[0][0] = cost[0][0]\n    count[0][0] = 1\n\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n        count[i][0] = count[i-1][0] + 1\n\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n        count[0][j] = count[0][j-1] + 1\n\n    for i in range(1, n):\n        for j in range(1, n):\n            top = dp[i-1][j] + cost[i][j]\n            left = dp[i][j-1] + cost[i][j]\n            if top >= left:\n                dp[i][j] = top\n                count[i][j] = count[i-1][j] + 1\n            else:\n                dp[i][j] = left\n                count[i][j] = count[i][j-1] + 1\n\n    return dp[n-1][n-1] / count[n-1][n-1]\n",
        "def maxAverageOfPath(cost):\n    n = len(cost)\n    if n == 0:\n        return 0\n    \n    dp = [[0] * n for _ in range(n)]\n    \n    dp[0][0] = cost[0][0]\n    \n    # Fill the first row\n    for i in range(1, n):\n        dp[0][i] = (dp[0][i-1] + cost[0][i]) / (2+i)\n    \n    # Fill the first column\n    for j in range(1, n):\n        dp[j][0] = (dp[j-1][0] + cost[j][0]) / (2+j)\n    \n    # Fill remaining cells\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j] / (2+i+j)\n    \n    return dp[n-1][n-1]\n",
        "def maxAverageOfPath(cost):\n    n = len(cost)\n    if n == 0:\n        return 0\n    \n    cumulative_cost = [[0 for _ in range(n)] for _ in range(n)]\n    cumulative_cost[0][0] = cost[0][0]\n    \n    for i in range(1, n):\n        cumulative_cost[i][0] = cumulative_cost[i-1][0] + cost[i][0]\n    \n    for j in range(1, n):\n        cumulative_cost[0][j] = cumulative_cost[0][j-1] + cost[0][j]\n    \n    for i in range(1, n):\n        for j in range(1, n):\n            cumulative_cost[i][j] = cost[i][j] + min(cumulative_cost[i-1][j], cumulative_cost[i][j-1])\n    \n    num_cells_visited = [[0 for _ in range(n)] for _ in range(n)]\n    num_cells_visited[0][0] = 1\n    \n    for i in range(1, n):\n        num_cells_visited[i][0] = 1\n    \n    for j in range(1, n):\n        num_cells_visited[0][j] = 1\n    \n    for i in range(1, n):\n        for j in range(1, n):\n            num_cells_visited[i][j] = num_cells_visited[i-1][j] + num_cells_visited[i][j-1]\n    \n    max_average = cumulative_cost[n-1][n-1] / num_cells_visited[n-1][n-1]\n    \n    return max_average\n"
    ],
    "MbppEval/722": [
        "def filter_data(students, h, w):\n    filtered_students = {}\n    \n    for student, data in students.items():\n        if data[0] > h and data[1] > w:\n            filtered_students[student] = data\n\n    return filtered_students\n",
        "def filter_data(students, h, w):\n    filtered_students = {}\n    for student, data in students.items():\n        if data[0] > h and data[1] > w:\n            filtered_students[student] = data\n    return filtered_students\n",
        "def filter_data(students, h, w):\n    filtered_students = {}\n    \n    for student, (height, weight) in students.items():\n        if height >= h and weight >= w:\n            filtered_students[student] = (height, weight)\n    \n    return filtered_students\n",
        "def filter_data(students, h, w):\n    filtered_students = {}\n    for student, (height, weight) in students.items():\n        if height >= h and weight >= w:\n            filtered_students[student] = (height, weight)\n    return filtered_students\n",
        "def filter_data(students, h, w):\n    filtered_students = {}\n    for student, (height, weight) in students.items():\n        if height >= h and weight >= w:\n            filtered_students[student] = (height, weight)\n    return filtered_students\n"
    ],
    "MbppEval/723": [
        "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    \n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    \n    return count\n",
        "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    if len(nums1) != len(nums2):\n        return \"Error: The lists must have the same length.\"\n    \n    count = 0\n    \n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    \n    return count\n",
        "def count_same_pair(nums1, nums2):\n    count = 0\n    for idx1, idx2 in zip(range(len(nums1)), range(len(nums2))):\n        if nums1[idx1] == nums2[idx2]:\n            count += 1\n    return count\n",
        "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for num1, num2 in zip(nums1, nums2):\n        if eq(num1, num2):\n            count += 1\n    \n    return count\n",
        "def count_same_pair(nums1, nums2):\n    count = 0\n    for idx, (num1, num2) in enumerate(zip(nums1, nums2)):\n        if num1 == num2:\n            count += 1\n    return count\n"
    ],
    "MbppEval/724": [
        "def power_base_sum(base, power):\n    result = base ** power\n    result_str = str(result)\n    digit_sum = sum(int(digit) for digit in result_str)\n    return digit_sum\n",
        "def power_base_sum(base, power):\n    result = base ** power\n    result_str = str(result)\n    \n    digit_sum = 0\n    for digit in result_str:\n        if digit.isdigit():\n            digit_sum += int(digit)\n    \n    return digit_sum\n",
        "def power_base_sum(base, power):\n    result = base ** power\n    sum_of_digits = sum(int(digit) for digit in str(result))\n    return sum_of_digits\n",
        "def power_base_sum(base, power):\n    result = str(base ** power)\n    digit_sum = sum(int(digit) for digit in result)\n    return digit_sum\n",
        "def power_base_sum(base, power):\n    result = base ** power\n    result_str = str(result)\n    digit_sum = sum(int(digit) for digit in result_str)\n    return digit_sum\n"
    ],
    "MbppEval/725": [
        "import re\n\ndef extract_quotation(text):\n    substrings = re.findall(r'\"(.*?)\"', text)\n    extracted_values = [substring.replace('\"', '') for substring in substrings]\n    return extracted_values\n",
        "import re\n\ndef extract_quotation(text1):\n    return re.findall(r'\"(.*?)\"', text1)\n",
        "import re\n\ndef extract_quotation(text1):\n    return re.findall(r'\"([^\"]*)\"', text1)\n",
        "import re\n\ndef extract_quotation(text1):\n    text1 = r'' + text1\n    extracted_values = re.findall(r'\"(.*?)\"', text1)\n    return extracted_values\n",
        "import re\n\ndef extract_quotation(text1):\n    return re.findall(r'\"(.*?)\"', text1)\n"
    ],
    "MbppEval/726": [
        "def multiply_elements(test_tup):\n    result = []\n    \n    for i in range(len(test_tup) - 1):\n        result.append(test_tup[i] * test_tup[i + 1])\n    \n    result_tuple = tuple(result)\n    \n    return result_tuple\n",
        "def multiply_elements(test_tup):\n    result = []\n    for i in range(len(test_tup) - 1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)\n",
        "def multiply_elements(test_tup):\n    multiplied_elements = []\n    for i in range(len(test_tup) - 1):\n        multiplied_elements.append(test_tup[i] * test_tup[i + 1])\n    return tuple(multiplied_elements)\n",
        "def multiply_elements(test_tup):\n    result = []\n    \n    for i in range(len(test_tup) - 1):\n        result.append(test_tup[i] * test_tup[i+1])\n        \n    return tuple(result)\n",
        "def multiply_elements(test_tup):\n    result = []\n    \n    for i in range(len(test_tup) - 1):\n        result.append(test_tup[i] * test_tup[i+1])\n    \n    return tuple(result)\n"
    ],
    "MbppEval/728": [
        "def sum_list(lst1, lst2):\n    result = []\n    for a, b in zip(lst1, lst2):\n        result.append(a + b)\n    return result\n",
        "def sum_list(lst1, lst2):\n    return [a + b for a, b in zip(lst1, lst2)]\n",
        "def sum_list(lst1, lst2):\n    result = []\n    \n    if len(lst1) != len(lst2):\n        return \"Input lists must be of the same length\"\n    \n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    \n    return result\n",
        "def sum_list(lst1, lst2):\n    result = []\n    \n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    \n    return result\n",
        "def sum_list(lst1, lst2):\n    sum_lst = []\n    \n    for a, b in zip(lst1, lst2):\n        sum_lst.append(a + b)\n    \n    return sum_lst\n"
    ],
    "MbppEval/730": [
        "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    result = []\n    \n    for index, num in enumerate(nums):        \n        if index == 0 or num != nums[index - 1]:\n            result.append(num)\n    \n    return result\n",
        "def consecutive_duplicates(nums):\n    result = []\n    \n    for i, num in enumerate(nums):\n        if i == len(nums) - 1 or num != nums[i + 1]:\n            result.append(num)\n            \n    return result\n",
        "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    result = []\n    \n    for num in nums:\n        if not result or num != result[-1]:\n            result.append(num)\n    \n    return result\n",
        "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    result = []\n    \n    for num in nums:\n        if not result or num != result[-1]:\n            result.append(num)\n    \n    return result\n",
        "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    result = []\n    \n    for num in nums:\n        if not result or num != result[-1]:\n            result.append(num)\n    \n    return result\n"
    ],
    "MbppEval/731": [
        "import math\n\ndef calculate_slant_height(r, h):\n    return math.sqrt(r**2 + h**2)\n\ndef lateralsurface_cone(r, h):\n    l = calculate_slant_height(r, h)\n    return math.pi * r * l\n",
        "import math\n\ndef lateralsurface_cone(r, h):\n    l = math.sqrt(r**2 + h**2)\n    lateral_surface_area = math.pi * r * l\n    return lateral_surface_area\n",
        "import math\n\ndef lateralsurface_cone(r, h):\n    slant_height = math.sqrt(r**2 + h**2)\n    lateral_surface_area = math.pi * r * slant_height\n    return lateral_surface_area\n",
        "import math\n\ndef lateralsurface_cone(r, h):\n    slant_height = math.sqrt(r**2 + h**2)\n    lateral_area = math.pi * r * slant_height\n    return lateral_area\n",
        "import math\n\ndef lateralsurface_cone(r, h):\n    # Calculate the slant height of the cone\n    l = math.sqrt(r**2 + h**2)\n    \n    # Calculate the lateral surface area of the cone\n    lateral_surface_area = round(math.pi * r * l, 15)\n    return lateral_surface_area\n\n\n\n\n"
    ],
    "MbppEval/732": [
        "import re\n\ndef replace_specialchar(text):\n    return re.sub(r'[\\s,.]', ':', text)\n",
        "def replace_specialchar(text):\n    modified_text = text.replace(' ', ':').replace(',', ':').replace('.', ':')\n    return modified_text\n",
        "import re\ndef replace_specialchar(text):\n    modified_text = re.sub(r'[ ,.]', ':', text)\n    return modified_text\n",
        "import re\n\ndef replace_specialchar(text):\n    modified_text = re.sub(r'[ ,.]', ':', text)\n    return modified_text\n",
        "import re\n\ndef replace_specialchar(text):\n    return re.sub(r'[ ,.]', ':', text)\n"
    ],
    "MbppEval/733": [
        "def find_first_occurrence(A, x):\n    if not is_sorted(A):\n        raise ValueError(\"Input array must be sorted.\")\n    \n    low = 0\n    high = len(A) - 1\n    result = -1\n    \n    while low <= high:\n        mid = low + (high - low) // 2\n        \n        if A[mid] == x:\n            result = mid\n            high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    return result\n",
        "def find_first_occurrence(A, x):\n    first_occurrence_index = -1\n    \n    for i in range(len(A)):\n        if A[i] == x:\n            first_occurrence_index = i\n            break\n            \n    return first_occurrence_index\n",
        "def find_first_occurrence(A, x):\n    first_index = -1\n    \n    for index, element in enumerate(A):\n        if element == x:\n            first_index = index\n            break\n \n        elif element > x:\n            break\n\n    return first_index\n",
        "            # Step 3: Return Index\n            return mid\n",
        "def find_first_occurrence(A, x):\n    index = -1  # Initializing index to -1\n    \n    for i, num in enumerate(A):\n        if num == x and index == -1:\n            index = i  # Updating the index to the current index\n    \n    return index\n"
    ],
    "MbppEval/734": [
        "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. \n    Examples:\n    sum_Of_Subarray_Prod([1,2,3],3) == 20\n    sum_Of_Subarray_Prod([1,2],2) == 5\n    sum_Of_Subarray_Prod([1,2,3,4],4) == 84\n    '''\n    def generate_subarrays(arr):\n        subarrays = []\n        for i in range(len(arr)):\n            for j in range(i + 1, len(arr) + 1):\n                subarrays.append(arr[i:j])\n        return subarrays\n\n    subarrays = generate_subarrays(arr)\n    products = [1]  # Initialize with 1 to avoid multiplying by 0\n    for subarray in subarrays:\n        product = 1\n        for num in subarray:\n            product *= num\n        products.append(product)\n\n    return sum(products)\n",
        "from itertools import chain, combinations\n\ndef subsets(arr):\n    return chain.from_iterable(combinations(arr, r) for r in range(len(arr)+1))\n\ndef sum_Of_Subarray_Prod(arr):\n    total_sum = sum([reduce(lambda x, y: x * y, sub, 1) for sub in subsets(arr)])\n    return total_sum\n",
        "def sum_Of_Subarray_Prod(arr):\n    result = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            sublist = arr[i:j+1]\n            product = 1\n            for num in sublist:\n                product *= num\n            result += product\n    return result\n",
        "def sum_Of_Subarray_Prod(arr):\n    def subarray_product(arr):\n        product = 1\n        for num in arr:\n            product *= num\n        return product\n\n    result = 0\n    n = len(arr)\n    \n    for length in range(1, n+1):\n        for i in range(n-length+1):\n            sublist = arr[i:i+length]\n            product = subarray_product(sublist)\n            result += product\n\n    return result\n",
        "def sum_Of_Subarray_Prod(arr):\n    products = []\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            sublist_product = 1\n            \n            for num in arr[i:j]:\n                sublist_product *= num\n            \n            products.append(sublist_product)\n    \n    return sum(products)\n"
    ],
    "MbppEval/735": [
        "def set_middle_bits(n):\n    mask = 0\n    num_bits = n.bit_length()\n    mask = (1 << (num_bits - 1)) | 1\n    \n    result = n ^ mask\n    return result\n",
        "def toggle_middle_bits(n):\n    binary_num = bin(n)[2:]\n    toggled_bits = ['0', *('1' if bit == '0' else '0' for bit in binary_num[1:-1]), '0']\n    return int(''.join(toggled_bits), 2)\n",
        "def set_middle_bits(n):\n    binary_str = bin(n)[2:]  # Convert the given number into a binary string\n    \n    first_bit = binary_str[0]\n    last_bit = binary_str[-1]\n    \n    middle_bits = ''.join(['0' if bit == '1' else '1' for bit in binary_str[1:-1]])  # Toggle the middle bits\n    \n    return int(first_bit + middle_bits + last_bit, 2)  # Convert binary back to integer\n",
        "def set_middle_bits(n):\n    binary_num = bin(n)[2:]\n    toggled_num = '1' + ''.join('0' if bit == '1' else '1' for bit in binary_num[1:-1]) + '1'\n    return int(toggled_num, 2)\n",
        "def set_middle_bits(n):\n    binary_n = bin(n)[2:]\n    \n    toggled_bits = '1' + ''.join('0' if bit == '1' else '1' for bit in binary_n[1:-1]) + '1'\n    \n    return int(toggled_bits, 2)\n"
    ],
    "MbppEval/736": [
        "import bisect\n\ndef left_insertion(a, x):\n    if not a:\n        return 0\n    return bisect.bisect_left(a, x) - 1 if bisect.bisect_left(a, x) > 0 else 0\n",
        "import bisect\n\ndef left_insertion(a, x):\n    return bisect.bisect_left(a, x)\n",
        "import bisect\n\ndef left_insertion(a, x):\n    return bisect.bisect_left(a, x)\n",
        "import bisect\n\ndef left_insertion(a, x):\n    if not a:\n        return 0\n    insertion_point = bisect.bisect_left(a, x)\n    return insertion_point\n",
        "import bisect\n\ndef left_insertion(a, x):\n    left_index = bisect.bisect_left(a, x)\n    return left_index\n\n# Test the function\n\n\n\n"
    ],
    "MbppEval/737": [
        "import re\n\ndef check_str(string): \n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    \n    if re.match(regex, string):\n        return 'Valid'\n    else:\n        return 'Invalid'\n",
        "import re \n\ndef check_str(string): \n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    \n    if re.match(regex, string):\n        return 'Valid'\n    else:\n        return 'Invalid'\n",
        "import re \n\ndef check_str(string): \n\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    \n    if re.match(regex, string):\n        return 'Valid'\n    else:\n        return 'Invalid'\n",
        "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    if re.match(regex, string):\n        return 'Valid'\n    else:\n        return 'Invalid'\n\n# Testing the function\n\n\n\n",
        "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return 'Valid'\n    else:\n        return 'Invalid'\n"
    ],
    "MbppEval/738": [
        "def geometric_sum(n):\n    total = 0\n    term = 1\n\n    for i in range(n-1):\n        total += term\n        term /= 2\n\n    return total\n",
        "def geometric_sum(n):\n    '''\n    Calculate the geometric sum of n-1 terms.\n    '''\n    total_sum = 0\n    for i in range(n-1):\n        total_sum += 1/(2**i)\n    return total_sum\n\n# Testing the function\n\n\n\n",
        "def geometric_sum(n):\n    sum = 0\n    for i in range(n):\n        sum += 1 / (2**i)\n    return sum\n",
        "def geometric_sum(n):\n    result = 0\n    for i in range(1, n):\n        result += 1 / (2 ** i)\n    return result\n",
        "def geometric_sum(n):\n    if n <= 0:\n        return 0\n    \n    geometric_sum = 0\n    for i in range(n):\n        geometric_sum += 1 / (2**i)\n    \n    return geometric_sum\n"
    ],
    "MbppEval/739": [
        "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    Examples:\n    find_Index(2) == 4\n    find_Index(3) == 14\n    find_Index(4) == 45\n    '''\n    index = 1\n    num = 1\n    triangular_number = 0\n\n    while True:\n        triangular_number += num\n        num += 1\n        if len(str(triangular_number)) >= n:\n            return index\n        index += 1\n",
        "import math\n\ndef find_Index(n):\n    index = 1\n    num_digits = 0\n    i = 2\n\n    while True:\n        # Calculate the next triangular number\n        triangular_num = i * (i + 1) // 2\n        i += 1\n\n        # Check the number of digits in the triangular number\n        num_digits = int(math.log10(triangular_num)) + 1\n\n        if num_digits == n:\n            return index\n\n        index += 1\n",
        "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of the smallest triangular number with n digits. \n\n    Parameters:\n    n (int): Number of digits in the triangular number.\n\n    Returns:\n    int: Index of the smallest triangular number with n digits.\n    '''\n    triangular_num = lambda x: x * (x + 1) // 2\n    index = 1\n    while len(str(triangular_num(index))) < n:\n        index += 1\n\n    return index\n",
        "import math\n\ndef find_Index(n):\n    num = 0\n    index = 0\n\n    while True:\n        num += 1\n        index += 1\n        triangular_number = (num * (num + 1)) // 2\n        \n        if int(math.log10(triangular_number) + 1) >= n:\n            return index\n",
        "import math\n\ndef find_Index(n):\n    index = 1\n    \n    while True:\n        triangular_number = index * (index + 1) / 2\n        \n        if len(str(triangular_number)) < n:\n            index += 1\n        else:\n            if len(str(triangular_number)) == n:\n                return index\n            else:\n                index += 1\n"
    ],
    "MbppEval/740": [
        "def tuple_to_dict(test_tup):\n    result_dict = {}\n    \n    for i in range(0, len(test_tup)-1, 2):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    \n    return result_dict\n",
        "def tuple_to_dict(test_tup):\n    result_dict = {}\n    \n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        if i + 1 < len(test_tup):\n            value = test_tup[i + 1]\n            result_dict[key] = value\n    \n    return result_dict\n",
        "def tuple_to_dict(test_tup):\n    result_dict = {}\n    for i in range(0, len(test_tup)-1, 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        result_dict[key] = value\n    return result_dict\n",
        "def tuple_to_dict(test_tup):\n    result_dict = {}  # Step 1: Create an empty dictionary to store the key-value pairs\n    \n    # Step 3: Iterate over the tuple using a for loop\n    for i in range(0, len(test_tup), 2):\n        result_dict[test_tup[i]] = test_tup[i + 1]  # Step 4: Add key-value pair to the dictionary\n\n    return result_dict\n",
        "def tuple_to_dict(test_tup):\n    result_dict = {}\n    \n    for i in range(0, len(test_tup)-1, 2):\n        key = test_tup[i]\n        value = test_tup[i + 1]\n        result_dict[key] = value\n    \n    return result_dict\n"
    ],
    "MbppEval/741": [
        "def all_Characters_Same(s):\n    if len(s) <= 1:\n        return True\n    else:\n        first_char = s[0]\n        for char in s[1:]:\n            if char != first_char:\n                return False\n        return True\n",
        "def all_Characters_Same(s):\n    if len(set(s)) == 1:\n        return True\n    else:\n        first_char = s[0]\n        for char in s[1:]:\n            if char != first_char:\n                return False\n        return True\n",
        "# Final implementation of the all_Characters_Same function\n\ndef all_Characters_Same(s):\n    if len(s) < 2:\n        return True\n    for i in range(1, len(s)):\n        if s[i] != s[0]:\n            return False\n    return True\n\n# Test cases\n\n\n\n",
        "def all_Characters_Same(s):\n    if len(s) == 0:\n        return True\n    \n    first_char = s[0]\n    \n    for char in s[1:]:\n        if char != first_char:\n            return False\n    \n    return True\n",
        "def all_Characters_Same(s):\n    if len(s) <= 1:\n        return True\n    \n    first_char = s[0]\n    for char in s[1:]:\n        if char != first_char:\n            return False\n    \n    return True\n"
    ],
    "MbppEval/742": [
        "import math\n\ndef area_tetrahedron(side):\n    h = side * math.sqrt(6) / 3\n    area_triangle = (side ** 2) * math.sqrt(3) / 4\n    total_area = area_triangle * 4\n    return total_area\n",
        "import math\n\ndef area_tetrahedron(side):\n    height = (math.sqrt(6) / 3) * side\n    area = math.sqrt(3) * side**2 / 4\n    return area\n",
        "import math\n\ndef area_tetrahedron(side):\n    area_triangle = (side**2 * math.sqrt(3)) / 4\n    total_area = area_triangle * 4\n    return total_area\n\n# Testing the tetrahedron area calculation\n\n\n\n",
        "import math\n\ndef area_tetrahedron(side):\n    # Step 1: Calculate the height of the tetrahedron\n    height = (side * math.sqrt(6)) / 3\n\n    # Step 2: Calculate the area of an equilateral triangle\n    area_triangle = (math.sqrt(3) * side**2) / 4\n\n    # Step 3: Calculate the total surface area of the tetrahedron\n    total_area = 4 * area_triangle\n\n    return total_area\n",
        "import math\n\ndef area_tetrahedron(side):\n    height = math.sqrt(2/3) * side\n    face_area = (side ** 2) * math.sqrt(3) / 4\n    total_area = 3 * face_area\n    return total_area\n"
    ],
    "MbppEval/743": [
        "def rotate_right(lst, items, positions):\n    effective_positions = positions % len(lst)\n    rotated_elements = lst[-effective_positions - items : -effective_positions]\n    rotated_elements = rotated_elements[-items:] + rotated_elements[:-items]\n    \n    final_rotated_list = lst[:-effective_positions - items] + rotated_elements + lst[-effective_positions:]\n    \n    return final_rotated_list\n",
        "return lst_copy\n",
        "def rotate_right(lst, m):\n    if not lst:\n        return lst\n    \n    if m % len(lst) == 0:\n        return lst\n    \n    effective_rotation = m % len(lst)\n    rotated_lst = lst[-effective_rotation:] + lst[:-effective_rotation]\n    \n    return rotated_lst\n",
        "def rotate_right(lst, m):\n    rotation_amt = m % len(lst)\n    \n    rotated_lst = lst[-rotation_amt:][::-1] + lst[:-rotation_amt][::-1]\n\n    return rotated_lst\n",
        "def rotate_right(lst, m):\n    result = []\n    \n    m = m % len(lst)\n    idx = len(lst) - m\n\n    result += lst[idx:]\n    result += lst[:idx]\n    \n    return result\n"
    ],
    "MbppEval/744": [
        "def check_none(test_tup):\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False\n\n# Testing the function with examples\n\n\n\n",
        "def check_none(test_tup):\n    for element in test_tup:\n        if element is None:\n            return True\n    return False\n",
        "def check_none(test_tup):\n    for element in test_tup:\n        if element is None:\n            return True\n    return False\n",
        "def check_none(test_tup):\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False\n",
        "def check_none(test_tup):\n    for element in test_tup:\n        if element is None:\n            return True\n    return False\n"
    ],
    "MbppEval/745": [
        "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        is_divisible = all(int(digit_char) != 0 and num % int(digit_char) == 0 for digit_char in str(num))\n        if is_divisible:\n            result.append(num)\n    return result\n",
        "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        num_str = str(num)\n        divisible_by_all_digits = all(num % int(digit) == 0 for digit in num_str if int(digit) != 0)\n        if divisible_by_all_digits:\n            result.append(num)\n    return result\n",
        "def divisible_by_digits(startnum, endnum):\n    result = []\n\n    for num in range(startnum, endnum+1):\n        digits = str(num)\n        is_divisible = True\n        for digit in digits:\n            if int(digit) != 0 and num % int(digit) != 0:\n                is_divisible = False\n                break\n        \n        if is_divisible:\n            result.append(num)\n        \n    return result\n",
        "def divisible_by_digits(startnum, endnum):\n    result = []\n    \n    for num in range(startnum, endnum+1):\n        digits = str(num)\n        divisible = all(num % int(digit) == 0 for digit in digits if int(digit) != 0)\n        \n        if divisible:\n            result.append(num)\n    \n    return result\n",
        "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum+1):\n        divisible_by_all_digits = True\n        for digit in str(num):\n            if int(digit) == 0 or num % int(digit) != 0:\n                divisible_by_all_digits = False\n                break\n        if divisible_by_all_digits:\n            result.append(num)\n    return result\n"
    ],
    "MbppEval/746": [
        "import math\ndef sector_area(r,a):\n    if a > 360:\n        return None\n    area = (r**2 * a * math.pi) / 360\n    return area\n",
        "import math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    else:\n        sector_area = (a / 360) * math.pi * (r ** 2)\n        return sector_area\n",
        "import math\ndef sector_area(r,a):\n    if a > 360:\n        return None\n    else:\n        area = (a / 360) * math.pi * r**2\n        return area\n",
        "import math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    area = (a / 360) * math.pi * r**2\n    return area\n",
        "import math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    else:\n        return (a / 360) * math.pi * r ** 2\n"
    ],
    "MbppEval/747": [
        "def lcs_of_three(X, Y, Z):\n    dp = [[[0 for _ in range(len(Z) + 1)] for _ in range(len(Y) + 1)] for _ in range(len(X) + 1)]\n\n    for i in range(1, len(X) + 1):\n        for j in range(1, len(Y) + 1):\n            for k in range(1, len(Z) + 1):\n                if X[i - 1] == Y[j - 1] == Z[k - 1]:\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i - 1][j][k], dp[i][j - 1][k], dp[i][j][k - 1])\n    \n    return dp[len(X)][len(Y)][len(Z)]\n",
        "def lcs_of_three(X, Y, Z): \n    m, n, o = len(X), len(Y), len(Z)\n    \n    lcs = [[[0 for _ in range(o + 1)] for _ in range(n + 1)] for _ in range(m + 1)]\n    \n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, o + 1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n                else:\n                    lcs[i][j][k] = max(lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1])\n    \n    return lcs[m][n][o]\n",
        "def lcs_of_three(X, Y, Z): \n    if not X or not Y or not Z:\n        return 0\n\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    L = [[[0 for _ in range(o+1)] for _ in range(n+1)] for _ in range(m+1)]\n\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n\n    return L[m][n][o]\n",
        "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    dp = [[[0 for _ in range(o + 1)] for _ in range(n + 1)] for _ in range(m + 1)]\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, o + 1):\n                if X[i - 1] == Y[j - 1] == Z[k - 1]:\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i - 1][j][k], dp[i][j - 1][k], dp[i][j][k - 1])\n\n    return dp[m][n][o]\n",
        "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. \n    Examples:\n    lcs_of_three('AGGT12', '12TXAYB', '12XBA', 6, 7, 5) == 2\n    lcs_of_three('Reels', 'Reelsfor', 'ReelsforReels', 5, 8, 13) == 5\n    lcs_of_three('abcd1e2', 'bc12ea', 'bd1ea', 7, 6, 5) == 3\n    '''\n    \n    def lcs(X, Y, Z, m, n, o):\n        dp = [[[0 for _ in range(o+1)] for _ in range(n+1)] for _ in range(m+1)]\n        \n        for i in range(1, m+1):\n            for j in range(1, n+1):\n                for k in range(1, o+1):\n                    if X[i-1] == Y[j-1] == Z[k-1]:\n                        dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                    else:\n                        dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n        \n        return dp[m][n][o]\n    \n    return lcs(X, Y, Z, len(X), len(Y), len(Z))\n"
    ],
    "MbppEval/748": [
        "import re\ndef capital_words_spaces(str1):\n    output_str = \"\"\n    \n    for i in range(len(str1)):\n        if str1[i].isupper() and i != 0:\n            output_str += \" \"\n        \n        output_str += str1[i]\n\n    return output_str\n",
        "import re\n\ndef capital_words_spaces(str1):\n    # Initializing an empty list to store words\n    words = []\n    \n    # Starting with an empty string 'current_word'\n    current_word = \"\"\n    \n    # Step 2: Iterate over each character in the input string\n    for char in str1:\n        # Step 3: Check if the current character is uppercase\n        if char.isupper():\n            # Step 4: Add the current_word to the list and start a new current_word\n            if current_word:\n                words.append(current_word)\n            current_word = char\n        else:\n            current_word += char  # Append the character to the current_word\n\n    # Append the last current_word to the list\n    words.append(current_word)\n\n    return ' '.join(words)\n",
        "import re\n\ndef capital_words_spaces(str1):\n    capital_pattern = r'(?<!\\s)([A-Z][a-z]+)'\n    words_with_capitals = re.findall(capital_pattern, str1)\n\n    for word in words_with_capitals:\n        str1 = str1.replace(word, ' ' + word)\n\n    return str1\n",
        "import re\ndef capital_words_spaces(str1):\n    result = \"\"\n    for char in str1:\n        if char.isupper():\n            if result and result[-1] != \" \":\n                result += \" \"\n            result += char\n        else:\n            result += char\n    return result\n",
        "import re\ndef capital_words_spaces(str1):\n    result = \"\"\n    \n    for i in range(len(str1)):\n        if str1[i].isupper() and i > 0:\n            result += \" \"\n        result += str1[i]\n    \n    return result\n"
    ],
    "MbppEval/749": [
        "def sort_numeric_strings(nums_str):\n    sorted_nums = sorted(nums_str, key=int)\n    return [int(num) for num in sorted_nums]\n",
        "def sort_numeric_strings(nums_str):\n    nums_int = [int(num) for num in nums_str]\n    nums_sorted = sorted(nums_int)\n    return nums_sorted\n",
        "def sort_numeric_strings(nums_str):\n    nums = [int(num_str) for num_str in nums_str]\n    nums_sorted = sorted(nums)\n    return nums_sorted\n",
        "def sort_numeric_strings(nums_str):\n    nums_int = [int(num) for num in nums_str]\n    nums_sorted = sorted(nums_int)\n    return nums_sorted\n",
        "def sort_numeric_strings(nums_str):\n    num_list = [int(num) for num in nums_str]\n    sorted_nums = sorted(num_list)\n    \n    return sorted_nums\n"
    ],
    "MbppEval/750": [
        "def add_tuple(test_list, test_tup):\n    if not isinstance(test_list, list) or not isinstance(test_tup, tuple):\n        raise TypeError(\"The first argument should be a list and the second argument should be a tuple.\")\n\n    tuple_list = list(test_tup)\n    test_list.extend(tuple_list)\n    return test_list\n",
        "def add_tuple(test_list, test_tup):\n    new_list = list(test_list)\n    new_list += list(test_tup)\n    return new_list\n",
        "def add_tuple(test_list, test_tup):\n    new_list = test_list + list(test_tup)\n    return new_list\n",
        "def add_tuple(test_list, test_tup):\n    new_list = list(test_list)\n    new_list.extend(test_tup)\n    return new_list\n",
        "def add_tuple(test_list, test_tup):\n    new_list = test_list + list(test_tup)\n    return new_list\n"
    ],
    "MbppEval/751": [
        "def check_min_heap_helper(arr, i):\n    if i >= len(arr):\n        return True\n    \n    left = 2*i + 1\n    if left >= len(arr):\n        return True\n    \n    right = 2*i + 2\n    if right >= len(arr):\n        return True\n    \n    left_child_valid = check_min_heap_helper(arr, left)\n    right_child_valid = check_min_heap_helper(arr, right)\n    \n    if not left_child_valid or not right_child_valid:\n        return False\n    \n    if arr[i] > arr[left] or (right < len(arr) and arr[i] > arr[right]):\n        return False\n    \n    return True\n",
        "def check_min_heap_helper(arr, i):\n    left_child_index = 2*i + 1\n    right_child_index = 2*i + 2\n    \n    if left_child_index < len(arr) and not check_min_heap_helper(arr, left_child_index):\n        return False\n    \n    if right_child_index < len(arr) and not check_min_heap_helper(arr, right_child_index):\n        return False\n    \n    if left_child_index < len(arr) and arr[left_child_index] < arr[i]:\n        return False\n    \n    if right_child_index < len(arr) and arr[right_child_index] < arr[i]:\n        return False\n    \n    return True\n",
        "def check_min_heap_helper(arr, i):\n    if i >= len(arr):\n        return True\n        \n    if 2*i + 1 < len(arr) and arr[2*i + 1] < arr[i]:\n        pass\n    else:\n        return False\n        \n    if 2*i + 2 < len(arr) and arr[2*i + 2] < arr[i]:\n        pass\n    else:\n        return False\n        \n    left_child = check_min_heap_helper(arr, 2*i + 1)\n    right_child = check_min_heap_helper(arr, 2*i + 2)\n    \n    return left_child and right_child\n",
        "def check_min_heap_helper(arr, i):\n    if i >= len(arr):\n        return True\n    \n    left_child = 2 * i + 1\n    right_child = 2 * i + 2\n    \n    if left_child >= len(arr):\n        return True\n    \n    if arr[i] > arr[left_child] or (right_child < len(arr) and arr[i] > arr[right_child]):\n        return False\n    \n    return True\n",
        "def check_min_heap_helper(arr, i):\n    if not arr:\n        return False\n    \n    for i in range(i, len(arr)//2):\n        left_child = 2*i + 1\n        right_child = 2*i + 2\n        \n        if left_child < len(arr) and arr[i] > arr[left_child]:\n            return False\n        \n        if right_child < len(arr) and arr[i] > arr[right_child]:\n            return False\n    \n    return True\n"
    ],
    "MbppEval/752": [
        "def jacobsthal_num(n):\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)\n",
        "def jacobsthal_num(n): \n    if n <= 0:\n        return None\n        \n    a, b = 0, 1\n    \n    for _ in range(1, n):\n        jacobsthal = b + 2*a\n        a, b = b, jacobsthal\n        \n    return jacobsthal\n",
        "def jacobsthal_num(n):\n    if n <= 0:\n        return None\n    \n    if n == 1:\n        return 0\n    \n    if n == 2:\n        return 1\n    \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2)\n",
        "def jacobsthal_num(n): \n    if n <= 0:  \n        return None\n    \n    a, b = 0, 1  \n    \n    if n == 1 or n == 2:  \n        return a if n == 1 else b\n    \n    for _ in range(3, n + 1):  \n        c = a + 2 * b  \n        a, b = b, c  \n        \n    return c  \n",
        "def jacobsthal_num(n):\n    '''\n    Calculates the nth Jacobsthal number.\n    \n    Parameters:\n    n (int): The position of the Jacobsthal number to calculate.\n    \n    Returns:\n    int: The nth Jacobsthal number.\n    '''\n    if n < 2:\n        return n\n    \n    first = 0\n    second = 1\n    \n    for _ in range(2, n):\n        current = second + 2 * first\n        first, second = second, current\n    \n    return second\n"
    ],
    "MbppEval/753": [
        "def min_k(test_list, K):\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    return sorted_list[:K]\n",
        "def min_k(test_list, K):\n    copied_list = test_list[:]\n    copied_list.sort(key=lambda x: x[1])\n    return copied_list[:K] if K <= len(copied_list) else copied_list\n",
        "def min_k(test_list, K):\n    test_list.sort(key=lambda x: x[1])\n    return test_list[:K]\n",
        "def min_k(test_list, K):\n    test_list.sort(key=lambda x: x[1])\n    return test_list[:K]\n",
        "def min_k(test_list, K):\n    test_list.sort(key=lambda x: x[1])\n    return test_list[:K]\n"
    ],
    "MbppEval/754": [
        "def extract_index_list(l1, l2, l3):\n    result = []\n    \n    for i in range(min(len(l1), len(l2), len(l3))):\n        if l1[i] == l2[i] == l3[i]:\n            result.append(l1[i])\n    \n    return result\n",
        "def extract_index_list(l1, l2, l3):\n    result = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            result.append(l1[i])\n    return result\n",
        "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    \n    for i, (elem1, elem2, elem3) in enumerate(zip(l1, l2, l3)):\n        if elem1 == elem2 == elem3:\n            common_elements.append(elem1)\n    \n    return common_elements\n",
        "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    \n    for el1, el2, el3 in zip(l1, l2, l3):\n        if el1 == el2 == el3:\n            common_elements.append(el1)\n    \n    return common_elements\n",
        "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    \n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    \n    return common_elements\n"
    ],
    "MbppEval/755": [
        "def second_smallest(numbers):\n    numbers = list(set(numbers))  # Removing duplicates\n    if len(numbers) < 2:\n        return None\n    numbers.sort()  # Sorting the list in ascending order\n    return numbers[1]  # Returning the second element (index 1) as the second smallest number\n",
        "def second_smallest(numbers):\n    unique_numbers = list(set(numbers))\n    sorted_numbers = sorted(unique_numbers)\n    \n    if len(sorted_numbers) < 2:\n        return None\n    return sorted_numbers[1]\n",
        "def second_smallest(numbers):\n    unique_numbers = list(set(numbers))\n    sorted_unique_numbers = sorted(unique_numbers)\n    numbers.sort()\n    if len(numbers) < 2:\n        return None\n    return numbers[1]\n",
        "def second_smallest(numbers):\n    unique_numbers = list(set(numbers))\n    unique_numbers.sort()\n\n    if len(unique_numbers) < 2:\n        return None\n\n    smallest = unique_numbers[0]\n    unique_numbers.remove(smallest)\n\n    second_smallest = unique_numbers[0]\n    \n    return second_smallest\n",
        "def second_smallest(numbers):\n    unique_numbers = list(set(numbers))\n    sorted_unique_numbers = sorted(unique_numbers)\n    \n    if len(sorted_unique_numbers) < 2:\n        return None\n    return sorted_unique_numbers[1]\n"
    ],
    "MbppEval/756": [
        "import re\n\ndef text_match_zero_one(text):\n    if re.search('ab+', text) is not None:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
        "import re\n\ndef text_match_zero_one(text):\n    pattern = 'ab+'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
        "import re\n\ndef text_match_zero_one(text):\n    if re.search(r'ab+', text):\n        return ('Found a match!')\n    else:\n        return ('Not matched!')\n\n# Testing the function with sample inputs\n\n\n\n",
        "import re\n\ndef text_match_zero_one(text):\n    if re.search(r'ab+', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
        "import re\n\ndef text_match_zero_one(text):\n    if re.search(r'ab+', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n"
    ],
    "MbppEval/757": [
        "def count_reverse_pairs(test_list):\n    count = 0\n    \n    for string in test_list:\n        reverse_string = string[::-1]\n        if reverse_string in test_list:\n            count += 1\n\n    return str(count)\n",
        "def count_reverse_pairs(test_list):\n    reverse_pairs_count = 0\n    \n    for word in test_list:\n        reverse_word = word[::-1]\n        if reverse_word != word and reverse_word in test_list:\n            reverse_pairs_count += 1\n    \n    return str(reverse_pairs_count)\n",
        "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n\n    return str(count)\n",
        "def count_reverse_pairs(test_list):\n    count = 0  # Initialize the count variable\n\n    for i in range(len(test_list)):  # Iterate through the list of strings\n        for j in range(i+1, len(test_list)):  # Check if one string is the reverse of the other\n            if test_list[i][::-1] == test_list[j]:\n                count += 1  # Increment the count by 1\n\n    return str(count)  # Return the count as a string\n",
        "def count_reverse_pairs(test_list):\n    count = 0\n    reversed_strings = set()\n    \n    for string in test_list:\n        if string[::-1] in reversed_strings:\n            count += 1\n            reversed_strings.remove(string[::-1])\n        else:\n            reversed_strings.add(string)\n    \n    return str(count)\n"
    ],
    "MbppEval/758": [
        "# Let's implement step 6\ndef unique_sublists(list1):\n    unique_dict = {}\n    for sublist in list1:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in unique_dict:\n            unique_dict[tuple_sublist] += 1\n        else:\n            unique_dict[tuple_sublist] = 1\n    return unique_dict\n",
        "def unique_sublists(list1):\n    sublist_count = {}\n    \n    for sublist in list1:\n        tuple_sublist = tuple(sublist)\n        \n        if tuple_sublist in sublist_count:\n            sublist_count[tuple_sublist] += 1\n        else:\n            sublist_count[tuple_sublist] = 1\n            \n    return sublist_count\n",
        "def unique_sublists(list1):\n    unique_dict = {}\n    for sublist in list1:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in unique_dict:\n            unique_dict[tuple_sublist] += 1\n        else:\n            unique_dict[tuple_sublist] = 1\n    return unique_dict\n",
        "def unique_sublists(list1):\n    unique_counts = {}\n    \n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        \n        if sublist_tuple in unique_counts:\n            unique_counts[sublist_tuple] += 1\n        else:\n            unique_counts[sublist_tuple] = 1\n            \n    return unique_counts\n",
        "def unique_sublists(list1):\n    result_dict = {}\n    \n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        \n        if sublist_tuple not in result_dict:\n            result_dict[sublist_tuple] = 1\n        else:\n            result_dict[sublist_tuple] += 1\n\n    return result_dict\n"
    ],
    "MbppEval/759": [
        "def is_decimal(num):\n    if num.count('.') == 1:\n        integer_part, decimal_part = num.split('.')\n        if integer_part.isdigit() and decimal_part.isdigit() and len(decimal_part) == 2:\n            return True\n    return False\n",
        "def is_decimal(num):\n    try:\n        decimal_num = float(num)\n        whole_part, decimal_part = str(decimal_num).split('.')\n        \n        if len(decimal_part) == 2:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False\n",
        "def is_decimal(num):\n    if not isinstance(num, str):\n        return False\n    \n    if '.' not in num:\n        return False\n\n    parts = num.split('.')\n    \n    if len(parts) != 2:\n        return False\n\n    if not parts[0].isdigit() or not parts[1].isdigit():\n        return False\n\n    if len(parts[1]) != 2:\n        return False\n\n    return True\n",
        "def is_decimal(num):\n    try:\n        float_num = float(num)\n        if '.' in num:\n            integer_part, decimal_part = num.split('.')\n            if len(decimal_part) == 2:\n                return True\n    except ValueError:\n        pass\n    return False\n",
        "def is_decimal(num):\n    if not isinstance(num, str):\n        return False\n    if num.count('.') != 1:\n        return False\n        \n    parts = num.split('.')\n    if not all(part.isdigit() for part in parts):\n        return False\n    \n    if len(parts[1]) != 2:\n        return False\n    \n    return True\n"
    ],
    "MbppEval/760": [
        "def unique_Element(arr):\n    unique_elements = set(arr)\n    \n    if len(unique_elements) == 1:\n        return 'YES'\n    else:\n        return 'NO'\n",
        "def unique_Element(arr):\n    distinct_elements = set(arr)\n    if len(distinct_elements) == 1:\n        return 'YES'\n    else:\n        return 'NO'\n",
        "def unique_Element(arr):\n    unique_set = set(arr)\n    if len(unique_set) == 1:\n        return 'YES'\n    else:\n        return 'NO'\n",
        "def unique_Element(arr):\n    unique_set = set(arr)\n\n    if len(unique_set) == 1:\n        return 'YES'\n    else:\n        return 'NO'\n",
        "def unique_Element(arr):\n    unique_elements = set(arr)\n    if len(unique_elements) == 1:\n        return 'YES'\n    else:\n        return 'NO'\n"
    ],
    "MbppEval/762": [
        "def check_monthnumber_number(monthnum):\n    if monthnum < 1 or monthnum > 12:\n        return False\n    \n    if monthnum in [4, 6, 9, 11]:\n        return True\n    \n    return False\n",
        "def check_monthnumber_number(monthnum):\n    thirty_day_months = [4, 6, 9, 11]  # April, June, September, and November have 30 days\n    \n    return monthnum in thirty_day_months\n\n# Testing the function\n\n\n\n",
        "def check_monthnumber_number(monthnum):\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    return False\n",
        "def check_monthnumber_number(monthnum3):\n    if 1 <= monthnum3 <= 12:\n        if monthnum3 in [4, 6, 9, 11]:\n            return True\n        else:\n            return False\n    return False\n",
        "def check_monthnumber_number(monthnum3):\n    if not isinstance(monthnum3, int) or monthnum3 < 1 or monthnum3 > 12:\n        return False\n    elif monthnum3 in [4, 6, 9, 11]:\n        return True\n    return False\n"
    ],
    "MbppEval/763": [
        "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    \n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    \n    return min_diff\n",
        "def find_min_diff(arr, n): \n    arr.sort()  # Step 1: Sorting the array in non-decreasing order\n    \n    min_diff = float('inf')  # Step 2: Initializing min_diff as a large value\n    \n    # Step 3: Calculating and updating min_diff\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff\n",
        "def find_min_diff(arr, n):\n    arr.sort()  # Step 1: Sort the array in ascending order\n    min_diff = float('inf')  # Step 2: Initialize a variable min_diff to store the minimum difference\n    \n    for i in range(1, n):  # Step 3: Iterate through the array from the second element to the last element\n        diff = arr[i] - arr[i-1]  # Step 4: Calculate the difference between the current element and the previous element\n        if diff < min_diff:  # Step 5: If the difference is less than the current minimum difference, update the minimum difference\n            min_diff = diff\n    \n    return min_diff\n",
        "if diff < min_diff:\n    min_diff = diff\nreturn min_diff\n",
        "def find_min_diff(arr, n): \n    if len(arr) == 0:\n        return \"Array cannot be empty\"\n    if not isinstance(n, int) or n <= 0:\n        return \"n should be a positive integer\"\n    \n    arr.sort()\n    min_diff = float('inf')\n    \n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n        min_diff = min(min_diff, diff)\n    \n    return min_diff\n"
    ],
    "MbppEval/764": [
        "def number_ctr(s):\n    count = 0\n    \n    for char in s:\n        if char.isdigit():\n            count += 1\n    \n    return count\n",
        "def number_ctr(str):\n    digit_count = 0\n    for char in str:\n        if char.isdigit():\n            digit_count += 1\n    return digit_count\n",
        "def number_ctr(string):\n    count = 0\n    \n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count\n",
        "def number_ctr(input_str):\n    digit_count = 0\n    for char in input_str:\n        if char.isdigit():\n            digit_count += 1\n    return digit_count\n",
        "def number_ctr(str):\n    count = 0\n    \n    for char in str:\n        if char.isdigit():\n            count += 1\n            \n    return count\n"
    ],
    "MbppEval/765": [
        "import math\n\ndef is_polite(n):\n    highest_power_of_2 = int(math.log(n, 2))\n    polite_number = 2**highest_power_of_2 + 1\n    return polite_number\n",
        "import math\n\ndef is_polite(n):\n    k = int(math.log(n, 2))  # Step 0: Find the highest power of 2 that is less than or equal to n\n    \n    segment_size = 2**k  # Step 1: Calculate the current segment size\n    \n    offset = n - 2**k  # Step 3: Calculate the offset within the current segment\n    \n    max_distance = 2**(k-1)  # Step 4: Determine the maximum distance between polite numbers\n    \n    bottom_boundary = 2**k + 2**(k-1)  # Step 5: Calculate the bottom boundary of the current segment\n    \n    candidate = bottom_boundary + offset  # Step 6: Calculate the candidate polite number\n    \n    if candidate > n:  # Step 7: Check if the candidate is greater than n\n        return candidate - 2**(k-1)  # Step 8: Return the correct polite number\n    else:\n        return candidate\n",
        "import math\n\ndef factorize(n):\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n = n // i\n\n    if n > 2:\n        factors.append(n)\n    \n    return factors\n\ndef count_distinct_prime_factors(n):\n    prime_factors = factorize(n)\n    prime_factors_set = set(prime_factors)\n    return len(prime_factors_set)\n\ndef count_total_divisors(prime_factors):\n    total_divisors = 1\n    for factor in set(prime_factors):\n        total_divisors *= prime_factors.count(factor) + 1\n    return total_divisors\n\ndef is_polite(n):\n    while True:\n        prime_factors = factorize(n)\n        total_divisors = count_total_divisors(prime_factors)\n        \n        if total_divisors >= n + 2:\n            break\n        \n        n += 1\n    \n    return n\n",
        "import math\n\ndef is_polite(n):\n    count = 0\n    number = 1\n    \n    # Step 1: Initialize a variable `count` to 0 to keep track of the number of polite numbers found.\n    while count < n:\n        number += math.floor(number / 2)  # Step 2: Increment number using the polite formula\n        \n        # Step 3: Check if the incremented number is a polite number\n        if number % 2 == 1:\n            count += 1  # Step 4: Increment count if the number is a polite number\n            \n    return number  # Step 5: Return the nth polite number\n",
        "import math\n\ndef is_polite(n):\n    # Step 0: Check the input\n    if not isinstance(n, int) or n <= 0:\n        return None\n    \n    # Step 1: Calculate the sum of first n natural numbers\n    sum_natural_numbers = n * (n + 1) // 2\n    \n    # Step 2: Calculate the square root of the sum obtained in step 1\n    sqrt_sum = math.sqrt(sum_natural_numbers)\n    \n    # Step 3: Return the smallest integer greater than or equal to the square root as the nth polite number\n    return math.ceil(sqrt_sum)\n"
    ],
    "MbppEval/766": [
        "def pair_wise(l1):\n    pairs = [(l1[i], l1[i+1]) for i in range(len(l1)-1)]\n    return pairs\n",
        "return pairs\n",
        "def pair_wise(l1):\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs\n",
        "def pair_wise(l1):\n    pairs = []\n    for i in range(len(l1) - 1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs\n",
        "def pair_wise(l1):\n    pairs = []\n    \n    # Create pairs of consecutive elements\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    \n    return pairs  # Return the list of pairs\n"
    ],
    "MbppEval/767": [
        "def get_pairs_count(arr, sum):\n    freq_map = {}\n    pairs_count = 0\n    \n    for num in arr:\n        complement = sum - num\n        if complement in freq_map:\n            pairs_count += freq_map[complement]\n        freq_map[num] = freq_map.get(num, 0) + 1\n\n    return pairs_count\n",
        "def get_pairs_count(arr, sum):\n    count = 0\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    \n    return count\n",
        "def get_pairs_count(arr, sum):\n    count = 0\n    num_dict = {}\n    \n    for num in arr:\n        if num in num_dict:\n            num_dict[num] += 1\n        else:\n            num_dict[num] = 1\n    \n    for num in arr:\n        diff = sum - num\n        if diff in num_dict and num_dict[diff] > 0:\n            count += num_dict[diff]\n        \n        if num != diff:\n            num_dict[num] -= 1\n    \n    return count\n",
        "def get_pairs_count(arr, sum):\n    pair_count = 0\n\n    for i in range(len(arr)):\n        diff = sum - arr[i]\n\n        for j in range(i + 1, len(arr)):\n            if arr[j] == diff:\n                pair_count += 1\n\n    return pair_count\n",
        "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[j] == sum - arr[i]:\n                count += 1\n    return count\n"
    ],
    "MbppEval/769": [
        "def Diff(li1, li2):\n    return [x for x in li1 if x not in li2] + [x for x in li2 if x not in li1]\n",
        "def Diff(li1, li2):\n    difference = []\n    \n    for ele in li1:\n        if ele not in li2:\n            difference.append(ele)\n    \n    return difference\n",
        "def Diff(li1, li2):\n    diff_list = []\n\n    for num in li1:\n        if num not in li2:\n            diff_list.append(num)\n\n    return diff_list\n",
        "def Diff(li1, li2):\n    diff_list = []\n    for elem in li1:\n        if elem not in li2:\n            diff_list.append(elem)\n    return diff_list\n",
        "def Diff(li1, li2):\n    set1 = set(li1)\n    set2 = set(li2)\n    \n    diff_set = set1.difference(set2)\n    \n    diff_list = list(diff_set)\n    \n    return diff_list\n"
    ],
    "MbppEval/770": [
        "def generate_odd_numbers(n):\n    odd_numbers = []\n    num = 1\n    count = 0\n    while count < n:\n        odd_numbers.append(num)\n        num += 2\n        count += 1\n    return odd_numbers\n\ndef calculate_fourth_power(odd_numbers):\n    fourth_powers = [num**4 for num in odd_numbers]\n    return fourth_powers\n\ndef find_sum(fourth_powers):\n    return sum(fourth_powers)\n\ndef odd_num_sum(n):\n    odd_numbers = generate_odd_numbers(n)\n    fourth_powers = calculate_fourth_power(odd_numbers)\n    result = find_sum(fourth_powers)\n    return result\n",
        "def odd_num_sum(n):\n    sum_odd = 0\n\n    for i in range(1, 2*n, 2):  \n        sum_odd += i ** 4\n\n    return sum_odd\n",
        "def odd_num_sum(n):\n    total_sum = 0\n    for i in range(1, 2*n+1, 2):\n        total_sum += i**4\n    return total_sum\n",
        "def odd_num_sum(n):\n    result = 0\n    count = 0\n    \n    for i in range(1, n*2, 2):\n        result += i**4\n        count += 1\n        if count == n:\n            break\n        \n    return result\n",
        "def odd_num_sum(n):\n    num = 1\n    sum = 0\n    count = 0\n    while count < n:\n        if num % 2 != 0:\n            sum += num ** 4\n            count += 1\n        num += 1\n    return sum\n"
    ],
    "MbppEval/771": [
        "    return not stack\n",
        "",
        "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    bracket_map = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    \n    for char in exp:\n        if char in bracket_map.values():\n            stack.append(char)\n        elif char in bracket_map.keys():\n            if not stack or bracket_map[char] != stack.pop():\n                return False\n    \n    return len(stack) == 0\n",
        "from collections import deque\n\ndef check_expression(exp):\n    brackets = {\"(\": \")\", \"[\": \"]\", \"{\": \"}\"}\n    stack = deque()\n    \n    for char in exp:\n        if char in brackets.keys():\n            stack.append(char)\n        elif char in brackets.values():\n            if not stack or brackets[stack.pop()] != char:\n                return False\n\n    return not stack\n",
        "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    \n    for char in exp:\n        if char in \"([{\":\n            stack.append(char)\n    \n    for char in exp:\n        if char in \")]}\":\n            if not stack:\n                return False\n            \n            if char == \")\" and stack[-1] == \"(\":\n                stack.pop()\n            elif char == \"}\" and stack[-1] == \"{\":\n                stack.pop()\n            elif char == \"]\" and stack[-1] == \"[\":\n                stack.pop()\n    \n    return not stack\n"
    ],
    "MbppEval/772": [
        "def remove_length(test_str, K):\n    words = test_str.split()\n    filtered_words = [word for word in words if len(word) != K]\n    result_str = ' '.join(filtered_words)\n    return result_str\n",
        "def remove_length(test_str, K):\n    words = test_str.split()\n    filtered_words = [word for word in words if len(word) != K]\n    new_str = \" \".join(filtered_words)\n    return new_str\n",
        "def remove_length(test_str, K):\n    words = test_str.split()\n    filtered_words = [word for word in words if len(word) != K]\n    filtered_str = ' '.join(filtered_words)\n    return filtered_str\n",
        "def remove_length(test_str, K):\n    words = test_str.split()\n    filtered_words = [word for word in words if len(word) != K]\n    new_str = ' '.join(filtered_words)\n    return new_str\n",
        "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = []\n    \n    for word in words:\n        if len(word) != K:\n            new_words.append(word)\n    \n    return ' '.join(new_words)\n"
    ],
    "MbppEval/773": [
        "import re\n\ndef occurance_substring(text, pattern):\n    matches = re.finditer(pattern, text)\n    result = []\n    for match in matches:\n        result.append((match.group(0), match.start(), match.end()-1))\n\n    if not result:\n        return None\n    \n    return result\n",
        "import re\n\ndef occurrence_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    \n    Args:\n    text (str): The input text to search for the pattern.\n    pattern (str): The substring pattern to find in the text.\n    \n    Returns:\n    tuple: If the pattern is found, return the pattern, start index, and end index of the first occurrence. Otherwise, return None.\n    '''\n    match = re.search(pattern, text)\n    \n    if match:\n        return match.group(0), match.start(), match.end()\n    else:\n        return None\n",
        "import re\n\ndef occurance_substring(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        pattern_match = match.group()\n        start_index = match.start()\n        end_index = match.end() - 1\n        return pattern_match, start_index, end_index\n    else:\n        return None\n",
        "import re\n\ndef occurance_substring(text, pattern):\n    matches = re.finditer(pattern, text)\n    match = next(matches, None)  # Get the first match or None if no match\n    if match:\n        substring = match.group()\n        start = match.start()\n        end = match.end()\n        return (substring, start, end)\n    return None\n",
        "import re\n\ndef occurance_substring(text, pattern):\n    matches = re.finditer(pattern, text)\n    \n    for match in matches:\n        return (match.group(), match.start(), match.end())\n    \n    return None\n"
    ],
    "MbppEval/775": [
        "def odd_position(nums):\n    for i in range(len(nums)):\n        if i % 2 != 0:\n            if nums[i] % 2 == 0:\n                return False\n    return True\n",
        "def odd_position(nums):\n    result = True\n    \n    for i in range(1, len(nums), 2):  # Loop starts from index 1 with a step of 2\n        if nums[i] % 2 == 0:\n            result = False\n            break\n    \n    return result\n",
        "def odd_position(nums):\n    result = True\n    for i in range(1, len(nums), 2):  # Loop through odd indices starting from index 1\n        if nums[i] % 2 == 0:  # Check if the number at the odd index is even\n            result = False\n            break\n    return result\n",
        "def odd_position(nums):\n    for index, num in enumerate(nums):\n        if index % 2 == 1:\n            if num % 2 == 0:\n                return False\n    return True\n",
        "def odd_position(nums):\n    result = True  # Step 2\n    for i in range(1, len(nums), 2):  # Step 3\n        if nums[i] % 2 == 0:\n            result = False\n            break  # Step 4\n    return result  # Step 5\n"
    ],
    "MbppEval/776": [
        "def count_vowels(test_str):\n    vowel_count = 0\n    # Step 1: Iterate through each character in the string.\n    for i in range(len(test_str)):\n        char = test_str[i]\n        # Step 2: Check if the current character and its neighboring characters (if they exist) are vowels.\n        if i > 0 and i < len(test_str) - 1 and char.lower() in 'aeiou' and test_str[i-1].lower() in 'aeiou' and test_str[i+1].lower() in 'aeiou':\n            # Step 3: If the condition is met, increment the count.\n            vowel_count += 1\n    return vowel_count\n",
        "def count_vowels(test_str):\n    count = 0\n    vowels = set(\"aeiou\")\n\n    for i in range(1, len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i-1] in vowels and test_str[i+1] in vowels:\n            count += 1\n\n    return count\n",
        "def count_vowels(test_str):\n    vowel_count = 0\n    vowels = 'aeiouAEIOU'\n    \n    for i in range(1, len(test_str) - 1):\n        char = test_str[i]\n        before = test_str[i - 1]\n        after = test_str[i + 1]\n        \n        if any(c in vowels for c in [char, before, after]):\n            vowel_count += 1\n\n    return vowel_count\n",
        "def count_vowels(test_str):\n    count = 0\n    vowels = 'aeiouAEIOU'\n    for i in range(1, len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i - 1] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    return count\n",
        "def count_vowels(test_str):\n    count = 0\n    if len(test_str) < 3:\n        return 0\n\n    vowels = set('aeiouAEIOU')\n\n    for i in range(1, len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i-1] in vowels and test_str[i+1] in vowels:\n            count += 1\n\n    return count\n"
    ],
    "MbppEval/777": [
        "def find_sum(arr):\n    unique_elements = set()\n    seen = set()\n\n    for element in arr:\n        if element not in seen:\n            if arr.count(element) == 1:\n                unique_elements.add(element)\n            seen.add(element)\n\n    sum_of_unique = sum(unique_elements)\n    return sum_of_unique\n",
        "def find_sum(arr): \n    seen = set()\n    sum = 0\n\n    for num in arr:\n        if num not in seen:\n            sum += num\n            seen.add(num)\n\n    return sum\n",
        "def find_sum(arr):\n    freq_dict = {}  # Step 0: Create a dictionary to store the frequency of each element\n    \n    for num in arr:  # Step 1: Count the frequency of each element in the dictionary\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    non_repeated_sum = sum(key for key, value in freq_dict.items() if value == 1)  # Step 2: Summing non-repeated elements\n    \n    return non_repeated_sum\n",
        "def find_sum(arr):\n    unique_elements = []\n    for element in arr:\n        if element not in unique_elements:\n            unique_elements.append(element)\n    \n    sum_elements = sum(unique_elements)\n    \n    return sum_elements\n",
        "def find_sum(arr):\n    unique_elements = set()\n\n    # Step 1: Add unique elements to the set\n    for num in arr:\n        unique_elements.add(num)\n\n    # Step 2: Calculate the sum of unique elements\n    sum_unique = sum(unique_elements)\n\n    return sum_unique\n"
    ],
    "MbppEval/778": [
        "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    result = []\n    # Step 0\n    for key, group in groupby(list1):\n        # Step 1\n        group_list = list(group)\n        \n        # Step 2\n        result.append(group_list)\n    \n    # Step 3\n    return result\n",
        "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    packed_duplicates = []\n    \n    for key, group in groupby(list1):\n        group_list = list(group)\n        \n        if len(group_list) > 1:\n            packed_duplicates.append(group_list)\n        \n    return packed_duplicates\n",
        "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    packed_list = []\n    \n    for key, group in groupby(list1):\n        packed_list.append(list(group))\n\n    return packed_list\n",
        "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    packed_list = []\n    \n    grouped_elements = groupby(list1)\n    for key, group in grouped_elements:\n        packed_list.append(list(group))\n    \n    return packed_list\n",
        "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    result = []\n    \n    for key, group in groupby(list1):\n        result.append(list(group))\n\n    return result\n"
    ],
    "MbppEval/779": [
        "def unique_sublists(list1):\n    unique_dict = {}\n    \n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        \n        if sublist_tuple in unique_dict:\n            unique_dict[sublist_tuple] += 1\n        else:\n            unique_dict[sublist_tuple] = 1\n    \n    return unique_dict\n",
        "",
        "def unique_sublists(list1):\n    unique_sublists_dict = {}\n    \n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        \n        if sublist_tuple in unique_sublists_dict:\n            unique_sublists_dict[sublist_tuple] += 1\n        else:\n            unique_sublists_dict[sublist_tuple] = 1\n        \n    return unique_sublists_dict\n",
        "def unique_sublists(list1):\n    counts = {}\n    \n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        \n        if sublist_tuple in counts:\n            counts[sublist_tuple] += 1\n        else:\n            counts[sublist_tuple] = 1\n            \n    return counts\n",
        "def unique_sublists(list1):\n    unique_counts = {}\n    \n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        \n        if sublist_tuple in unique_counts:\n            unique_counts[sublist_tuple] += 1\n        else:\n            unique_counts[sublist_tuple] = 1\n    \n    return unique_counts\n"
    ],
    "MbppEval/780": [
        "from itertools import combinations\n\ndef find_combinations(test_list):\n    result = []\n    \n    for tup in test_list:\n        result.append(sum(tup))\n    \n    sums = [sum(tup) for tup in test_list]\n    sum_combinations = list(combinations(sums, 2))\n    \n    return sum_combinations\n",
        "from itertools import combinations\n\ndef find_combinations(test_list):\n    sums_list = []\n    for tpl in test_list:\n        for comb in combinations(tpl, 2):\n            sums_list.append((sum(comb),))\n    \n    return sums_list\n",
        "from itertools import combinations\n\ndef find_combinations(test_list):\n    result = []\n    \n    pairs = combinations(test_list, 2)\n    \n    for pair in pairs:\n        sum_pair = tuple(sum(x) for x in zip(*pair))\n        result.append(sum_pair)\n    \n    return result\n",
        "from itertools import combinations\n\ndef find_combinations(test_list):\n    sums = []\n    pairs = combinations(test_list, 2)\n    for pair in pairs:\n        sum_pair = tuple(sum(x) for x in zip(*pair))\n        sums.extend([sum_pair, sum_pair[::-1]])\n    return sums\n",
        "from itertools import combinations\n\ndef find_combinations(test_list):\n    result = []\n    \n    for pair in combinations(test_list, 2):\n        sum_tuple = tuple(sum(x) for x in zip(*pair))\n        result.append(sum_tuple)\n\n    return result\n"
    ],
    "MbppEval/781": [
        "import math\n\ndef count_divisors(n):\n    divisors = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if n / i != i:\n                divisors.append(int(n / i))\n    \n    count = len(divisors)\n    if count % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n",
        "import math \n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 2\n            \n    if n == int(math.sqrt(n)) ** 2:  # Check if n is a perfect square\n        count -= 1\n        \n    if count % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n",
        "import math \n\ndef count_divisors(n):\n    count = 0\n    \n    # Loop through numbers from 1 to sqrt(n)\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 2 if n/i != i else 1\n    \n    # Check if count of divisors is even or odd\n    if count % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n",
        "import math \n\ndef count_divisors(n):\n    divisors = []\n    \n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if n//i != i:\n                divisors.append(n//i)\n                \n    count = len(divisors)\n    \n    if count % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n",
        "import math\n\ndef count_divisors(n):\n    sqrt_n = math.ceil(math.sqrt(n))\n    count = 0\n\n    count += 1  # counting 1 as a divisor\n\n    for i in range(2, sqrt_n + 1):\n        if n % i == 0:\n            count += 2\n\n    if sqrt_n * sqrt_n == n:\n        count -= 1  # correcting as sqrt(n) should not be counted twice\n\n    return \"Even\" if count % 2 == 0 else \"Odd\"\n"
    ],
    "MbppEval/782": [
        "def odd_length_sum(arr):\n    def generate_subarrays(arr, length):\n        subarrays = []\n        for i in range(len(arr) - length + 1):\n            subarrays.append(arr[i:i+length])\n        return subarrays\n    \n    total_sum = 0\n    for length in range(1, len(arr)+1, 2):\n        subarrays = generate_subarrays(arr, length)\n        for subarray in subarrays:\n            total_sum += sum(subarray)\n    \n    return total_sum\n",
        "def odd_length_sum(arr):\n    total_sum = 0\n    for start in range(len(arr)):\n        for end in range(start, len(arr)):\n            subarray = arr[start:end+1]\n            if len(subarray) % 2 != 0:\n                total_sum += sum(subarray)\n    return total_sum\n",
        "def odd_length_sum(arr):\n    total_sum = 0\n\n    for start in range(len(arr)):\n        for end in range(start, len(arr)):\n            subarray = arr[start:end+1]\n            if len(subarray) % 2 == 1:\n                total_sum += sum(subarray)\n    \n    return total_sum\n",
        "def odd_length_sum(arr):\n    total_sum = 0\n    \n    for start in range(len(arr)):\n        for end in range(start, len(arr)):\n            subarray_length = end - start + 1\n            \n            if subarray_length % 2 != 0:\n                total_sum += sum(arr[start:end+1])\n    \n    return total_sum\n",
        "def odd_length_sum(arr):\n    result = 0\n    n = len(arr)\n    for start in range(n):\n        for end in range(start, n):\n            sub_arr = arr[start:end+1]\n            if len(sub_arr) % 2 == 1:\n                sub_arr_sum = sum(sub_arr)\n                result += sub_arr_sum\n    return result\n"
    ],
    "MbppEval/783": [
        "def rgb_to_hsv(r, g, b):\n    r /= 255.0\n    g /= 255.0\n    b /= 255.0\n    \n    min_val = min(r, g, b)\n    max_val = max(r, g, b)\n    \n    v = max_val * 100\n    \n    if max_val == 0:\n        s = 0\n    else:\n        s = (max_val - min_val) / max_val * 100  # Saturation (S)\n    \n    if max_val == min_val:\n        h = 0\n    elif max_val == r:\n        h = 60 * ((g - b) / (max_val - min_val))\n    elif max_val == g:\n        h = 60 * ((b - r) / (max_val - min_val)) + 120\n    else:\n        h = 60 * ((r - g) / (max_val - min_val)) + 240\n    \n    if h < 0:\n        h += 360\n    \n    return h, s, v\n",
        "import colorsys\n\ndef rgb_to_hsv(r, g, b):\n    r_norm = r / 255\n    g_norm = g / 255\n    b_norm = b / 255\n    \n    h, s, v = colorsys.rgb_to_hsv(r_norm, g_norm, b_norm)\n    \n    h = h * 360\n    s = s * 100\n    v = v * 100\n    \n    return h, s, v\n",
        "def rgb_to_hsv(r, g, b):\n    r /= 255.0\n    g /= 255.0\n    b /= 255.0\n    \n    minimum = min(r, g, b)\n    maximum = max(r, g, b)\n    delta = maximum - minimum\n    \n    if delta == 0:\n        h = 0\n    elif maximum == r:\n        h = 60 * (((g - b) / delta) % 6)\n    elif maximum == g:\n        h = 60 * (((b - r) / delta) + 2)\n    else:  # maximum == b\n        h = 60 * (((r - g) / delta) + 4)\n    \n    if maximum == 0:\n        s = 0\n    else:\n        s = (delta / maximum) * 100\n    \n    v = maximum * 100\n    \n    return h, s, v\n",
        "def rgb_to_hsv(r, g, b):\n    if not all(0 <= x <= 255 for x in (r, g, b)):\n        raise ValueError(\"RGB values must be in range 0-255\")\n    \n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    \n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n    \n    # Calculate hue\n    if delta == 0:\n        hue = 0\n    elif max_val == r:\n        hue = 60 * (((g - b) / delta) % 6)\n    elif max_val == g:\n        hue = 60 * (((b - r) / delta) + 2)\n    else:\n        hue = 60 * (((r - g) / delta) + 4)\n    \n    # Calculate saturation\n    saturation = 0 if max_val == 0 else delta / max_val\n    \n    # Calculate value\n    value = max_val\n    \n    return round(hue, 8), round(saturation * 100, 8), round(value * 100, 8)\n",
        "def rgb_to_hsv(r, g, b):\n    # Step 0: Convert RGB values to the range 0 to 1\n    r /= 255.0\n    g /= 255.0\n    b /= 255.0\n\n    # Step 1: Find the maximum and minimum values among the normalized RGB values\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n\n    # Step 2: Calculate the value (V) as the maximum among the normalized RGB values\n    V = max_value\n\n    # Step 3: Calculate the saturation (S)\n    S = 0 if V == 0 else (V - min_value) / V\n\n    # Step 4: Calculate the hue (H) depending on which color component is the maximum\n    if V == min_value:\n        H = 0\n    elif V == r:\n        H = 60 * ((g - b) / (V - min_value)) % 360\n    elif V == g:\n        H = 60 * (2 + (b - r) / (V - min_value)) % 360\n    else:\n        H = 60 * (4 + (r - g) / (V - min_value)) % 360\n\n    # Step 6: Adjust hue if it is negative, add 360 to make it fall within the range of 0 to 360\n    if H < 0:\n        H += 360\n\n    return H, S, V\n"
    ],
    "MbppEval/784": [
        "def mul_even_odd(list1):\n    even_prod = None\n    odd_prod = None\n    \n    for num in list1:\n        if num % 2 == 0 and even_prod is None:\n            even_prod = num\n        elif num % 2 != 0 and odd_prod is None:\n            odd_prod = num\n        \n        if even_prod is not None and odd_prod is not None:\n            break\n            \n    return even_prod * odd_prod\n",
        "def mul_even_odd(list1):\n    even_num = None\n    odd_num = None\n\n    for num in list1:\n        if num % 2 == 0 and even_num is None:\n            even_num = num\n        elif num % 2 != 0 and odd_num is None:\n            odd_num = num\n        if even_num is not None and odd_num is not None:\n            break\n\n    return even_num * odd_num\n",
        "def mul_even_odd(list1):\n    first_even = None\n    first_odd = None\n    for num in list1:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n\n    if first_even is not None and first_odd is not None:\n        product = first_even * first_odd\n        return product\n    else:\n        return None\n",
        "def mul_even_odd(list1):\n    first_even = None\n    first_odd = None\n\n    for num in list1:\n        if first_even and first_odd:\n            break\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n\n    return first_even * first_odd\n",
        "def mul_even_odd(list1):\n    even_num = None\n    odd_num = None\n    \n    for num in list1:\n        if num % 2 == 0 and even_num is None:\n            even_num = num\n        elif num % 2 != 0 and odd_num is None:\n            odd_num = num\n    \n    if even_num is not None and odd_num is not None:\n        return even_num * odd_num\n    else:\n        return None\n"
    ],
    "MbppEval/785": [
        "def tuple_str_int(test_str):\n    clean_str = test_str.replace(\"(\", \"\").replace(\")\", \"\").replace(\",\", \"\")\n    int_str_list = clean_str.split(',')\n    int_list = [int(num) for num in int_str_list]\n    int_tuple = tuple(int_list)\n    \n    return int_tuple\n",
        "def tuple_str_int(test_str):\n    test_str = test_str[1:-1]  # Remove the leading and trailing parentheses\n    num_strings = test_str.split(',')\n    num_ints = [int(num) for num in num_strings]\n    int_tuple = tuple(num_ints)\n    return int_tuple\n",
        "def tuple_str_int(test_str):\n    cleaned_str = test_str[1:-1]\n    num_list = cleaned_str.split(', ')\n    int_list = [int(num) for num in num_list]\n    int_tuple = tuple(int_list)\n    return int_tuple\n",
        "def tuple_str_int(test_str):\n    test_str = test_str.strip(\"()\")\n    str_elements = test_str.split(\",\")\n    int_elements = [int(element.strip()) for element in str_elements]\n    int_tuple = tuple(int_elements)\n    return int_tuple\n",
        "def tuple_str_int(test_str):\n    str_elements = test_str.replace('(', '').replace(')', '').split(',')\n    int_elements = tuple(int(elem.strip()) for elem in str_elements)\n    return int_elements\n"
    ],
    "MbppEval/786": [
        "import bisect\n\ndef right_insertion(a, x):\n    insertion_point = bisect.bisect_right(a, x)\n    return insertion_point\n",
        "import bisect\n\ndef right_insertion(a, x):\n    return bisect.bisect_right(a, x)\n",
        "import bisect\n\ndef right_insertion(a, x):\n    if not a:\n        return 0\n    \n    if x > a[-1]:\n        return len(a)\n    \n    insertion_point = bisect.bisect_right(a, x)\n    \n    return insertion_point\n",
        "import bisect\n\ndef right_insertion(a, x):\n    if not a:\n        return 0\n    return bisect.bisect_right(a, x)\n",
        "import bisect\n\ndef right_insertion(a, x):\n    if not a:\n        return 0\n    \n    return bisect.bisect_right(a, x)\n"
    ],
    "MbppEval/787": [
        "import re\n\ndef text_match_three(text):\n    pattern = \"ab{3}\"\n    result = re.search(pattern, text)\n    if result:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
        "import re\n\ndef text_match_three(text):\n    ''' text_match_three takes in a string and returns a tuple based on if the pattern 'ab{3}' is found '''\n    match = re.search(r'ab{3}', text)\n    if match:\n        return ('Found a match!')\n    else:\n        return ('Not matched!')\n",
        "import re\n\ndef text_match_three(text):\n    pattern = r'ab{3}'\n    if re.match(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
        "import re\ndef text_match_three(text):\n    pattern = 'ab{3}'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
        "import re\n\ndef text_match_three(text):\n    pattern = r'ab{3}'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n"
    ],
    "MbppEval/788": [
        "def new_tuple(test_list, test_str):\n    new_tuple = tuple(test_list + [test_str])\n    return new_tuple\n",
        "def new_tuple(test_list, test_str):\n    return tuple(test_list) + (test_str,)\n",
        "def new_tuple(test_list, test_str):\n    new_tuple = tuple(test_list + [test_str])\n    return new_tuple\n",
        "def new_tuple(test_list, test_str):\n    new_tuple = tuple(test_list) + (test_str,)\n    return new_tuple\n",
        "def new_tuple(test_list, test_str):\n    new_list = test_list.copy()\n    new_list.append(test_str)\n    return tuple(new_list)\n"
    ],
    "MbppEval/790": [
        "def even_position(nums):\n    result = True\n    for index, value in enumerate(nums):\n        if index % 2 == 0 and value % 2 != 0:\n            result = False\n            break\n    return result\n",
        "def even_position(nums):\n    for index in range(0, len(nums), 2):\n        num = nums[index]\n        if index % 2 == 0:\n            if num % 2 != 0:\n                return False\n    return True\n",
        "def even_position(nums):\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 != 0:\n                return False\n    return True\n",
        "def even_position(nums):\n    all_even_index_even = True\n\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 != 0:\n                all_even_index_even = False\n                break\n\n    return all_even_index_even\n",
        "def even_position(nums):\n    even_position_all_even = True\n    \n    for index, num in enumerate(nums):\n        if index % 2 == 0:\n            if num % 2 != 0:\n                even_position_all_even = False\n                break\n                \n    return even_position_all_even\n\n# Test the function\n\n\n\n"
    ],
    "MbppEval/791": [
        "def remove_nested(test_tup):\n    non_nested_elements = []\n    \n    for elem in test_tup:\n        if not isinstance(elem, tuple):\n            non_nested_elements.append(elem)\n    \n    return tuple(non_nested_elements)\n",
        "def remove_nested(test_tup):\n    non_nested_elements = []\n    \n    for elem in test_tup:\n        if not isinstance(elem, tuple):\n            non_nested_elements.append(elem)\n    \n    return tuple(non_nested_elements)\n",
        "def remove_nested(test_tup):\n    non_nested_elements = []\n\n    for elem in test_tup:\n        if not isinstance(elem, tuple):\n            non_nested_elements.append(elem)\n    \n    return tuple(non_nested_elements)\n",
        "def remove_nested(test_tup):\n    non_nested_elements = []\n    for element in test_tup:\n        if not isinstance(element, tuple):\n            non_nested_elements.append(element)\n    return tuple(non_nested_elements)\n",
        "def remove_nested(test_tup):\n    new_tup = ()\n    \n    for element in test_tup:\n        if not isinstance(element, tuple):\n            new_tup += (element,)\n    \n    return new_tup\n"
    ],
    "MbppEval/792": [
        "def count_list(input_list): \n    count = 0   # Step 0: Initialize count variable to keep track of number of sublists\n    \n    # Rest of the steps in the plan\n    \n    return count\n",
        "def count_list(input_list): \n    count = 0\n    for element in input_list:\n        if isinstance(element, list):\n            count += 1\n    return count\n",
        "def count_list(input_list):\n    count = 0\n    for element in input_list:\n        if isinstance(element, list):\n            count += 1\n    return count\n",
        "def count_list(input_list): \n    count = 0\n    for element in input_list:\n        if isinstance(element, list):\n            count += 1\n\n    return count\n",
        "def count_list(input_list): \n    count = 0\n    \n    for element in input_list:\n        if isinstance(element, list):\n            count += 1\n            \n    return count\n"
    ],
    "MbppEval/793": [
        "def last(arr, x, n):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n\n    Examples:\n    last([1,2,3],1,3) == 0\n    last([1,1,1,2,3,4],1,6) == 2\n    last([2,3,2,3,6,8,9],3,8) == 3\n\n    Parameters:\n    arr (list): A sorted list of integers.\n    x (int): The element to search for in the list.\n    n (int): The number of elements in the list.\n\n    Returns:\n    int: The last position of the element in the list. If the element is not found, return -1.\n    '''\n    index = -1\n\n    for i in range(n - 1, -1, -1):\n        if arr[i] == x:\n            index = i\n            break\n\n    return index\n",
        "def last(arr, x):\n    last_pos = -1\n    \n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] == x:\n            last_pos = i\n            break\n\n    return last_pos\n",
        "def last(arr, x):\n    last_index = -1\n    for i in range(len(arr)):\n        if arr[i] == x:\n            last_index = i\n    return last_index\n",
        "def last(arr, x):\n    index = -1\n    \n    start = 0\n    end = len(arr) - 1\n    \n    while start <= end:\n        mid = start + (end - start) // 2\n        if arr[mid] == x:\n            index = mid\n            start = mid + 1\n        elif arr[mid] < x:\n            start = mid + 1\n        else:\n            end = mid - 1\n    \n    return index\n",
        "def last(arr, x, n):\n    idx = -1\n    for i in range(n):\n        if arr[i] == x:\n            idx = i\n    return idx\n"
    ],
    "MbppEval/794": [
        "import re\n\ndef text_starta_endb(text):\n    match = re.search(r'a.*b', text)\n    if match:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
        "import re\n\ndef text_starta_endb(text):\n    match = re.search(r'a.*b', text)\n    if match:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
        "import re\n\ndef text_starta_endb(text):\n    if re.search(r'a.*b', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
        "import re\n\ndef text_starta_endb(text):\n    pattern = 'a.*b'\n    return 'Found a match!' if re.match(pattern, text) else 'Not matched!'\n",
        "import re\ndef text_starta_endb(text):\n    pattern = r'a.*b$'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n"
    ],
    "MbppEval/796": [
        "def return_sum(dict):\n    total_sum = 0\n    \n    for value in dict.values():\n        total_sum += value\n    \n    return total_sum\n",
        "def return_sum(dict):\n    total_sum = 0\n    \n    for value in dict.values():\n        total_sum += value\n    \n    return total_sum\n",
        "def return_sum(dict):\n    total_sum = 0\n    for value in dict.values():\n        total_sum += value\n    return total_sum\n",
        "def return_sum(dict):\n    total_sum = 0\n\n    for value in dict.values():\n        total_sum += value\n\n    return total_sum\n",
        "def return_sum(dict):\n    total_sum = sum(dict.values())\n    \n    return total_sum\n"
    ],
    "MbppEval/797": [
        "def sum_odd(n):\n    sum_odd = 0\n    \n    for num in range(1, n+1):\n        if num % 2 != 0:\n            sum_odd += num\n    \n    return sum_odd\n",
        "def sum_in_Range(n, m):\n    sum_odd = 0\n    for num in range(n, m + 1):\n        if num % 2 != 0:  # Check if the number is odd\n            sum_odd += num\n    return sum_odd\n",
        "def sum_in_range(l, r):\n    total = 0\n    \n    for i in range(l, r + 1):\n        if i % 2 != 0:\n            total += i\n                \n    return total\n",
        "def sum_odd(n): \n    result = 0\n    \n    for i in range(1, n+1):\n        if i % 2 != 0:  # Check if the number is odd\n            result += i\n    \n    return result\n",
        "def sum_odd(n): \n    sum_odd_numbers = 0\n\n    for i in range(1, n+1):\n        if i % 2 != 0:  # Check if the number is odd\n            sum_odd_numbers += i\n    \n    return sum_odd_numbers\n"
    ],
    "MbppEval/798": [
        "def _sum(arr):\n    total_sum = 0\n    for num in arr:\n        total_sum += num\n    return total_sum\n\n# Test cases\n\n\n\n",
        "def _sum(arr):  \n    total_sum = 0\n    for num in arr:\n        total_sum += num\n    return total_sum\n",
        "def _sum(arr):\n    total = 0  # Step 0: Initialize total to 0\n",
        "def _sum(arr):\n    sum_arr = 0\n    for num in arr:\n        sum_arr += num\n    return sum_arr\n",
        "def _sum(arr):\n    total_sum = 0\n\n    for elem in arr:\n        total_sum += elem\n\n    return total_sum\n"
    ],
    "MbppEval/799": [
        "def left_rotate(n, d):\n    binary = bin(n)[2:].zfill(32)  # Pad with zeros to make it 32-bit\n    rotated_binary = binary[d:] + binary[:d]\n    return int(rotated_binary, 2)\n\n# Test the function\n\n\n\n",
        "def left_rotate(n, d):\n    bin_str = bin(n)[2:].zfill(32)\n    rotated_bin_str = bin_str[d:] + bin_str[:d]\n    rotated_num = int(rotated_bin_str, 2)\n    \n    return rotated_num\n",
        "def left_rotate(n, d):\n    binary_n = format(n, '032b')\n    rotated_binary = binary_n[d:] + binary_n[:d]\n    return int(rotated_binary, 2)\n",
        "def left_rotate(n, d):\n    def decimal_to_binary_32bit(num):\n        return bin(num & 0xFFFFFFFF)[2:].zfill(32)\n    \n    binary_str = decimal_to_binary_32bit(n)\n    rotated_str = binary_str[d:] + binary_str[:d]\n    \n    return int(rotated_str, 2)\n",
        "def left_rotate(n, d):\n    binary_n = bin(n)[2:].zfill(32)\n    rotated_binary = binary_n[d:] + binary_n[:d]\n    result = int(rotated_binary, 2)\n    return result\n\n\n\n\n"
    ],
    "MbppEval/800": [
        "import re\n\ndef remove_all_spaces(text):\n    if not isinstance(text, str):\n        return \"Input is not a string\"\n    else:\n        return re.sub(r'\\s+', '', text)\n",
        "import re\n\ndef remove_all_spaces(text):\n    return re.sub(r'\\s+', '', text)\n",
        "import re\n\ndef remove_all_spaces(text):\n    '''\n    Remove all whitespaces from a string.\n\n    Examples:\n    remove_all_spaces('python  program') == 'pythonprogram'\n    remove_all_spaces('python   programming    language') == 'pythonprogramminglanguage'\n    remove_all_spaces('python                     program') == 'pythonprogram'\n    '''\n    return re.sub(r'\\s+', '', text)\n",
        "import re\ndef remove_all_spaces(text):\n    text_without_spaces = re.sub(r'\\s+', '', text)\n    return text_without_spaces\n",
        "import re\n\ndef remove_all_spaces(text):\n    return re.sub(r'\\s+', '', text)\n"
    ],
    "MbppEval/801": [
        "def test_three_equal(x, y, z):\n    if x == y == z:\n        return 3\n    elif x == y or y == z or x == z:\n        return 2\n    else:\n        return 0\n",
        "def test_three_equal(x, y, z):\n    count = 0\n    if x == y == z:\n        count = 3\n    elif x == y or y == z or x == z:\n        count = 2\n    else:\n        count = 0\n    return count\n",
        "def test_three_equal(x, y, z):\n    if x == y == z:\n        return 3\n    elif x == y or y == z or x == z:\n        return 2\n    else:\n        return 0\n",
        "def test_three_equal(x, y, z):\n    if x == y == z:\n        return 3\n    elif x == y or y == z or x == z:\n        return 2\n    else:\n        return 0\n",
        "def test_three_equal(x, y, z):\n    if x == y == z:\n        return 3\n    elif x == y or x == z or y == z:\n        return 2\n    else:\n        return 0\n"
    ],
    "MbppEval/802": [
        "def count_rotation(arr):\n    min_index = arr.index(min(arr))\n    return min_index\n",
        "def count_rotation(arr):\n    min_element = float('inf')\n    rotation_count = 0\n\n    for i, num in enumerate(arr):\n        if num < min_element:\n            min_element = num\n            rotation_count = i\n\n    return rotation_count\n",
        "def count_rotation(arr):\n    if not arr:\n        return \"Invalid input. Please provide a non-empty list.\"\n    \n    min_index = arr.index(min(arr))\n    num_rotations = min_index\n    return num_rotations\n",
        "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. \n    Examples:\n    count_Rotation([3,2,1],3) == 1\n    count_Rotation([4,5,1,2,3],5) == 2\n    count_Rotation([7,8,9,1,2,3],6) == 3\n    '''\n    \n    # Implementing Step 0\n    def count_rotation(arr):\n        return len(arr)\n\n    length = count_rotation(arr)\n    \n    # Implementing Step 2\n    copied_arr = arr.copy()\n    \n    # Implementing Step 3\n    copied_arr.sort()\n    \n    # Implementing Step 4\n    for i in range(length):\n        if arr[i] == copied_arr[0]:\n            return i\n",
        "def count_rotation(arr):   \n    # Step 0: Check if the array is empty\n    if not arr:\n        return 0\n    \n    # Step 1: Find the index of the minimum element in the array\n    min_index = arr.index(min(arr))\n    \n    # Step 2: Return the number of rotations required\n    return len(arr) - min_index\n\n# Test the function with given examples\n\n\n\n"
    ],
    "MbppEval/803": [
        "import math\n\ndef is_perfect_square(n):\n    sqrt_n = math.sqrt(n)\n    return sqrt_n.is_integer() and sqrt_n ** 2 == n\n",
        "import math\n\ndef is_perfect_square(n):\n    if n < 0:\n        return False\n    \n    sqrt_n = math.isqrt(n)\n    rounded_sqrt_n = round(sqrt_n)\n    \n    return rounded_sqrt_n ** 2 == n\n",
        "import math\n\ndef is_perfect_square(n):\n    square_root = math.sqrt(n)\n    return square_root.is_integer()\n\n# Test the function\n\n\n\n",
        "def is_perfect_square(n):\n    root = n ** 0.5\n    return root.is_integer()\n",
        "import math\n\ndef is_perfect_square(n):\n    square_root = math.sqrt(n)\n    if square_root.is_integer():\n        return True\n    else:\n        return False\n"
    ],
    "MbppEval/804": [
        "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n\n    Examples:\n    is_product_even([1,2,3]) == True\n    is_product_even([1,2,1,4]) == True\n    is_product_even([1,1]) == False\n    '''\n    \n    product = 1\n    \n    for num in arr:\n        product *= num\n    \n    return product % 2 == 0\n",
        "def is_product_even(arr): \n    product = 1\n    \n    for num in arr:\n        product *= num\n    \n    return product % 2 == 0\n",
        "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n\n    return product % 2 == 0\n",
        "def is_product_even(arr): \n    product = 1\n\n    for num in arr:\n        product *= num\n\n    return product % 2 == 0\n",
        "def is_product_even(arr): \n    product = 1\n    for num in arr:\n        product *= num\n    \n    return product % 2 == 0\n"
    ],
    "MbppEval/805": [
        "def max_sum_list(lists):\n    max_sum_list = []\n    max_sum = 0\n    \n    for lst in lists:\n        sum_lst = sum(lst)\n        if sum_lst > max_sum:\n            max_sum = sum_lst\n            max_sum_list = lst\n    \n    return max_sum_list\n",
        "def max_sum_list(lists):\n    max_sum_list = None\n    max_sum = float('-inf')\n    \n    # Step 3, 4, 5\n    for lst in lists:\n        total_sum = sum(lst)\n        if total_sum > max_sum:\n            max_sum = total_sum\n            max_sum_list = lst\n\n    return max_sum_list\n",
        "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_sum_list = None\n    \n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_sum_list = lst\n\n    return max_sum_list\n",
        "def max_sum_list(lists):\n    max_sum_list = None\n    max_sum = float('-inf')\n    \n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_sum_list = lst\n        \n    return max_sum_list\n",
        "def max_sum_list(lists):\n    max_sum = 0\n    max_list = []\n\n    for lst in lists:\n        list_sum = sum(lst)\n        \n        if list_sum > max_sum:\n            max_sum = list_sum\n            max_list = lst\n\n    return max_list\n"
    ],
    "MbppEval/806": [
        "def max_run_uppercase(test_str):\n    max_count = 0\n    count = 0\n\n    for char in test_str:\n        if char.isupper():\n            count += 1\n        else:\n            if count > max_count:\n                max_count = count\n            count = 0\n\n    if count > max_count:\n        max_count = count\n\n    return max_count\n",
        "def max_run_uppercase(test_str):\n    max_run = 0\n    current_run = 0\n    \n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    \n    return max_run\n",
        "def max_run_uppercase(test_str):\n    max_run = 0\n    current_run = 0\n\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 0\n\n    max_run = max(max_run, current_run)\n\n    return max_run\n",
        "def max_run_uppercase(test_str):\n    max_count = 0\n    count = 0\n\n    for char in test_str:\n        if char.isupper():\n            count += 1\n        else:\n            max_count = max(max_count, count)\n            count = 0\n\n    return max_count\n",
        "def max_run_uppercase(test_str):\n    max_run = 0\n    current_run = 0\n    \n    for char in test_str:\n        if char.isupper():  \n            current_run += 1  \n        else:\n            max_run = max(max_run, current_run)\n            current_run = 0\n            \n    max_run = max(max_run, current_run)\n    \n    return max_run\n"
    ],
    "MbppEval/807": [
        "def first_odd(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\n",
        "def first_odd(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return num\n",
        "def first_odd(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\n",
        "def first_odd(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return num\n",
        "def first_odd(nums):\n    if not nums:\n        return None\n    \n    for num in nums:\n        if num % 2 != 0:\n            return num\n"
    ],
    "MbppEval/808": [
        "def check_K(test_tup, K):\n    return K in test_tup\n",
        "def check_K(test_tup, K):\n    return K in test_tup\n\n# Test the function with examples\n\n\n\n",
        "def check_K(test_tup, K):\n    return K in test_tup\n\n# Examples\n\n\n\n",
        "def check_K(test_tup, K):\n    for element in test_tup:\n        if element == K:\n            return True\n    return False\n",
        "def check_K(test_tup, K):\n    if K in test_tup:\n        return True\n    return False\n"
    ],
    "MbppEval/809": [
        "def check_smaller(test_tup1, test_tup2):\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True\n",
        "def check_smaller(test_tup1, test_tup2):\n    for i in range(len(test_tup1)):\n        elem1 = test_tup1[i]\n        elem2 = test_tup2[i]\n        \n        if elem2 >= elem1:\n            return False\n            \n    return True\n",
        "def check_smaller(test_tup1, test_tup2):\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True\n",
        "def check_smaller(test_tup1, test_tup2):\n    is_smaller = True\n    for index in range(len(test_tup1)):\n        if test_tup2[index] >= test_tup1[index]:\n            is_smaller = False\n            break\n    return is_smaller\n",
        "def check_smaller(test_tup1, test_tup2):\n    for i in range(len(test_tup1)):\n        if test_tup1[i] <= test_tup2[i]:\n            return False\n    return True\n"
    ]
}