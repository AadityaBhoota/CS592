{
    "MbppEval/8": "def square_nums(nums):\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums\n",
    "MbppEval/19": "def test_duplicate(arraynums):\n    unique_set = set(arraynums)\n    return len(unique_set) != len(arraynums)\n",
    "MbppEval/56": "def rev(num):\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n    \n    return num == 2 * rev_num - 1\n",
    "MbppEval/83": "def get_Char(strr):\n    total_ascii = 0\n    for char in strr:\n        total_ascii += ord(char)\n    final_char = chr(total_ascii % 26 + ord('a'))\n    return final_char\n",
    "MbppEval/65": "def recursive_list_sum(data_list):\n    total_sum = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total_sum += recursive_list_sum(element)\n        else:\n            total_sum += element\n    return total_sum\n",
    "MbppEval/2": "def similar_elements(test_tup1, test_tup2):\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    common_elements = tuple(set1.intersection(set2))\n    return common_elements\n",
    "MbppEval/59": "def is_octagonal(n):\n    return n * (2 * n - 1)\n",
    "MbppEval/57": "def find_Max_Num(arr, n):\n    digits_str = ''.join(map(str, arr))\n    sorted_digits = sorted(digits_str, reverse=True)\n    return int(''.join(sorted_digits))\n",
    "MbppEval/11": "def remove_Occ(s, ch):\n    first_idx = s.find(ch)\n    last_idx = s.rfind(ch)\n\n    if first_idx == -1:\n        return s\n\n    return s[:first_idx] + s[first_idx+1:last_idx] + s[last_idx+1:]\n",
    "MbppEval/82": "import math\n\ndef volume_sphere(r):\n    return (4/3) * math.pi * r**3\n",
    "MbppEval/9": "def find_Rotations(str):\n    doubled_str = str + str\n    index = doubled_str.find(str)\n    return len(str) - index\n",
    "MbppEval/66": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n",
    "MbppEval/68": "def is_Monotonic(A):\n    \"\"\"\n    Check whether the given array is monotonic or not.\n\n    Args:\n        A (list): The input list to be checked.\n\n    Returns:\n        bool: True if the list is monotonic, False otherwise.\n    \"\"\"\n    is_increasing = True\n    is_decreasing = True\n\n    for i in range(1, len(A)):\n        if A[i] > A[i-1]:\n            is_decreasing = False\n        if A[i] < A[i-1]:\n            is_increasing = False\n\n    return is_increasing or is_decreasing\n",
    "MbppEval/20": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodall or not.\n\n    Examples:\n    is_woodall(383) == True\n    is_woodall(254) == False\n    is_woodall(200) == False\n    \"\"\"\n    n = 0\n    while 2 ** n - 1 <= x:\n        if 2 ** n - 1 == x:\n            return True\n        n += 1\n    return False\n",
    "MbppEval/4": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    hq.heapify(nums)\n    result = []\n    for _ in range(n):\n        if nums:\n            result.append(hq.heappop(nums))\n    result.reverse()\n    return result\n",
    "MbppEval/63": "def max_difference(test_list):\n    max_diff = 0\n    for a, b in test_list:\n        diff = abs(a - b)\n        max_diff = max(max_diff, diff)\n    return max_diff\n",
    "MbppEval/12": "def sort_matrix(M):\n    row_sums = []\n    for row in M:\n        row_sum = sum(row)\n        row_sums.append(row_sum)\n    zipped_rows = list(zip(M, row_sums))\n    zipped_rows.sort(key=lambda x: x[1])\n    sorted_rows = [row[0] for row in zipped_rows]\n    return sorted_rows\n",
    "MbppEval/3": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n\n    Examples:\n    is_not_prime(2) == False\n    is_not_prime(10) == True\n    is_not_prime(35) == True\n    \"\"\"\n    if n < 2:\n        return True\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    \n    return False\n",
    "MbppEval/61": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            digit_sum = sum(int(digit) for digit in substring)\n            if digit_sum == len(substring):\n                count[len(substring)] += 1\n    return sum(count.values())\n",
    "MbppEval/98": "def multiply_num(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)\n",
    "MbppEval/79": "def word_len(s):\n    word_length = len(s)\n    return word_length % 2 == 1\n",
    "MbppEval/104": "def sort_sublists(input_list):\n    sorted_sublists = []\n    for sublist in input_list:\n        sorted_sublist = sorted(sublist)\n        sorted_sublists.append(sorted_sublist)\n    return sorted_sublists\n",
    "MbppEval/85": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n\n    Examples:\n    surfacearea_sphere(10) == 1256.6370614359173\n    surfacearea_sphere(15) == 2827.4333882308138\n    surfacearea_sphere(20) == 5026.548245743669\n    '''\n    return 4 * math.pi * r ** 2\n",
    "MbppEval/17": "def square_perimeter(a):\n    return 4 * a\n",
    "MbppEval/72": "import math\n\ndef dif_Square(n):\n    for x in range(int(math.sqrt(n)) + 1):\n        if n == x**2 - (x-1)**2:\n            return True\n    return False\n",
    "MbppEval/77": "def is_Diff(n):\n    return n % 11 == 0\n",
    "MbppEval/6": "def is_Power_Of_Two(x):\n    \"\"\"\n    Check whether the given number is a power of 2.\n    \n    Args:\n        x (int): The number to check.\n    \n    Returns:\n        bool: True if the number is a power of 2, False otherwise.\n    \"\"\"\n    return x > 0 and (x & (x - 1)) == 0\n",
    "MbppEval/70": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n\n    Examples:\n    find_equal_tuple([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n    find_equal_tuple([(1, 2, 3), (4, 5, 6, 7)], 3) == 'All tuples do not have same length'\n    find_equal_tuple([(1, 2), (3, 4)], 2) == 'All tuples have same length'\n    \"\"\"\n    length_set = set()\n    for tup in Input:\n        length_set.add(len(tup))\n    if len(length_set) == 1:\n        return \"All tuples have same length\"\n    else:\n        return \"All tuples do not have same length\"\n",
    "MbppEval/18": "def remove_dirty_chars(string, dirty_chars):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n\n    Examples:\n    remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n    remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'\n    remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles'\n    \"\"\"\n    cleaned_chars = []\n    for char in string:\n        if char not in dirty_chars:\n            cleaned_chars.append(char)\n    return ''.join(cleaned_chars)\n",
    "MbppEval/95": "def Find_Min_Length(lst):\n    min_length = float('inf')\n    \n    for inner_list in lst:\n        length = len(inner_list)\n        if length < min_length:\n            min_length = length\n    \n    return min_length\n",
    "MbppEval/14": "def find_Volume(l, b, h):\n    base_area = 0.5 * b * h\n    volume = base_area * l\n    return volume\n",
    "MbppEval/92": "def is_undulating(n):\n    \"\"\"\n    Check whether the given number is undulating or not.\n\n    Examples:\n    is_undulating(\"1212121\") == True\n    is_undulating(\"1991\") == False\n    is_undulating(\"121\") == True\n    is_undulating(1212121) == True\n    is_undulating(1991) == False\n    is_undulating(121) == True\n    is_undulating(\"\") == False\n    is_undulating(1) == False\n    \"\"\"\n    # Convert the input to a string if it's a number\n    n_str = str(n)\n    \n    # Check for edge cases\n    if len(n_str) < 2:\n        return False\n    \n    # Iterate through the digits, checking the alternating pattern\n    is_undulating = True\n    for i in range(len(n_str) - 2):\n        if (int(n_str[i]) - int(n_str[i+1])) * (int(n_str[i+1]) - int(n_str[i+2])) >= 0:\n            is_undulating = False\n            break\n    \n    return is_undulating\n",
    "MbppEval/88": "import collections\n\ndef freq_count(list1):\n    return dict(collections.Counter(list1))\n",
    "MbppEval/109": "def odd_Equivalent(s, n):\n    num = int(s, 2)\n    count = 0\n    for _ in range(n):\n        if num & 1:  # Check if the least significant bit is 1\n            count += 1\n        num <<= 1  # Rotate the bits to the left by 1 position\n    return count\n",
    "MbppEval/89": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \n    Examples:\n    closest_num(11) == 10\n    closest_num(7) == 6\n    closest_num(12) == 11\n    \"\"\"\n    if N == 1:\n        return 0\n    \n    closest = N - 1\n    \n    for i in range(N - 1, 0, -1):\n        if i < N:\n            closest = i\n            break\n    \n    return closest\n",
    "MbppEval/97": "def frequency_lists(list1):\n    flat_list = [item for sublist in list1 for item in sublist]\n    freq_dict = {}\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n",
    "MbppEval/75": "def find_tuples(test_list, K):\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return str(result)\n",
    "MbppEval/102": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n\n    Examples:\n    snake_to_camel('python_program') == 'pythonProgram'\n    snake_to_camel('python_language') == 'pythonLanguage'\n    snake_to_camel('programming_language') == 'programmingLanguage'\n    \"\"\"\n    camel_case_parts = []\n    current_word = ''\n\n    for char in word:\n        if char == '_':\n            if current_word:\n                camel_case_parts.append(current_word.capitalize())\n                current_word = ''\n        else:\n            current_word += char\n\n    if current_word:\n        camel_case_parts.append(current_word.capitalize())\n\n    return ''.join(camel_case_parts)\n",
    "MbppEval/115": "def empty_dit(list1):\n    all_empty = True\n    for element in list1:\n        if isinstance(element, dict):\n            if element:\n                all_empty = False\n                break\n    return all_empty\n",
    "MbppEval/64": "def subject_marks(subjectmarks):\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks\n",
    "MbppEval/111": "def common_in_nested_lists(nestedlist):\n    common_elements = set(nestedlist[0])\n    for lst in nestedlist[1:]:\n        common_elements &= set(lst)\n    return list(common_elements)\n",
    "MbppEval/99": "def decimal_to_binary(n):\n    binary_str = \"\"\n    while n > 0:\n        binary_str = str(n % 2) + binary_str\n        n //= 2\n    return binary_str or \"0\"\n",
    "MbppEval/91": "def find_substring(str1, sub_str):\n    return any(sub_str in s for s in str1)\n",
    "MbppEval/80": "def tetrahedral_number(n):\n    return (n * (n + 1) * (n + 2)) / 6\n",
    "MbppEval/119": "def search(arr):\n    for i in range(0, len(arr) - 1, 2):\n        if arr[i] != arr[i+1]:\n            return arr[i]\n    return arr[-1]\n",
    "MbppEval/96": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n\n    Examples:\n    divisor(15) == 4\n    divisor(12) == 6\n    divisor(9) == 3\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n",
    "MbppEval/87": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    result = {}\n    \n    for key, value in dict1.items():\n        result[key] = value\n    \n    for key, value in dict2.items():\n        result[key] = value\n    \n    for key, value in dict3.items():\n        result[key] = value\n    \n    return result\n",
    "MbppEval/128": "def long_words(n, str):\n    words = str.split()\n    result = [word for word in words if len(word) > n]\n    return result\n",
    "MbppEval/100": "def next_smallest_palindrome(num):\n    num_str = str(num)\n    \n    if num_str == num_str[::-1]:\n        return num\n    \n    if len(num_str) % 2 == 1:\n        middle_digit = int(num_str[len(num_str) // 2])\n        new_middle_digit = middle_digit + 1\n        new_num_str = num_str[:len(num_str) // 2] + str(new_middle_digit) + num_str[len(num_str) // 2 + 1:][::-1]\n    else:\n        left_half = num_str[:len(num_str) // 2]\n        right_half = num_str[len(num_str) // 2:]\n        if int(left_half[-1]) < int(right_half[0]):\n            new_right_half = str(int(right_half[0]) + 1) + right_half[1:]\n        else:\n            new_right_half = str(int(right_half[0])) + right_half[1:]\n        new_num_str = left_half + new_right_half[::-1]\n    \n    return int(new_num_str)\n",
    "MbppEval/127": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n\n    Examples:\n    multiply_int(10, 20) == 200\n    multiply_int(5, 10) == 50\n    multiply_int(4, 8) == 32\n    \"\"\"\n    return x * y\n",
    "MbppEval/120": "def max_product_tuple(list1):\n    max_product = 0\n    for a, b in list1:\n        product = abs(a * b)\n        if product > max_product:\n            max_product = product\n    return max_product\n",
    "MbppEval/106": "def add_lists(test_list, test_tup):\n    return test_tup + tuple(test_list)\n",
    "MbppEval/94": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]\n",
    "MbppEval/118": "def string_to_list(string):\n    return string.split()\n",
    "MbppEval/133": "def sum_negativenum(nums):\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total\n",
    "MbppEval/137": "from array import array\n\ndef zero_count(nums):\n    zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n    return zero_count / len(nums)\n",
    "MbppEval/126": "def sum(a, b):\n    \"\"\"\n    Find the sum of common divisors of two given numbers.\n\n    Examples:\n    sum(10, 15) == 6\n    sum(100, 150) == 93\n    sum(4, 6) == 3\n    \"\"\"\n    def find_divisors(n):\n        \"\"\"\n        Helper function to find all the divisors of a given number.\n        \"\"\"\n        divisors = []\n        for i in range(1, n+1):\n            if n % i == 0:\n                divisors.append(i)\n        return divisors\n\n    a_divisors = find_divisors(a)\n    b_divisors = find_divisors(b)\n    common_divisors = set(a_divisors) & set(b_divisors)\n    return sum(common_divisors)\n",
    "MbppEval/123": "def amicable_numbers_sum(limit):\n    amicable_numbers = set()\n\n    for num in range(1, limit):\n        proper_divisors_sum = sum(divisor for divisor in range(1, num) if num % divisor == 0)\n        if sum(divisor for divisor in range(1, proper_divisors_sum) if proper_divisors_sum % divisor == 0) == num and num != proper_divisors_sum:\n            amicable_numbers.add(num)\n            amicable_numbers.add(proper_divisors_sum)\n\n    return sum(amicable_numbers)\n",
    "MbppEval/116": "def tuple_to_int(nums):\n    result = \"\"\n    for num in nums:\n        result += str(num)\n    return int(result)\n",
    "MbppEval/166": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n",
    "MbppEval/160": "def find_solution(a, b, n):\n    for x in range(n+1):\n        for y in range(n+1):\n            if a*x + b*y == n:\n                return ('x = ', x, ', y = ', y)\n    return 'No solution'\n",
    "MbppEval/105": "def count(lst):\n    count = 0\n    for element in lst:\n        if element:\n            count += 1\n    return count\n",
    "MbppEval/74": "def is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n\n    color_to_pattern = {}\n\n    for i in range(len(colors)):\n        color, pattern = colors[i], patterns[i]\n        if color not in color_to_pattern:\n            if pattern in color_to_pattern.values():\n                return False\n            color_to_pattern[color] = pattern\n        elif color_to_pattern[color] != pattern:\n            return False\n\n    return True\n",
    "MbppEval/163": "from math import tan, pi\n\ndef area_polygon(s, n):\n    return (n * s**2) / (4 * tan(pi / n))\n",
    "MbppEval/164": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine the sum of the divisors of an integer.\n\n    Example:\n    div_sum(36) == 91\n    div_sum(57) == 150\n    '''\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n\ndef areEquivalent(a, b):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n\n    Examples:\n    areEquivalent(36,57) == False\n    areEquivalent(2,4) == False\n    areEquivalent(23,47) == True\n    '''\n    return div_sum(a) == div_sum(b)\n",
    "MbppEval/124": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n\n    Examples:\n    angle_complex(0, 1j) == 1.5707963267948966\n    angle_complex(2, 1j) == 0.4636476090008061\n    angle_complex(0, 2j) == 1.5707963267948966\n    \"\"\"\n    z = complex(a, b)\n    return cmath.phase(z)\n",
    "MbppEval/143": "def find_lists(input_tuple):\n    \"\"\"\n    Write a function to find the number of lists present in the given tuple.\n\n    Examples:\n    find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n    find_lists(([1, 2], [3, 4], [5, 6])) == 3\n    find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1\n    \"\"\"\n    count = 0\n    for item in input_tuple:\n        if isinstance(item, list):\n            count += 1\n    return count\n",
    "MbppEval/139": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n\n    Examples:\n    circle_circumference(10) == 62.832\n    circle_circumference(5) == 31.416\n    circle_circumference(4) == 25.133\n    '''\n    circumference = 2 * math.pi * r\n    return round(circumference, 3)\n",
    "MbppEval/171": "def perimeter_pentagon(a):\n    return 5 * a\n",
    "MbppEval/167": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n\n    Examples:\n    next_power_of_2(0) == 1\n    next_power_of_2(5) == 8\n    next_power_of_2(17) == 32\n    \"\"\"\n    if n == 0:\n        return 1\n    \n    power = 1\n    while power < n:\n        power *= 2\n    \n    return power\n",
    "MbppEval/117": "def list_to_float(test_list):\n    output = []\n    for inner_list in test_list:\n        converted_pair = []\n        for element in inner_list:\n            try:\n                converted_pair.append(float(element))\n            except ValueError:\n                converted_pair.append(element)\n        output.append(tuple(converted_pair))\n    return str(output)\n",
    "MbppEval/145": "def max_Abs_Diff(arr, n):\n    max_diff = 0\n\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff\n",
    "MbppEval/161": "def remove_elements(list1, list2):\n    result = [item for item in list1 if item not in list2]\n    return result\n",
    "MbppEval/141": "def pancake_sort(nums):\n    n = len(nums)\n    \n    for i in range(n, 0, -1):\n        # Find the index of the maximum element in the unsorted part\n        max_index = max(range(i), key=nums.__getitem__)\n        \n        # Reverse the sublist from the beginning to the maximum element\n        nums[:max_index + 1] = reversed(nums[:max_index + 1])\n        \n        # Reverse the entire sublist to bring the maximum element to its correct position\n        nums[:i] = reversed(nums[:i])\n    \n    return nums\n",
    "MbppEval/170": "def sum_range_list(list1, m, n):\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i]\n    return total\n",
    "MbppEval/168": "def frequency(a, x):\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count\n",
    "MbppEval/108": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    merged = []\n    heap = []\n\n    if num1:\n        heapq.heappush(heap, (num1[0], 0, num1))\n    if num2:\n        heapq.heappush(heap, (num2[0], 1, num2))\n    if num3:\n        heapq.heappush(heap, (num3[0], 2, num3))\n\n    while heap:\n        val, idx, lst = heapq.heappop(heap)\n        merged.append(val)\n\n        if idx + 1 < len(lst):\n            heapq.heappush(heap, (lst[idx + 1], idx + 1, lst))\n\n    return merged\n",
    "MbppEval/16": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'^[a-z]+_[a-z]+$'\n    if re.match(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
    "MbppEval/142": "def count_samepair(list1, list2, list3):\n    count = 0\n    for x, y, z in zip(list1, list2, list3):\n        if x == y == z:\n            count += 1\n    return count\n",
    "MbppEval/226": "def odd_values_string(str):\n    result = \"\"\n    for i in range(1, len(str), 2):\n        result += str[i]\n    return result\n",
    "MbppEval/172": "def count_occurance(s):\n    count = 0\n    for i in range(len(s) - 2):\n        if s[i:i+3] == 'std':\n            count += 1\n    return count\n",
    "MbppEval/224": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count\n",
    "MbppEval/93": "def power(a, b):\n    result = 1\n    for _ in range(b):\n        result *= a\n    return result\n",
    "MbppEval/223": "def is_majority(arr, n, x):\n    # Find the first occurrence of x\n    left = 0\n    right = n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            if mid == 0 or arr[mid - 1] != x:\n                break\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    # If x is not present in the array, return False\n    if arr[mid] != x:\n        return False\n\n    first_occurrence = mid\n\n    # Find the last occurrence of x\n    left = mid\n    right = n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            if mid == n - 1 or arr[mid + 1] != x:\n                break\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    last_occurrence = mid\n\n    # Check if the majority condition is met\n    return last_occurrence - first_occurrence + 1 > n // 2\n",
    "MbppEval/138": "def is_Sum_Of_Powers_Of_Two(n):\n    temp = n\n    result = True\n    \n    i = 1\n    while i <= n:\n        if temp >= i:\n            if temp % i == 0:\n                temp -= i\n            else:\n                result = False\n        i *= 2\n    \n    return result\n",
    "MbppEval/230": "def replace_blank(str1, char):\n    result = ''\n    for c in str1:\n        if c == ' ':\n            result += char\n        else:\n            result += c\n    return result\n",
    "MbppEval/233": "import math\n\ndef lateralsuface_cylinder(r, h):\n    lateral_surface_area = 2 * math.pi * r * h\n    return lateral_surface_area\n",
    "MbppEval/131": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    char_list = list(str1)\n    left, right = 0, len(char_list) - 1\n\n    while left < right:\n        if char_list[left].lower() in vowels and char_list[right].lower() in vowels:\n            char_list[left], char_list[right] = char_list[right], char_list[left]\n            left += 1\n            right -= 1\n        elif char_list[left].lower() in vowels:\n            right -= 1\n        elif char_list[right].lower() in vowels:\n            left += 1\n        else:\n            left += 1\n            right -= 1\n\n    return ''.join(char_list)\n",
    "MbppEval/235": "def even_bit_set_number(n):\n    mask = 0b10101010101010101010101010101010\n    result = n | mask\n    return result\n",
    "MbppEval/248": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n\n    Examples:\n    harmonic_sum(7) == 2.5928571428571425\n    harmonic_sum(4) == 2.083333333333333\n    harmonic_sum(19) == 3.547739657143682\n    \"\"\"\n    harmonic_sum = 0.0\n    for i in range(1, n+1):\n        harmonic_sum += 1 / i\n    return harmonic_sum\n",
    "MbppEval/228": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    mask = (1 << (r - l + 1)) - 1\n    mask <<= l\n    return (n & mask) == 0\n",
    "MbppEval/129": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n    if len(my_matrix[0]) != n:\n        return False\n\n    target_sum = sum(my_matrix[0])\n\n    for i in range(n):\n        row_sum = sum(my_matrix[i])\n        col_sum = sum(my_matrix[j][i] for j in range(n))\n\n        if row_sum != target_sum or col_sum != target_sum:\n            return False\n\n        if i == 0:\n            diag_sum1 = my_matrix[i][i]\n            diag_sum2 = my_matrix[i][n-i-1]\n\n    if diag_sum1 != target_sum or diag_sum2 != target_sum:\n        return False\n\n    return True\n",
    "MbppEval/239": "def get_total_number_of_sequences(m, n):\n    count = 0\n    for first_element in range(1, m+1):\n        current_element = first_element\n        for _ in range(n-1):\n            current_element = max(current_element * 2, current_element + 1)\n            if current_element > m:\n                break\n        else:\n            count += 1\n    return count\n",
    "MbppEval/222": "def check_type(test_tuple):\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element) != data_type:\n            return False\n    return True\n",
    "MbppEval/132": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n\n    Examples:\n    tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's')) == (\"exercises\")\n    tup_string(('p','y','t','h','o','n')) == (\"python\")\n    tup_string(('p','r','o','g','r','a','m')) == (\"program\")\n    \"\"\"\n    return ''.join(tup1)\n",
    "MbppEval/253": "def count_integer(list1):\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count\n",
    "MbppEval/249": "def intersection_array(array_nums1, array_nums2):\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.append(num)\n    return intersection\n",
    "MbppEval/242": "def count_charac(str1):\n    char_count = 0\n    for char in str1:\n        char_count += 1\n    return char_count\n",
    "MbppEval/252": "import cmath\n\ndef convert(numbers):\n    r, theta = cmath.polar(complex(numbers))\n    return r, theta\n",
    "MbppEval/165": "def count_char_position(str1):\n    count = 0\n    for i, char in enumerate(str1.lower()):\n        if i + 1 == ord(char) - ord('a') + 1:\n            count += 1\n    return count\n",
    "MbppEval/229": "def re_arrange_array(arr, n):\n    left = 0\n    right = n - 1\n    \n    while left < right:\n        if arr[left] < 0:\n            left += 1\n        else:\n            arr[left], arr[right] = arr[right], arr[left]\n            right -= 1\n    \n    return arr\n",
    "MbppEval/259": "def maximize_elements(test_tup1, test_tup2):\n    result = []\n    for tup1, tup2 in zip(test_tup1, test_tup2):\n        if tup1[1] >= tup2[1]:\n            result.append(tup1)\n        else:\n            result.append(tup2)\n    return tuple(result)\n",
    "MbppEval/246": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n\n    Examples:\n    babylonian_squareroot(10) == 3.162277660168379\n    babylonian_squareroot(2) == 1.414213562373095\n    babylonian_squareroot(9) == 3.0\n    '''\n    guess = number\n    while True:\n        new_guess = (guess + number / guess) / 2\n        if abs(new_guess - guess) < 1e-10:\n            break\n        guess = new_guess\n    return new_guess\n",
    "MbppEval/244": "import math\n\ndef next_Perfect_Square(N):\n    sqrt = math.sqrt(N)\n    if sqrt.is_integer():\n        return int(sqrt + 1) ** 2\n    else:\n        return int(math.ceil(sqrt)) ** 2\n",
    "MbppEval/101": "def kth_element(arr, k):\n    if not arr:\n        raise ValueError(\"Input array cannot be empty.\")\n    if k < 1 or k > len(arr):\n        raise ValueError(\"k must be within the range [1, len(arr)].\")\n    \n    sorted_arr = sorted(arr)\n    return sorted_arr[k - 1]\n",
    "MbppEval/240": "def replace_list(list1, list2):\n    if not list1:\n        return list2\n    if not list2:\n        return list1\n    return list1[:-1] + list2\n",
    "MbppEval/251": "def insert_element(list, element):\n    return [item if i == 0 else element + item for i, item in enumerate(list)]\n",
    "MbppEval/247": "def lps(str):\n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n    \n    # Base case: length 1\n    for i in range(n):\n        dp[i][i] = 1\n    \n    # Base case: length 2\n    for i in range(n-1):\n        if str[i] == str[i+1]:\n            dp[i][i+1] = 2\n        else:\n            dp[i][i+1] = 1\n    \n    # Compute the length for substrings of length 3 to n\n    for length in range(3, n+1):\n        for i in range(n-length+1):\n            j = i + length - 1\n            if str[i] == str[j]:\n                dp[i][j] = 2 + dp[i+1][j-1]\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    \n    return dp[0][n-1]\n",
    "MbppEval/264": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n\n    Examples:\n    dog_age(12) == 61\n    dog_age(15) == 73\n    dog_age(24) == 109\n    \"\"\"\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4\n",
    "MbppEval/266": "def lateralsurface_cube(l):\n    return 4 * l**2\n",
    "MbppEval/267": "def square_Sum(n):\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**2\n    return sum\n",
    "MbppEval/245": "def max_sum(arr):\n    n = len(arr)\n    increasing = [0] * n\n    decreasing = [0] * n\n\n    # Calculate the increasing part\n    increasing[0] = arr[0]\n    for i in range(1, n):\n        increasing[i] = max(arr[i], increasing[i-1] + arr[i])\n\n    # Calculate the decreasing part\n    decreasing[n-1] = arr[n-1]\n    for i in range(n-2, -1, -1):\n        decreasing[i] = max(arr[i], decreasing[i+1] + arr[i])\n\n    max_val = 0\n    for i in range(n):\n        max_val = max(max_val, increasing[i] + decreasing[i] - arr[i])\n\n    return max_val\n",
    "MbppEval/268": "def find_star_num(n):\n    total = 0\n    for i in range(1, 2*n, 2):\n        total += i\n    return total\n",
    "MbppEval/269": "def ascii_value(k):\n    return ord(k)\n",
    "MbppEval/227": "def min_of_three(a, b, c):\n    return min(a, b, c)\n",
    "MbppEval/262": "def split_two_parts(list1, L):\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)\n",
    "MbppEval/271": "def even_Power_Sum(n):\n    total_sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            total_sum += i ** 5\n    return total_sum\n",
    "MbppEval/276": "import math\n\ndef volume_cylinder(r, h):\n    return math.pi * r**2 * h\n",
    "MbppEval/270": "def sum_even_and_even_index(arr):\n    sum_even = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n    return sum_even\n",
    "MbppEval/260": "def newman_prime(n):\n    \"\"\"\n    Find the nth Newman-Shanks-Williams prime number.\n    \"\"\"\n    if n == 1:\n        return 3\n    if n == 2:\n        return 5\n    \n    a = 3\n    b = 5\n    for _ in range(n-2):\n        a, b = b, a + b\n    \n    return b\n",
    "MbppEval/250": "def count_X(tup, x):\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count\n",
    "MbppEval/140": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n\n    Examples:\n    extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n    extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]) == [1, 2, 3, 4, 7, 8]\n    extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]) == [7, 8, 9, 10, 11, 12]\n    \"\"\"\n    result = set()\n    for inner_list in test_list:\n        result.update(inner_list)\n    return list(result)\n",
    "MbppEval/255": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l, n))\n",
    "MbppEval/261": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n\n    Examples:\n    division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n    division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)\n    division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)\n    \"\"\"\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Input tuples must have the same length.\")\n\n    result = []\n    for i in range(len(test_tup1)):\n        try:\n            result.append(test_tup1[i] / test_tup2[i])\n        except ZeroDivisionError:\n            raise ZeroDivisionError(f\"Division by zero at index {i}\")\n\n    return tuple(result)\n",
    "MbppEval/277": "def dict_filter(dict_to_filter, n):\n    filtered_dict = {}\n    for key, value in dict_to_filter.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict\n",
    "MbppEval/280": "def sequential_search(dlist, item):\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)\n",
    "MbppEval/285": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(bb|bbb)'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
    "MbppEval/290": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n\n    Examples:\n    max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) == (3, [13, 15, 17])\n    max_length([[1], [5, 7], [10, 12, 14,15]]) == (4, [10, 12, 14,15])\n    max_length([[5], [15,20,25]]) == (3, [15,20,25])\n    \"\"\"\n    max_list = max(list1, key=len)\n    return (len(max_list), max_list)\n",
    "MbppEval/292": "def find(n, m):\n    return n // m\n",
    "MbppEval/283": "def validate(n):\n    \"\"\"\n    Write a python function that takes in an integer and checks whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \n    Examples:\n    validate(1234) == True\n    validate(51241) == False\n    validate(321) == True\n    \"\"\"\n    digit_count = {}\n    \n    while n > 0:\n        digit = n % 10\n        if digit in digit_count:\n            digit_count[digit] += 1\n        else:\n            digit_count[digit] = 1\n        n //= 10\n    \n    for digit, count in digit_count.items():\n        if count > digit:\n            return False\n    \n    return True\n",
    "MbppEval/299": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    aggregates = defaultdict(int)\n\n    for name, value in stdata:\n        aggregates[name] += value\n\n    return max(aggregates.items(), key=lambda x: x[1])\n",
    "MbppEval/284": "def check_element(list, element):\n    all_equal = True\n    for item in list:\n        if item != element:\n            all_equal = False\n            break\n    return all_equal\n",
    "MbppEval/257": "def swap_numbers(a, b):\n    return (b, a)\n",
    "MbppEval/282": "def sub_list(nums1, nums2):\n    result = []\n    for i in range(min(len(nums1), len(nums2))):\n        result.append(nums1[i] - nums2[i])\n    return result\n",
    "MbppEval/297": "def flatten_list(list1):\n    flattened = []\n    \n    for element in list1:\n        if isinstance(element, list):\n            flattened.extend(flatten_list(element))\n        else:\n            flattened.append(element)\n    \n    return flattened\n",
    "MbppEval/272": "def rear_extract(test_list):\n    result = [tup[-1] for tup in test_list]\n    return result\n",
    "MbppEval/305": "import re\n\ndef start_withp(words):\n    word_list = words.split()\n    p_words = [word for word in word_list if re.match(r'^p', word, re.IGNORECASE)]\n    return tuple(p_words[:2])\n",
    "MbppEval/300": "from math import comb\n\ndef count_binary_seq(n):\n    return 2 ** n * comb(2 * n, n)\n",
    "MbppEval/286": "def max_sub_array_sum_repeated(a, n, k):\n    # Step 1: Use Kadane's algorithm to find the maximum subarray sum in the original array\n    max_subarray_sum = float('-inf')\n    current_sum = 0\n    for num in a:\n        current_sum = max(num, current_sum + num)\n        max_subarray_sum = max(max_subarray_sum, current_sum)\n\n    # Step 2: Calculate the total sum of the array\n    total_sum = sum(a)\n\n    # Step 3: If the maximum subarray sum is negative, return the maximum subarray sum\n    if max_subarray_sum < 0:\n        return max_subarray_sum\n\n    # Step 4: Calculate the maximum subarray sum in the repeated array\n    return max_subarray_sum + (total_sum * (k - 1))\n",
    "MbppEval/281": "def all_unique(test_list):\n    unique_set = set(test_list)\n    return len(unique_set) == len(test_list)\n",
    "MbppEval/295": "def sum_div(number):\n    total = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            total += i\n    return total\n",
    "MbppEval/130": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_item, max_freq = max(freq.items(), key=lambda x: x[1])\n    return max_item, max_freq\n",
    "MbppEval/304": "def find_Element(arr, ranges, rotations, index):\n    current_arr = arr.copy()\n\n    for start, end in ranges:\n        current_arr[start:end+1] = current_arr[start:end+1][rotations:] + current_arr[start:end+1][:rotations]\n\n    return current_arr[index]\n",
    "MbppEval/312": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Write a function to find the volume of a cone.\n\n    Examples:\n    volume_cone(5, 12) == 314.15926535897927\n    volume_cone(10, 15) == 1570.7963267948965\n    volume_cone(19, 17) == 6426.651371693521\n    \"\"\"\n    volume = (1/3) * math.pi * r**2 * h\n    return volume\n",
    "MbppEval/310": "def string_to_tuple(str1):\n    return tuple(str1)\n",
    "MbppEval/294": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n\n    Examples:\n    max_val(['Python', 3, 2, 4, 5, 'version']) == 5\n    max_val(['Python', 15, 20, 25]) == 25\n    max_val(['Python', 30, 20, 40, 50, 'version']) == 50\n    \"\"\"\n    if not isinstance(listval, list):\n        raise TypeError(\"Input must be a list\")\n\n    max_value = float('-inf')\n    for item in listval:\n        if isinstance(item, (int, float)):\n            max_value = max(max_value, item)\n\n    return max_value\n",
    "MbppEval/232": "import heapq\n\ndef larg_nnum(list1, n):\n    return heapq.nlargest(n, list1)\n",
    "MbppEval/388": "def highest_Power_of_2(n):\n    power_of_2 = 1\n    while power_of_2 <= n:\n        power_of_2 *= 2\n    return power_of_2 // 2\n",
    "MbppEval/301": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n\n    Examples:\n    dict_depth({'a':1, 'b': {'c': {'d': {}}}}) == 4\n    dict_depth({'a':1, 'b': {'c':'python'}}) == 2\n    dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}}) == 3\n    \"\"\"\n\n    def get_depth(d):\n        if not d:\n            return 1\n        return 1 + (max(map(get_depth, d.values())) if d else 0)\n\n    return get_depth(d)\n",
    "MbppEval/287": "def square_Sum(n):\n    sum_of_squares = 0\n    for i in range(1, n+1):\n        even_number = i * 2\n        sum_of_squares += even_number ** 2\n    return sum_of_squares\n",
    "MbppEval/311": "def set_left_most_unset_bit(n):\n    position = n.bit_length()\n    mask = (1 << position) - 1\n    return n | mask\n",
    "MbppEval/390": "def add_string(list_, string):\n    modified_strings = []\n    for item in list_:\n        modified_strings.append(string.format(item))\n    return modified_strings\n",
    "MbppEval/279": "def is_num_decagonal(n):\n    \"\"\"\n    Finds the nth decagonal number.\n    \n    Args:\n        n (int): The position of the decagonal number to find.\n    \n    Returns:\n        int: The nth decagonal number.\n    \"\"\"\n    return n * (3 * n - 2)\n",
    "MbppEval/296": "def merge_and_count(arr, n):\n    if n <= 1:\n        return 0\n\n    mid = n // 2\n    left = arr[:mid]\n    right = arr[mid:]\n\n    left_count = merge_and_count(left, mid)\n    right_count = merge_and_count(right, n - mid)\n\n    i = j = 0\n    inv_count = 0\n    for k in range(n):\n        if i < mid and (j >= n - mid or left[i] <= right[j]):\n            arr[k] = left[i]\n            i += 1\n        else:\n            arr[k] = right[j]\n            j += 1\n            inv_count += (mid - i)\n\n    return left_count + right_count + inv_count\n\ndef get_Inv_Count(arr, n):\n    return merge_and_count(arr, n)\n",
    "MbppEval/306": "def max_sum_increasing_subseq(a, n, i, k):\n    dp = [0] * n\n    \n    # Initialize dp[i] to a[i]\n    for i in range(n):\n        dp[i] = a[i]\n    \n    # Find the maximum sum of increasing subsequence up to index i\n    for j in range(i):\n        if a[j] < a[i]:\n            dp[i] = max(dp[i], dp[j] + a[i])\n    \n    # Find the maximum sum of increasing subsequence that includes the k-th element\n    for j in range(i+1, k):\n        if a[j] < a[k]:\n            dp[k] = max(dp[k], dp[j] + a[k])\n    \n    return dp[k]\n",
    "MbppEval/395": "def first_non_repeating_character(str1):\n    char_count = {}\n    \n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return None\n",
    "MbppEval/308": "def large_product(nums1, nums2, N):\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    largest_products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            product = num1 * num2\n            largest_products.append(product)\n            if len(largest_products) == N:\n                break\n        if len(largest_products) == N:\n            break\n    largest_products = sorted(largest_products, reverse=True)[:N]\n    return largest_products\n",
    "MbppEval/162": "def sum_series(n):\n    total = 0\n    for i in range(n//2 + 1):\n        total += n - 2*i\n    return total\n",
    "MbppEval/307": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    new_tuplex = deepcopy(tuplex)\n    new_tuplex[m][0] = n\n    return new_tuplex\n",
    "MbppEval/401": "def add_nested_tuples(test_tup1, test_tup2):\n    result = []\n    for t1, t2 in zip(test_tup1, test_tup2):\n        result.append((t1[0] + t2[0], t1[1] + t2[1]))\n    return tuple(result)\n",
    "MbppEval/405": "def check_tuplex(tuplex, tuple1):\n    return tuple1 in tuplex\n",
    "MbppEval/407": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n\n    Examples:\n    rearrange_bigger(12) == 21\n    rearrange_bigger(10) == False\n    rearrange_bigger(102) == 120\n    \"\"\"\n    digits = list(str(n))\n    \n    i = len(digits) - 2\n    while i >= 0 and digits[i] >= digits[i+1]:\n        i -= 1\n    \n    if i < 0:\n        return False\n    \n    j = len(digits) - 1\n    while j > i and digits[j] <= digits[i]:\n        j -= 1\n    \n    digits[i], digits[j] = digits[j], digits[i]\n    digits[i+1:] = digits[i+1:][::-1]\n    \n    return int(''.join(digits))\n",
    "MbppEval/408": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    if not nums1 or not nums2:\n        return []\n\n    pq = [(nums1[0] + nums2[0], 0, 0)]  # (sum, i, j)\n    seen = set()\n    result = []\n\n    while len(result) < k and pq:\n        _, i, j = heapq.heappop(pq)\n        if (i, j) not in seen:\n            seen.add((i, j))\n            result.append([nums1[i], nums2[j]])\n\n            if i + 1 < len(nums1):\n                heapq.heappush(pq, (nums1[i + 1] + nums2[j], i + 1, j))\n            if j + 1 < len(nums2):\n                heapq.heappush(pq, (nums1[i] + nums2[j + 1], i, j + 1))\n\n    return result\n",
    "MbppEval/293": "import math\n\ndef otherside_rightangle(w, h):\n    c = math.sqrt(w**2 + h**2)\n    return c\n",
    "MbppEval/409": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n\n    Examples:\n    min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] ) == 8\n    min_product_tuple([(10,20), (15,2), (5,10)] ) == 30\n    min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] ) == 100\n    \"\"\"\n    min_product = float('inf')\n    \n    for a, b in list1:\n        current_product = a * b\n        if current_product < min_product:\n            min_product = current_product\n    \n    return min_product\n",
    "MbppEval/391": "def convert_list_dictionary(l1, l2, l3):\n    if len(l1) != len(l2) or len(l1) != len(l3):\n        return \"Error: Input lists must have the same length.\"\n    \n    result = []\n    \n    for i in range(len(l1)):\n        d = {l1[i]: {l2[i]: l3[i]}}\n        result.append(d)\n    \n    return result\n",
    "MbppEval/422": "def find_Average_Of_Cube(n):\n    total_cubes = 0\n    for i in range(1, n+1):\n        total_cubes += i**3\n    return total_cubes / n\n",
    "MbppEval/399": "def bitwise_xor(test_tup1, test_tup2):\n    result = []\n    for a, b in zip(test_tup1, test_tup2):\n        result.append(a ^ b)\n    return tuple(result)\n",
    "MbppEval/404": "def minimum(a, b):\n    if a <= b:\n        return a\n    else:\n        return b\n",
    "MbppEval/396": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    if re.match(regex, string):\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n",
    "MbppEval/398": "def sum_of_digits(nums):\n    total = 0\n    for num in nums:\n        if isinstance(num, (int, float)):\n            num = abs(int(num))\n            while num > 0:\n                total += num % 10\n                num //= 10\n    return total\n",
    "MbppEval/71": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    swaps = True\n\n    while gap > 1 or swaps:\n        gap = max(1, int(gap / 1.25))  # Shrink the gap\n        swaps = False\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swaps = True\n\n    return nums\n",
    "MbppEval/394": "def check_distinct(test_tup):\n    return len(test_tup) == len(set(test_tup))\n",
    "MbppEval/419": "def round_and_sum(list1):\n    rounded_list = [round(num) for num in list1]\n    total_sum = sum(rounded_list)\n    return total_sum * len(rounded_list)\n",
    "MbppEval/424": "def extract_rear(test_tuple):\n    result = []\n    for string in test_tuple:\n        result.append(string[-1])\n    return result\n",
    "MbppEval/420": "def cube_Sum(n):\n    return (n * (n+1))**2 // 4\n",
    "MbppEval/393": "def max_length_list(input_list):\n    max_length = 0\n    max_list = None\n    \n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    \n    return (max_length, max_list)\n",
    "MbppEval/406": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n\n    Examples:\n    find_Parity(12) == \"Even Parity\"\n    find_Parity(7) == \"Odd Parity\"\n    find_Parity(10) == \"Even Parity\"\n    \"\"\"\n    if x & 1 == 1:\n        return \"Odd Parity\"\n    else:\n        return \"Even Parity\"\n",
    "MbppEval/414": "def overlapping(list1, list2):\n    is_overlapping = False\n    for element in list1:\n        if element in list2:\n            is_overlapping = True\n            break\n    return is_overlapping\n",
    "MbppEval/417": "def group_tuples(input_list):\n    result = {}\n    for tup in input_list:\n        first_element = tup[0]\n        if first_element not in result:\n            result[first_element] = [tup[1]]\n        else:\n            result[first_element].append(tup[1])\n    return [tuple([first] + list(rest)) for first, rest in result.items()]\n",
    "MbppEval/392": "def get_max_sum(n):\n    if n <= 1:\n        return n\n\n    recursive_sum = get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5)\n    return max(recursive_sum, n)\n",
    "MbppEval/415": "def max_Product(arr):\n    if len(arr) < 2:\n        return None\n    \n    max1 = None\n    max2 = None\n    \n    for num in arr:\n        if max1 is None or num > max1:\n            max2 = max1\n            max1 = num\n        elif max2 is None or num > max2:\n            max2 = num\n    \n    return (max1, max2)\n",
    "MbppEval/411": "import re\n\ndef snake_to_camel(word):\n    words = word.split('_')\n    camel_case = [words[0]]\n    for w in words[1:]:\n        camel_case.append(w.capitalize())\n    return ''.join(camel_case)\n",
    "MbppEval/418": "def Find_Max(lst):\n    max_length = 0\n    max_element = None\n\n    for sublst in lst:\n        if len(sublst) > max_length:\n            max_length = len(sublst)\n            max_element = sublst\n\n    return max_element\n",
    "MbppEval/410": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n\n    Examples:\n    min_val(['Python', 3, 2, 4, 5, 'version']) == 2\n    min_val(['Python', 15, 20, 25]) == 15\n    min_val(['Python', 30, 20, 40, 50, 'version']) == 20\n    \"\"\"\n    if not listval:\n        return None\n\n    min_value = listval[0]\n    for item in listval[1:]:\n        if isinstance(item, (int, float)):\n            min_value = min(min_value, item)\n\n    return min_value\n",
    "MbppEval/400": "def extract_freq(test_list):\n    freq_dict = {}\n    for tup in test_list:\n        if tup not in freq_dict:\n            freq_dict[tup] = 1\n        else:\n            freq_dict[tup] += 1\n    return len(freq_dict)\n",
    "MbppEval/413": "def extract_nth_element(list1, n):\n    result = []\n    for t in list1:\n        result.append(t[n])\n    return result\n",
    "MbppEval/434": "import re\n\ndef text_match_one(text):\n    if re.search(r'ab+', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
    "MbppEval/425": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n",
    "MbppEval/421": "def concatenate_tuple(test_tup):\n    return '-'.join(str(item) for item in test_tup)\n",
    "MbppEval/429": "def and_tuples(test_tup1, test_tup2):\n    result = tuple(a & b for a, b in zip(test_tup1, test_tup2))\n    return result\n",
    "MbppEval/432": "def median_trapezium(base1, base2, height):\n    return (base1 + base2) / 2\n",
    "MbppEval/437": "def remove_odd(str1):\n    return str1[::2]\n",
    "MbppEval/439": "def multiple_to_single(L):\n    result = \"\"\n    for num in L:\n        result += str(num)\n    return int(result)\n",
    "MbppEval/443": "def largest_neg(list1):\n    largest_neg = None\n    \n    for num in list1:\n        if num < 0 and (largest_neg is None or num > largest_neg):\n            largest_neg = num\n    \n    return largest_neg\n",
    "MbppEval/431": "def common_element(list1, list2):\n    has_common_element = False\n    \n    for element in list1:\n        if element in list2:\n            has_common_element = True\n            break\n    \n    return has_common_element\n",
    "MbppEval/444": "def trim_tuples_by_k(test_list, k):\n    \"\"\"\n    Trim each tuple in the given list by the first k elements.\n\n    Args:\n        test_list (list): A list of tuples.\n        k (int): The number of elements to trim from the beginning of each tuple.\n\n    Returns:\n        list: A list of trimmed tuples.\n    \"\"\"\n    return [tup[k:] for tup in test_list]\n",
    "MbppEval/454": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
    "MbppEval/452": "def loss_amount(actual_cost, sale_amount):\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return 0\n",
    "MbppEval/412": "def remove_odd(l):\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list\n",
    "MbppEval/445": "def index_multiplication(test_tup1, test_tup2):\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Input tuples must have the same length\")\n\n    result = ()\n    for i in range(len(test_tup1)):\n        result += ((test_tup1[i][0] * test_tup2[i][0], test_tup1[i][1] * test_tup2[i][1]),)\n\n    return result\n",
    "MbppEval/428": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list\n",
    "MbppEval/456": "def reverse_string_list(stringlist):\n    reversed_strings = []\n    for string in stringlist:\n        reversed_strings.append(string[::-1])\n    return reversed_strings\n",
    "MbppEval/273": "def substract_elements(test_tup1, test_tup2):\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)\n",
    "MbppEval/58": "def opposite_Signs(x, y):\n    if x * y < 0:\n        return True\n    else:\n        return False\n",
    "MbppEval/450": "def extract_string(strings, length):\n    return [s for s in strings if len(s) == length]\n",
    "MbppEval/265": "def list_split(S, step):\n    result = []\n    for i in range(0, len(S), step):\n        sub_list = [S[j] for j in range(i, len(S), step)]\n        result.append(sub_list)\n    return result\n",
    "MbppEval/446": "from collections import Counter \n\ndef count_Occurrence(tup, lst):\n    counter = Counter(tup)\n    total_count = 0\n    for item in lst:\n        total_count += counter[item]\n    return total_count\n",
    "MbppEval/441": "def surfacearea_cube(l):\n    return 6 * l ** 2\n",
    "MbppEval/458": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n\n    Examples:\n    rectangle_area(10, 20) == 200\n    rectangle_area(10, 5) == 50\n    rectangle_area(4, 2) == 8\n    \"\"\"\n    area = l * b\n    return area\n",
    "MbppEval/440": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Write a function to find the first adverb and their positions in a given sentence.\n\n    Examples:\n    find_adverb_position(\"clearly!! we can see the sky\") == (0, 7, 'clearly')\n    find_adverb_position(\"seriously!! there are many roses\") == (0, 9, 'seriously')\n    find_adverb_position(\"unfortunately!! sita is going to home\") == (0, 13, 'unfortunately')\n    \"\"\"\n    match = re.search(r'\\w+ly', text)\n    if match:\n        start = match.start()\n        end = match.end()\n        adverb = match.group()\n        return (start, end, adverb)\n    else:\n        return None\n",
    "MbppEval/455": "def check_monthnumb_number(monthnum2):\n    months_with_31_days = [1, 3, 5, 7, 8, 10, 12]\n    return monthnum2 in months_with_31_days\n",
    "MbppEval/457": "def Find_Min(lst):\n    min_length = float('inf')\n    min_sublist = None\n\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist\n",
    "MbppEval/447": "def cube_nums(nums):\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result\n",
    "MbppEval/438": "def count_bidirectional(test_list):\n    bidirectional_pairs = set()\n    for tup in test_list:\n        reverse_tup = (tup[1], tup[0])\n        if reverse_tup in test_list:\n            bidirectional_pairs.add(tuple(sorted(tup)))\n    return str(len(bidirectional_pairs))\n",
    "MbppEval/426": "def filter_oddnumbers(nums):\n    odd_nums = []\n    for num in nums:\n        if num % 2 != 0:\n            odd_nums.append(num)\n    return odd_nums\n",
    "MbppEval/460": "def Extract(lst):\n    \"\"\"\n    Write a python function to get the first element of each sublist.\n\n    Examples:\n    Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n    Extract([[1,2,3],[4, 5]]) == [1,4]\n    Extract([[9,8,1],[1,2]]) == [9,1]\n    \"\"\"\n    return [sub_list[0] for sub_list in lst]\n",
    "MbppEval/459": "import re\n\ndef remove_uppercase(str1):\n    return re.sub(r'[A-Z]+', '', str1)\n",
    "MbppEval/464": "def check_value(dict, n):\n    is_same = True\n    for value in dict.values():\n        if value != n:\n            is_same = False\n            break\n    return is_same\n",
    "MbppEval/436": "def neg_nos(list1):\n    negative_nums = []\n    for num in list1:\n        if num < 0:\n            negative_nums.append(num)\n    return negative_nums\n",
    "MbppEval/462": "def combinations_list(list1):\n    if not list1:\n        return [[]]\n    \n    combinations = []\n    for i in range(len(list1)):\n        current = list1[i]\n        remaining = list1[i+1:]\n        \n        for combo in combinations_list(remaining):\n            combinations.append([current] + combo)\n        \n        combinations.append([current])\n    \n    return combinations\n",
    "MbppEval/465": "def drop_empty(dict1):\n    result = {}\n    for key, value in dict1.items():\n        if value is not None:\n            result[key] = value\n    return result\n",
    "MbppEval/461": "def upper_ctr(str):\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count\n",
    "MbppEval/453": "def sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n\n    Examples:\n    sumofFactors(18) == 26\n    sumofFactors(30) == 48\n    sumofFactors(6) == 8\n    \"\"\"\n    sum_of_even_factors = 0\n    for i in range(1, n+1):\n        if n % i == 0 and i % 2 == 0:\n            sum_of_even_factors += i\n    return sum_of_even_factors\n",
    "MbppEval/448": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n\n    Examples:\n    cal_sum(9) == 49\n    cal_sum(10) == 66\n    cal_sum(11) == 88\n    \"\"\"\n    perrin = [3, 0, 2]\n    for i in range(3, n):\n        next_perrin = perrin[-3] + perrin[-2]\n        perrin.append(next_perrin)\n    return sum(perrin)\n",
    "MbppEval/470": "def add_pairwise(test_tup):\n    result = []\n    for i in range(len(test_tup) - 1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return tuple(result)\n",
    "MbppEval/471": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product *= num\n    return product % n\n",
    "MbppEval/477": "def is_lower(string):\n    return string.lower()\n",
    "MbppEval/435": "def last_Digit(n):\n    return n % 10\n",
    "MbppEval/558": "def digit_distance_nums(n1, n2):\n    n1_str = str(n1)\n    n2_str = str(n2)\n    \n    total_diff = 0\n    \n    # Iterate through the digits\n    for i in range(max(len(n1_str), len(n2_str))):\n        # Get the digits at the same position\n        d1 = int(n1_str[i]) if i < len(n1_str) else 0\n        d2 = int(n2_str[i]) if i < len(n2_str) else 0\n        \n        # Calculate the absolute difference and add it to the total\n        total_diff += abs(d1 - d2)\n    \n    return total_diff\n",
    "MbppEval/442": "from array import array\n\ndef positive_count(nums):\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count / len(nums)\n",
    "MbppEval/90": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n\n    Examples:\n    len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n    len_log([\"a\",\"ab\",\"abc\"]) == 3\n    len_log([\"small\",\"big\",\"tall\"]) == 5\n    \"\"\"\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length\n",
    "MbppEval/476": "def big_sum(nums):\n    smallest = min(nums)\n    largest = max(nums)\n    return smallest + largest\n",
    "MbppEval/557": "def toggle_string(string):\n    new_string = \"\"\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char.upper()\n    return new_string\n",
    "MbppEval/562": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n\n    Examples:\n    Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\n    Find_Max_Length([[0,1],[2,2,],[3,2,1]]) == 3\n    Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5\n    Find_Max_Length([]) == 0\n    Find_Max_Length([[]]) == 0\n    \"\"\"\n    if not lst:\n        return 0\n    \n    max_length = len(lst[0])\n    \n    for sublst in lst:\n        curr_length = len(sublst)\n        if curr_length > max_length:\n            max_length = curr_length\n    \n    return max_length\n",
    "MbppEval/565": "def split(word):\n    return list(word)\n",
    "MbppEval/573": "def unique_product(list_data):\n    product = 1\n    unique_nums = set()\n    \n    for num in list_data:\n        if num not in unique_nums:\n            unique_nums.add(num)\n            product *= num\n    \n    return product\n",
    "MbppEval/474": "def replace_char(str1, ch, newch):\n    result = \"\"\n    for c in str1:\n        if c == ch:\n            result += newch\n        else:\n            result += c\n    return result\n",
    "MbppEval/555": "def difference(n):\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_numbers\n",
    "MbppEval/559": "def max_sub_array_sum(a, size):\n    max_sum = a[0]\n    current_sum = a[0]\n\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum\n",
    "MbppEval/564": "def count_Pairs(arr, n):\n    if n < 2:\n        return 0\n    return n * (n-1) // 2\n",
    "MbppEval/478": "import re\n\ndef remove_lowercase(str1):\n    pattern = r'[a-z]+'\n    result = re.sub(pattern, '', str1)\n    return result\n",
    "MbppEval/463": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        curr = arr[i]\n        temp_max = max(curr, max_ending_here * curr, max_so_far * curr)\n        max_so_far = max(max_so_far, temp_max)\n        max_ending_here = temp_max\n\n    return max_so_far\n",
    "MbppEval/427": "import re\n\ndef change_date_format(dt):\n    match = re.match(r\"(\\d{4})-(\\d{2})-(\\d{2})\", dt)\n    if match:\n        year, month, day = match.groups()\n        reformatted_date = \"{}-{}-{}\".format(day, month, year)\n        return reformatted_date\n    else:\n        raise ValueError(\"Invalid date format: {}\".format(dt))\n",
    "MbppEval/556": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        if A[i] % 2 == 1:\n            count += (N - i - 1)\n    return count\n",
    "MbppEval/473": "def tuple_intersection(test_list1, test_list2):\n    intersection = set()\n    for tup in test_list1:\n        if tup in test_list2 or (tup[1], tup[0]) in test_list2:\n            intersection.add(tuple(sorted(tup)))\n    return intersection\n",
    "MbppEval/574": "import math\n\ndef surfacearea_cylinder(r, h):\n    surface_area = 2 * math.pi * r**2 + 2 * math.pi * r * h\n    return round(surface_area, 5)\n",
    "MbppEval/566": "def sum_digits(n):\n    total = 0\n    while n > 0:\n        digit = n % 10\n        total += digit\n        n //= 10\n    return total\n",
    "MbppEval/567": "def issort_list(list1):\n    is_sorted = True\n    for i in range(1, len(list1)):\n        if list1[i] < list1[i-1]:\n            is_sorted = False\n            break\n    return is_sorted\n",
    "MbppEval/563": "import re\n\ndef extract_values(text):\n    values = re.findall(r'\"(.*?)\"', text)\n    values = [value.strip() for value in values]\n    return values\n",
    "MbppEval/569": "def sort_sublists(list1):\n    sorted_sublists = []\n    for sublist in list1:\n        sorted_sublists.append(sorted(sublist))\n    return sorted_sublists\n",
    "MbppEval/582": "def my_dict(dict1):\n    \"\"\"\n    Write a function to check if a dictionary is empty.\n\n    Examples:\n    my_dict({10}) == False\n    my_dict({11}) == False\n    my_dict({}) == True\n    \"\"\"\n    return bool(dict1)\n",
    "MbppEval/433": "def check_greater(arr, number):\n    is_greater = True\n    for element in arr:\n        if number <= element:\n            is_greater = False\n            break\n    if is_greater:\n        return \"Yes, the entered number is greater than those in the array\"\n    else:\n        return \"No, entered number is less than those in the array\"\n",
    "MbppEval/579": "def find_dissimilar(test_tup1, test_tup2):\n    dissimilar_set = set()\n    \n    for element in test_tup1:\n        if element not in test_tup2:\n            dissimilar_set.add(element)\n    \n    for element in test_tup2:\n        if element not in test_tup1:\n            dissimilar_set.add(element)\n    \n    return tuple(dissimilar_set)\n",
    "MbppEval/581": "def surface_Area(b, h):\n    surface_area = b**2 + 2 * b * h\n    return surface_area\n",
    "MbppEval/468": "def max_product(arr):\n    \"\"\"\n    Find the maximum product formed by multiplying numbers of an increasing subsequence of the given array.\n    \"\"\"\n    n = len(arr)\n    max_prod = arr[0]\n    prev_max = arr[0]\n\n    for i in range(1, n):\n        curr_max = max(arr[i], prev_max * arr[i])\n        max_prod = max(max_prod, curr_max)\n        prev_max = curr_max\n\n    return max_prod\n",
    "MbppEval/580": "def even_ele(test_tuple, even_fnc):\n    def is_even(x):\n        return even_fnc(x)\n\n    new_tuple = ()\n    for element in test_tuple:\n        if isinstance(element, tuple):\n            new_tuple += (even_ele(element, even_fnc),)\n        elif is_even(element):\n            new_tuple += (element,)\n    return new_tuple\n",
    "MbppEval/576": "def is_Sub_Array(A, B):\n    i, j = 0, 0\n    while i < len(A) and j < len(B):\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n            if j == len(B):\n                return True\n        else:\n            i += 1\n            j = 0\n    return False\n",
    "MbppEval/587": "def list_tuple(listx):\n    return tuple(listx)\n",
    "MbppEval/577": "def last_Digit_Factorial(n):\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial % 10\n",
    "MbppEval/475": "from collections import Counter\n\ndef sort_counter(dict1):\n    counter = Counter(dict1)\n    sorted_counter = counter.most_common()\n    return sorted_counter\n",
    "MbppEval/578": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Check if the input lists have the same length\n    if len(list1) != len(list2) or len(list2) != len(list3):\n        return []\n\n    # Initialize the result list\n    result = []\n\n    # Interleave the lists\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n\n    return result\n",
    "MbppEval/309": "def maximum(a, b):\n    if a >= b:\n        return a\n    else:\n        return b\n",
    "MbppEval/554": "def Split(lst):\n    return [num for num in lst if num % 2 != 0]\n",
    "MbppEval/594": "def diff_even_odd(list1):\n    first_even = None\n    first_odd = None\n    \n    for num in list1:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is None or first_odd is None:\n        return 0\n    else:\n        return abs(first_even - first_odd)\n",
    "MbppEval/583": "def catalan_number(num):\n    dp = [0] * (num + 1)\n    dp[0] = 1\n    for i in range(1, num + 1):\n        for j in range(i):\n            dp[i] += dp[j] * dp[i - j - 1]\n    return dp[num]\n",
    "MbppEval/596": "import sys\n\ndef tuple_size(tup):\n    total_size = 0\n    for item in tup:\n        total_size += sys.getsizeof(item)\n    return total_size\n",
    "MbppEval/591": "def swap_List(newList):\n    first_elem = newList[0]\n    last_elem = newList[-1]\n    new_list = newList[1:-1]\n    new_list.insert(0, last_elem)\n    new_list.append(first_elem)\n    return new_list\n",
    "MbppEval/606": "import math\n\ndef radian_degree(degree):\n    \"\"\"\n    Write a function to convert degrees to radians.\n\n    Examples:\n    radian_degree(90) == 1.5707963267948966\n    radian_degree(60) == 1.0471975511965976\n    radian_degree(120) == 2.0943951023931953\n    \"\"\"\n    radians = degree * (math.pi / 180)\n    return radians\n",
    "MbppEval/599": "def sum_average(number):\n    total = 0\n    for i in range(1, number+1):\n        total += i\n    average = total / number\n    return (total, average)\n",
    "MbppEval/595": "def min_Swaps(str1, str2):\n    if len(str1) != len(str2):\n        return \"Not Possible\"\n    \n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    \n    if count % 2 == 0:\n        return count // 2\n    else:\n        return \"Not Possible\"\n",
    "MbppEval/586": "def split_Arr(l, n):\n    first_part = l[:n]\n    second_part = l[n:]\n    return second_part + first_part\n",
    "MbppEval/593": "import re\n\ndef removezero_ip(ip):\n    octets = re.split(r'\\.', ip)\n    modified_octets = [octet.lstrip('0') for octet in octets]\n    modified_ip = '.'.join(modified_octets)\n    return modified_ip\n",
    "MbppEval/612": "def merge(lst):\n    first_elements = []\n    second_elements = []\n    \n    for sublist in lst:\n        first_elements.append(sublist[0])\n        second_elements.append(sublist[1])\n    \n    return [first_elements, second_elements]\n",
    "MbppEval/598": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n\n    Examples:\n    armstrong_number(153) == True\n    armstrong_number(259) == False\n    armstrong_number(4458) == False\n    \"\"\"\n    num_str = str(number)\n    sum_of_cubes = sum(int(digit) ** len(num_str) for digit in num_str)\n    return sum_of_cubes == number\n",
    "MbppEval/605": "import math\n\ndef prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n\n    Examples:\n    prime_num(13) == True\n    prime_num(7) == True\n    prime_num(-1010) == False\n    '''\n    if num <= 1:\n        return False\n    elif num == 2:\n        return True\n    else:\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n",
    "MbppEval/584": "import re\n\ndef find_adverbs(text):\n    match = re.search(r'\\w+ly', text)\n    if match:\n        start = match.start()\n        end = match.end()\n        return f\"{start}-{end}: {match.group()}\"\n    else:\n        return \"\"\n",
    "MbppEval/611": "def max_of_nth(test_list, N):\n    if not isinstance(test_list, list) or not all(isinstance(inner_list, tuple) for inner_list in test_list):\n        raise ValueError(\"test_list must be a list of tuples\")\n    if N < 0 or N >= len(test_list[0]):\n        raise ValueError(\"N must be a valid index within the range of the inner lists\")\n\n    max_value = float('-inf')\n    for inner_list in test_list:\n        max_value = max(max_value, inner_list[N])\n\n    return max_value\n",
    "MbppEval/560": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n\n    Examples:\n    union_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (3, 4, 5, 6, 7, 10)\n    union_elements((1, 2, 3, 4),(3, 4, 5, 6)) == (1, 2, 3, 4, 5, 6)\n    union_elements((11, 12, 13, 14),(13, 15, 16, 17)) == (11, 12, 13, 14, 15, 16, 17)\n    \"\"\"\n    combined_list = list(test_tup1) + list(test_tup2)\n    unique_list = list(set(combined_list))\n    sorted_list = sorted(unique_list)\n    return tuple(sorted_list)\n",
    "MbppEval/589": "import math\n\ndef perfect_squares(a, b):\n    perfect_squares_list = []\n    for num in range(a, b+1):\n        sqrt = math.sqrt(num)\n        if sqrt.is_integer():\n            perfect_squares_list.append(int(sqrt) ** 2)\n    return perfect_squares_list\n",
    "MbppEval/614": "def cummulative_sum(test_list):\n    total_sum = 0\n    for tup in test_list:\n        total_sum += sum(tup)\n    return total_sum\n",
    "MbppEval/602": "def first_repeated_char(str1):\n    char_dict = {}\n    for i, char in enumerate(str1):\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = i\n    return \"None\"\n",
    "MbppEval/603": "def is_ludic(n):\n    \"\"\"\n    Helper function to check if a given number is Ludic.\n    \"\"\"\n    if n <= 1:\n        return True\n    \n    # Create a list of numbers from 1 to n\n    numbers = list(range(1, n + 1))\n    \n    # Remove every nth number from the list\n    i = 0\n    while len(numbers) > 1:\n        i = (i + numbers[i] - 1) % len(numbers)\n        numbers.pop(i)\n    \n    return numbers[0] == n\n\ndef get_ludic(n):\n    \"\"\"\n    Get all Ludic numbers smaller than or equal to a given integer.\n    \"\"\"\n    ludic_numbers = []\n    for i in range(1, n + 1):\n        if is_ludic(i):\n            ludic_numbers.append(i)\n    return ludic_numbers\n",
    "MbppEval/585": "import heapq\n\ndef expensive_items(items, n):\n    most_expensive = []\n\n    for item in items:\n        if len(most_expensive) < n:\n            heapq.heappush(most_expensive, (item['price'], item))\n        elif item['price'] > most_expensive[0][0]:\n            heapq.heappop(most_expensive)\n            heapq.heappush(most_expensive, (item['price'], item))\n\n    return [item[1] for item in most_expensive]\n",
    "MbppEval/600": "def is_Even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n",
    "MbppEval/615": "def average_tuple(nums):\n    averages = []\n    for num_tuple in nums:\n        avg = sum(num_tuple) / len(num_tuple)\n        averages.append(avg)\n    return averages\n",
    "MbppEval/608": "def bell_Number(n):\n    \"\"\"\n    Finds the nth Bell number.\n    \n    Args:\n        n (int): The index of the Bell number to be calculated.\n    \n    Returns:\n        int: The nth Bell number.\n    \"\"\"\n    if n == 0:\n        return 1\n    \n    bell_numbers = [0] * (n + 1)\n    bell_numbers[0] = 1\n    \n    for i in range(1, n + 1):\n        for j in range(i):\n            bell_numbers[i] += (binomial(i, j) * bell_numbers[j])\n    \n    return bell_numbers[n]\n\ndef binomial(n, k):\n    \"\"\"\n    Calculates the binomial coefficient C(n, k).\n    \n    Args:\n        n (int): The total number of elements.\n        k (int): The number of elements being chosen.\n    \n    Returns:\n        int: The binomial coefficient C(n, k).\n    \"\"\"\n    return factorial(n) // (factorial(k) * factorial(n - k))\n\ndef factorial(n):\n    \"\"\"\n    Calculates the factorial of a given number.\n    \n    Args:\n        n (int): The number to calculate the factorial for.\n    \n    Returns:\n        int: The factorial of the given number.\n    \"\"\"\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n",
    "MbppEval/69": "def is_sublist(l, s):\n    return str(s) in str(l)\n",
    "MbppEval/617": "import math\n\ndef min_Jumps(steps, d):\n    if d == 0:\n        return 0\n    elif d % steps == 0:\n        return d // steps\n    else:\n        return math.ceil(d / steps)\n",
    "MbppEval/590": "import cmath\n\ndef polar_rect(x, y):\n    r = (x**2 + y**2)**0.5\n    theta = cmath.atan2(y, x)\n    a = r * cmath.cos(theta)\n    b = r * cmath.sin(theta)\n    return ((a, theta), complex(a, b))\n",
    "MbppEval/619": "def move_num(test_str):\n    result = \"\"\n    for char in test_str:\n        if char.isdigit():\n            result += char\n        else:\n            result = char + result\n    return result\n",
    "MbppEval/572": "def two_unique_nums(nums):\n    unique_nums = set()\n    for num in nums:\n        unique_nums.add(num)\n    return list(unique_nums)\n",
    "MbppEval/616": "def tuple_modulo(test_tup1, test_tup2):\n    if len(test_tup1) != len(test_tup2):\n        return \"Error: Tuples must have the same length.\"\n    return tuple(a % b for a, b in zip(test_tup1, test_tup2))\n",
    "MbppEval/624": "def is_upper(string):\n    return string.upper()\n",
    "MbppEval/618": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n\n    Examples:\n    div_list([4,5,6],[1, 2, 3]) == [4.0,2.5,2.0]\n    div_list([3,2],[1,4]) == [3.0, 0.5]\n    div_list([90,120],[50,70]) == [1.8, 1.7142857142857142]\n    \"\"\"\n    if len(nums1) != len(nums2):\n        raise ValueError(\"Input lists must have the same length\")\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n\n    return result\n",
    "MbppEval/588": "def big_diff(nums):\n    largest = max(nums)\n    smallest = min(nums)\n    return largest - smallest\n",
    "MbppEval/628": "def replace_spaces(string):\n    result = \"\"\n    for char in string:\n        if char == \" \":\n            result += \"%20\"\n        else:\n            result += char\n    return result\n",
    "MbppEval/631": "def replace_spaces(text):\n    result = ''\n    for char in text:\n        if char.isspace():\n            result += '_'\n        else:\n            result += char\n    return result\n",
    "MbppEval/623": "def nth_nums(nums, n):\n    results = [num ** n for num in nums]\n    return results\n",
    "MbppEval/622": "def get_median(arr1, arr2, n):\n    combined = sorted(arr1 + arr2)\n    if n % 2 == 0:\n        middle1 = combined[n - 1]\n        middle2 = combined[n]\n        median = (middle1 + middle2) / 2\n    else:\n        median = combined[n // 2]\n    return median\n",
    "MbppEval/635": "import heapq as hq\n\ndef heap_sort(iterable):\n    \"\"\"\n    Write a function to sort the given list.\n\n    Examples:\n    heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85]\n    heap_sort([7, 1, 9, 5]) == [1, 5, 7, 9]\n    \"\"\"\n    # Step 1: Convert the list into a max-heap\n    heap = list(iterable)\n    hq.heapify(heap)\n\n    # Step 2: Repeatedly extract the maximum element and append it to the result\n    result = []\n    while heap:\n        result.append(hq.heappop(heap))\n\n    return result\n",
    "MbppEval/632": "def move_zero(num_list):\n    non_zero_list = []\n    zero_count = 0\n    \n    for num in num_list:\n        if num != 0:\n            non_zero_list.append(num)\n        else:\n            zero_count += 1\n    \n    non_zero_list.extend([0] * zero_count)\n    \n    return non_zero_list\n",
    "MbppEval/610": "def remove_kth_element(list1, L):\n    if not list1 or L >= len(list1):\n        return list1\n\n    new_list = []\n    for i, item in enumerate(list1):\n        if i != L:\n            new_list.append(item)\n\n    return new_list\n",
    "MbppEval/725": "import re\n\ndef extract_quotation(text1):\n    return re.findall(r'\"([^\"]*)\"', text1)\n",
    "MbppEval/638": "import math\n\ndef wind_chill(v, t):\n    wind_chill = 13.12 + 0.6215 * t - 11.37 * v ** 0.16 + 0.3965 * t * v ** 0.16\n    return math.ceil(wind_chill)\n",
    "MbppEval/633": "def pair_xor_Sum(arr, n):\n    total_xor_sum = 0\n    \n    # Step 2: Calculate the XOR of all elements\n    for num in arr:\n        total_xor_sum ^= num\n    \n    # Step 3: XOR each element with the total XOR\n    for num in arr:\n        total_xor_sum ^= num\n    \n    return total_xor_sum\n",
    "MbppEval/734": "def sum_Of_Subarray_Prod(arr, n):\n    total_sum = 0\n    product = 1\n    \n    for i in range(n):\n        total_sum += arr[i] * product\n        product *= arr[i]\n    \n    return total_sum\n",
    "MbppEval/639": "def sample_nam(sample_names):\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length\n",
    "MbppEval/644": "def reverse_Array_Upto_K(input, k):\n    modified_list = input[:]\n    modified_list[:k] = reversed(modified_list[:k])\n    return modified_list\n",
    "MbppEval/731": "import math\n\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n\n    Examples:\n    lateralsurface_cone(5, 12) == 204.20352248333654\n    lateralsurface_cone(10, 15) == 566.3586699569488\n    lateralsurface_cone(19, 17) == 1521.8090132193388\n    \"\"\"\n    lateral_surface_area = math.pi * r * math.sqrt(r ** 2 + h ** 2)\n    return lateral_surface_area\n",
    "MbppEval/568": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n\n    Examples:\n    empty_list(5) == [{}, {}, {}, {}, {}]\n    empty_list(6) == [{}, {}, {}, {}, {}, {}]\n    empty_list(7) == [{}, {}, {}, {}, {}, {}, {}]\n    \"\"\"\n    empty_dicts = []\n    for _ in range(length):\n        empty_dicts.append({})\n    return empty_dicts\n",
    "MbppEval/643": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
    "MbppEval/723": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    if len(nums1) != len(nums2):\n        return 0\n    \n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    \n    return count\n",
    "MbppEval/629": "def Split(list_of_numbers):\n    even_numbers = []\n    for num in list_of_numbers:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers\n",
    "MbppEval/722": "def filter_data(students, h, w):\n    return {student: (height, weight) for student, (height, weight) in students.items() if height >= h and weight >= w}\n",
    "MbppEval/721": "def maxAverageOfPath(cost):\n    N = len(cost)\n    dp = [[0] * N for _ in range(N)]\n    \n    # Base cases\n    dp[0][0] = cost[0][0]\n    \n    # Compute the maximum average path\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                continue\n            elif i == 0:\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    \n    return dp[N-1][N-1] / (2*N - 1)\n",
    "MbppEval/724": "def power_base_sum(base, power):\n    result = base ** power\n    result_str = str(result)\n    digit_sum = 0\n    for digit in result_str:\n        digit_sum += int(digit)\n    return digit_sum\n",
    "MbppEval/732": "import re\n\ndef replace_specialchar(text):\n    return re.sub(r'[ ,.]', ':', text)\n",
    "MbppEval/737": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    if re.match(regex, string):\n        return 'Valid'\n    else:\n        return 'Invalid'\n",
    "MbppEval/726": "def multiply_elements(test_tup):\n    result = []\n    for i in range(len(test_tup) - 1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)\n",
    "MbppEval/730": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    return [k for k, _ in groupby(nums)]\n",
    "MbppEval/738": "def geometric_sum(n):\n    result = 0\n    for i in range(n):\n        result += 1 / (2 ** i)\n    return result\n",
    "MbppEval/740": "def tuple_to_dict(test_tup):\n    result = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i + 1]\n        result[key] = value\n    return result\n",
    "MbppEval/736": "import bisect\n\ndef left_insertion(a, x):\n    return bisect.bisect_left(a, x)\n",
    "MbppEval/733": "def find_first_occurrence(A, x):\n    left = 0\n    right = len(A) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if A[mid] == x:\n            if mid == 0 or A[mid-1] != x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1\n",
    "MbppEval/741": "def all_Characters_Same(s):\n    unique_chars = set(s)\n    return len(unique_chars) == 1\n",
    "MbppEval/742": "import math\n\ndef area_tetrahedron(side):\n    return math.sqrt(3) * (side ** 2)\n",
    "MbppEval/607": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None\n",
    "MbppEval/592": "import math\n\ndef binomial_Coeff(n, k):\n    return math.factorial(n) // (math.factorial(k) * math.factorial(n-k))\n\ndef sum_Of_product(n):\n    total = 0\n    for i in range(n):\n        total += binomial_Coeff(n, i) * binomial_Coeff(n, i+1)\n    return total\n",
    "MbppEval/720": "def add_dict_to_tuple(test_tup, test_dict):\n    result = list(test_tup)\n    for key, value in test_dict.items():\n        result.append(key)\n        result.append(value)\n    return tuple(result)\n",
    "MbppEval/743": "def rotate_right(lst, k, m):\n    n = len(lst)\n    for _ in range(m):\n        rotate_by = k % n\n        part1 = lst[-rotate_by:]\n        part2 = lst[:-rotate_by]\n        lst = part1 + part2\n    return lst\n",
    "MbppEval/739": "import math\n\ndef find_Index(n):\n    i = 0\n    triangular_number = 0\n    \n    while len(str(triangular_number)) < n:\n        i += 1\n        triangular_number += i\n    \n    return i\n",
    "MbppEval/747": "def lcs_of_three(X, Y, Z):\n    m, n, o = len(X), len(Y), len(Z)\n    dp = [[[0] * (o + 1) for _ in range(n + 1)] for _ in range(m + 1)]\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, o + 1):\n                if X[i - 1] == Y[j - 1] == Z[k - 1]:\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i - 1][j][k], dp[i][j - 1][k], dp[i][j][k - 1])\n\n    return dp[m][n][o]\n",
    "MbppEval/744": "def check_none(test_tup):\n    return any(x is None for x in test_tup)\n",
    "MbppEval/754": "def extract_index_list(l1, l2, l3):\n    result = []\n    min_len = min(len(l1), len(l2), len(l3))\n    for i in range(min_len):\n        if l1[i] == l2[i] == l3[i]:\n            result.append(l1[i])\n    return result\n",
    "MbppEval/620": "def largest_subset(a):\n    max_size = 0\n    current_subset = []\n    \n    for num in a:\n        can_add = True\n        for subset_num in current_subset:\n            if num % subset_num != 0 and subset_num % num != 0:\n                can_add = False\n                break\n        \n        if can_add:\n            current_subset.append(num)\n            if len(current_subset) > max_size:\n                max_size = len(current_subset)\n        else:\n            current_subset = [num]\n    \n    return max_size\n",
    "MbppEval/756": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab+'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
    "MbppEval/748": "import re\n\ndef capital_words_spaces(str1):\n    result = \"\"\n    prev_char_space = True # Assume the first character is preceded by a space\n    \n    for char in str1:\n        if char.isupper() and not prev_char_space:\n            result += \" \"\n        result += char\n        prev_char_space = char == \" \"\n    \n    return result\n",
    "MbppEval/762": "def check_monthnumber_number(monthnum3):\n    if not isinstance(monthnum3, int) or monthnum3 < 1 or monthnum3 > 12:\n        return False\n    return monthnum3 in [4, 6, 9, 11]\n",
    "MbppEval/750": "def add_tuple(test_list, test_tup):\n    return test_list + list(test_tup)\n",
    "MbppEval/757": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n    Examples:\n    count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"]) == '2'\n    count_reverse_pairs([\"geeks\", \"best\", \"for\", \"skeeg\"]) == '1'\n    count_reverse_pairs([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == '2'\n    \"\"\"\n    reverse_dict = {}\n    count = 0\n\n    for word in test_list:\n        reverse_word = word[::-1]\n        if reverse_word in reverse_dict:\n            count += 1\n            reverse_dict[reverse_word] += 1\n        else:\n            reverse_dict[word] = 1\n\n    return str(count)\n",
    "MbppEval/766": "def pair_wise(l1):\n    pairs = []\n    for i in range(len(l1) - 1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs\n",
    "MbppEval/745": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum+1):\n        digits = [int(d) for d in str(num)]\n        if all(num % d == 0 for d in digits):\n            result.append(num)\n    return result\n",
    "MbppEval/749": "def sort_numeric_strings(nums_str):\n    nums = [int(num) for num in nums_str]\n    nums.sort()\n    return nums\n",
    "MbppEval/763": "def find_min_diff(arr, n):\n    # Sort the array in ascending order\n    arr.sort()\n    \n    # Initialize min_diff to a large value\n    min_diff = float('inf')\n    \n    # Iterate through the sorted array and calculate the difference\n    for i in range(1, n):\n        diff = abs(arr[i] - arr[i-1])\n        min_diff = min(min_diff, diff)\n    \n    return min_diff\n",
    "MbppEval/755": "def second_smallest(numbers):\n    if not numbers:\n        return None\n\n    smallest = numbers[0]\n    second_smallest = numbers[0]\n\n    for num in numbers[1:]:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num > smallest:\n            second_smallest = num\n\n    return second_smallest\n",
    "MbppEval/746": "import math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    area = (r ** 2 * a * math.pi) / 360\n    return area\n",
    "MbppEval/752": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)\n",
    "MbppEval/770": "def odd_num_sum(n):\n    total_sum = 0\n    for i in range(1, 2*n, 2):\n        total_sum += i**4\n    return total_sum\n",
    "MbppEval/637": "def noprofit_noloss(actual_cost, sale_amount):\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n",
    "MbppEval/751": "def check_min_heap_helper(arr, i):\n    left_child_idx = 2 * i + 1\n    right_child_idx = 2 * i + 2\n    \n    # Check if the current node satisfies the min-heap property\n    if left_child_idx < len(arr) and arr[left_child_idx] < arr[i]:\n        return False\n    if right_child_idx < len(arr) and arr[right_child_idx] < arr[i]:\n        return False\n    \n    # Recursively check the left and right subtrees\n    if left_child_idx < len(arr):\n        if not check_min_heap_helper(arr, left_child_idx):\n            return False\n    if right_child_idx < len(arr):\n        if not check_min_heap_helper(arr, right_child_idx):\n            return False\n    \n    # If we reach this point, the min-heap property is satisfied\n    return True\n",
    "MbppEval/767": "def get_pairs_count(arr, sum):\n    num_count = {}\n    for num in arr:\n        num_count[num] = num_count.get(num, 0) + 1\n\n    count = 0\n    for a in num_count:\n        b = sum - a\n        if b in num_count:\n            count += num_count[a] * num_count[b]\n\n    return count // 2\n",
    "MbppEval/625": "def swap_List(newList):\n    first = newList[0]\n    last = newList[-1]\n\n    newList[0] = last\n    newList[-1] = first\n\n    return newList\n",
    "MbppEval/759": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n\n    Examples:\n    is_decimal('123.11') == True\n    is_decimal('e666.86') == False\n    is_decimal('3.124587') == False\n    \"\"\"\n    if '.' in num and num.replace('.', '').isdigit():\n        decimal_part = num.split('.')[1]\n        if len(decimal_part) == 2:\n            return True\n    return False\n",
    "MbppEval/772": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = [word for word in words if len(word) != K]\n    return ' '.join(new_words)\n",
    "MbppEval/758": "def unique_sublists(list1):\n    result = {}\n    for sublst in list1:\n        sublst = tuple(sublst)\n        if sublst in result:\n            result[sublst] += 1\n        else:\n            result[sublst] = 1\n    return result\n",
    "MbppEval/760": "def unique_Element(arr):\n    unique_count = 0\n    seen = set()\n    for num in arr:\n        if num not in seen:\n            unique_count += 1\n            seen.add(num)\n    return 'YES' if unique_count == 1 else 'NO'\n",
    "MbppEval/778": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    result = []\n    for _, group in groupby(list1):\n        result.append(list(group))\n    return result\n",
    "MbppEval/764": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count\n",
    "MbppEval/84": "def sequence(n):\n    if n == 1:\n        return 1\n    else:\n        return 1 + sequence(sequence(n-1))\n",
    "MbppEval/777": "def find_sum(arr):\n    sum_of_unique = 0\n    unique_elements = set()\n    \n    for num in arr:\n        if num not in unique_elements:\n            unique_elements.add(num)\n            sum_of_unique += num\n    \n    return sum_of_unique\n",
    "MbppEval/773": "import re\n\ndef occurance_substring(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None\n",
    "MbppEval/771": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    bracket_map = {\n        '{': '}',\n        '(': ')',\n        '[': ']'\n    }\n    \n    for char in exp:\n        if char in bracket_map:\n            stack.append(char)\n        elif char in bracket_map.values():\n            if not stack or bracket_map[stack.pop()] != char:\n                return False\n    \n    return len(stack) == 0\n",
    "MbppEval/780": "from itertools import combinations\n\ndef find_combinations(test_list):\n    result = []\n    for a, b in combinations(test_list, 2):\n        result.append((a[0] + b[0], a[1] + b[1]))\n    return result\n",
    "MbppEval/765": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Find the nth polite number.\n    \"\"\"\n    k = 1\n    while True:\n        # Solve the equation n = k * (2a + k - 1) / 2 for a\n        a = (n - k * (k - 1) // 2) / k\n        if a.is_integer() and a > 0:\n            return int(a + (k - 1) / 2)\n        k += 1\n",
    "MbppEval/787": "import re\n\ndef text_match_three(text):\n    pattern = r'ab{3}'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
    "MbppEval/785": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n\n    Examples:\n    tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\n    tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)\n    tuple_str_int(\"(4, 5, 6)\") == (4, 5, 6)\n    \"\"\"\n    tuple_str = test_str.strip(\"()\")\n    str_list = tuple_str.split(\", \")\n    int_list = [int(x) for x in str_list]\n    return tuple(int_list)\n",
    "MbppEval/630": "def adjac(ele, sub = []):\n    result = []\n    for x in range(ele[0]-1, ele[0]+2):\n        for y in range(ele[1]-1, ele[1]+2):\n            if (x, y) != ele:\n                result.append([x, y])\n    return result\n",
    "MbppEval/782": "def odd_length_sum(arr):\n    total_sum = 0\n    current_sum = 0\n    for num in arr:\n        current_sum += num\n        if len(str(current_sum)) % 2 != 0:\n            total_sum += current_sum\n    return total_sum\n",
    "MbppEval/788": "def new_tuple(test_list, test_str):\n    new_tup = ()\n    for item in test_list:\n        new_tup += (item,)\n    new_tup += (test_str,)\n    return new_tup\n",
    "MbppEval/784": "def mul_even_odd(list1):\n    even_num = None\n    odd_num = None\n\n    for num in list1:\n        if even_num is None and num % 2 == 0:\n            even_num = num\n        elif odd_num is None and num % 2 != 0:\n            odd_num = num\n\n        if even_num is not None and odd_num is not None:\n            return even_num * odd_num\n\n    return None\n",
    "MbppEval/779": "def unique_sublists(list1):\n    result = {}\n    for sub_list in list1:\n        sub_list_tuple = tuple(sub_list)\n        if sub_list_tuple in result:\n            result[sub_list_tuple] += 1\n        else:\n            result[sub_list_tuple] = 1\n    return result\n",
    "MbppEval/783": "import math\n\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx - mn\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    if df == 0:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df)+360)%360\n    elif mx == g:\n        h = (60 * ((b-r)/df)+120)%360\n    elif mx == b:\n        h = (60 * ((r-g)/df)+240)%360\n    v = mx*100\n    return h, s, v\n",
    "MbppEval/792": "def count_list(input_list):\n    count = 0\n    for element in input_list:\n        if isinstance(element, list):\n            count += 1\n    return count\n",
    "MbppEval/790": "def even_position(nums):\n    result = True\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 != 0:\n            result = False\n            break\n    return result\n",
    "MbppEval/800": "import re\n\ndef remove_all_spaces(text):\n    return re.sub(r'\\s+', '', text)\n",
    "MbppEval/797": "def sum_odd(l, r):\n    result = 0\n    for num in range(l, r+1):\n        if num % 2 != 0:\n            result += num\n    return result\n",
    "MbppEval/728": "def sum_list(lst1, lst2):\n    if len(lst1) != len(lst2):\n        raise ValueError(\"Input lists must have the same length.\")\n\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result\n",
    "MbppEval/802": "def count_rotation(arr, n):\n    left = 0\n    right = n - 1\n\n    while left < right:\n        mid = (left + right) // 2\n\n        if arr[mid] > arr[right]:\n            left = mid + 1\n        else:\n            right = mid\n\n    return left\n",
    "MbppEval/786": "import bisect\n\ndef right_insertion(a, x):\n    return bisect.bisect_right(a, x)\n",
    "MbppEval/803": "import math\n\ndef is_perfect_square(n):\n    sqrt = math.sqrt(n)\n    return sqrt.is_integer()\n",
    "MbppEval/769": "def Diff(li1, li2):\n    diff = []\n    for item in li1:\n        if item not in li2:\n            diff.append(item)\n    for item in li2:\n        if item not in li1:\n            diff.append(item)\n    return diff\n",
    "MbppEval/781": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 2\n    if math.sqrt(n).is_integer():\n        count -= 1\n    if count % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n",
    "MbppEval/805": "def max_sum_list(lists):\n    max_sum = 0\n    max_list = None\n    \n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n    \n    return max_list\n",
    "MbppEval/794": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b$'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
    "MbppEval/801": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y == z:\n        count = 3\n    elif x == y or x == z or y == z:\n        count = 2\n    return count\n",
    "MbppEval/799": "def left_rotate(n, d):\n    d = d % 32\n    left_bits = n << d\n    right_bits = n >> (32 - d)\n    rotated_num = left_bits | right_bits\n    return rotated_num\n",
    "MbppEval/807": "def first_odd(nums):\n    first_odd_num = None\n    \n    for num in nums:\n        if num % 2 != 0:\n            first_odd_num = num\n            break\n    \n    return first_odd_num\n",
    "MbppEval/472": "def check_Consecutive(l):\n    is_consecutive = True\n    for i in range(len(l) - 1):\n        if l[i + 1] - l[i] != 1:\n            is_consecutive = False\n            break\n    return is_consecutive\n",
    "MbppEval/809": "def check_smaller(test_tup1, test_tup2):\n    if len(test_tup1) != len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    \n    return True\n",
    "MbppEval/753": "def min_k(test_list, K):\n    test_list.sort(key=lambda x: x[1])\n    return test_list[:K]\n",
    "MbppEval/798": "def _sum(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total\n",
    "MbppEval/808": "def check_K(test_tup, K):\n    found = False\n    for elem in test_tup:\n        if elem == K:\n            found = True\n            break\n    return found\n",
    "MbppEval/804": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0\n",
    "MbppEval/806": "def max_run_uppercase(test_str):\n    max_run = 0\n    current_run = 0\n    \n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            current_run = 0\n        \n        max_run = max(max_run, current_run)\n    \n    return max_run\n",
    "MbppEval/776": "def count_vowels(test_str):\n    vowels = 'aeiou'\n    count = 0\n    \n    for i in range(1, len(test_str)-1):\n        if test_str[i] in vowels and test_str[i-1] in vowels and test_str[i+1] in vowels:\n            count += 1\n    \n    return count\n",
    "MbppEval/796": "def return_sum(dict):\n    total_sum = 0\n    for value in dict.values():\n        total_sum += value\n    return total_sum\n",
    "MbppEval/7": "def find_char_long(text):\n    words = text.split()\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words\n",
    "MbppEval/791": "def remove_nested(test_tup):\n    result = []\n    for item in test_tup:\n        if not isinstance(item, tuple):\n            result.append(item)\n    return tuple(result)\n",
    "MbppEval/62": "def smallest_num(xs):\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest\n",
    "MbppEval/793": "def last(arr, x, n):\n    left = 0\n    right = n - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == x:\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    if left == 0:\n        return -1\n    else:\n        return left - 1\n",
    "MbppEval/775": "def odd_position(nums):\n    is_odd_position = True\n    for i in range(len(nums)):\n        if i % 2 == 1 and nums[i] % 2 == 0:\n            is_odd_position = False\n            break\n    return is_odd_position\n",
    "MbppEval/627": "def find_first_missing(array):\n    \"\"\"\n    Find the smallest missing number from a sorted list of natural numbers.\n\n    Examples:\n    find_first_missing([0, 1, 2, 3]) == 4\n    find_first_missing([0, 1, 2, 6, 9]) == 3\n    find_first_missing([2, 3, 5, 8, 9]) == 0\n    \"\"\"\n    array.sort()\n    for i, num in enumerate(array):\n        if num != i:\n            return i\n    return len(array)\n",
    "MbppEval/451": "import re\n\ndef remove_whitespaces(text1):\n    return re.sub(r'\\s+', '', text1)\n",
    "MbppEval/278": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n\n    Examples:\n    count_first_elements((1, 5, 7, (4, 6), 10)) == 3\n    count_first_elements((2, 9, (5, 7), 11)) == 2\n    count_first_elements((11, 15, 5, 8, (2, 3), 8)) == 4\n    \"\"\"\n    for i, elem in enumerate(test_tup):\n        if isinstance(elem, tuple):\n            return i\n    return len(test_tup)\n",
    "MbppEval/234": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n\n    Parameters:\n    l (int or float): The side length of the cube.\n\n    Returns:\n    int or float: The volume of the cube.\n\n    Examples:\n    volume_cube(3) == 27\n    volume_cube(2) == 8\n    volume_cube(5) == 125\n    '''\n    volume = l * l * l\n    return volume\n",
    "MbppEval/237": "from collections import Counter\n\ndef check_occurences(test_list):\n    tuple_count = Counter(test_list)\n    return dict(tuple_count)\n",
    "MbppEval/479": "def first_Digit(n):\n    num_str = str(n)\n    return int(num_str[0])\n",
    "MbppEval/597": "def find_kth(arr1, arr2, k):\n    if not arr1:\n        return arr2[k - 1]\n    if not arr2:\n        return arr1[k - 1]\n\n    if k == 1:\n        return min(arr1[0], arr2[0])\n\n    mid1, mid2 = len(arr1) // 2, len(arr2) // 2\n    if mid1 + mid2 < k - 1:\n        if arr1[mid1] < arr2[mid2]:\n            return find_kth(arr1[mid1 + 1:], arr2, k - (mid1 + 1))\n        else:\n            return find_kth(arr1, arr2[mid2 + 1:], k - (mid2 + 1))\n    else:\n        if arr1[mid1] < arr2[mid2]:\n            return find_kth(arr1[:mid1 + 1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[:mid2 + 1], k)\n",
    "MbppEval/103": "def eulerian_num(n, m):\n    \"\"\"\n    Find the Eulerian number a(n, m).\n\n    Args:\n        n (int): The value of n.\n        m (int): The value of m.\n\n    Returns:\n        int: The Eulerian number a(n, m).\n    \"\"\"\n    if m == 0:\n        return 1\n    \n    dp = [[0] * (m+1) for _ in range(n+1)]\n    \n    # Initialize the base cases\n    for i in range(1, n+1):\n        dp[i][0] = 1\n    \n    # Compute the Eulerian numbers using the recurrence relation\n    for i in range(2, n+1):\n        for j in range(1, min(i, m)+1):\n            dp[i][j] = (i-j) * dp[i-1][j-1] + (j+1) * dp[i-1][j]\n    \n    return dp[n][m]\n",
    "MbppEval/389": "def find_lucas(n):\n    \"\"\"\n    Find the n'th Lucas number.\n\n    Args:\n        n (int): The index of the Lucas number to find.\n\n    Returns:\n        int: The n'th Lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for i in range(2, n + 1):\n            a, b = b, a + b\n        return a\n",
    "MbppEval/640": "import re\n\ndef remove_parenthesis(items):\n    output = []\n    for item in items:\n        modified_item = re.sub(r'\\([^)]*\\)', '', item)\n        output.append(modified_item)\n    return output\n",
    "MbppEval/125": "def find_length(string):\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    \n    for char in string:\n        if char == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        \n        current_diff = abs(count_0 - count_1)\n        max_diff = max(max_diff, current_diff)\n    \n    return max_diff\n",
    "MbppEval/291": "def count_no_of_ways(n, k):\n    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n\n    same = k\n    diff = k * (k - 1)\n\n    for i in range(3, n + 1):\n        temp = same\n        same = diff\n        diff = (temp + diff) * (k - 1)\n\n    return same + diff\n",
    "MbppEval/67": "def bell_number(n):\n    \"\"\"\n    Calculate the Bell number for the given input n.\n    \n    Args:\n        n (int): The input value to calculate the Bell number for.\n    \n    Returns:\n        int: The Bell number for the given input n.\n    \"\"\"\n    if n == 0:\n        return 1\n    \n    bell = [0] * (n + 1)\n    bell[0] = 1\n    \n    for i in range(1, n + 1):\n        for j in range(i):\n            bell[i] += bell[j] * binomial(i, j)\n    \n    return bell[n]\n\ndef binomial(n, k):\n    \"\"\"\n    Calculate the binomial coefficient C(n, k).\n    \n    Args:\n        n (int): The total number of elements.\n        k (int): The number of elements to choose.\n    \n    Returns:\n        int: The binomial coefficient C(n, k).\n    \"\"\"\n    return factorial(n) // (factorial(k) * factorial(n - k))\n\ndef factorial(n):\n    \"\"\"\n    Calculate the factorial of the given number n.\n    \n    Args:\n        n (int): The number to calculate the factorial for.\n    \n    Returns:\n        int: The factorial of the given number n.\n    \"\"\"\n    if n == 0:\n        return 1\n    return n * factorial(n - 1)\n",
    "MbppEval/113": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
    "MbppEval/86": "def centered_hexagonal_number(n):\n    return n * (2 * n - 1)\n",
    "MbppEval/135": "def hexagonal_num(n):\n    return n * (2 * n - 1)\n",
    "MbppEval/256": "def count_Primes_nums(n):\n    if n < 2:\n        return 0\n\n    is_prime = [True] * (n + 1)\n    is_prime[0] = is_prime[1] = False\n\n    for i in range(2, int(n ** 0.5) + 1):\n        if is_prime[i]:\n            for j in range(i * i, n + 1, i):\n                is_prime[j] = False\n\n    return sum(is_prime)\n",
    "MbppEval/430": "def parabola_directrix(a, b, c):\n    return -b / (2 * a)\n",
    "MbppEval/604": "def reverse_words(s):\n    words = s.split()\n    reversed_words = words[::-1]\n    result = ' '.join(reversed_words)\n    return result\n",
    "MbppEval/641": "def is_nonagonal(n):\n    \"\"\"\n    Find the nth nonagonal number.\n\n    Args:\n        n (int): The position of the nonagonal number to find.\n\n    Returns:\n        int: The nth nonagonal number.\n    \"\"\"\n    return n * (7 * n - 5) // 2\n",
    "MbppEval/735": "def set_middle_bits(n):\n    binary_str = bin(n)[2:]\n    middle_bits = binary_str[1:-1]\n    toggled_middle_bits = ''.join('1' if bit == '0' else '0' for bit in middle_bits)\n    new_binary_str = binary_str[0] + toggled_middle_bits + binary_str[-1]\n    return int(new_binary_str, 2)\n",
    "MbppEval/238": "def number_of_substrings(s):\n    n = len(s)\n    return int(n * (n + 1) / 2)\n",
    "MbppEval/397": "def median_numbers(a, b, c):\n    min_num = min(a, b, c)\n    max_num = max(a, b, c)\n    middle_value = (a + b + c) - min_num - max_num\n    median = middle_value / 2\n    return median\n",
    "MbppEval/626": "def triangle_area(r):\n    if r < 0:\n        return -1\n    return r ** 2\n",
    "MbppEval/274": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    sum = 0\n    for i in range(n+1):\n        if i % 2 == 0:\n            sum += math.comb(n, i)\n    return sum\n"
}