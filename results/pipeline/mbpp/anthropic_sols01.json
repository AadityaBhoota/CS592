{
    "MbppEval/66": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n",
    "MbppEval/57": "def find_Max_Num(arr, n):\n    if not isinstance(arr, list) or not all(isinstance(digit, int) for digit in arr) or len(arr) != n:\n        raise ValueError(\"Invalid input. The input should be a list of integers with length equal to the given 'n' value.\")\n    \n    arr.sort(reverse=True)\n    max_num = int(''.join(map(str, arr)))\n    return max_num\n",
    "MbppEval/18": "def remove_dirty_chars(string1, string2):\n    \"\"\"\n    Removes characters from the first string that are present in the second string.\n    \n    Args:\n        string1 (str): The first input string.\n        string2 (str): The second input string.\n    \n    Returns:\n        str: The first string with the characters from the second string removed.\n    \"\"\"\n    char_list = list(string1)\n    for char in string2:\n        while char in char_list:\n            char_list.remove(char)\n    return ''.join(char_list)\n",
    "MbppEval/65": "def recursive_list_sum(data_list):\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total\n",
    "MbppEval/67": "def bell_number(n):\n    \"\"\"\n    Calculates the Bell number for the given input n.\n    \n    Args:\n        n (int): The input for which the Bell number needs to be calculated.\n    \n    Returns:\n        int: The Bell number for the given input n.\n    \"\"\"\n    if n == 0 or n == 1:\n        return 1\n    \n    bell_sum = 0\n    for k in range(n):\n        bell_sum += binomial_coefficient(n-1, k) * bell_number(k)\n    \n    return bell_sum\n\ndef binomial_coefficient(n, k):\n    \"\"\"\n    Calculates the binomial coefficient C(n, k).\n    \n    Args:\n        n (int): The total number of elements.\n        k (int): The number of elements to choose.\n    \n    Returns:\n        int: The binomial coefficient C(n, k).\n    \"\"\"\n    return factorial(n) // (factorial(k) * factorial(n-k))\n\ndef factorial(n):\n    \"\"\"\n    Calculates the factorial of the given number n.\n    \n    Args:\n        n (int): The number for which the factorial needs to be calculated.\n    \n    Returns:\n        int: The factorial of the given number n.\n    \"\"\"\n    if n == 0 or n == 1:\n        return 1\n    return n * factorial(n-1)\n",
    "MbppEval/62": "def smallest_num(xs):\n    smallest = xs[0]\n    for x in xs[1:]:\n        if x < smallest:\n            smallest = x\n    return smallest\n",
    "MbppEval/74": "def is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n\n    color_map = {}\n    for i, pattern in enumerate(patterns):\n        if pattern not in color_map:\n            color_map[pattern] = colors[i]\n        elif color_map[pattern] != colors[i]:\n            return False\n\n    return True\n",
    "MbppEval/19": "def test_duplicate(arraynums):\n    unique_set = set()\n    for num in arraynums:\n        if num in unique_set:\n            return True\n        unique_set.add(num)\n    return False\n",
    "MbppEval/69": "def is_sublist(l, s):\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n",
    "MbppEval/17": "def square_perimeter(a):\n    perimeter = a * 4\n    return perimeter\n",
    "MbppEval/2": "def similar_elements(test_tup1, test_tup2):\n    shared_elements = set()\n    for element in test_tup1:\n        shared_elements.add(element)\n    result = set()\n    for element in test_tup2:\n        if element in shared_elements:\n            result.add(element)\n    return tuple(result)\n",
    "MbppEval/79": "def word_len(s):\n    if len(s) % 2 != 0:\n        return True\n    else:\n        return False\n",
    "MbppEval/72": "def dif_Square(n):\n    a = 0\n    b = 1\n    while b**2 - a**2 < n:\n        a += 1\n        b += 1\n    return b**2 - a**2 == n\n",
    "MbppEval/56": "def rev(num):\n    reversed_num = int(str(num)[::-1])\n    return num == 2 * reversed_num - 1\n",
    "MbppEval/59": "def is_octagonal(n):\n    return n * (2 * n - 1)\n",
    "MbppEval/98": "def multiply_num(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)\n",
    "MbppEval/6": "def is_Power_Of_Two(x):\n    \"\"\"\n    Check if a number is a power of two.\n    \n    Args:\n        x (int): The number to check.\n    \n    Returns:\n        bool: True if x is a power of two, False otherwise.\n    \"\"\"\n    if x <= 0:\n        return False\n    return (x & (x - 1)) == 0\n",
    "MbppEval/58": "def opposite_Signs(x, y):\n    if (x < 0 and y >= 0) or (x >= 0 and y < 0):\n        return True\n    else:\n        return False\n",
    "MbppEval/86": "def centered_hexagonal_number(n):\n    return n * (2 * n - 1)\n",
    "MbppEval/8": "def square_nums(nums):\n    squared_nums = [num ** 2 for num in nums]\n    return squared_nums\n",
    "MbppEval/11": "def remove_Occ(s, ch):\n    result = \"\"\n    first_occurrence = True\n    for c in s:\n        if c != ch:\n            result += c\n        elif c == ch and first_occurrence:\n            first_occurrence = False\n        elif c == ch and not first_occurrence:\n            continue\n    return result\n",
    "MbppEval/70": "def find_equal_tuple(Input):\n    length = len(Input[0])\n    for tup in Input:\n        if len(tup) != length:\n            return \"All tuples do not have same length\"\n    return \"All tuples have same length\"\n",
    "MbppEval/92": "import re\n\ndef is_undulating(n):\n    num_str = str(n)\n    if len(num_str) < 2:\n        return False\n    for i in range(1, len(num_str)):\n        if abs(int(num_str[i]) - int(num_str[i-1])) != 1:\n            return False\n    if not re.match(r\"(12)+|(21)+\", num_str):\n        return False\n    return True\n",
    "MbppEval/64": "def subject_marks(subjectmarks):\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks\n",
    "MbppEval/14": "def find_Volume(l, b, h):\n    \"\"\"\n    Write a python function to find the volume of a triangular prism.\n\n    Parameters:\n    l (int or float): The length of the triangular prism.\n    b (int or float): The base of the triangular prism.\n    h (int or float): The height of the triangular prism.\n\n    Returns:\n    int or float: The volume of the triangular prism.\n\n    Examples:\n    find_Volume(10, 8, 6) == 240\n    find_Volume(3, 2, 2) == 6\n    find_Volume(1, 2, 1) == 1\n    \"\"\"\n    volume = 1/2 * b * h * l\n    return volume\n",
    "MbppEval/88": "import collections\n\ndef freq_count(list1):\n    return dict(collections.Counter(list1))\n",
    "MbppEval/16": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'^[a-z]+(_[a-z]+)*$'\n    if re.search(pattern, text):\n        return \"Found a match!\"\n    else:\n        return \"Not matched!\"\n",
    "MbppEval/75": "def find_tuples(test_list, K):\n    result = [tup for tup in test_list if all(x % K == 0 for x in tup)]\n    return str(result)\n",
    "MbppEval/103": "def eulerian_num(n, m):\n    if n == 0 or m == 0:\n        return 1\n    return (n-m) * eulerian_num(n-1, m) + (m+1) * eulerian_num(n-1, m-1)\n",
    "MbppEval/61": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = defaultdict(int)\n    for i in range(len(s)):\n        curr_sum = 0\n        for j in range(i, len(s)):\n            curr_sum += int(s[j])\n            count[curr_sum] += 1\n    return sum(count.values())\n",
    "MbppEval/68": "def is_Monotonic(A):\n    is_increasing = True\n    is_decreasing = True\n    \n    for i in range(len(A) - 1):\n        if A[i] < A[i+1]:\n            is_decreasing = False\n        if A[i] > A[i+1]:\n            is_increasing = False\n    \n    return is_increasing or is_decreasing\n",
    "MbppEval/93": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n\n    Examples:\n    power(3,4) == 81\n    power(2,3) == 8\n    power(5,5) == 3125\n    \"\"\"\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    elif b % 2 == 0:\n        return power(a * a, b // 2)\n    else:\n        return a * power(a * a, b // 2)\n",
    "MbppEval/85": "import math\n\ndef surfacearea_sphere(r):\n    surface_area = 4 * math.pi * r**2\n    return surface_area\n",
    "MbppEval/100": "def next_smallest_palindrome(num):\n    num_str = str(num)\n    \n    # If the number is already a palindrome, return the next odd number\n    if num_str == num_str[::-1]:\n        return num + 1\n    \n    # Find the middle index of the string\n    middle = len(num_str) // 2\n    \n    # Create the new palindrome string\n    left = num_str[:middle]\n    right = num_str[middle:][::-1]\n    \n    # Combine the left and right halves\n    new_num_str = left + right\n    \n    # Convert the new string back to an integer and return it\n    return int(new_num_str)\n",
    "MbppEval/113": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
    "MbppEval/106": "def add_lists(test_list, test_tup):\n    return test_tup + tuple(test_list)\n",
    "MbppEval/115": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n\n    Examples:\n    empty_dit([{},{},{}]) == True\n    empty_dit([{1,2},{},{}]) == False\n    empty_dit({}) == True\n    '''\n    if not isinstance(list1, list):\n        return True\n    \n    return all(not dict_item for dict_item in list1)\n",
    "MbppEval/91": "def find_substring(str1, sub_str):\n    found = False\n    for s in str1:\n        if sub_str in s:\n            found = True\n            break\n    return found\n",
    "MbppEval/104": "def sort_sublists(input_list):\n    return [sorted(sublist) for sublist in input_list]\n",
    "MbppEval/20": "def is_woodall(x):\n    n = 0\n    i = 0\n    while 2**i - 1 < x:\n        n += 2**i - 1\n        i += 1\n    return n == x\n",
    "MbppEval/84": "def sequence(n):\n    \"\"\"\n    Find the nth number in the Newman-Conway sequence.\n\n    Args:\n        n (int): The position of the number in the sequence.\n\n    Returns:\n        int: The nth number in the Newman-Conway sequence.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    \n    return 1 + sum(1 for k in range(1, n) if n % k == 0)\n",
    "MbppEval/87": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n\n    for key, value in dict1.items():\n        merged_dict[key] = value\n\n    for key, value in dict2.items():\n        merged_dict[key] = value\n\n    for key, value in dict3.items():\n        merged_dict[key] = value\n\n    return merged_dict\n",
    "MbppEval/99": "def decimal_to_binary(n):\n    binary_str = ''\n    \n    while n > 0:\n        binary_str = str(n % 2) + binary_str\n        n //= 2\n    \n    return binary_str or '0'\n",
    "MbppEval/90": "def len_log(list1):\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length\n",
    "MbppEval/111": "def common_in_nested_lists(nestedlist):\n    if not nestedlist:\n        return []\n\n    common_set = set(nestedlist[0])\n\n    for lst in nestedlist[1:]:\n        common_set = common_set.intersection(lst)\n\n    return list(common_set)\n",
    "MbppEval/94": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]\n",
    "MbppEval/138": "def is_Sum_Of_Powers_Of_Two(n):\n    power = 0\n    sum_of_powers = 0\n    \n    while 2 ** power <= n:\n        sum_of_powers += 2 ** power\n        power += 1\n    \n    return sum_of_powers == n\n",
    "MbppEval/128": "def long_words(n, string):\n    words = string.split()\n    long_words_list = [word for word in words if len(word) > n]\n    return long_words_list\n",
    "MbppEval/119": "def search(arr):\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if mid == 0 or mid == len(arr) - 1:\n            return arr[mid]\n\n        if arr[mid] != arr[mid - 1] and arr[mid] != arr[mid + 1]:\n            return arr[mid]\n\n        if arr[mid] == arr[mid - 1]:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return None\n",
    "MbppEval/124": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n\n    Examples:\n    angle_complex(0, 1j) == 1.5707963267948966\n    angle_complex(2, 1j) == 0.4636476090008061\n    angle_complex(0, 2j) == 1.5707963267948966\n    \"\"\"\n    z = complex(a, b)\n    return cmath.phase(z)\n",
    "MbppEval/126": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n\n    Examples:\n    sum(10, 15) == 6\n    sum(100, 150) == 93\n    sum(4, 6) == 3\n    \"\"\"\n    common_divisors = [1]\n    for i in range(2, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    return sum(common_divisors)\n",
    "MbppEval/125": "def find_length(string):\n    \"\"\"\n    Find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \n    Args:\n        string (str): The binary string to search.\n    \n    Returns:\n        int: The maximum difference between 0s and 1s.\n    \"\"\"\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    \n    for char in string:\n        if char == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        \n        diff = abs(count_0 - count_1)\n        max_diff = max(max_diff, diff)\n    \n    return max_diff\n",
    "MbppEval/130": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    count = defaultdict(int)\n    for num in nums:\n        count[num] += 1\n    max_count = max(count.values())\n    for num, c in count.items():\n        if c == max_count:\n            return (num, c)\n",
    "MbppEval/105": "def count(lst):\n    true_count = 0\n    for element in lst:\n        if element:\n            true_count += 1\n    return true_count\n",
    "MbppEval/89": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n\n    Examples:\n    closest_num(11) == 10\n    closest_num(7) == 6\n    closest_num(12) == 11\n    \"\"\"\n    # Handle edge cases\n    if N <= 0:\n        return None\n\n    # Convert N to a string and remove the last digit\n    N_str = str(N)\n    if len(N_str) == 1:\n        return None\n    closest_str = N_str[:-1]\n\n    # Convert the resulting string back to an integer\n    closest = int(closest_str)\n\n    return closest\n",
    "MbppEval/116": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n\n    Examples:\n    tuple_to_int((1,2,3)) == 123\n    tuple_to_int((4,5,6)) == 456\n    tuple_to_int((5,6,7)) == 567\n    \"\"\"\n    result = 0\n    for i, num in enumerate(nums):\n        result = result * 10 + num\n    return result\n",
    "MbppEval/140": "def extract_singly(test_list):\n    result = set()\n    for inner_list in test_list:\n        result.update(inner_list)\n    return list(result)\n",
    "MbppEval/137": "from array import array\n\ndef zero_count(nums):\n    zero_count = 0\n    non_zero_count = 0\n\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n\n    total_count = zero_count + non_zero_count\n    if total_count == 0:\n        return 0.0\n    else:\n        return zero_count / total_count\n",
    "MbppEval/77": "def is_divisible_by_11(n):\n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n\n    Examples:\n    is_divisible_by_11(12345) == False\n    is_divisible_by_11(1212112) == True\n    is_divisible_by_11(1212) == False\n    \"\"\"\n    # Convert the input number to a string\n    num_str = str(n)\n    \n    # Calculate the sum of digits at even positions and odd positions\n    even_sum = sum(int(num_str[i]) for i in range(0, len(num_str), 2))\n    odd_sum = sum(int(num_str[i]) for i in range(1, len(num_str), 2))\n    \n    # Calculate the difference between the two sums\n    diff = even_sum - odd_sum\n    \n    # Check if the difference is 0 or a multiple of 11\n    return diff == 0 or diff % 11 == 0\n",
    "MbppEval/3": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n\n    Examples:\n    is_not_prime(2) == False\n    is_not_prime(10) == True\n    is_not_prime(35) == True\n    '''\n    if n <= 1:\n        return True\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    \n    return False\n",
    "MbppEval/118": "def string_to_list(string):\n    return string.split()\n",
    "MbppEval/131": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    char_list = list(str1)\n    \n    # Find the indices of the vowels\n    vowel_indices = [i for i, char in enumerate(char_list) if char.lower() in vowels]\n    \n    # Reverse the vowels\n    for i in range(len(vowel_indices) // 2):\n        char_list[vowel_indices[i]], char_list[vowel_indices[len(vowel_indices) - 1 - i]] = char_list[vowel_indices[len(vowel_indices) - 1 - i]], char_list[vowel_indices[i]]\n    \n    return ''.join(char_list)\n",
    "MbppEval/139": "import math\n\ndef circle_circumference(r):\n    circumference = 2 * math.pi * r\n    return circumference\n",
    "MbppEval/167": "def next_power_of_2(n):\n    if n == 0:\n        return 1\n    \n    return 2 ** ((n - 1).bit_length())\n",
    "MbppEval/165": "def count_char_position(str1):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    alphabet_dict = {char: i for i, char in enumerate(alphabet)}\n    count = 0\n    str1 = str1.lower()\n    for i, char in enumerate(str1):\n        if char in alphabet_dict and i == alphabet_dict[char]:\n            count += 1\n    return count\n",
    "MbppEval/129": "def magic_square_test(my_matrix):\n    \"\"\"\n    Determine if the input matrix is a magic square.\n    \n    Args:\n        my_matrix (list of lists): A square matrix.\n    \n    Returns:\n        bool: True if the matrix is a magic square, False otherwise.\n    \"\"\"\n    n = len(my_matrix)\n    for row in my_matrix:\n        if len(row) != n:\n            return False\n    \n    expected_sum = sum(my_matrix[0])\n    \n    for row in my_matrix:\n        if sum(row) != expected_sum:\n            return False\n    \n    for i in range(n):\n        column_sum = 0\n        for j in range(n):\n            column_sum += my_matrix[j][i]\n        if column_sum != expected_sum:\n            return False\n    \n    diagonal_sum = 0\n    for i in range(n):\n        diagonal_sum += my_matrix[i][i]\n    if diagonal_sum != expected_sum:\n        return False\n    \n    diagonal_sum = 0\n    for i in range(n):\n        diagonal_sum += my_matrix[i][n-1-i]\n    if diagonal_sum != expected_sum:\n        return False\n    \n    return True\n",
    "MbppEval/161": "def remove_elements(list1, list2):\n    list2_set = set(list2)\n    new_list = [item for item in list1 if item not in list2_set]\n    return new_list\n",
    "MbppEval/170": "def sum_range_list(list1, m, n):\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i]\n    return total\n",
    "MbppEval/108": "import heapq\nfrom itertools import chain\n\ndef merge_sorted_list(num1, num2, num3):\n    return list(heapq.merge(num1, num2, num3))\n",
    "MbppEval/172": "def count_occurance(s):\n    return s.count('std')\n",
    "MbppEval/141": "def pancake_sort(nums):\n    sorted_nums = []\n    for i in range(len(nums), 0, -1):\n        max_index = max(range(i), key=lambda x: nums[x])\n        nums[:max_index+1] = reversed(nums[:max_index+1])\n        sorted_nums.append(nums.pop(max_index))\n        nums[:i-1] = reversed(nums[:i-1])\n    return sorted_nums\n",
    "MbppEval/145": "def max_Abs_Diff(arr):\n    max_diff = 0\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff\n",
    "MbppEval/164": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine the sum of the divisors of an integer.\n    \n    Args:\n        n (int): The integer to find the divisor sum for.\n    \n    Returns:\n        int: The sum of the divisors of `n`.\n    \"\"\"\n    divisor_sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            divisor_sum += i\n    return divisor_sum\n\ndef areEquivalent(a, b):\n    \"\"\"\n    Determine if the sum of the divisors of two integers are the same.\n    \n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n    \n    Returns:\n        bool: True if the sum of the divisors of `a` and `b` are the same, False otherwise.\n    \"\"\"\n    return div_sum(a) == div_sum(b)\n",
    "MbppEval/123": "def amicable_numbers_sum(limit):\n    total_sum = 0\n    \n    for n in range(1, limit):\n        sum_of_divisors = sum(divisor for divisor in range(1, n) if n % divisor == 0)\n        sum_of_divisors_of_divisors = sum(divisor for divisor in range(1, sum_of_divisors) if sum_of_divisors % divisor == 0)\n        \n        if n == sum_of_divisors_of_divisors and n != sum_of_divisors:\n            total_sum += n\n    \n    return total_sum\n",
    "MbppEval/166": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n",
    "MbppEval/102": "def snake_to_camel(word):\n    words = word.split('_')\n    camel_case = ''.join(w.capitalize() for w in words)\n    return camel_case\n",
    "MbppEval/228": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    mask = (1 << (r - l + 1)) - 1\n    return (n & mask) == mask\n",
    "MbppEval/233": "import math\n\ndef lateralsuface_cylinder(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cylinder.\n\n    Examples:\n    lateralsuface_cylinder(10, 5) == 314.1592653589793\n    lateralsuface_cylinder(4, 5) == 125.66370614359172\n    lateralsuface_cylinder(4, 10) == 251.32741228718345\n    \"\"\"\n    lateral_surface_area = 2 * math.pi * r * h\n    return lateral_surface_area\n",
    "MbppEval/230": "def replace_blank(str1, char):\n    result = \"\"\n    for c in str1:\n        if c == \" \":\n            result += char\n        else:\n            result += c\n    return result\n",
    "MbppEval/222": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n\n    Examples:\n    check_type((5, 6, 7, 3, 5, 6)) == True\n    check_type((1, 2, \"4\")) == False\n    check_type((3, 2, 1, 4, 5)) == True\n    \"\"\"\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element) != data_type:\n            return False\n    return True\n",
    "MbppEval/120": "def max_product_tuple(list1):\n    max_product = 0\n    \n    for a, b in list1:\n        current_product = abs(a * b)\n        if current_product > max_product:\n            max_product = current_product\n    \n    return max_product\n",
    "MbppEval/234": "def volume_cube(l):\n    \"\"\"\n    Write a function to find the volume of a cube given its side length.\n\n    Examples:\n    volume_cube(3) == 27\n    volume_cube(2) == 8\n    volume_cube(5) == 125\n    \"\"\"\n    return l * l * l\n",
    "MbppEval/133": "def sum_negativenum(nums):\n    return sum(num for num in nums if num < 0)\n",
    "MbppEval/132": "def tup_string(tup1):\n    result = \"\"\n    for char in tup1:\n        result += char\n    return result\n",
    "MbppEval/143": "def find_lists(Input):\n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    return count\n",
    "MbppEval/240": "def replace_list(list1, list2):\n    return list1[:-1] + list2\n",
    "MbppEval/235": "def even_bit_set_number(n):\n    even_bit_mask = 0b1010101010101010\n    return n | even_bit_mask\n",
    "MbppEval/223": "def is_majority(arr, n, x):\n    # Find the first and last index of x in the sorted array\n    first_index = 0\n    last_index = n - 1\n    while first_index <= last_index:\n        mid = (first_index + last_index) // 2\n        if arr[mid] == x:\n            break\n        elif arr[mid] < x:\n            first_index = mid + 1\n        else:\n            last_index = mid - 1\n    \n    # If x is not present in the array, return False\n    if arr[first_index] != x:\n        return False\n    \n    # Calculate the count of x\n    count = last_index - first_index + 1\n    \n    # Check if x is the majority element\n    return count > n // 2\n",
    "MbppEval/229": "def re_arrange_array(arr, n):\n    negative = []\n    positive = []\n\n    for num in arr[:n]:\n        if num < 0:\n            negative.append(num)\n        else:\n            positive.append(num)\n\n    return negative + positive\n",
    "MbppEval/232": "import heapq\n\ndef larg_nnum(list1, n):\n    return heapq.nlargest(n, list1)\n",
    "MbppEval/171": "import math\n\ndef perimeter_pentagon(a):\n    return 5 * a\n",
    "MbppEval/224": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n",
    "MbppEval/252": "import cmath\n\ndef convert(num):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n\n    Examples:\n    convert(1) == (1.0, 0.0)\n    convert(4) == (4.0, 0.0)\n    convert(5) == (5.0, 0.0)\n    \"\"\"\n    complex_num = complex(num)\n    magnitude = abs(complex_num)\n    angle = cmath.phase(complex_num)\n    return (magnitude, angle)\n",
    "MbppEval/245": "def max_sum(arr):\n    n = len(arr)\n    increasing = [0] * n\n    decreasing = [0] * n\n\n    # Initialize the first elements\n    increasing[0] = arr[0]\n    decreasing[n-1] = arr[-1]\n\n    # Calculate the increasing and decreasing subsequences\n    for i in range(1, n):\n        increasing[i] = max(arr[i], increasing[i-1] + arr[i])\n\n    for i in range(n-2, -1, -1):\n        decreasing[i] = max(arr[i], decreasing[i+1] + arr[i])\n\n    # Find the maximum sum where the increasing and decreasing subsequences meet\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, increasing[i] + decreasing[i] - arr[i])\n\n    return max_sum\n",
    "MbppEval/250": "def count_X(tup, x):\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count\n",
    "MbppEval/256": "def count_Primes_nums(n):\n    if n < 2:\n        return 0\n    \n    is_prime = [True] * (n+1)\n    is_prime[0] = is_prime[1] = False\n    \n    for i in range(2, int(n ** 0.5) + 1):\n        if is_prime[i]:\n            for j in range(i * i, n+1, i):\n                is_prime[j] = False\n    \n    return sum(is_prime)\n",
    "MbppEval/257": "def swap_numbers(a, b):\n    return (b, a)\n",
    "MbppEval/253": "def count_integer(list1):\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count\n",
    "MbppEval/160": "def find_solution(a, b, n):\n    \"\"\"\n    Returns integers x and y that satisfy ax + by = n as a tuple, or None if no solution exists.\n    \"\"\"\n    def gcd(x, y):\n        \"\"\"Compute the greatest common divisor of x and y.\"\"\"\n        while y != 0:\n            x, y = y, x % y\n        return x\n\n    def extended_euclidean(a, b):\n        \"\"\"\n        Compute the extended Euclidean algorithm for a and b.\n        Returns x, y, and gcd(a, b), where ax + by = gcd(a, b).\n        \"\"\"\n        if b == 0:\n            return 1, 0, a\n        else:\n            x, y, d = extended_euclidean(b, a % b)\n            return y, x - (a // b) * y, d\n\n    d = gcd(a, b)\n    if n % d != 0:\n        return None\n\n    x0, y0, _ = extended_euclidean(a // d, b // d)\n    x = x0 * (n // d)\n    y = y0 * (n // d)\n    return (f\"x = {x}\", f\"y = {y}\")\n",
    "MbppEval/244": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n\n    Examples:\n    next_Perfect_Square(35) == 36\n    next_Perfect_Square(6) == 9\n    next_Perfect_Square(9) == 16\n    \"\"\"\n    sqrt = math.sqrt(N)\n    next_sqrt = math.ceil(sqrt)\n    next_perfect_square = next_sqrt ** 2\n    return int(next_perfect_square)\n",
    "MbppEval/255": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    \"\"\"\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list of lists.\n\n    Examples:\n    combinations_colors( [\"Red\",\"Green\",\"Blue\"],1) == [['Red'], ['Green'], ['Blue']]\n    combinations_colors( [\"Red\",\"Green\",\"Blue\"],2) == [['Red', 'Red'], ['Red', 'Green'], ['Red', 'Blue'], ['Green', 'Green'], ['Green', 'Blue'], ['Blue', 'Blue']]\n    combinations_colors( [\"Red\",\"Green\",\"Blue\"],3) == [['Red', 'Red', 'Red'], ['Red', 'Red', 'Green'], ['Red', 'Red', 'Blue'], ['Red', 'Green', 'Green'], ['Red', 'Green', 'Blue'], ['Red', 'Blue', 'Blue'], ['Green', 'Green', 'Green'], ['Green', 'Green', 'Blue'], ['Green', 'Blue', 'Blue'], ['Blue', 'Blue', 'Blue']]\n    \"\"\"\n    return [list(combo) for combo in combinations_with_replacement(l, n)]\n",
    "MbppEval/242": "def count_charac(str1):\n    char_count = 0\n    for char in str1:\n        char_count += 1\n    return char_count\n",
    "MbppEval/248": "def harmonic_sum(n):\n    sum_harmonic = 0\n    for i in range(1, n):\n        sum_harmonic += 1/i\n    return sum_harmonic\n",
    "MbppEval/238": "def number_of_substrings(s):\n    n = len(s)\n    return n * (n + 1) // 2\n",
    "MbppEval/227": "def min_of_three(a, b, c):\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c\n",
    "MbppEval/135": "def hexagonal_num(n):\n    return n * (2 * n - 1)\n",
    "MbppEval/162": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n\n    Examples:\n    sum_series(6) == 12\n    sum_series(10) == 30\n    sum_series(9) == 25\n    \"\"\"\n    num_terms = n // 2 + 1\n    sum_formula = n * num_terms - 2 * (num_terms * (num_terms - 1)) // 2\n    return sum_formula\n",
    "MbppEval/259": "def maximize_elements(test_tup1, test_tup2):\n    result = []\n    for t1, t2 in zip(test_tup1, test_tup2):\n        result.append((max(t1[0], t2[0]), max(t1[1], t2[1])))\n    return result\n",
    "MbppEval/262": "def split_two_parts(list1, L):\n    first_part = []\n    second_part = []\n    for i, item in enumerate(list1):\n        if i < L:\n            first_part.append(item)\n        else:\n            second_part.append(item)\n    return (first_part, second_part)\n",
    "MbppEval/251": "def insert_element(lst, element):\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result\n",
    "MbppEval/261": "def division_elements(test_tup1, test_tup2):\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Input tuples must have the same length.\")\n\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] / test_tup2[i],)\n\n    return result\n",
    "MbppEval/4": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    return sorted(hq.nlargest(n, nums), reverse=True)\n",
    "MbppEval/270": "def sum_even_and_even_index(arr):\n    even_at_even_index = [num for i, num in enumerate(arr) if i % 2 == 0 and num % 2 == 0]\n    return sum(even_at_even_index)\n",
    "MbppEval/260": "def newman_prime(n):\n    primes = []\n    num = 2\n    while len(primes) < n:\n        if is_prime(num) and is_increasing_digits(num):\n            primes.append(num)\n        num += 1\n    return primes[-1]\n\ndef is_increasing_digits(n):\n    digits = [int(d) for d in str(n)]\n    for i in range(1, len(digits)):\n        if digits[i] <= digits[i-1]:\n            return False\n    return True\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
    "MbppEval/264": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n\n    Examples:\n    dog_age(12) == 61\n    dog_age(15) == 73\n    dog_age(24) == 109\n    \"\"\"\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4\n",
    "MbppEval/277": "def dict_filter(d, n):\n    return {k: v for k, v in d.items() if v >= n}\n",
    "MbppEval/117": "def list_to_float(test_list):\n    result = []\n    for inner_list in test_list:\n        converted_list = []\n        for element in inner_list:\n            try:\n                converted_list.append(float(element))\n            except ValueError:\n                converted_list.append(element)\n        result.append(tuple(converted_list))\n    return str(result)\n",
    "MbppEval/294": "def max_val(listval):\n    max_val = float('-inf')\n    for element in listval:\n        if isinstance(element, (int, float)):\n            max_val = max(max_val, element)\n    return max_val\n",
    "MbppEval/271": "def even_Power_Sum(n):\n    return 2 ** 5 * (n * (n + 1) * (2 * n + 1) * (3 * n ** 2 + 3 * n - 1) / 30)\n",
    "MbppEval/249": "def intersection_array(array_nums1, array_nums2):\n    num_dict = {}\n    for num in array_nums1:\n        num_dict[num] = True\n    intersection = []\n    for num in array_nums2:\n        if num in num_dict:\n            intersection.append(num)\n    return intersection\n",
    "MbppEval/286": "def max_sub_array_sum_repeated(a, n, k):\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for _ in range(k):\n        current_sum = 0\n        for x in a:\n            current_sum += x\n            max_sum = max(max_sum, current_sum)\n            if current_sum < 0:\n                current_sum = 0\n\n    return max_sum\n",
    "MbppEval/284": "def check_element(lst, element):\n    return all(item == element for item in lst)\n",
    "MbppEval/239": "def get_total_number_of_sequences(m, n):\n    def helper(n, start):\n        if n == 1:\n            return m - start + 1\n        \n        count = 0\n        for i in range(start, m+1):\n            count += helper(n-1, i)\n        return count\n    \n    return helper(n, 2)\n",
    "MbppEval/278": "def count_first_elements(test_tup):\n    count = 0\n    for element in test_tup:\n        if isinstance(element, tuple):\n            return count\n        count += 1\n    return count\n",
    "MbppEval/281": "def all_unique(test_list):\n    return len(test_list) == len(set(test_list))\n",
    "MbppEval/9": "def find_Rotations(s):\n    rotations = 0\n    temp_str = s + s\n    \n    for i in range(len(s)):\n        if s == temp_str[i:i+len(s)]:\n            return rotations\n        rotations += 1\n    \n    return len(s)\n",
    "MbppEval/292": "def find(n, m):\n    return n // m\n",
    "MbppEval/291": "def count_no_of_ways(n, k):\n    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n    \n    same = k\n    diff = k * (k - 1)\n    \n    for i in range(3, n + 1):\n        same, diff = diff, (k - 1) * (same + diff)\n    \n    return same + diff\n",
    "MbppEval/267": "def square_Sum(n):\n    return n * (n + 1) * (2 * n + 1) // 6\n",
    "MbppEval/280": "def sequential_search(dlist, item):\n    found = False\n    index = -1\n    \n    for i, elem in enumerate(dlist):\n        if elem == item:\n            found = True\n            index = i\n            break\n    \n    return (found, index)\n",
    "MbppEval/287": "def square_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += (2 * i) ** 2\n    return sum\n",
    "MbppEval/95": "def Find_Min_Length(lst):\n    min_length = float('inf')\n    for inner_list in lst:\n        current_length = len(inner_list)\n        if current_length < min_length:\n            min_length = current_length\n    return min_length\n",
    "MbppEval/168": "def frequency(a, x):\n    count = 0\n    for element in a:\n        if element == x:\n            count += 1\n    return count\n",
    "MbppEval/246": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the Babylonian method.\n\n    Examples:\n    babylonian_squareroot(10) == 3.162277660168379\n    babylonian_squareroot(2) == 1.414213562373095\n    babylonian_squareroot(9) == 3.0\n    \"\"\"\n    x = number / 2\n    while abs(x - number / x) > 1e-10:\n        x = (x + number / x) / 2\n    return x\n",
    "MbppEval/296": "def merge_sort(arr, n):\n    if n == 1:\n        return arr, 0\n    \n    mid = n // 2\n    left, left_inv = merge_sort(arr[:mid], mid)\n    right, right_inv = merge_sort(arr[mid:], n - mid)\n    \n    merged = []\n    i, j = 0, 0\n    inversions = left_inv + right_inv\n    \n    while i < mid and j < n - mid:\n        if left[i] <= right[j]:\n            merged.append(left[i])\n            i += 1\n        else:\n            merged.append(right[j])\n            j += 1\n            inversions += mid - i\n    \n    merged += left[i:]\n    merged += right[j:]\n    \n    return merged, inversions\n\ndef get_Inv_Count(arr, n):\n    _, inversions = merge_sort(arr, n)\n    return inversions\n",
    "MbppEval/282": "def sub_list(nums1, nums2):\n    if not isinstance(nums1, list) or not isinstance(nums2, list):\n        raise TypeError(\"Both inputs must be lists\")\n    \n    if len(nums1) != len(nums2):\n        raise ValueError(\"Lists must have the same length\")\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    return result\n",
    "MbppEval/297": "def flatten_list(list1):\n    flattened = []\n\n    for item in list1:\n        if isinstance(item, list):\n            flattened.extend(flatten_list(item))\n        else:\n            flattened.append(item)\n\n    return flattened\n",
    "MbppEval/293": "import math\n\ndef otherside_rightangle(w, h):\n    c = math.sqrt(w**2 + h**2)\n    return c\n",
    "MbppEval/312": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Write a function to find the volume of a cone.\n\n    Examples:\n    volume_cone(5, 12) == 314.15926535897927\n    volume_cone(10, 15) == 1570.7963267948965\n    volume_cone(19, 17) == 6426.651371693521\n    \"\"\"\n    volume = (1/3) * math.pi * r**2 * h\n    return volume\n",
    "MbppEval/310": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n\n    Examples:\n    string_to_tuple(\"python 3.0\") == ('p', 'y', 't', 'h', 'o', 'n', ' ', '3', '.', '0')\n    string_to_tuple(\"item1\") == ('i', 't', 'e', 'm', '1')\n    string_to_tuple(\"15.10\") == ('1', '5', '.', '1', '0')\n    \"\"\"\n    return tuple(char for char in str1)\n",
    "MbppEval/301": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n\n    Examples:\n    dict_depth({'a':1, 'b': {'c': {'d': {}}}}) == 4\n    dict_depth({'a':1, 'b': {'c':'python'}}) == 2\n    dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}}) == 3\n    \"\"\"\n    return _dict_depth(d, 1)\n\ndef _dict_depth(d, depth):\n    if not d:\n        return depth\n    \n    max_depth = depth\n    for value in d.values():\n        if isinstance(value, dict):\n            max_depth = max(max_depth, _dict_depth(value, depth + 1))\n    \n    return max_depth\n",
    "MbppEval/311": "def set_left_most_unset_bit(n):\n    two_complement = -n - 1\n    return n | two_complement\n",
    "MbppEval/306": "def max_sum_increasing_subseq(a, n, index, k):\n    dp = [0] * (n + 1)\n    \n    for i in range(n):\n        if i < k - 1:\n            dp[i + 1] = max(dp[i] + a[i], dp[i + 1])\n        else:\n            dp[i + 1] = max(dp[k - 1] + a[i], dp[i + 1])\n    \n    return dp[n]\n",
    "MbppEval/305": "import re\n\ndef start_withp(words):\n    p_words = []\n    for word in words:\n        if re.match(r'^p', word, re.IGNORECASE):\n            p_words.append(word)\n    return tuple(p_words[:2])\n",
    "MbppEval/309": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n\n    Examples:\n    maximum(5, 10) == 10\n    maximum(-1, -2) == -1\n    maximum(9, 7) == 9\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b\n",
    "MbppEval/272": "def rear_extract(test_list):\n    rear_elements = [tup[-1] for tup in test_list]\n    return rear_elements\n",
    "MbppEval/389": "def find_lucas(n):\n    \"\"\"\n    Write a function to find the n'th lucas number.\n\n    Examples:\n    find_lucas(9) == 76\n    find_lucas(4) == 7\n    find_lucas(3) == 4\n    \"\"\"\n    lucas_numbers = [2, 1]  # Initialize the list with the first two Lucas numbers\n\n    if n < 2:\n        return lucas_numbers[n]\n\n    # Calculate and store the remaining Lucas numbers\n    for i in range(2, n + 1):\n        next_lucas = lucas_numbers[i - 1] + lucas_numbers[i - 2]\n        lucas_numbers.append(next_lucas)\n\n    return lucas_numbers[n]\n",
    "MbppEval/397": "def median_numbers(a, b, c):\n    numbers = [a, b, c]\n    numbers.sort()\n    return float(numbers[1])\n",
    "MbppEval/390": "def add_string(list_, string):\n    result = []\n    for item in list_:\n        result.append(string.format(item))\n    return result\n",
    "MbppEval/394": "def check_distinct(test_tup):\n    return len(test_tup) == len(set(test_tup))\n",
    "MbppEval/274": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    result = 0\n    for i in range(0, n+1, 2):\n        result += math.comb(n, i)\n    return result\n",
    "MbppEval/388": "def highest_Power_of_2(n):\n    power = 0\n    while n >= 2:\n        n //= 2\n        power += 1\n    return 2 ** power\n",
    "MbppEval/392": "def get_max_sum(n):\n    if n <= 1:\n        return n\n\n    memo = {1: 1, 2: 2}\n\n    for i in range(3, n + 1):\n        max_sum = i\n        for div in (2, 3, 4, 5):\n            if i % div == 0:\n                max_sum = max(max_sum, memo[i // div] + i // div)\n        memo[i] = max_sum\n\n    return memo[n]\n",
    "MbppEval/300": "from math import factorial\n\ndef count_binary_seq(n):\n    return factorial(2 * n) // (factorial(n) * factorial(n))\n",
    "MbppEval/398": "def sum_of_digits(nums):\n    total_sum = 0\n    for num in nums:\n        if isinstance(num, (int, float)):\n            for digit in str(abs(num)):\n                total_sum += int(digit)\n    return total_sum\n",
    "MbppEval/391": "def convert_list_dictionary(l1, l2, l3):\n    result = []\n    for key, name, value in zip(l1, l2, l3):\n        d = {key: {name: value}}\n        result.append(d)\n    return result\n",
    "MbppEval/307": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    modified_tuple = deepcopy(tuplex)\n    if isinstance(modified_tuple[m], list):\n        modified_tuple[m] = [n]\n    else:\n        modified_tuple = tuple(modified_tuple[:m] + (modified_tuple[m],) + modified_tuple[m+1:])\n    return modified_tuple\n",
    "MbppEval/283": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\n    Examples:\n    validate(1234) == True\n    validate(51241) == False\n    validate(321) == True\n    \"\"\"\n    # Initialize a list to store the counts of each digit (0-9)\n    digit_counts = [0] * 10\n    \n    # Extract the digits and update the counts\n    while n > 0:\n        digit = n % 10\n        digit_counts[digit] += 1\n        n //= 10\n    \n    # Check if the count of each digit is less than or equal to the digit itself\n    for i in range(10):\n        if digit_counts[i] > i:\n            return False\n    \n    return True\n",
    "MbppEval/396": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    if re.match(regex, string):\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n",
    "MbppEval/411": "def snake_to_camel(word):\n    words = word.split('_')\n    camel_case_words = [words[0]] + [w.capitalize() for w in words[1:]]\n    camel_case = ''.join(camel_case_words)\n    return camel_case\n",
    "MbppEval/304": "def find_Element(arr, ranges, rotations, index):\n    for i in range(rotations):\n        for start, end in ranges:\n            arr = arr[start:] + arr[:start]\n    return arr[index]\n",
    "MbppEval/404": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n\n    Examples:\n    minimum(1, 2) == 1\n    minimum(-5, -4) == -5\n    minimum(0, 0) == 0\n\n    Args:\n        a (int or float): The first number to compare.\n        b (int or float): The second number to compare.\n\n    Returns:\n        int or float: The minimum of the two input numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b\n",
    "MbppEval/408": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    if not nums1 or not nums2:\n        return []\n\n    min_heap = []\n    for x in nums1:\n        for y in nums2:\n            pair_sum = x + y\n            heapq.heappush(min_heap, (pair_sum, x, y))\n            if len(min_heap) > k:\n                heapq.heappop(min_heap)\n\n    return [[x, y] for _, x, y in min_heap]\n",
    "MbppEval/405": "def check_tuplex(tuplex, tuple1):\n    return tuple1 in tuplex\n",
    "MbppEval/295": "import math\n\ndef sum_div(number):\n    sum_of_divisors = 0\n    for i in range(1, int(math.sqrt(number)) + 1):\n        if number % i == 0:\n            sum_of_divisors += i\n            if i != number // i:\n                sum_of_divisors += number // i\n    if math.sqrt(number).is_integer():\n        sum_of_divisors -= int(math.sqrt(number))\n    return sum_of_divisors\n",
    "MbppEval/412": "def remove_odd(l):\n    even_nums = []\n    for num in l:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums\n",
    "MbppEval/414": "def overlapping(list1, list2):\n    is_overlapping = False\n    for item in list1:\n        if item in list2:\n            is_overlapping = True\n            break\n    return is_overlapping\n",
    "MbppEval/400": "def extract_freq(test_list):\n    unique_tuples = set(test_list)\n    return len(unique_tuples)\n",
    "MbppEval/413": "def extract_nth_element(list1, n):\n    extracted_elements = []\n    for tup in list1:\n        extracted_elements.append(tup[n])\n    return extracted_elements\n",
    "MbppEval/418": "def Find_Max(lst):\n    max_length = 0\n    max_element = None\n\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n\n    return max_element\n",
    "MbppEval/410": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n\n    Examples:\n    min_val(['Python', 3, 2, 4, 5, 'version']) == 2\n    min_val(['Python', 15, 20, 25]) == 15\n    min_val(['Python', 30, 20, 40, 50, 'version']) == 20\n    \"\"\"\n    min_value = float('inf')  # Initialize min_value to the largest possible value\n    \n    for item in listval:\n        if isinstance(item, (int, float)):\n            min_value = min(min_value, item)\n    \n    return min_value\n",
    "MbppEval/395": "def first_non_repeating_character(str1):\n    char_count = {}\n    \n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return None\n",
    "MbppEval/409": "def min_product_tuple(list1):\n    min_product = float('inf')\n    for a, b in list1:\n        product = a * b\n        if product < min_product:\n            min_product = product\n    return min_product\n",
    "MbppEval/422": "def find_Average_Of_Cube(n):\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    return sum_of_cubes / n\n",
    "MbppEval/417": "def group_tuples(input_list):\n    result = {}\n    for tup in input_list:\n        first_element = tup[0]\n        if first_element in result:\n            result[first_element].append(tup[1])\n        else:\n            result[first_element] = [tup[1]]\n    \n    return [(*key, *value) for key, value in result.items()]\n",
    "MbppEval/419": "def round_and_sum(list1):\n    rounded_list = [round(num) for num in list1]\n    total_sum = sum(rounded_list)\n    result = total_sum * len(list1)\n    return result\n",
    "MbppEval/424": "def extract_rear(test_tuple):\n    rear_elements = []\n    for item in test_tuple:\n        rear_elements.append(item[-1])\n    return rear_elements\n",
    "MbppEval/420": "def cube_Sum(n):\n    total_sum = 0\n    for i in range(1, n+1):\n        even_number = 2 * i\n        cube = even_number ** 3\n        total_sum += cube\n    return total_sum\n",
    "MbppEval/425": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n",
    "MbppEval/431": "def common_element(list1, list2):\n    common_found = False\n    for elem in list1:\n        if elem in list2:\n            common_found = True\n            break\n    return common_found\n",
    "MbppEval/273": "def substract_elements(test_tup1, test_tup2):\n    result = []\n    for a, b in zip(test_tup1, test_tup2):\n        result.append(a - b)\n    return tuple(result)\n",
    "MbppEval/415": "def max_Product(arr):\n    if not arr:\n        return (None, None)\n    if len(arr) == 1:\n        return (arr[0], arr[0])\n\n    max1 = max(arr[0], arr[1])\n    max2 = min(arr[0], arr[1])\n    min1 = min(arr[0], arr[1])\n    min2 = max(arr[0], arr[1])\n\n    for i in range(2, len(arr)):\n        num = arr[i]\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n\n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n\n    if max1 * max2 >= min1 * min2:\n        return (max1, max2)\n    else:\n        return (min1, min2)\n",
    "MbppEval/407": "def rearrange_bigger(n):\n    digits = list(str(n))\n    i = len(digits) - 2\n    while i >= 0 and digits[i] >= digits[i+1]:\n        i -= 1\n    if i < 0:\n        return False\n    j = len(digits) - 1\n    while j > i and digits[j] <= digits[i]:\n        j -= 1\n    digits[i], digits[j] = digits[j], digits[i]\n    digits[i+1:] = digits[i+1:][::-1]\n    return int(''.join(digits))\n",
    "MbppEval/426": "def filter_oddnumbers(nums):\n    odd_nums = []\n    for num in nums:\n        if num % 2 != 0:\n            odd_nums.append(num)\n    return odd_nums\n",
    "MbppEval/399": "def bitwise_xor(test_tup1, test_tup2):\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)\n",
    "MbppEval/434": "import re\n\ndef text_match_one(text):\n    pattern = r'a(?:b+)'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
    "MbppEval/308": "import heapq\n\ndef large_product(nums1, nums2, N):\n    largest_products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            product = num1 * num2\n            if len(largest_products) < N or product > largest_products[0]:\n                heapq.heappush(largest_products, product)\n                if len(largest_products) > N:\n                    heapq.heappop(largest_products)\n    return sorted(largest_products, reverse=True)\n",
    "MbppEval/432": "def median_trapezium(base1, base2, height):\n    middle_line_length = (base1 + base2) / 2\n    return middle_line_length\n",
    "MbppEval/430": "def parabola_directrix(a, b, c):\n    return -b / (2 * a)\n",
    "MbppEval/439": "def multiple_to_single(L):\n    return int(''.join(map(str, L)))\n",
    "MbppEval/444": "def trim_tuple(test_list, K):\n    trimmed_tuples = []\n    for tup in test_list:\n        trimmed_tuple = tup[:-K]\n        trimmed_tuples.append(trimmed_tuple)\n    return str(trimmed_tuples)\n",
    "MbppEval/12": "def sort_matrix(M):\n    row_sums = [sum(row) for row in M]\n    sorted_matrix = [row for _, row in sorted(zip(row_sums, M))]\n    return sorted_matrix\n",
    "MbppEval/427": "def change_date_format(dt):\n    if not isinstance(dt, str) or len(dt.split('-')) != 3:\n        return dt\n    year, month, day = dt.split('-')\n    return f\"{day}-{month}-{year}\"\n",
    "MbppEval/437": "def remove_odd(str1):\n    result = \"\"\n    for i, char in enumerate(str1):\n        if i % 2 == 0:\n            result += char\n    return result\n",
    "MbppEval/435": "def last_Digit(n):\n    return int(str(n)[-1])\n",
    "MbppEval/445": "def index_multiplication(test_tup1, test_tup2):\n    result = [(a*x, b*y) for (a,b), (x,y) in zip(test_tup1, test_tup2)]\n    return tuple(result)\n",
    "MbppEval/421": "def concatenate_tuple(test_tup):\n    result = \"\"\n    for item in test_tup:\n        result += str(item) + \"-\"\n    return result[:-1]\n",
    "MbppEval/447": "def cube_nums(nums):\n    cubed_nums = []\n    for num in nums:\n        cubed_nums.append(num ** 3)\n    return cubed_nums\n",
    "MbppEval/429": "def and_tuples(test_tup1, test_tup2):\n    result = ()\n    for a, b in zip(test_tup1, test_tup2):\n        result += (a & b,)\n    return result\n",
    "MbppEval/443": "def largest_neg(list1):\n    largest_neg = float('-inf')\n    for num in list1:\n        if num < 0 and num > largest_neg:\n            largest_neg = num\n    return largest_neg\n",
    "MbppEval/393": "def max_length_list(input_list):\n    max_length = 0\n    max_list = []\n\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n\n    return (max_length, max_list)\n",
    "MbppEval/438": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n\n    Examples:\n    count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)]) == '3'\n    count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)]) == '2'\n    count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)]) == '4'\n    \"\"\"\n    bidirectional_count = {}\n\n    for pair in test_list:\n        reverse_pair = (pair[1], pair[0])\n        if reverse_pair in test_list:\n            bidirectional_count[tuple(sorted(pair))] = bidirectional_count.get(tuple(sorted(pair)), 0) + 1\n\n    return str(sum(bidirectional_count.values()))\n",
    "MbppEval/450": "def extract_string(str_list, length):\n    return [s for s in str_list if len(s) == length]\n",
    "MbppEval/451": "import re\n\ndef remove_whitespaces(text1):\n    return re.sub(r'\\s+', '', text1)\n",
    "MbppEval/446": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    counter = Counter(tup)\n    total_count = 0\n    for item in lst:\n        total_count += counter[item]\n    return total_count\n",
    "MbppEval/299": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    aggregates = defaultdict(int)\n    for name, score in stdata:\n        aggregates[name] += score\n    return max(aggregates.items(), key=lambda x: x[1])\n",
    "MbppEval/458": "def rectangle_area(l, b):\n    area = l * b\n    return area\n",
    "MbppEval/442": "def positive_count(nums):\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count / len(nums)\n",
    "MbppEval/452": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n\n    Examples:\n    loss_amount(1500, 1200) == 300\n    loss_amount(100, 200) == 0\n    loss_amount(2000, 5000) == 0\n    \"\"\"\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return 0\n",
    "MbppEval/97": "from collections import Counter\n\ndef frequency_lists(list1):\n    \"\"\"\n    Write a function to find the frequency of each element in a flattened list of lists,\n    returned in a dictionary.\n    \"\"\"\n    flattened_list = [item for inner_list in list1 for item in inner_list]\n    freq_dict = dict(Counter(flattened_list))\n    return freq_dict\n",
    "MbppEval/453": "import math\n\ndef sumofFactors(n):\n    factors = [i for i in range(1, n+1) if n % i == 0]\n    even_factors = [f for f in factors if f % 2 == 0]\n    return sum(even_factors)\n",
    "MbppEval/454": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    if re.search(pattern, text):\n        return \"Found a match!\"\n    else:\n        return \"Not matched!\"\n",
    "MbppEval/448": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n\n    Examples:\n    cal_sum(9) == 49\n    cal_sum(10) == 66\n    cal_sum(11) == 88\n    \"\"\"\n    perrin_nums = [0, 0, 2]\n    \n    if n <= 3:\n        return sum(perrin_nums[:n])\n    \n    for i in range(3, n):\n        next_num = perrin_nums[-3] + perrin_nums[-2]\n        perrin_nums.append(next_num)\n    \n    return sum(perrin_nums[:n])\n",
    "MbppEval/440": "import re\n\ndef find_adverb_position(text):\n    pattern = r'^\\w*?(\\w+ly)\\b\\w*'\n    match = re.search(pattern, text)\n    if match:\n        start = match.start()\n        end = match.end()\n        adverb = match.group(1)\n        return (start, end, adverb)\n    else:\n        return None\n",
    "MbppEval/460": "def Extract(lst):\n    first_elements = []\n    for sublst in lst:\n        first_elements.append(sublst[0])\n    return first_elements\n",
    "MbppEval/455": "def check_monthnumb_number(monthnum2):\n    months_with_31_days = [1, 3, 5, 7, 8, 10, 12]\n    return monthnum2 in months_with_31_days\n",
    "MbppEval/465": "def drop_empty(dict1):\n    new_dict = {}\n    for key, value in dict1.items():\n        if value is not None:\n            new_dict[key] = value\n    return new_dict\n",
    "MbppEval/462": "def combinations_list(list1):\n    result = [[]]\n    find_combinations([], list1, result)\n    return result\n\ndef find_combinations(current_list, remaining_elements, result):\n    if not remaining_elements:\n        result.append(current_list[:])\n        return\n\n    for i in range(len(remaining_elements)):\n        new_list = current_list + [remaining_elements[i]]\n        result.append(new_list)\n        find_combinations(new_list, remaining_elements[i+1:], result)\n",
    "MbppEval/457": "def Find_Min(lst):\n    \"\"\"\n    Write a python function to find the sublist having minimum length.\n\n    Examples:\n    Find_Min([[1],[1,2],[1,2,3]]) == [1]\n    Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]\n    Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']\n    \"\"\"\n    min_length = float('inf')\n    min_sublist = None\n\n    for sublst in lst:\n        if len(sublst) < min_length:\n            min_length = len(sublst)\n            min_sublist = sublst\n\n    return min_sublist\n",
    "MbppEval/461": "def upper_ctr(string):\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count\n",
    "MbppEval/463": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n    \n    max_so_far = arr[0]\n    min_so_far = arr[0]\n    result = arr[0]\n    \n    for i in range(1, len(arr)):\n        curr = arr[i]\n        temp_max = max(curr, max_so_far * curr, min_so_far * curr)\n        min_so_far = min(curr, max_so_far * curr, min_so_far * curr)\n        \n        max_so_far = temp_max\n        \n        result = max(max_so_far, result)\n    \n    return result\n",
    "MbppEval/468": "def max_product(arr):\n    n = len(arr)\n    arr.sort()\n    max_product = 1\n\n    for i in range(n):\n        product = 1\n        for j in range(i+1):\n            product *= arr[j]\n        max_product = max(max_product, product)\n\n    return max_product\n",
    "MbppEval/433": "def check_greater(arr, number):\n    is_greater = True\n    for element in arr:\n        if number <= element:\n            is_greater = False\n            break\n    if is_greater:\n        return 'Yes, the entered number is greater than those in the array'\n    else:\n        return 'No, entered number is less than those in the array'\n",
    "MbppEval/478": "def remove_lowercase(str1):\n    result = \"\"\n    for char in str1:\n        if char.isupper():\n            result += char\n    return result\n",
    "MbppEval/559": "def max_sub_array_sum(a, size):\n    max_sum = a[0]\n    current_sum = a[0]\n\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum\n",
    "MbppEval/459": "import re\n\ndef remove_uppercase(str1):\n    return re.sub(r'[A-Z]+', '', str1)\n",
    "MbppEval/276": "import math\n\ndef volume_cylinder(r, h):\n    volume = math.pi * r**2 * h\n    return volume\n",
    "MbppEval/456": "def reverse_string_list(stringlist):\n    reversed_strings = []\n    for string in stringlist:\n        reversed_strings.append(string[::-1])\n    return reversed_strings\n",
    "MbppEval/464": "def check_value(dict, n):\n    for value in dict.values():\n        if value != n:\n            return False\n    return True\n",
    "MbppEval/71": "def comb_sort(nums):\n    gap = len(nums)\n    swapped = True\n\n    while gap > 1 or swapped:\n        gap = int(gap / 1.61803398875)\n        if gap < 1:\n            gap = 1\n        swapped = False\n\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n    return nums\n",
    "MbppEval/554": "def Split(list_of_ints):\n    odd_numbers = []\n    for num in list_of_ints:\n        if num % 2 != 0:\n            odd_numbers.append(num)\n    return odd_numbers\n",
    "MbppEval/564": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n",
    "MbppEval/477": "def is_lower(string):\n    return string.lower()\n",
    "MbppEval/474": "def replace_char(str1, ch, newch):\n    new_str = \"\"\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str\n",
    "MbppEval/406": "def find_Parity(x):\n    if x & 1 == 1:\n        return \"Odd Parity\"\n    else:\n        return \"Even Parity\"\n",
    "MbppEval/556": "def find_Odd_Pair(A, N):\n    odd_count = 0\n    for num in A:\n        if num % 2 == 1:\n            odd_count += 1\n    return odd_count * (N - odd_count)\n",
    "MbppEval/473": "def tuple_intersection(test_list1, test_list2):\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    return set1 & set2\n",
    "MbppEval/566": "def sum_digits(n):\n    total = 0\n    for digit in str(n):\n        total += int(digit)\n    return total\n",
    "MbppEval/557": "def toggle_string(string):\n    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result\n",
    "MbppEval/565": "def split(word):\n    characters = []\n    for char in word:\n        characters.append(char)\n    return characters\n",
    "MbppEval/428": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    \n    return my_list\n",
    "MbppEval/472": "def check_Consecutive(l):\n    is_consecutive = True\n    for i in range(1, len(l)):\n        if l[i] - l[i-1] != 1:\n            is_consecutive = False\n            break\n    return is_consecutive\n",
    "MbppEval/567": "def issort_list(list1):\n    is_sorted = True\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i+1]:\n            is_sorted = False\n            break\n    return is_sorted\n",
    "MbppEval/568": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n\n    Examples:\n    empty_list(5) == [{},{},{},{},{}]\n    empty_list(6) == [{},{},{},{},{},{}]\n    empty_list(7) == [{},{},{},{},{},{},{}]\n    \"\"\"\n    empty_dicts = []\n    for _ in range(length):\n        empty_dicts.append({})\n    return empty_dicts\n",
    "MbppEval/573": "def unique_product(list_data):\n    product = 1\n    unique_nums = set()\n\n    for num in list_data:\n        if num not in unique_nums:\n            unique_nums.add(num)\n            product *= num\n\n    return product\n",
    "MbppEval/563": "import re\n\ndef extract_values(text):\n    return re.findall(r'\"([^\"]*)\"', text)\n",
    "MbppEval/574": "import math\n\ndef surfacearea_cylinder(r, h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n\n    Examples:\n    surfacearea_cylinder(10, 5) == 942.4784176044735\n    surfacearea_cylinder(4, 5) == 226.18800000000002\n    surfacearea_cylinder(4, 10) == 351.848\n    \"\"\"\n    surface_area = 2 * math.pi * r * (r + h)\n    return surface_area\n",
    "MbppEval/436": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n\n    Examples:\n    neg_nos([-1,4,5,-6]) == [-1, -6]\n    neg_nos([-1,-2,3,4]) == [-1, -2]\n    neg_nos([-7,-6,8,9]) == [-7, -6]\n    \"\"\"\n    negative_numbers = [num for num in list1 if num < 0]\n    return negative_numbers\n",
    "MbppEval/479": "def first_Digit(n):\n    num_str = str(n)\n    first_digit = int(num_str[0])\n    return first_digit\n",
    "MbppEval/577": "def last_Digit_Factorial(n):\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial % 10\n",
    "MbppEval/562": "def Find_Max_Length(lst):\n    max_length = 0\n    for sublst in lst:\n        current_length = len(sublst)\n        if current_length > max_length:\n            max_length = current_length\n    return max_length\n",
    "MbppEval/572": "def two_unique_nums(nums):\n    unique_nums = set(nums)\n    return list(unique_nums)\n",
    "MbppEval/576": "def is_Sub_Array(A, B):\n    i = 0\n    j = 0\n    \n    for _ in range(len(A)):\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n            if j == len(B):\n                return True\n        else:\n            i += 1\n    \n    return False\n",
    "MbppEval/555": "def difference(n):\n    sum_cubes = sum(i**3 for i in range(1, n+1))\n    sum_numbers = sum(range(1, n+1))\n    return sum_cubes - sum_numbers\n",
    "MbppEval/578": "def interleave_lists(list1, list2, list3):\n    if len(list1) != len(list2) or len(list2) != len(list3):\n        return []\n\n    interleaved_list = []\n\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n\n    return interleaved_list\n",
    "MbppEval/558": "def digit_distance_nums(n1, n2):\n    n1_str = str(n1)\n    n2_str = str(n2)\n    total_distance = 0\n    for i in range(max(len(n1_str), len(n2_str))):\n        d1 = int(n1_str[i]) if i < len(n1_str) else 0\n        d2 = int(n2_str[i]) if i < len(n2_str) else 0\n        total_distance += abs(d1 - d2)\n    return total_distance\n",
    "MbppEval/579": "def find_dissimilar(test_tup1, test_tup2):\n    dissimilar = []\n    for element in test_tup1:\n        if element not in test_tup2:\n            dissimilar.append(element)\n    for element in test_tup2:\n        if element not in test_tup1:\n            dissimilar.append(element)\n    return dissimilar\n",
    "MbppEval/594": "def diff_even_odd(list1):\n    first_even = None\n    first_odd = None\n\n    for num in list1:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n\n        if first_even is not None and first_odd is not None:\n            break\n\n    if first_even is None or first_odd is None:\n        return None\n    else:\n        return abs(first_even - first_odd)\n",
    "MbppEval/591": "def swap_List(newList):\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList\n",
    "MbppEval/581": "def surface_area(b, s):\n    base_area = b * b\n    face_area = 0.5 * b * s\n    total_area = base_area + 4 * face_area\n    return total_area\n",
    "MbppEval/569": "def sort_sublists(list1):\n    sorted_sublists = []\n    for sublist in list1:\n        sorted_sublists.append(sorted(sublist))\n    return sorted_sublists\n",
    "MbppEval/598": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n\n    Examples:\n    armstrong_number(153) == True\n    armstrong_number(259) == False\n    armstrong_number(4458) == False\n    \"\"\"\n    num_str = str(number)\n    sum_of_cubes = 0\n    for digit in num_str:\n        sum_of_cubes += int(digit) ** len(num_str)\n    return sum_of_cubes == number\n",
    "MbppEval/7": "import re\n\ndef find_char_long(text):\n    return re.findall(r'\\b\\w{4,}\\b', text)\n",
    "MbppEval/470": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n\n    Examples:\n    add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n    add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)\n    add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)\n    \"\"\"\n    test_list = list(test_tup)\n    result = [test_list[i] + test_list[i+1] for i in range(len(test_list)-1)]\n    return tuple(result)\n",
    "MbppEval/585": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n    \"\"\"\n    # Create a max heap to store the n most expensive items\n    heap = [(-item['price'], item) for item in items]\n    heapq.heapify(heap)\n\n    # Extract the n most expensive items from the heap\n    return [heapq.heappop(heap)[1] for _ in range(min(n, len(heap)))]\n",
    "MbppEval/597": "def find_kth(arr1, arr2, k):\n    m, n = len(arr1), len(arr2)\n\n    def binary_search(start1, end1, start2, end2):\n        if start1 > end1:\n            return arr2[start2 + k - 1]\n        if start2 > end2:\n            return arr1[start1 + k - 1]\n        if k == 1:\n            return min(arr1[start1], arr2[start2])\n\n        mid1 = (start1 + end1) // 2\n        mid2 = (start2 + end2) // 2\n        if arr1[mid1] < arr2[mid2]:\n            return binary_search(mid1 + 1, end1, start2, end2)\n        else:\n            return binary_search(start1, end1, mid2 + 1, end2)\n\n    return binary_search(0, m - 1, 0, n - 1)\n",
    "MbppEval/580": "def even_ele(test_tuple, even_fnc):\n    result = []\n    for element in test_tuple:\n        if isinstance(element, tuple):\n            result.append(even_ele(element, even_fnc))\n        elif even_fnc(element):\n            result.append(element)\n    return tuple(result)\n",
    "MbppEval/475": "from collections import Counter\n\ndef sort_counter(dict1):\n    return Counter(dict1).most_common()\n",
    "MbppEval/592": "def sum_Of_product(n):\n    total = 0\n    for k in range(n+1):\n        total += factorial(n) / (factorial(k) * factorial(n-k))\n    return total\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n",
    "MbppEval/586": "def split_Arr(l, n):\n    first_part = l[:n]\n    second_part = l[n:]\n    modified_list = second_part + first_part\n    return modified_list\n",
    "MbppEval/599": "def sum_average(number):\n    total = 0\n    for i in range(1, number + 1):\n        total += i\n    average = total / number\n    return (total, average)\n",
    "MbppEval/596": "import sys\n\ndef tuple_size(tuple_list):\n    return sys.getsizeof(tuple_list)\n",
    "MbppEval/269": "def ascii_value(k):\n    return ord(k)\n",
    "MbppEval/602": "def first_repeated_char(str1):\n    char_dict = {}\n    \n    for i, char in enumerate(str1):\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = i\n    \n    return \"None\"\n",
    "MbppEval/588": "def big_diff(nums):\n    if not nums:\n        return 0\n    \n    largest = max(nums)\n    smallest = min(nums)\n    \n    return largest - smallest\n",
    "MbppEval/600": "def is_Even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n",
    "MbppEval/607": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return (None, -1, -1)\n",
    "MbppEval/606": "import math\n\ndef radian_degree(degree):\n    return degree * (math.pi / 180)\n",
    "MbppEval/608": "def bell_Number(n):\n    # Base cases\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    \n    # Recursive case\n    bell_sum = 0\n    for k in range(n):\n        bell_sum += bell_Number(k) * bell_Number(n-k-1)\n    return bell_sum\n",
    "MbppEval/605": "import math\n\ndef prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n\n    Examples:\n    prime_num(13) == True\n    prime_num(7) == True\n    prime_num(-1010) == False\n    '''\n    is_prime = True\n    \n    if num <= 1:\n        is_prime = False\n        return is_prime\n    \n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            is_prime = False\n            break\n    \n    return is_prime\n",
    "MbppEval/595": "def min_Swaps(str1, str2):\n    count1 = str1.count('1')\n    count2 = str2.count('1')\n\n    if count1 != count2:\n        return \"Not Possible\"\n\n    diff_positions = [i for i in range(len(str1)) if str1[i] != str2[i]]\n    return len(diff_positions) // 2\n",
    "MbppEval/603": "def get_ludic(n):\n    ludic_numbers = [1]\n    current_ludic = 1\n\n    while current_ludic <= n:\n        next_ludic = ludic_numbers[-1] + current_ludic\n        ludic_numbers.append(next_ludic)\n        current_ludic = next_ludic\n\n    return ludic_numbers[:-1]\n",
    "MbppEval/476": "def big_sum(nums):\n    smallest = min(nums)\n    largest = max(nums)\n    return smallest + largest\n",
    "MbppEval/610": "def remove_kth_element(list1, L):\n    if not list1 or L < 1 or L > len(list1):\n        return list1\n    \n    new_list = []\n    for i in range(len(list1)):\n        if i != L - 1:\n            new_list.append(list1[i])\n    \n    return new_list\n",
    "MbppEval/590": "import cmath\n\ndef polar_rect(x, y):\n    r = (x**2 + y**2) ** 0.5\n    theta = cmath.atan2(y, x)\n    return (r, theta), complex(r * cmath.cos(theta), r * cmath.sin(theta))\n",
    "MbppEval/623": "def nth_nums(nums, n):\n    results = []\n    for num in nums:\n        results.append(num ** n)\n    return results\n",
    "MbppEval/620": "def largest_subset(a):\n    max_size = 0\n    for subset in find_subsets(a):\n        if is_divisible_subset(subset):\n            max_size = max(max_size, len(subset))\n    return max_size\n\ndef is_divisible_subset(subset):\n    for i in range(len(subset)):\n        for j in range(i+1, len(subset)):\n            if subset[i] % subset[j] != 0 and subset[j] % subset[i] != 0:\n                return False\n    return True\n\ndef find_subsets(a):\n    if not a:\n        return [[]]\n    subsets = []\n    for i in range(len(a)):\n        for subset in find_subsets(a[i+1:]):\n            subsets.append([a[i]] + subset)\n    return subsets + find_subsets(a[1:])\n",
    "MbppEval/612": "def merge(lst):\n    first_elements = []\n    second_elements = []\n    for sub_list in lst:\n        first_elements.append(sub_list[0])\n        second_elements.append(sub_list[1])\n    return [first_elements, second_elements]\n",
    "MbppEval/587": "def list_tuple(listx):\n    return tuple(listx)\n",
    "MbppEval/589": "import math\n\ndef perfect_squares(a, b):\n    start = math.ceil(math.sqrt(a))\n    end = math.floor(math.sqrt(b))\n    return [num**2 for num in range(start, end+1)]\n",
    "MbppEval/616": "def tuple_modulo(test_tup1, test_tup2):\n    return tuple(a % b for a, b in zip(test_tup1, test_tup2))\n",
    "MbppEval/617": "import math\n\ndef min_Jumps(steps, d):\n    if d == 0:\n        return 0\n    elif d % steps == 0:\n        return d // steps\n    else:\n        return math.ceil(d / steps)\n",
    "MbppEval/604": "def reverse_words(s):\n    words = s.split()\n    reversed_words = words[::-1]\n    result = ' '.join(reversed_words)\n    return result\n",
    "MbppEval/624": "def is_upper(string):\n    return string.upper()\n",
    "MbppEval/633": "def pair_xor_Sum(arr, n):\n    total_xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            total_xor_sum ^= (arr[i] ^ arr[j])\n    return total_xor_sum * 2\n",
    "MbppEval/637": "def noprofit_noloss(actual_cost, sale_amount):\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n",
    "MbppEval/628": "def replace_spaces(string):\n    result = \"\"\n    for char in string:\n        if char == \" \":\n            result += \"%20\"\n        else:\n            result += char\n    return result\n",
    "MbppEval/625": "def swap_List(newList):\n    if len(newList) < 2:\n        return newList\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n",
    "MbppEval/639": "def sample_nam(sample_names):\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length\n",
    "MbppEval/615": "def average_tuple(nums):\n    averages = []\n    for inner_tuple in nums:\n        average = sum(inner_tuple) / len(inner_tuple)\n        averages.append(average)\n    return averages\n",
    "MbppEval/614": "def cummulative_sum(test_list):\n    total = 0\n    for tup in test_list:\n        total += sum(tup)\n    return total\n",
    "MbppEval/629": "def Split(list_of_numbers):\n    even_numbers = []\n    for num in list_of_numbers:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers\n",
    "MbppEval/618": "def div_list(nums1, nums2):\n    result = []\n    for num1, num2 in zip(nums1, nums2):\n        try:\n            result.append(num1 / num2)\n        except ZeroDivisionError:\n            result.append(float('nan'))\n    return result\n",
    "MbppEval/619": "def move_num(test_str):\n    result = \"\"\n    digits = \"\"\n    digit_pos = 0\n    for char in test_str:\n        if char.isdigit():\n            digits += char\n        else:\n            result = result[:digit_pos] + digits + result[digit_pos:]\n            result += char\n            digit_pos += len(digits)\n            digits = \"\"\n    return result + digits\n",
    "MbppEval/643": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    if re.search(pattern, text):\n        return \"Found a match!\"\n    else:\n        return \"Not matched!\"\n",
    "MbppEval/722": "def filter_data(students, h, w):\n    filtered = {}\n    for name, (height, weight) in students.items():\n        if height >= h and weight >= w:\n            filtered[name] = (height, weight)\n    return filtered\n",
    "MbppEval/721": "def maxAverageOfPath(cost):\n    n = len(cost)\n    max_average = 0\n    \n    def generate_paths(i, j, path, total_cost):\n        nonlocal max_average\n        \n        if i == n-1 and j == n-1:\n            average_cost = total_cost / (len(path) + 1)\n            max_average = max(max_average, average_cost)\n            return\n        \n        if i < n-1:\n            generate_paths(i+1, j, path + [(i+1, j)], total_cost + cost[i+1][j])\n        \n        if j < n-1:\n            generate_paths(i, j+1, path + [(i, j+1)], total_cost + cost[i][j+1])\n    \n    generate_paths(0, 0, [(0, 0)], cost[0][0])\n    return max_average\n",
    "MbppEval/583": "import math\n\ndef catalan_number(num):\n    \"\"\"\n    Write a function which returns nth catalan number.\n\n    Examples:\n    catalan_number(10) == 16796\n    catalan_number(9) == 4862\n    catalan_number(7) == 429\n    \"\"\"\n    if num < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n\n    # Calculate the binomial coefficient (2*n)! / (n! * n!)\n    numerator = math.factorial(2 * num)\n    denominator = math.factorial(num) * math.factorial(num)\n    binomial_coeff = numerator // denominator\n\n    # Calculate the nth Catalan number\n    catalan_num = binomial_coeff // (num + 1)\n    return catalan_num\n",
    "MbppEval/584": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\w+ly'\n    match = re.search(pattern, text)\n    if match:\n        start = match.start()\n        end = match.end()\n        adverb = match.group()\n        return f'{start}-{end}: {adverb}'\n    else:\n        return None\n",
    "MbppEval/635": "import heapq as hq\n\ndef heap_sort(iterable):\n    \"\"\"\n    Write a function to sort the given list.\n\n    Examples:\n    heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85]\n    heap_sort([7, 1, 9, 5]) == [1, 5, 7, 9]\n    \"\"\"\n    heap = list(iterable)\n    hq.heapify(heap)\n    return [hq.heappop(heap) for _ in range(len(heap))]\n",
    "MbppEval/724": "def power_base_sum(base, power):\n    result = base ** power\n    total_sum = 0\n    for digit in str(result):\n        total_sum += int(digit)\n    return total_sum\n",
    "MbppEval/726": "def multiply_elements(test_tup):\n    result = ()\n    for i in range(len(test_tup) - 1):\n        result += (test_tup[i] * test_tup[i+1],)\n    return result\n",
    "MbppEval/723": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count\n",
    "MbppEval/560": "def union_elements(test_tup1, test_tup2):\n    combined_list = list(test_tup1) + list(test_tup2)\n    unique_list = list(set(combined_list))\n    sorted_list = sorted(unique_list)\n    return tuple(sorted_list)\n",
    "MbppEval/631": "def replace_spaces(text):\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")\n",
    "MbppEval/632": "def move_zero(num_list):\n    new_list = []\n    zero_count = 0\n    \n    for num in num_list:\n        if num != 0:\n            new_list.append(num)\n        else:\n            zero_count += 1\n    \n    new_list.extend([0] * zero_count)\n    return new_list\n",
    "MbppEval/226": "def odd_values_string(str):\n    result = \"\"\n    for i, char in enumerate(str):\n        if i % 2 == 0:\n            result += char\n    return result\n",
    "MbppEval/730": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    result = [next(group) for _, group in groupby(nums)]\n    return result\n",
    "MbppEval/640": "import re\n\ndef remove_parenthesis(items):\n    result = []\n    for item in items:\n        result.append(re.sub(r'\\([^)]*\\)', '', item))\n    return result\n",
    "MbppEval/731": "import math\n\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n\n    Examples:\n    lateralsurface_cone(5, 12) == 204.20352248333654\n    lateralsurface_cone(10, 15) == 566.3586699569488\n    lateralsurface_cone(19, 17) == 1521.8090132193388\n    \"\"\"\n    lateral_surface_area = math.pi * r * math.sqrt(r**2 + h**2)\n    return lateral_surface_area\n",
    "MbppEval/720": "def add_dict_to_tuple(test_tup, test_dict):\n    return test_tup + (test_dict,)\n",
    "MbppEval/644": "def reverse_Array_Upto_K(input, k):\n    reversed_list = []\n    \n    # Reverse the elements up to index k\n    for i in range(k-1, -1, -1):\n        reversed_list.append(input[i])\n    \n    # Append the remaining elements\n    for i in range(k, len(input)):\n        reversed_list.append(input[i])\n    \n    return reversed_list\n",
    "MbppEval/728": "def sum_list(lst1, lst2):\n    if len(lst1) != len(lst2):\n        raise ValueError(\"Input lists must have the same length.\")\n\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result\n",
    "MbppEval/735": "def set_middle_bits(n):\n    num_bits = n.bit_length()\n    mask = (1 << (num_bits - 1)) - (1 << 1)\n    result = n ^ mask\n    return result\n",
    "MbppEval/638": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n    Examples:\n    wind_chill(120, 35) == 40\n    wind_chill(40, 70) == 86\n    wind_chill(10, 100) == 116\n    \"\"\"\n    wci = 13.12 + 0.6215 * t - 11.37 * v ** 0.16 + 0.3965 * t * v ** 0.16\n    return math.ceil(wci)\n",
    "MbppEval/734": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    result = 0\n    running_product = 1\n    for i in range(n):\n        running_product *= arr[i]\n        result += running_product\n    return result\n",
    "MbppEval/732": "import re\n\ndef replace_specialchar(text):\n    return re.sub(r'[ ,.]', ':', text)\n",
    "MbppEval/739": "import math\n\ndef find_Index(n):\n    index = 0\n    triangular_number = 1\n\n    while len(str(triangular_number)) < n:\n        index += 1\n        triangular_number += index + 1\n\n    return index\n",
    "MbppEval/736": "import bisect\n\ndef left_insertion(a, x):\n    return bisect.bisect_left(a, x)\n",
    "MbppEval/748": "import re\n\ndef capital_words_spaces(str1):\n    capital_words = re.findall(r'[A-Z][a-z]*', str1)\n    return ' '.join(capital_words)\n",
    "MbppEval/744": "def check_none(test_tup):\n    has_none = False\n    for element in test_tup:\n        if element is None:\n            has_none = True\n            break\n    return has_none\n",
    "MbppEval/733": "def find_first_occurrence(A, x):\n    left = 0\n    right = len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x:\n            if mid == 0 or A[mid - 1] != x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1\n",
    "MbppEval/740": "def tuple_to_dict(test_tup):\n    result = {}\n    for i in range(0, len(test_tup), 2):\n        result[test_tup[i]] = test_tup[i + 1]\n    return result\n",
    "MbppEval/755": "def second_smallest(numbers):\n    if not numbers:\n        return None\n    \n    smallest = None\n    second_smallest = None\n    \n    for num in numbers:\n        if smallest is None or num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif second_smallest is None or (num > smallest and num < second_smallest):\n            second_smallest = num\n    \n    return second_smallest if second_smallest is not None else None\n",
    "MbppEval/611": "def max_of_nth(test_list, N):\n    if not test_list or any(len(row) < N for row in test_list):\n        raise ValueError(\"Invalid input list. Each row must have at least N elements.\")\n\n    max_value = test_list[0][N-1]\n\n    for row in test_list:\n        max_value = max(max_value, row[N-1])\n\n    return max_value\n",
    "MbppEval/758": "def unique_sublists(list1):\n    count_dict = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in count_dict:\n            count_dict[sublist_tuple] += 1\n        else:\n            count_dict[sublist_tuple] = 1\n    return count_dict\n",
    "MbppEval/737": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    if re.match(regex, string):\n        return 'Valid'\n    else:\n        return 'Invalid'\n",
    "MbppEval/763": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(1, n):\n        diff = abs(arr[i] - arr[i-1])\n        min_diff = min(min_diff, diff)\n    return min_diff\n",
    "MbppEval/752": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2) + 2 * jacobsthal_num(n-2)\n",
    "MbppEval/762": "def check_monthnumber_number(monthnum3):\n    thirty_day_months = [4, 6, 9, 11]\n    if monthnum3 in thirty_day_months:\n        return True\n    else:\n        return False\n",
    "MbppEval/741": "def all_Characters_Same(s):\n    unique_chars = set()\n    for char in s:\n        unique_chars.add(char)\n    return len(unique_chars) == 1\n",
    "MbppEval/760": "def unique_Element(arr):\n    if len(set(arr)) == 1:\n        return 'YES'\n    else:\n        return 'NO'\n",
    "MbppEval/753": "def min_k(test_list, K):\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    return sorted_list[:K]\n",
    "MbppEval/759": "import re\n\ndef is_decimal(num):\n    \"\"\"\n    Check whether a given string is a decimal number with a precision of 2.\n\n    Examples:\n    is_decimal('123.11') == True\n    is_decimal('e666.86') == False\n    is_decimal('3.124587') == False\n    \"\"\"\n    if not isinstance(num, str):\n        return False\n\n    pattern = r'^[+-]?\\d+\\.\\d{2}$'\n    return bool(re.match(pattern, num))\n",
    "MbppEval/751": "def check_min_heap_helper(arr, i):\n    n = len(arr)\n    \n    if i >= n:\n        return True\n    \n    left_child = 2 * i + 1\n    right_child = 2 * i + 2\n    \n    if left_child < n and arr[i] > arr[left_child]:\n        return False\n    \n    if right_child < n and arr[i] > arr[right_child]:\n        return False\n    \n    return check_min_heap_helper(arr, left_child) and check_min_heap_helper(arr, right_child)\n",
    "MbppEval/747": "def lcs_of_three(X, Y, Z):\n    m, n, o = len(X), len(Y), len(Z)\n    dp = [[[0] * (o+1) for _ in range(n+1)] for _ in range(m+1)]\n\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n\n    return dp[m][n][o]\n",
    "MbppEval/742": "import math\n\ndef area_tetrahedron(side):\n    return (math.sqrt(3) * side**2) / 4\n",
    "MbppEval/770": "def odd_num_sum(n):\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i ** 4\n    return sum\n",
    "MbppEval/749": "def sort_numeric_strings(nums_str):\n    nums_int = [int(num) for num in nums_str]\n    nums_int.sort()\n    sorted_nums_str = [str(num) for num in nums_int]\n    return sorted_nums_str\n",
    "MbppEval/769": "def Diff(li1, li2):\n    output = []\n    for item in li1:\n        if item not in li2:\n            output.append(item)\n    for item in li2:\n        if item not in li1:\n            output.append(item)\n    return output\n",
    "MbppEval/756": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b+)'\n    match = re.search(pattern, text)\n    if match:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
    "MbppEval/766": "def pair_wise(l1):\n    pairs = []\n    for i in range(len(l1) - 1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs\n",
    "MbppEval/765": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Find the nth polite number.\n    \"\"\"\n    num = 1\n    while True:\n        if num % n == 0 and num % (n + 1) == 0:\n            return num\n        num += 1\n",
    "MbppEval/773": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Find the occurrence and position of the substrings within a string.\n    \n    Return a tuple containing the matched substring, start index, and end index.\n    Return None if there is no match.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None\n",
    "MbppEval/757": "def count_reverse_pairs(test_list):\n    unique_strings = set(test_list)\n    count = 0\n    for string in unique_strings:\n        reverse_string = string[::-1]\n        if reverse_string in unique_strings:\n            count += 1\n    \n    # Subtract the number of strings that are their own reverse\n    for string in unique_strings:\n        if string == string[::-1]:\n            count -= 1\n    \n    return str(count // 2)\n",
    "MbppEval/771": "from collections import deque\n\ndef check_expression(exp):\n    bracket_map = {\n        '{': '}',\n        '[': ']',\n        '(': ')'\n    }\n    stack = deque()\n\n    for char in exp:\n        if char in bracket_map:\n            stack.append(char)\n        elif char in bracket_map.values():\n            if not stack:\n                return False\n            top = stack.pop()\n            if bracket_map[top] != char:\n                return False\n\n    return not stack\n",
    "MbppEval/767": "def get_pairs_count(arr, target_sum):\n    count = 0\n    element_counts = {}\n\n    for num in arr:\n        if target_sum - num in element_counts:\n            count += element_counts[target_sum - num]\n        element_counts[num] = element_counts.get(num, 0) + 1\n\n    return count\n",
    "MbppEval/776": "def count_vowels(test_str):\n    count = 0\n    vowels = 'aeiou'\n\n    for i in range(len(test_str)):\n        if test_str[i].lower() in vowels:\n            if (i > 0 and test_str[i-1].lower() in vowels) or (i < len(test_str)-1 and test_str[i+1].lower() in vowels):\n                count += 1\n\n    return count\n",
    "MbppEval/750": "def add_tuple(test_list, test_tup):\n    return test_list + list(test_tup)\n",
    "MbppEval/745": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        is_divisible = True\n        for digit in str(num):\n            if digit == '0' or num % int(digit) != 0:\n                is_divisible = False\n                break\n        if is_divisible:\n            result.append(num)\n    return result\n",
    "MbppEval/780": "from itertools import combinations \n\ndef find_combinations(test_list):\n    combinations_list = list(combinations(test_list, 2))\n    sums = [(a + b, c + d) for (a, b), (c, d) in combinations_list]\n    return sums\n",
    "MbppEval/781": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 1\n            if i * i == n:\n                count -= 1\n    if count % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n",
    "MbppEval/627": "def find_First_Missing(array, start=0, end=None):\n    if not array:\n        return 0\n\n    if array[0] != 0:\n        return 0\n\n    if end is None:\n        end = len(array) - 1\n\n    if array[-1] == len(array) - 1:\n        return len(array)\n\n    while start <= end:\n        mid = (start + end) // 2\n        if array[mid] != mid + start:\n            return mid + start\n        elif array[mid] > mid + start:\n            end = mid - 1\n        else:\n            start = mid + 1\n\n    return start\n",
    "MbppEval/772": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = [word for word in words if len(word) != K]\n    return ' '.join(new_words)\n",
    "MbppEval/787": "import re\n\ndef text_match_three(text):\n    pattern = r'ab{3}'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
    "MbppEval/788": "def new_tuple(test_list, test_str):\n    return (*test_list, test_str)\n",
    "MbppEval/782": "def odd_length_sum(arr):\n    total_sum = 0\n    left = 0\n    right = 0\n\n    while right < len(arr):\n        if (right - left + 1) % 2 != 0:\n            total_sum += sum(arr[left:right+1])\n        right += 1\n\n        if (right - left + 1) % 2 == 0:\n            left += 1\n\n    return total_sum\n",
    "MbppEval/582": "def my_dict(dict1):\n    \"\"\"\n    Write a function to check if a dictionary is empty.\n\n    Examples:\n    my_dict({10}) == False\n    my_dict({11}) == False\n    my_dict({}) == True\n    \"\"\"\n    return not bool(dict1)\n",
    "MbppEval/783": "import math\n\ndef rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx - mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df)+360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df)+120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df)+240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n",
    "MbppEval/792": "def count_list(input_list):\n    count = 0\n    for element in input_list:\n        if isinstance(element, list):\n            count += 1\n    return count\n",
    "MbppEval/791": "def remove_nested(test_tup):\n    result = []\n    for item in test_tup:\n        if not isinstance(item, tuple):\n            result.append(item)\n    return tuple(result)\n",
    "MbppEval/790": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n\n    Examples:\n    even_position([3,2,1]) == False\n    even_position([1,2,3]) == False\n    even_position([2,1,4]) == True\n    \"\"\"\n    result = True\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            result = False\n            break\n    return result\n",
    "MbppEval/784": "def mul_even_odd(list1):\n    if not list1:\n        return 0\n    \n    first_even = None\n    first_odd = None\n    \n    for num in list1:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        elif first_odd is None and num % 2 != 0:\n            first_odd = num\n        \n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is None:\n        return first_odd or 0\n    elif first_odd is None:\n        return first_even or 0\n    else:\n        return first_even * first_odd\n",
    "MbppEval/801": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y == z:\n        count = 3\n    elif x == y or x == z or y == z:\n        count = 2\n    return count\n",
    "MbppEval/754": "def extract_index_list(l1, l2, l3):\n    result = []\n    for x, y, z in zip(l1, l2, l3):\n        if x == y == z:\n            result.append(x)\n    return result\n",
    "MbppEval/798": "def _sum(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total\n",
    "MbppEval/777": "def find_sum(arr, k):\n    total = 0\n    unique_nums = set()\n    for num in arr:\n        if num not in unique_nums:\n            unique_nums.add(num)\n            total += num\n    return total\n",
    "MbppEval/797": "def sum_odd(l, r):\n    total = 0\n    for num in range(l, r+1):\n        if num % 2 == 1:\n            total += num\n    return total\n",
    "MbppEval/802": "def count_rotation(arr):\n    n = len(arr)\n    min_element = min(arr)\n    return arr.index(min_element)\n",
    "MbppEval/796": "def return_sum(d):\n    total_sum = 0\n    for value in d.values():\n        total_sum += value\n    return total_sum\n",
    "MbppEval/622": "def get_median(arr1, arr2, n):\n    i, j = 0, 0\n    while i < n and j < n:\n        if arr1[i] <= arr2[j]:\n            i += 1\n        else:\n            j += 1\n    \n    if n % 2 == 0:\n        return (max(arr1[i-1], arr2[j-1]) + min(arr1[i], arr2[j])) / 2\n    else:\n        return min(arr1[i-1], arr2[j-1])\n",
    "MbppEval/785": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n\n    Examples:\n    tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\n    tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)\n    tuple_str_int(\"(4, 5, 6)\") == (4, 5, 6)\n    \"\"\"\n    if not test_str or not test_str.startswith(\"(\") or not test_str.endswith(\")\"):\n        raise ValueError(\"Invalid input string format\")\n\n    stripped_str = test_str.strip(\"()\")\n    elements = [int(elem.strip()) for elem in stripped_str.split(\",\")]\n    return tuple(elements)\n",
    "MbppEval/806": "def max_run_uppercase(test_str):\n    max_run = 0\n    current_run = 0\n    \n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 0\n    \n    max_run = max(max_run, current_run)\n    \n    return max_run\n",
    "MbppEval/778": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    return [list(group) for _, group in groupby(list1)]\n",
    "MbppEval/805": "def max_sum_list(lists):\n    max_sum = 0\n    max_list = None\n    \n    for lst in lists:\n        curr_sum = sum(lst)\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            max_list = lst\n    \n    return max_list\n",
    "MbppEval/804": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0\n",
    "MbppEval/803": "import math\n\ndef is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    Examples:\n    is_perfect_square(10) == False\n    is_perfect_square(36) == True\n    is_perfect_square(14) == False\n    \"\"\"\n    sqrt = math.sqrt(n)\n    return sqrt.is_integer()\n",
    "MbppEval/807": "def first_odd(nums):\n    first_odd_num = None\n    for num in nums:\n        if num % 2 != 0:\n            first_odd_num = num\n            break\n    return first_odd_num\n",
    "MbppEval/101": "def kth_element(arr, k):\n    \"\"\"\n    Find the kth element in the given array using 1-based indexing.\n    \n    Args:\n        arr (list): The input array.\n        k (int): The 1-based index of the element to find.\n        \n    Returns:\n        The kth element of the array.\n        \n    Raises:\n        ValueError: If k is not within the valid range of the array size (1 <= k <= len(arr)).\n    \"\"\"\n    if k < 1 or k > len(arr):\n        raise ValueError(\"k is not within the valid range of the array size (1 <= k <= len(arr))\")\n    return arr[k-1]\n",
    "MbppEval/799": "def left_rotate(n, d):\n    \"\"\"\n    Rotate the bits of the 32-bit integer `n` to the left by `d` bits.\n    \"\"\"\n    return (n << d) | (n >> (32 - d))\n",
    "MbppEval/808": "def check_K(test_tup, K):\n    for element in test_tup:\n        if element == K:\n            return True\n    return False\n",
    "MbppEval/794": "import re\n\ndef text_starta_endb(text):\n    pattern = r'^a.*b$'\n    if re.search(pattern, text):\n        return \"Found a match!\"\n    else:\n        return \"Not matched!\"\n",
    "MbppEval/401": "def add_nested_tuples(test_tup1, test_tup2):\n    result = []\n    for t1, t2 in zip(test_tup1, test_tup2):\n        new_tuple = (t1[0] + t2[0], t1[1] + t2[1])\n        result.append(new_tuple)\n    return tuple(result)\n",
    "MbppEval/809": "def check_smaller(test_tup1, test_tup2):\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True\n",
    "MbppEval/630": "def adjac(ele):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n\n    Examples:\n    get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\n    get_coordinates((4, 5)) == [[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]\n    get_coordinates((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]\n    '''\n    x, y = ele\n    adjacent = []\n\n    for dx in [-1, 0, 1]:\n        for dy in [-1, 0, 1]:\n            if dx == dy == 0:\n                continue\n            new_x = x + dx\n            new_y = y + dy\n            if 0 <= new_x <= 9 and 0 <= new_y <= 9:\n                adjacent.append([new_x, new_y])\n\n    return adjacent\n",
    "MbppEval/593": "import re\n\ndef removezero_ip(ip):\n    octets = ip.split('.')\n    octets = [str(int(octet)) for octet in octets]\n    result = '.'.join(octets)\n    return result\n",
    "MbppEval/800": "import re\n\ndef remove_all_spaces(text):\n    return re.sub(r'\\s+', '', text)\n",
    "MbppEval/786": "import bisect\n\ndef right_insertion(a, x):\n    return bisect.bisect_right(a, x)\n",
    "MbppEval/285": "import re\n\ndef text_match_two_three(text):\n    if re.search(r'ab{2,3}', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
    "MbppEval/793": "def last(arr, x, n):\n    left = 0\n    right = n - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == x:\n            while mid < n and arr[mid] == x:\n                mid += 1\n            return mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1\n",
    "MbppEval/725": "import re\n\ndef extract_quotation(text1):\n    quotes = re.findall(r'\"(.*?)\"', text1)\n    return quotes\n",
    "MbppEval/746": "import math\n\ndef sector_area(r, a):\n    \"\"\"\n    Write a function to find the area of a sector. The function takes the radius and angle as inputs. \n    The function should return None if the angle is larger than 360 degrees.\n\n    Examples:\n    sector_area(4, 45) == 6.285714285714286\n    sector_area(9, 45) == 31.82142857142857\n    sector_area(9, 360) == None\n    \"\"\"\n    if a > 360:\n        return None\n    radians = a * (math.pi / 180)\n    area = (r ** 2 * radians) / 2\n    return area\n",
    "MbppEval/626": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n\n    Examples:\n    triangle_area(0) == 0\n    triangle_area(-1) == -1\n    triangle_area(2) == 4\n    \"\"\"\n    if r < 0:\n        return -1\n    return r**2\n",
    "MbppEval/441": "def surfacearea_cube(l):\n    return 6 * (l ** 2)\n",
    "MbppEval/779": "def unique_sublists(list1):\n    result = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in result:\n            result[sublist_tuple] += 1\n        else:\n            result[sublist_tuple] = 1\n    return result\n",
    "MbppEval/764": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count\n",
    "MbppEval/237": "from collections import Counter\n\ndef check_occurrences(test_list):\n    tuple_count = {}\n\n    for tup in test_list:\n        if tup not in tuple_count:\n            tuple_count[tup] = 1\n        else:\n            tuple_count[tup] += 1\n\n    return tuple_count\n",
    "MbppEval/247": "def lps(str):\n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n    \n    # Base cases\n    for i in range(n):\n        dp[i][i] = 1\n    \n    for length in range(2, n+1):\n        for i in range(n-length+1):\n            j = i + length - 1\n            if str[i] == str[j]:\n                dp[i][j] = 2 + dp[i+1][j-1]\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    \n    return dp[0][n-1]\n",
    "MbppEval/290": "def max_length(list1):\n    max_len = 0\n    max_list = None\n\n    for l in list1:\n        if len(l) > max_len:\n            max_len = len(l)\n            max_list = l\n\n    return (max_len, max_list)\n",
    "MbppEval/268": "def find_star_num(n):\n    \"\"\"\n    Write a function to find the n'th star number.\n    \n    Examples:\n    find_star_num(3) == 37\n    find_star_num(4) == 73\n    find_star_num(5) == 121\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return find_star_num(n-1) + 2*n - 1\n",
    "MbppEval/127": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n\n    Examples:\n    multiply_int(10, 20) == 200\n    multiply_int(5, 10) == 50\n    multiply_int(4, 8) == 32\n    \"\"\"\n    if not isinstance(x, int) or not isinstance(y, int):\n        raise TypeError(\"Both arguments must be integers.\")\n\n    return x * y\n",
    "MbppEval/82": "import math\n\ndef volume_sphere(r):\n    return (4/3) * math.pi * (r**3)\n",
    "MbppEval/265": "def list_split(S, step):\n    result = []\n    temp = []\n    for i in range(len(S)):\n        if i > 0 and i % step == 0:\n            result.append(temp)\n            temp = []\n        temp.append(S[i])\n    result.append(temp)\n    return result\n",
    "MbppEval/279": "def is_num_decagonal(n):\n    return n * (3 * n - 2)\n",
    "MbppEval/96": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n",
    "MbppEval/471": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product *= num\n    return product % n\n",
    "MbppEval/266": "def lateralsurface_cube(l):\n    return 4 * l * l\n",
    "MbppEval/775": "def odd_position(nums):\n    result = True\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            result = False\n            break\n    return result\n",
    "MbppEval/163": "from math import tan, pi\n\ndef area_polygon(s, l):\n    return (s * l**2) / (4 * tan(pi/s))\n",
    "MbppEval/738": "def geometric_sum(n):\n    total = 0\n    for i in range(n):\n        total += 1 / (2 ** i)\n    return total\n",
    "MbppEval/109": "def odd_Equivalent(s, n):\n    count = 0\n    for _ in range(n):\n        if int(s, 2) % 2 == 1:\n            count += 1\n        s = s[-1] + s[:-1]\n    return count\n",
    "MbppEval/63": "def max_difference(test_list):\n    max_diff = 0\n    for a, b in test_list:\n        diff = abs(a - b)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n",
    "MbppEval/80": "def tetrahedral_number(n):\n    return (n * (n + 1) * (n + 2)) / 6\n",
    "MbppEval/142": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n",
    "MbppEval/83": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n\n    Examples:\n    get_Char(\"abc\") == \"f\"\n    get_Char(\"gfg\") == \"t\"\n    get_Char(\"ab\") == \"c\"\n    \"\"\"\n    total_ascii = 0\n    for char in strr:\n        total_ascii += ord(char)\n    return chr((total_ascii % 26) + ord('A'))\n",
    "MbppEval/743": "def rotate_right(lst, m, n):\n    \"\"\"\n    Rotate a list to the right by m items, where n is the length of the list.\n    \"\"\"\n    m = m % n\n    part1 = lst[-m:]\n    part2 = lst[:-m]\n    return part1 + part2\n",
    "MbppEval/641": "def is_nonagonal(n):\n    \"\"\"\n    Find the nth nonagonal number.\n\n    Args:\n        n (int): The index of the nonagonal number to find.\n\n    Returns:\n        int: The nth nonagonal number.\n    \"\"\"\n    return n * (7 * n - 5) // 2\n"
}