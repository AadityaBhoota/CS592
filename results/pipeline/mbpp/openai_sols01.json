{
    "MbppEval/2": "def similar_elements(test_tup1, test_tup2):\n    common_elements = set()\n    \n    for element in test_tup1:\n        if element in test_tup2:\n            common_elements.add(element)\n    \n    return tuple(common_elements)\n",
    "MbppEval/3": "import math\n\ndef is_not_prime(n):\n    if n < 2:\n        return True\n    if n == 2:\n        return False\n    if n > 2:\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return True\n    return False\n",
    "MbppEval/4": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    heap = []\n    \n    for num in nums:\n        hq.heappush(heap, -num)\n    \n    result = []\n    for _ in range(n):\n        result.append(-hq.heappop(heap))\n\n    return result\n",
    "MbppEval/6": "def is_Power_Of_Two(x, y):\n    xor_result = x ^ y\n    return xor_result & (xor_result - 1) == 0 and xor_result != 0\n",
    "MbppEval/7": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\w+', text)\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words\n",
    "MbppEval/8": "def square_nums(nums):\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result\n",
    "MbppEval/9": "def find_Rotations(input_str): \n    if len(input_str) <= 1:\n        return 0\n        \n    rotation = 0\n    \n    for i in range(1, len(input_str)//2 + 1):\n        rotated_str = input_str[i:] + input_str[:i]\n        \n        if rotated_str == input_str:\n            rotation = i\n            break\n    \n    return rotation\n",
    "MbppEval/11": "def remove_Occ(s, ch):\n    first_occurrence = s.find(ch)\n    last_occurrence = s.rfind(ch)\n    if first_occurrence != -1 and last_occurrence != -1:\n        modified_string = s[:first_occurrence] + s[first_occurrence+1:last_occurrence] + s[last_occurrence+1:]\n        return modified_string\n    else:\n        return s\n\n# Test the function\nprint(remove_Occ(\"hello\", \"l\"))  # Output: \"heo\"\nprint(remove_Occ(\"abcda\", \"a\"))  # Output: \"bcd\"\nprint(remove_Occ(\"PHP\", \"P\"))     # Output: \"H\"\n",
    "MbppEval/12": "def sort_matrix(M):\n    return sorted(M, key=lambda row: sum(row))\n",
    "MbppEval/14": "def find_Volume(l, b, h):\n    base_area = 0.5 * b * h\n    volume = base_area * l\n    return volume\n",
    "MbppEval/16": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z]+_[a-z]+'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
    "MbppEval/17": "# Step 0: Define the function square_perimeter(a)\ndef square_perimeter(a):\n    # Step 1: Calculate the perimeter of the square\n    perimeter = 4 * a\n    return perimeter\n\n# Test cases\nprint(square_perimeter(10))  # Expected output: 40\nprint(square_perimeter(5))   # Expected output: 20\nprint(square_perimeter(4))   # Expected output: 16\n",
    "MbppEval/18": "NO_OF_CHARS = 256\n\ndef str_to_list(string): \n    dirty_chars = [False] * NO_OF_CHARS\n    \n    for char in string: \n        dirty_chars[ord(char)] = True\n        \n    return dirty_chars\n\ndef remove_dirty_chars(str1, str2):\n    dirty_chars_list = str_to_list(str2)\n    \n    filtered_str = \"\"\n    \n    for char in str1:\n        if not dirty_chars_list[ord(char)]:\n            filtered_str += char\n    \n    return filtered_str\n",
    "MbppEval/19": "def test_duplicate(arraynums):\n    seen = set()\n\n    for num in arraynums:\n        if num in seen:  # Step 3\n            return True\n        seen.add(num)\n    \n    return False  # Step 4\n",
    "MbppEval/20": "def is_woodall(x):\n    n = 1\n    while n * (2**n - 1) < x:\n        n += 1\n    woodall_num = n * (2**n - 1)\n    \n    return woodall_num == x\n",
    "MbppEval/56": "def rev(num):\n    rev_num = int(str(num)[::-1])\n    if num == 2*rev_num + 1:\n        return True\n    else:\n        return False\n",
    "MbppEval/57": "def find_Max_Num(arr):\n    str_arr = [str(x) for x in arr]  \n    sorted_str = ''.join(sorted(str_arr, reverse=True))\n    max_num = int(sorted_str)  \n    return max_num\n",
    "MbppEval/58": "def opposite_Signs(x, y):\n    if (x > 0 and y > 0) or (x < 0 and y < 0):\n        return False\n    else:\n        return True\n",
    "MbppEval/59": "def is_octagonal(n):\n    # input: n (integer)\n    \n    # Calculate the nth octagonal number using the formula: n(3n-1)(2n+1)\n    octagonal_number = n * (3*n - 1) * (2*n + 1)\n\n    return octagonal_number\n",
    "MbppEval/61": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = 0\n    prefix_sums = defaultdict(int)\n\n    for i in range(len(s)):\n        digit = int(s[i])\n        prefix_sums[i+1] = prefix_sums[i] + digit\n\n        if prefix_sums[i+1] == (i+1):\n            count += 1\n\n    return count\n",
    "MbppEval/62": "def smallest_num(xs):\n    # Step 0: Define the function smallest_num\n    smallest = xs[0]  # Step 1: Initialize smallest to the first element of the list\n    \n    # Step 2: Iterate through the list and update the smallest variable if a smaller number is found\n    for num in xs:\n        if num < smallest:\n            smallest = num  # Update smallest if a smaller number is found\n    \n    return smallest\n",
    "MbppEval/63": "def max_difference(test_list):\n    max_diff = 0\n    \n    for pair in test_list:\n        diff = abs(pair[0] - pair[1])\n        if diff > max_diff:\n            max_diff = diff\n            \n    return max_diff\n",
    "MbppEval/64": "def subject_marks(subjectmarks):\n    sorted_subjects = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_subjects\n",
    "MbppEval/65": "def recursive_list_sum(data_list):\n    total_sum = 0\n    \n    if not data_list:\n        return total_sum\n    \n    for element in data_list:\n        if isinstance(element, list):\n            total_sum += recursive_list_sum(element)\n        else:\n            total_sum += element\n            \n    return total_sum\n",
    "MbppEval/66": "def pos_count(lst):\n    count = 0\n\n    for num in lst:\n        if num > 0:\n            count += 1\n    \n    return count\n",
    "MbppEval/67": "import math\n\ndef bell_number(n):   \n    if n < 0:\n        return 0\n    \n    bell = [0] * (n + 1)\n    bell[0] = 1\n    \n    for j in range(1, n + 1):\n        for i in range(1, j + 1):\n            bell[j] += bell[j - i] * math.factorial(j - 1) // (math.factorial(i) * math.factorial(j - i))\n    \n    return bell[n]\n",
    "MbppEval/68": "def is_Monotonic(A):\n    is_increasing = True\n    is_decreasing = True\n    \n    for i in range(1, len(A)):\n        if A[i] < A[i - 1]:\n            is_increasing = False\n        if A[i] > A[i - 1]:\n            is_decreasing = False\n            \n    return is_increasing or is_decreasing\n",
    "MbppEval/69": "def is_sublist(l, s):\n    if len(s) > len(l):\n        return False\n\n    for i in range(len(l)):\n        if l[i:i+len(s)] == s:\n            return True\n\n    return False\n\n# Test cases\nprint(is_sublist([2,4,3,5,7],[3,7]))  # Output should be False\nprint(is_sublist([2,4,3,5,7],[4,3]))  # Output should be True\nprint(is_sublist([2,4,3,5,7],[1,6]))  # Output should be False\n",
    "MbppEval/70": "def find_equal_tuple(Input, length):\n    for tup in Input:\n        if len(tup) != length:\n            return 'All tuples do not have the same length'\n    return 'All tuples have the same length'\n",
    "MbppEval/71": "def comb_sort(nums):\n    gap = len(nums)\n    shrink_factor = 1.3\n    flag = True\n\n    while gap > 1 or flag:\n        flag = False\n\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                flag = True\n\n        gap = int(gap / shrink_factor)\n        if gap < 1:\n            gap = 1\n\n    return nums\n",
    "MbppEval/72": "def dif_Square(n):\n    if int(n**0.5) ** 2 == n:\n        return True\n    else:\n        limit = int(n**0.5)\n        for x in range(1, limit+1):\n            y_square = x*x - n\n            if y_square >= 0 and int(y_square**0.5) == y_square**0.5:\n                return True\n        return False\n",
    "MbppEval/74": "def is_samepatterns(colors, patterns):    \n    if len(colors) != len(patterns):\n        return False\n    \n    mapping = {}\n    \n    for color, pattern in zip(colors, patterns):\n        if color in mapping:\n            if mapping[color] != pattern:\n                return False\n        else:\n            if pattern in mapping.values():\n                return False\n            mapping[color] = pattern\n    \n    return True\n",
    "MbppEval/75": "def find_tuples(test_list, K):\n    result = []\n    \n    for tpl in test_list:\n        all_divisible = all(elem % K == 0 for elem in tpl)\n        if all_divisible:\n            result.append(tpl)\n        \n    return str(result)\n",
    "MbppEval/77": "# Step 0: Define the function is_Diff\ndef is_Diff(n):\n    # Step 1: Separate the odd and even digits of n\n    odd_digits = [int(d) for i, d in enumerate(str(n)) if i % 2 != 0]\n    even_digits = [int(d) for i, d in enumerate(str(n)) if i % 2 == 0]\n",
    "MbppEval/79": "def word_len(s):\n    word_length = len(s)\n    is_odd_length = word_length % 2 != 0\n    return is_odd_length\n",
    "MbppEval/80": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n\n    Formula: Tn = n * (n + 1) * (n + 2) / 6\n    '''\n    \n    result = (n * (n + 1) * (n + 2)) / 6\n    return result\n",
    "MbppEval/82": "import math\n\ndef volume_sphere(r):\n    return (4/3) * math.pi * r**3\n",
    "MbppEval/83": "def get_Char(strr):\n    total_ascii = 0\n    for char in strr:\n        total_ascii += ord(char)\n    total_ascii %= 26\n    final_char = chr(total_ascii)\n    return final_char\n",
    "MbppEval/84": "def sequence(n): \n    if n == 0:\n        return 0\n    if n == 1 or n == 2:\n        return 1\n    \n    seq = [0, 1, 1]  # Initialize with the base cases\n    \n    for i in range(3, n+1):\n        seq.append(seq[seq[i-1]] + seq[i - seq[i-1]])\n    \n    return seq[n]\n",
    "MbppEval/85": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Calculate the surface area of a sphere.\n\n    Parameters:\n    r (float): Radius of the sphere\n\n    Returns:\n    float: Surface area of the sphere\n    '''\n    surface_area = 4 * math.pi * (r ** 2)\n    return surface_area\n",
    "MbppEval/86": "def centered_hexagonal_number(n):\n    return 3 * n * n - 3 * n + 1\n",
    "MbppEval/87": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    \n    all_dicts = [dict1, dict2, dict3]\n    \n    for current_dict in all_dicts:\n        for key, value in current_dict.items():\n            if key not in merged_dict:\n                merged_dict[key] = value\n    \n    return merged_dict\n",
    "MbppEval/88": "import collections\n\ndef freq_count(list1):\n    freq_dict = collections.Counter(list1)\n    return dict(freq_dict)\n",
    "MbppEval/89": "def closest_num(N):\n    if not isinstance(N, int):\n        raise ValueError(\"Input must be an integer\")\n        \n    closest_smaller_num = N - 1\n    return closest_smaller_num\n",
    "MbppEval/90": "def len_log(list1):\n    max_length = 0\n    \n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    \n    return max_length\n",
    "MbppEval/91": "def find_substring(str1, sub_str):\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False\n",
    "MbppEval/92": "def is_undulating(n): \n    if len(n) < 3:\n        return False\n    \n    for i in range(2, len(n)):\n        if (int(n[i]) - int(n[i-1])) * (int(n[i-1]) - int(n[i-2])) >= 0:\n            return False\n\n    return True\n",
    "MbppEval/93": "def power(a, b):\n    result = 1\n    for i in range(b):\n        result *= a\n    return result\n",
    "MbppEval/94": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    if not test_list:\n        return None\n    \n    sorted_list = sorted(test_list, key=itemgetter(1))\n    \n    return sorted_list[0][0]\n",
    "MbppEval/95": "def Find_Min_Length(lst):  \n    min_length = float('inf')\n    \n    for lst_item in lst:\n        current_length = len(lst_item)\n        if current_length < min_length:\n            min_length = current_length\n    \n    return min_length\n",
    "MbppEval/96": "    return count\n",
    "MbppEval/97": "def frequency_lists(list1):\n    freq_dict = {}\n    \n    for sublist in list1:\n        for element in sublist:\n            if element in freq_dict:\n                freq_dict[element] += 1\n            else:\n                freq_dict[element] = 1\n\n    return freq_dict\n",
    "MbppEval/98": "from functools import reduce\n\ndef multiply_num(numbers):\n    total_product = reduce(lambda x, y: x * y, numbers)\n    list_length = len(numbers)\n    result = total_product / list_length\n    return result\n",
    "MbppEval/99": "def decimal_to_binary(n): \n    binary_digits = []\n    \n    while n > 0:\n        binary_digits.append(str(n % 2))\n        n = n // 2\n        \n    binary_digits.reverse()\n    binary_string = ''.join(binary_digits)\n    return binary_string\n",
    "MbppEval/100": "import sys\n\ndef next_smallest_palindrome(num):\n    def is_palindrome(num_str):\n        return num_str == num_str[::-1]\n    \n    num_str = str(num)\n    if is_palindrome(num_str):\n        return num\n    else:\n        return None\n\n# Implementing step 2 correctly\ndef next_smallest_palindrome(num):\n    def is_palindrome(num_str):\n        return num_str == num_str[::-1]\n    \n    num_str = str(num)\n    if is_palindrome(num_str):\n        return num\n    else:\n        return int(num_str)\n\nprint(next_smallest_palindrome(99))  # Expected output: 99\nprint(next_smallest_palindrome(1221))  # Expected output: 1221\nprint(next_smallest_palindrome(120))  # Expected output: 120\n",
    "MbppEval/101": "def kth_element(arr, k):\n    if not arr:\n        return None\n    # continue with step 2 here\n",
    "MbppEval/102": "def snake_to_camel(word):\n    words = word.split('_')\n    camel_case_words = [words[0].capitalize()] + [word.capitalize() for word in words[1:]]\n    return ''.join(camel_case_words)\n",
    "MbppEval/103": "def eulerian_num(n, m):\n    eulerian = [[0] * (m + 1) for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        eulerian[i][0] = 1\n    for j in range(1, m + 1):\n        eulerian[0][j] = 0\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            eulerian[i][j] = (i - 1) * eulerian[i - 1][j - 1] + (i - 1) * eulerian[i - 1][j]\n\n    return eulerian[n][m]\n",
    "MbppEval/104": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()\n    return input_list\n",
    "MbppEval/105": "def count(lst):   \n    count_true = 0\n    \n    for element in lst:\n        if element == True:\n            count_true += 1\n    \n    return count_true\n",
    "MbppEval/106": "def add_lists(test_list, test_tup):\n    new_list = list(test_tup) + test_list\n    new_tuple = tuple(new_list)\n    return new_tuple\n",
    "MbppEval/108": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    combined_list = list(heapq.merge(num1, num2, num3))\n    heapq.heapify(combined_list)\n    \n    result = []\n    while combined_list:\n        smallest = heapq.heappop(combined_list)\n        result.append(smallest)\n        \n    return result\n",
    "MbppEval/109": "def odd_equivalent(binary_string, n):\n    rotated_string = binary_string[-n % len(binary_string):] + binary_string[:-n % len(binary_string)]\n    count = sum(1 for char in rotated_string if int(char) % 2 != 0)\n    return count\n",
    "MbppEval/111": "def common_in_nested_lists(nestedlist):\n    common_elements_set = set(nestedlist[0])\n    \n    # Iterate over the remaining lists in the nested list\n    for lst in nestedlist[1:]:\n        current_set = set(lst)\n        \n        # Intersect the current_set with the common_elements_set\n        common_elements_set = common_elements_set.intersection(current_set)\n    \n    # After iterating through all lists\n    common_elements_list = list(common_elements_set)\n    \n    return common_elements_list\n",
    "MbppEval/113": "def check_integer(text):\n    if not isinstance(text, str):\n        return False\n\n    return text.isdigit()\n",
    "MbppEval/115": "def empty_dit(list1):\n    for dictionary in list1:\n        if not bool(dictionary):\n            return False\n    return True\n",
    "MbppEval/116": "def tuple_to_int(nums):\n    result_str = ''\n    \n    for num in nums:\n        result_str += str(num)\n    \n    int_result = int(result_str)\n    \n    return int_result\n",
    "MbppEval/117": "def list_to_float(test_list):\n    modified_list = []\n    for sublist in test_list:\n        modified_sublist = []\n        for element in sublist:\n            try:\n                modified_sublist.append(float(element))\n            except ValueError:\n                modified_sublist.append(element)\n        modified_list.append(tuple(modified_sublist))  # Convert to tuple before appending\n    return modified_list\n",
    "MbppEval/118": "def string_to_list(string):\n    return string.split()\n",
    "MbppEval/119": "def search(arr):\n    unique_element = None\n    n = len(arr)\n    \n    for i in range(0, n, 2):\n        if i == n - 1 or arr[i] != arr[i + 1]:\n            unique_element = arr[i]\n            break\n    \n    return unique_element\n",
    "MbppEval/120": "def max_product_tuple(list1):\n    max_product = float('-inf')  # Initialize max_product to negative infinity\n    \n    for tup in list1:  # Iterate through each tuple in the list\n        product = abs(tup[0]) * abs(tup[1])  # Calculate the product of the absolute values of the numbers in the tuple\n        max_product = max(max_product, product)  # Update max_product if the calculated product is larger\n        \n    return max_product  # Return the maximum product found\n",
    "MbppEval/123": "def amicable_numbers_sum(limit):\n    def proper_divisors_sum(n):\n        return sum([i for i in range(1, n) if n % i == 0])\n\n    def is_amicable(a):\n        b = proper_divisors_sum(a)\n        return a != b and a == proper_divisors_sum(b)\n\n    amicable_sum = sum([i for i in range(1, limit) if is_amicable(i)])\n\n    return amicable_sum\n",
    "MbppEval/124": "import cmath\n\ndef angle_complex(a, b):\n    return cmath.phase(a + b*1j)\n",
    "MbppEval/125": "def find_length(string):\n    max_diff = 0\n    count_zero = 0\n    count_one = 0\n    \n    for char in string:\n        if char == '0':\n            count_zero += 1\n        else:\n            count_one += 1\n            \n        diff = abs(count_zero - count_one)\n        max_diff = max(max_diff, diff)\n    \n    return max_diff\n",
    "MbppEval/126": "def sum(a, b):\n    common_divisors_list = common_divisors(a, b)\n    return sum(common_divisors_list)\n",
    "MbppEval/127": "def multiply_int(x, y):\n    return x * y\n",
    "MbppEval/128": "import re\n\ndef long_words(n, input_str):\n    words_list = re.findall(r'\\b\\w+\\b', input_str)\n    long_words_list = []\n\n    for word in words_list:\n        if len(word) > n:\n            long_words_list.append(word)\n\n    return long_words_list\n",
    "MbppEval/129": "def magic_square_test(my_matrix):\n    # Check if the input matrix is not empty\n    if len(my_matrix) == 0:\n        return False\n    \n    # Check if the matrix is square\n    if len(my_matrix) != len(my_matrix[0]):\n        return False\n\n    # Calculate the sum of the first row\n    magic_sum = sum(my_matrix[0])\n\n    # Check the sum of each row\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return False\n\n    # Transpose the matrix to calculate column sums\n    transposed_matrix = list(zip(*my_matrix))\n\n    # Check the sum of each column\n    for col in transposed_matrix:\n        if sum(col) != magic_sum:\n            return False\n\n    # Check the sum of the main diagonal\n    main_diagonal_sum = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    if main_diagonal_sum != magic_sum:\n        return False\n\n    # Check the sum of the secondary diagonal\n    secondary_diagonal_sum = sum(my_matrix[i][len(my_matrix) - i - 1] for i in range(len(my_matrix)))\n    if secondary_diagonal_sum != magic_sum:\n        return False\n\n    # If all conditions are met, it's a Magic Square\n    return True\n",
    "MbppEval/130": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    frequency_dict = defaultdict(int)\n\n    for num in nums:\n        frequency_dict[num] += 1\n\n    max_item = max(frequency_dict, key=frequency_dict.get)\n    max_freq = frequency_dict[max_item]\n\n    return max_item, max_freq\n",
    "MbppEval/131": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    \n    vowel_list = [char for char in str1 if char in vowels]\n    \n    reversed_vowels = vowel_list[::-1]\n\n    reversed_str = ''\n    index = 0\n    for char in str1:\n        if char in vowels:\n            reversed_str += reversed_vowels[index]\n            index += 1\n        else:\n            reversed_str += char\n    \n    return reversed_str\n",
    "MbppEval/132": "def tup_string(tup1):\n    result = \"\"\n    \n    for element in tup1:\n        result += str(element)\n    \n    return result\n",
    "MbppEval/133": "def sum_negativenum(nums):\n    negative_sum = 0\n    \n    for num in nums:\n        if num < 0:\n            negative_sum += num\n\n    return negative_sum\n",
    "MbppEval/135": "def hexagonal_num(n):\n    if not isinstance(n, int) or n <= 0:\n        return None\n    \n    hexagonal_number = n * (2*n - 1)\n    return hexagonal_number\n",
    "MbppEval/137": "from array import array\n\ndef zero_count(nums):\n    zero_count = 0\n    non_zero_count = 0\n    \n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    \n    if non_zero_count == 0:\n        ratio = 0\n    else:\n        ratio = zero_count / non_zero_count\n    \n    return round(ratio, 2)\n",
    "MbppEval/138": "def is_Sum_Of_Powers_Of_Two(n): \n    if n <= 0:\n        return False\n    \n    power = 1\n    while power <= n:\n        if n % power != 0:\n            power *= 2\n\n            if power > n:\n                return False\n\n    return True\n",
    "MbppEval/139": "import math\n\ndef circle_circumference(r):\n    pi = math.pi\n    circumference = 2 * pi * r\n    return circumference\n",
    "MbppEval/140": "def extract_singly(test_list):\n    result = []\n    \n    for tpl in test_list:\n        for num in tpl:\n            result.append(num)\n    \n    return result\n",
    "MbppEval/141": "def pancake_sort(nums):\n    def find_max_index(nums):\n        max_index = 0\n        for i in range(len(nums)):\n            if nums[i] > nums[max_index]:\n                max_index = i\n        return max_index\n\n    def reverse_subarray(nums, end):\n        start = 0\n        while start < end:\n            nums[start], nums[end] = nums[end], nums[start]\n            start += 1\n            end -= 1\n        return nums\n\n    for size in range(len(nums), 1, -1):\n        max_index = find_max_index(nums[:size])\n        nums = reverse_subarray(nums, max_index)\n        nums = reverse_subarray(nums, size - 1)\n\n    return nums\n",
    "MbppEval/142": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n",
    "MbppEval/143": "def find_lists(Input): \n    if not isinstance(Input, tuple):\n        return \"Input should be a tuple.\"\n    \n    count = 0\n    \n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    \n    return count\n",
    "MbppEval/145": "def max_Abs_Diff(arr):\n    max_diff = None\n    min_val = None\n    \n    for num in arr:\n        if min_val is None or num < min_val:\n            min_val = num\n    \n    max_diff = None\n\n    for num in arr:\n        if min_val is None or num < min_val:\n            min_val = num\n        if max_diff is None or abs(num - min_val) > max_diff:\n            max_diff = abs(num - min_val)\n\n    return max_diff\n",
    "MbppEval/160": "def extended_gcd(a, b):\n    if b == 0:\n        return a, 1, 0\n    else:\n        gcd, x, y = extended_gcd(b, a % b)\n        return gcd, y, x - (a // b) * y\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef find_solution(a, b, n):\n    if a == 0 and b == 0:\n        if n == 0:\n            return ('x = ', 0, ', y = ', 0)\n        else:\n            return 'No solution'\n\n    if a == 0:\n        y = n // b\n        return ('x = ', 0, ', y = ', y)\n\n    if b == 0:\n        x = n // a\n        return ('x = ', x, ', y = ', 0)\n    \n    if a == 0 or b == 0:\n        return 'No solution'\n\n    if n % gcd(a, b) != 0:\n        return 'No solution'\n\n    gcd_val, x_gcd, y_gcd = extended_gcd(a, b)\n\n    x_solution = x_gcd * (n // gcd(a, b))\n    y_solution = y_gcd * (n // gcd(a, b))\n\n    return ('x = ', x_solution, ', y = ', y_solution)\n",
    "MbppEval/161": "return result_list\n",
    "MbppEval/162": "def sum_series(n):\n    upper_limit = n // 2\n    total_sum = 0\n    \n    for i in range(upper_limit + 1):\n        total_sum += n - 2*i\n\n    return total_sum\n",
    "MbppEval/163": "from math import tan, pi\n\ndef area_polygon(s, l):\n    a = s / (2 * tan(pi / l))\n    area = 0.5 * l * s * a\n    return area\n",
    "MbppEval/164": "import math\n\ndef areEquivalent(x, y): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n\n    Examples:\n    areEquivalent(36,57) == False\n    areEquivalent(2,4) == False\n    areEquivalent(23,47) == True\n    '''\n    \n    def divisors_sum(n):\n        div_sum = 0\n        for i in range(1, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                div_sum += i\n                if i != n // i:\n                    div_sum += n // i\n        return div_sum\n    \n    # Implementing step 2\n    div_sum_x = divisors_sum(x)\n    div_sum_y = divisors_sum(y)\n    \n    # Implementing step 3\n    return div_sum_x == div_sum_y\n",
    "MbppEval/165": "def count_char_position(str1): \n    count = 0\n    str1 = str1.lower()  # Step 0\n    for i in range(len(str1)):  # Step 1\n        if str1[i].isalpha():  # Step 2\n            position = ord(str1[i]) - ord('a')  # Step 3\n            if position == i:  # Step 4\n                count += 1  # Step 5\n    return count  # Step 6: Return the count\n",
    "MbppEval/166": "def find_even_pair(A):\n    count = 0\n\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_result = A[i] ^ A[j]\n            if xor_result % 2 == 0:\n                count += 1\n\n    return count\n",
    "MbppEval/167": "def next_power_of_2(n):\n    if n <= 0:\n        return 1\n    if n & (n - 1) == 0:  # Check if n is already a power of 2\n        return n\n    else:\n        return 2**(n.bit_length())\n",
    "MbppEval/168": "def frequency(a, x):\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count\n",
    "MbppEval/170": "def sum_range_list(list1, m, n):\n    sum_range = 0\n    \n    for i in range(m, n+1):\n        sum_range += list1[i]\n\n    return sum_range\n",
    "MbppEval/171": "import math\n\ndef perimeter_pentagon(a):\n    perimeter = 5 * a\n    return perimeter\n",
    "MbppEval/172": "def count_occurance(s):\n    count = 0\n    \n    for i in range(len(s) - 2):\n        if s[i:i+3] == 'std':\n            count += 1\n    \n    return count\n",
    "MbppEval/222": "def check_type(test_tuple):\n    data_type = type(test_tuple[0])\n\n    for element in test_tuple:\n        if type(element) != data_type:\n            return False\n\n    return True\n",
    "MbppEval/223": "def is_majority(arr, n, x):\n    if n <= 0:\n        return False\n\n    count_x = arr.count(x)\n\n    return count_x > n/2\n",
    "MbppEval/224": "def count_Set_Bits(n):\n    count = 0\n    binary_str = bin(n)[2:]\n    \n    for digit in binary_str:\n        if digit == '1':\n            count += 1\n            \n    return count\n",
    "MbppEval/226": "def odd_values_string(str):\n    result = ''\n    for index in range(len(str)):\n        if index % 2 == 0:\n            result += str[index]\n    return result\n",
    "MbppEval/227": "def min_of_three(a, b, c):\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c\n",
    "MbppEval/228": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    mask = (1 << (r - l + 1)) - 1 << l\n    return n & mask == 0\n",
    "MbppEval/229": "def re_arrange_array(arr, n):\n    neg_elements = []\n    pos_elements = []\n    \n    for i in range(n):\n        element = arr[i]\n        \n        if element < 0:\n            neg_elements.append(element)\n        else:\n            pos_elements.append(element)\n    \n    return neg_elements + pos_elements\n",
    "MbppEval/230": "def replace_blank(str1, char):\n    modified_str = str1.replace(' ', char)\n    return modified_str\n\n# Test cases\nprint(replace_blank(\"hello people\", '@'))  # Output: \"hello@people\"\nprint(replace_blank(\"python program language\", '$'))  # Output: \"python$program$language\"\nprint(replace_blank(\"blank space\", \"-\"))  # Output: \"blank-space\"\n",
    "MbppEval/232": "import heapq\n\ndef larg_nnum(list1, n):\n    max_heap = list1[:]\n    heapq.heapify(max_heap)\n    \n    neg_max_heap = [-x for x in max_heap]\n    heapq.heapify(neg_max_heap)\n    \n    n_largest = []\n    for i in range(n):\n        n_largest.append(-heapq.heappop(neg_max_heap))\n    \n    return n_largest\n",
    "MbppEval/233": "import math\n\ndef lateralsurface_cylinder(r, h):\n    lateral_surface_area = 2 * math.pi * r * h\n    return round(lateral_surface_area, 2)\n",
    "MbppEval/234": "def volume_cube(l):\n    '''\n    Calculate the volume of a cube given its side length.\n    \n    Parameters:\n    l (int or float): Side length of the cube\n    \n    Returns:\n    int or float: Volume of the cube\n    '''\n    volume = l ** 3\n    return volume\n",
    "MbppEval/235": "def even_bit_set_number(n):\n    even_mask = 0b1010101010101010\n    result = n | even_mask\n    return result\n",
    "MbppEval/237": "from collections import Counter\n\ndef check_occurrences(test_list):\n    counts = Counter()\n    \n    for tup in test_list:\n        counts[tup] += 1\n\n    return dict(counts)\n",
    "MbppEval/238": "def number_of_substrings(string): \n    count = 0\n    \n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            count += 1\n    \n    return count\n",
    "MbppEval/239": "def get_total_number_of_sequences(m, n):\n    def count_sequences(prev, curr_len, n, m):\n        if curr_len == n:\n            return 1\n\n        total_sequences = 0\n        for next_num in range(2 * prev, m + 1):\n            total_sequences += count_sequences(next_num, curr_len + 1, n, m)\n\n        return total_sequences\n\n    total_sequences = 0\n    for start_num in range(1, m - n + 2):\n        total_sequences += count_sequences(start_num, 1, n, m)\n\n    return total_sequences\n",
    "MbppEval/240": "def replace_list(list1, list2):\n    list1.pop()\n    list1.extend(list2)\n    return list1\n",
    "MbppEval/242": "def count_charac(str1):\n    return len(str1)\n",
    "MbppEval/244": "import math\n\ndef next_Perfect_Square(N): \n    '''\n    Find the next perfect square greater than a given number.\n\n    Parameters:\n    N (int): Given number for which we need to find the next perfect square.\n\n    Returns:\n    int: Next perfect square greater than N.\n    '''\n    square_root = math.ceil(math.sqrt(N))\n    next_square = (square_root + 1) ** 2\n    return next_square\n",
    "MbppEval/245": "def max_sum(arr):\n    # Step 0: Finding the longest increasing subsequence array\n    def longest_increasing_subsequence(arr):\n        lis = [arr[i] for i in range(len(arr))]\n        for i in range(1, len(arr)):\n            for j in range(i):\n                if arr[i] > arr[j] and lis[i] < lis[j] + arr[i]:\n                    lis[i] = lis[j] + arr[i]\n        return lis\n\n    # Step 1: Finding the longest increasing subsequence array\n    lis = longest_increasing_subsequence(arr)\n\n    # Step 2: Finding the longest decreasing subsequence array from the right side\n    def longest_decreasing_subsequence(arr):\n        lds = [arr[i] for i in range(len(arr))]\n        for i in range(len(arr) - 2, -1, -1):\n            for j in range(len(arr) - 1, i, -1):\n                if arr[i] > arr[j] and lds[i] < lds[j] + arr[i]:\n                    lds[i] = lds[j] + arr[i]\n        return lds\n\n    # Step 3: Finding the maximum sum of a bitonic subsequence\n    lds = longest_decreasing_subsequence(arr)\n    max_sum = 0\n    for i in range(len(arr)):\n        bitonic_sum = lis[i] + lds[i] - arr[i]\n        if bitonic_sum > max_sum:\n            max_sum = bitonic_sum\n\n    return max_sum\n",
    "MbppEval/246": "def babylonian_squareroot(number):\n    guess = number/2\n    precision = 0.0001\n    while abs(guess*guess - number) > precision:\n        guess = (guess + number/guess) / 2\n    return guess\n\n# Testing\nprint(babylonian_squareroot(10))  # Output should be approximately 3.162277660168379\n",
    "MbppEval/247": "def lps(s):\n    n = len(s)\n    \n    dp = [[0] * n for _ in range(n)]\n    \n    for i in range(n):\n        dp[i][i] = 1\n\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n    return dp[0][n - 1]\n",
    "MbppEval/248": "def harmonic_sum(n):\n    result = 0\n    for i in range(1, n):\n        result += 1 / i\n    return round(result, 15)\n",
    "MbppEval/249": "def intersection_array(array_nums1, array_nums2):\n    common_elements = []\n    \n    for num in array_nums1:\n        if num in array_nums2:\n            common_elements.append(num)\n    \n    return common_elements\n",
    "MbppEval/250": "def count_X(tup, x): \n    count = 0\n\n    for elem in tup:\n        if elem == x:\n            count += 1\n\n    return count\n",
    "MbppEval/251": "def insert_element(lst, element):\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result\n",
    "MbppEval/252": "import cmath\n\ndef convert(numbers):\n    complex_number = numbers + 0j\n    polar_coordinates = cmath.polar(complex_number)\n    return polar_coordinates\n",
    "MbppEval/253": "def count_integer(list1):\n    count = 0\n    for elem in list1:\n        if isinstance(elem, int):\n            count += 1\n    return count\n",
    "MbppEval/255": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l, n))\n",
    "MbppEval/256": "def count_Primes_nums(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n\n    return count\n",
    "MbppEval/257": "def swap_numbers(a, b):\n    return (b, a)\n",
    "MbppEval/259": "def maximize_elements(test_tup1, test_tup2):\n    result = []\n    \n    for tup1, tup2 in zip(test_tup1, test_tup2):\n        max_tuple = tuple(max(t1, t2) for t1, t2 in zip(tup1, tup2))\n        result.append(max_tuple)\n    \n    return tuple(result)\n",
    "MbppEval/260": "def newman_prime(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def generate_newman_shanks_williams_numbers(length):\n        nsw_numbers = [1, 2, 3]\n        for i in range(3, length):\n            new_num = 2 * nsw_numbers[i-1] + nsw_numbers[i-2] - 2 * nsw_numbers[i-3]\n            nsw_numbers.append(new_num)\n        return nsw_numbers\n\n    index = 0\n    count = 0\n    while count < n:\n        index += 1\n        if is_prime(generate_newman_shanks_williams_numbers(index)[-1]):\n            count += 1\n\n    return generate_newman_shanks_williams_numbers(index)[-1]\n\n",
    "MbppEval/261": "def division_elements(test_tup1, test_tup2):\n",
    "MbppEval/262": "def split_two_parts(list1, L):\n    first_part = list1[:L]\n    second_part = list1[L:]\n    \n    return first_part, second_part\n",
    "MbppEval/264": "def dog_age(h_age):\n    dog_age = 0\n    \n    if h_age <= 0:\n        return dog_age\n    \n    if h_age == 1:\n        dog_age += 10.5\n    elif h_age == 2:\n        dog_age += 10.5 + 4\n    else:\n        dog_age += 10.5 + 4 + (h_age - 2) * 4\n    \n    return dog_age\n",
    "MbppEval/265": "def list_split(S, step):\n    result = []\n    for i in range(0, len(S), step):\n        sublist = S[i:i+step]\n        result.append(sublist)\n    return result\n",
    "MbppEval/266": "def lateralsurface_cube(l):\n    return 4 * (l ** 2)\n",
    "MbppEval/267": "def square_Sum(n):  \n    sum_squares = 0\n\n    for i in range(1, n + 1):\n        odd_number = 2 * i - 1\n        square = odd_number ** 2\n        sum_squares += square\n\n    return sum_squares\n",
    "MbppEval/268": "def find_star_num(n):\n    return n**2 + (n+1)**2\n",
    "MbppEval/269": "def ascii_value(k):\n    if isinstance(k, str) and len(k) == 1:\n        ascii_val = ord(k)\n        return ascii_val\n    else:\n        return \"Input should be a single character.\"\n",
    "MbppEval/270": "def sum_even_and_even_index(arr):\n    # Step 1: Initialize a variable `sum_even` to 0\n    sum_even = 0\n\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum_even += arr[i]\n\n    return sum_even\n",
    "MbppEval/271": "def even_Power_Sum(n):\n    sum_result = 0\n    count = 0\n    num = 2\n\n    while count < n:\n        if num % 2 == 0:\n            sum_result += num ** 5\n            count += 1\n        num += 2\n\n    return sum_result\n",
    "MbppEval/272": "def rear_extract(test_list):\n    rear_elements = []\n    for tup in test_list:\n        rear_elements.append(tup[-1])\n    return rear_elements\n",
    "MbppEval/273": "def substract_elements(test_tup1, test_tup2):\n    result = ()\n    for i in range(min(len(test_tup1), len(test_tup2))):\n        result += (test_tup1[i] - test_tup2[i],)\n    return result\n",
    "MbppEval/274": "import math  \ndef even_binomial_Coeff_Sum(n): \n    if not isinstance(n, int) or n <= 0:\n        return \"Please enter a positive integer for n\"\n    \n    # Step 1: Calculate the sum of even index binomial coefficients\n    sum_even_binomial = 2**n\n    \n    return sum_even_binomial\n",
    "MbppEval/276": "import math\n\ndef volume_cylinder(r, h):\n    volume = math.pi * (r**2) * h\n    return volume\n",
    "MbppEval/277": "def dict_filter(my_dict, n):\n    filtered_dict = {}\n    \n    for key, value in my_dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    \n    return filtered_dict\n",
    "MbppEval/278": "def count_first_elements(test_tup):\n    count = 0\n    for elem in test_tup:\n        if isinstance(elem, tuple):\n            return count\n        count += 1\n    return -1\n",
    "MbppEval/279": "def is_num_decagonal(n):\n    return n * (7 * n - 5)\n",
    "MbppEval/280": "def sequential_search(dlist, item):\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n",
    "MbppEval/281": "def all_unique(test_list):\n    unique_elements = set()\n    \n    for element in test_list:\n        if element in unique_elements:\n            return False\n        unique_elements.add(element)\n    \n    return True\n",
    "MbppEval/282": "def sub_list(nums1, nums2):\n    result = []\n    \n    if len(nums1) != len(nums2):\n        raise ValueError(\"Input lists must be of the same length\")\n    \n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    return result\n",
    "MbppEval/283": "def validate(n):\n    num_str = str(n)\n    digit_count = {}\n    \n    for digit in num_str:\n        if digit in digit_count:\n            digit_count[digit] += 1\n        else:\n            digit_count[digit] = 1\n    \n    for digit, count in digit_count.items():\n        if int(digit) < count:\n            return False\n    \n    return True\n",
    "MbppEval/284": "def check_element(lst, element):\n    for item in lst:\n        if item != element:\n            return False\n    return True\n",
    "MbppEval/285": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile('ab{2,3}')\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
    "MbppEval/286": "def max_sub_array_sum_repeated(a, n, k):\n    modified_list = a * k\n    max_sum_found = float('-inf')\n\n    for i in range(len(modified_list) - n + 1):\n        subarray = modified_list[i:i+n]\n        subarray_sum = sum(subarray)\n        max_sum_found = max(max_sum_found, subarray_sum)\n\n    return max_sum_found\n\n# Test the function with the examples provided\nprint(max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3))  # Output should be 30\nprint(max_sub_array_sum_repeated([-1, 10, 20], 3, 2))       # Output should be 59\nprint(max_sub_array_sum_repeated([-1, -2, -3], 3, 3))       # Output should be -1\n",
    "MbppEval/287": "def square_Sum(n):  \n    sum_squares = 0\n    for i in range(1, n+1):\n        num = 2*i\n        sum_squares += num**2\n    return sum_squares\n",
    "MbppEval/290": "def max_length(list1):\n    max_len = 0\n    max_list = []\n\n    for sublist in list1:\n        sublist_len = len(sublist)\n        if sublist_len > max_len:\n            max_len = sublist_len\n            max_list = sublist\n\n    return max_len, max_list\n",
    "MbppEval/291": "def count_no_of_ways(n, k):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return k\n    elif n == 2:\n        return k * k\n    \n    same_color = k\n    diff_color = k * (k - 1)\n    \n    for i in range(3, n + 1):\n        new_same_color = diff_color\n        new_diff_color = (same_color + diff_color) * (k - 1)\n        \n        same_color = new_same_color\n        diff_color = new_diff_color\n    \n    total_ways = same_color + diff_color\n    \n    return total_ways\n",
    "MbppEval/292": "def find(n, m):\n    quotient = n // m\n    return quotient\n",
    "MbppEval/293": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Find the length of the third side of a right-angled triangle.\n\n    Args:\n    w (float): Length of one side of the triangle.\n    h (float): Length of the other side of the triangle.\n\n    Returns:\n    float: Length of the third side of the triangle.\n    '''\n    return math.sqrt(w**2 + h**2)\n",
    "MbppEval/294": "def max_val(listval):\n    max_value = None  # Initialize max_value to None to avoid assuming a specific initial value\n    \n    for val in listval:\n        if isinstance(val, (int, float)):\n            if max_value is None or val > max_value:\n                max_value = val\n    \n    return max_value\n",
    "MbppEval/295": "def sum_div(number):\n    sum_divisors = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum_divisors += i\n    return sum_divisors\n",
    "MbppEval/296": "def get_Inv_Count(arr):\n    count = 0\n    \n    def merge(arr1, arr2):\n        nonlocal count\n        i = j = 0\n        merged = []\n        while i < len(arr1) and j < len(arr2):\n            if arr1[i] <= arr2[j]:\n                merged.append(arr1[i])\n                i += 1\n            else:\n                merged.append(arr2[j])\n                count += len(arr1) - i\n                j += 1\n        merged += arr1[i:]\n        merged += arr2[j:]\n        return merged\n\n    def sort_and_count(arr):\n        if len(arr) <= 1:\n            return arr\n        mid = len(arr) // 2\n        left = sort_and_count(arr[:mid])\n        right = sort_and_count(arr[mid:])\n        return merge(left, right)\n\n    sort_and_count(arr)\n\n    return count\n",
    "MbppEval/297": "def flatten_list(list1):\n    flattened_list = []\n    \n    for element in list1:\n        if isinstance(element, list):\n            flattened_list.extend(flatten_list(element))\n        else:\n            flattened_list.append(element)\n    \n    return flattened_list\n",
    "MbppEval/299": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    aggregate_scores = defaultdict(int)\n    for name, score in stdata:\n        aggregate_scores[name] += score\n\n    max_student = max(aggregate_scores, key=aggregate_scores.get)\n    \n    return max_student, aggregate_scores[max_student]\n",
    "MbppEval/300": "def count_binary_seq(n):\n    def generate_binary_sequences(n):\n        if n == 0:\n            return ['']\n        \n        prev_sequences = generate_binary_sequences(n - 1)\n        new_sequences = []\n        \n        for seq in prev_sequences:\n            new_sequences.append(seq + '0')\n            new_sequences.append(seq + '1')\n        \n        return new_sequences\n\n    def calculate_sums(seq, n):\n        first_half = seq[:n]\n        last_half = seq[n:]\n        \n        sum_first_half = sum(int(bit) for bit in first_half)\n        sum_last_half = sum(int(bit) for bit in last_half)\n        \n        return sum_first_half, sum_last_half\n\n    def count_equal_sums(n):\n        sequences = generate_binary_sequences(n)\n        count = 0\n        \n        for seq in sequences:\n            sum_first_half, sum_last_half = calculate_sums(seq, n)\n            if sum_first_half == sum_last_half:\n                count += 1\n        \n        return count\n    \n    return count_equal_sums(n)\n",
    "MbppEval/301": "def dict_depth(d):\n    if not d:\n        return 0\n    \n    max_depth = 0\n\n    def calculate_depth(dictionary, depth):\n        nonlocal max_depth\n        if not dictionary:\n            max_depth = max(max_depth, depth)\n            return\n        for key, value in dictionary.items():\n            if isinstance(value, dict):\n                calculate_depth(value, depth + 1)\n                \n    for key, value in d.items():\n        if isinstance(value, dict):\n            calculate_depth(value, 2)\n            max_depth = max(max_depth, 2)\n\n    return max_depth\n",
    "MbppEval/304": "def find_Element(arr, ranges, rotations, index):\n    current_index = index\n    \n    for i in range(rotations):\n        for r in ranges:\n            start, end = r\n            if current_index >= start and current_index <= end:\n                current_index = end - (current_index - start)\n    \n    return arr[current_index]\n",
    "MbppEval/305": "import re\ndef start_withp(words):\n    # Step 1\n    words_list = [word for sentence in words for word in sentence.split()]\n    \n    # Step 2\n    p_words = [word for word in words_list if re.match(r'^[Pp]', word)]\n    \n    # Step 3\n    return tuple(p_words[:2])\n",
    "MbppEval/306": "def max_sum_increasing_subseq(a, n, index, k):\n    max_sum = a[index]\n    \n    for i in range(index):\n        if a[i] < a[index]:\n            max_sum = max(max_sum, a[i] + max_sum_increasing_subseq(a, n, i, k))\n\n    return max_sum\n\n# Testing the function with the examples provided\nprint(max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5], 7, 4, 6))  # Output: 11\nprint(max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5], 7, 2, 5))  # Output: 7\nprint(max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4))  # Output: 71\n",
    "MbppEval/307": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    if m < 0 or m >= len(tuplex):\n        return \"Invalid index for the given tuple\"\n    \n    tuplex_copy = deepcopy(tuplex)\n    tuplex_copy[m] = [n]\n    \n    return tuple(tuplex_copy)\n",
    "MbppEval/308": "def large_product(nums1, nums2, N):\n    products = []  \n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n    \n    products.sort(reverse=True)\n    \n    return products[:N]\n",
    "MbppEval/309": "def maximum(a, b):\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return a\n",
    "MbppEval/310": "def string_to_tuple(str1):\n    result = tuple(str1)\n    return result\n",
    "MbppEval/311": "def set_left_most_unset_bit(n):\n    binary_str = bin(n)[2:]\n    unset_bit_position = binary_str.find('0')\n    result = n | (1 << (len(binary_str) - unset_bit_position - 1))\n    return result\n",
    "MbppEval/312": "import math\n\ndef volume_cone(r, h):\n    V = (1/3) * math.pi * r**2 * h\n    return V\n",
    "MbppEval/388": "def highest_Power_of_2(n): \n    power_of_2 = 1\n    return power_of_2\n\n# Testing step 0\nprint(highest_Power_of_2(10))  # Expected output: 1\n",
    "MbppEval/389": "def find_lucas(n):\n    lucas_numbers = [2, 1]  # Lucas(0) and Lucas(1)\n\n    if n <= 1:\n        return lucas_numbers[n]\n    \n    for i in range(2, n+1):\n        lucas_numbers.append(lucas_numbers[i-1] + lucas_numbers[i-2])\n    \n    return lucas_numbers[n]\n",
    "MbppEval/390": "def add_string(list_, string):\n    final_list = []\n\n    if not isinstance(string, str):\n        return \"Invalid format string\"\n\n    for elem in list_:\n        final_list.append(string.format(elem))\n\n    return final_list\n",
    "MbppEval/391": "def convert_list_dictionary(l1, l2, l3):\n    result = []  # Step 1\n\n    for i in range(len(l1)):  # Step 2\n        nested_dict = {l1[i]: {l2[i]: l3[i]}}  # Step 3\n        result.append(nested_dict)\n\n    return result  # Step 4\n",
    "MbppEval/392": "def get_max_sum(n, memo={}):\n    if n <= 1:\n        return n\n\n    if n in memo:\n        return memo[n]\n\n    memo[n] = max(get_max_sum(n//2, memo) + get_max_sum(n//3, memo) + get_max_sum(n//4, memo) + get_max_sum(n//5, memo), n)\n    return memo[n]\n",
    "MbppEval/393": "def max_length_list(input_list):\n    max_length = 0\n    max_list = None\n    \n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    \n    return max_length, max_list\n",
    "MbppEval/394": "def check_distinct(test_tup):\n    unique_set = set(test_tup)\n    return len(unique_set) == len(test_tup)\n",
    "MbppEval/395": "def first_non_repeating_character(str1):\n    char_count = {}\n    \n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n            \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return None\n",
    "MbppEval/396": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    return \"Valid\" if re.match(regex, string) else \"Invalid\"\n",
    "MbppEval/397": "def median_numbers(a, b, c):\n    numbers_list = [a, b, c]\n    sorted_numbers = sorted(numbers_list)\n    \n    n = len(sorted_numbers)\n    if n % 2 == 0:\n        median = (sorted_numbers[n//2] + sorted_numbers[n//2 - 1]) / 2\n    else:\n        median = sorted_numbers[n//2]\n    \n    return median\n",
    "MbppEval/398": "def sum_of_digits(nums):\n    total_sum = 0\n    for num in nums:\n        if isinstance(num, int):\n            for digit in str(num):\n                if digit.isdigit():\n                    total_sum += int(digit)\n    \n    return total_sum\n",
    "MbppEval/399": "def bitwise_xor(test_tup1, test_tup2):\n    result_list = []\n    \n    for i, j in zip(test_tup1, test_tup2):\n        result_list.append(i ^ j)\n    \n    result_tuple = tuple(result_list)\n    \n    return result_tuple\n",
    "MbppEval/400": "def extract_freq(test_list):\n    unique_tuples = set()\n    \n    for tup in test_list:\n        unique_tuples.add(tup)\n    \n    return len(unique_tuples)\n",
    "MbppEval/401": "def add_nested_tuples(test_tup1, test_tup2):\n    result = []\n    \n    for tup1, tup2 in zip(test_tup1, test_tup2):\n        temp = []\n        # Iterating through the tuples inside the nested tuples\n        for val1, val2 in zip(tup1, tup2):\n            temp.append(val1 + val2)\n        result.append(tuple(temp))\n    \n    return tuple(result)\n",
    "MbppEval/404": "def minimum(a, b):\n    if a < b:\n        return a\n    else:\n        return b\n",
    "MbppEval/405": "def check_tuplex(tuplex, element_to_check):\n    return element_to_check in tuplex\n",
    "MbppEval/406": "def find_Parity(x): \n    if x % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n",
    "MbppEval/407": "def rearrange_bigger(n):\n    digits = [int(d) for d in str(n)]\n    \n    i = len(digits) - 2\n    while i >= 0 and digits[i] >= digits[i + 1]:\n        i -= 1\n    \n    if i == -1:\n        return False\n    \n    j = len(digits) - 1\n    while j > i and digits[j] <= digits[i]:\n        j -= 1\n    \n    digits[i], digits[j] = digits[j], digits[i]\n    \n    digits[i + 1:] = digits[i + 1:][::-1]\n    \n    result = int(''.join(map(str, digits)))\n    \n    return result\n",
    "MbppEval/408": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    \n    if not nums1 or not nums2 or k == 0:\n        return pairs\n    \n    min_heap = []\n    \n    for n1 in nums1:\n        for n2 in nums2:\n            heapq.heappush(min_heap, (n1 + n2, [n1, n2]))\n    \n    for _ in range(min(k, len(min_heap))):\n        pairs.append(heapq.heappop(min_heap)[1])\n        \n    return pairs\n",
    "MbppEval/409": "def min_product_tuple(list1):\n    min_product = float('inf')\n\n    for pair in list1:\n        product = pair[0] * pair[1]\n        if product < min_product:\n            min_product = product\n\n    return min_product\n",
    "MbppEval/410": "def min_val(listval):\n    int_list = [x for x in listval if isinstance(x, int)]\n    return min(int_list)\n",
    "MbppEval/411": "import re\ndef snake_to_camel(word):\n    words = word.split('_')\n    camel_words = [words[0].capitalize()]\n    camel_words.extend([word.capitalize() for word in words[1:]])\n    return ''.join(camel_words)\n",
    "MbppEval/412": "def remove_odd(l):\n    even_numbers = []  # Create an empty list to store the even numbers\n    \n    for num in l:  # Iterate through each number in the input list\n        if num % 2 == 0:  # Check if the number is even\n            even_numbers.append(num)  # If the number is even, add it to the new list\n            \n    return even_numbers  # Return the new list containing only even numbers\n",
    "MbppEval/413": "def extract_nth_element(list1, n):\n    extracted_elements = []\n    \n    for tuple in list1:\n        extracted_elements.append(tuple[n])\n    \n    return extracted_elements\n",
    "MbppEval/414": "def overlapping(list1, list2):\n    for value in list1:\n        if value in list2:\n            return True\n    return False\n",
    "MbppEval/415": "def max_Product(arr): \n    max_product = float('-inf')\n    pair = None\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                pair = (arr[i], arr[j])\n\n    return pair\n",
    "MbppEval/417": "def group_tuples(Input): \n    groups = {}\n    \n    for tup in Input:\n        first_element = tup[0]\n        if first_element in groups:\n            if tup not in groups[first_element]:\n                groups[first_element].append(tup)\n        else:\n            groups[first_element] = [tup]\n    \n    return [val for val in groups.values()]\n",
    "MbppEval/418": "def Find_Max(lst): \n    max_length = 0\n    max_element = []\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n            max_element = sublist\n    return max_element\n",
    "MbppEval/419": "def round_and_sum(list1):\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n\n    result = total_sum * len(list1)\n    return result\n",
    "MbppEval/420": "def cube_Sum(n):\n    even_numbers = [2*i for i in range(1, n+1)]\n    cubes = [num**3 for num in even_numbers]\n    cube_sum = sum(cubes)\n    return cube_sum\n",
    "MbppEval/421": "def concatenate_tuple(test_tup):\n    concatenated_str = ''\n    delimiter = '-'\n    \n    for element in test_tup:\n        concatenated_str += str(element) + delimiter\n    \n    concatenated_str = concatenated_str[:-1]  # Remove the last delimiter\n    \n    return concatenated_str\n",
    "MbppEval/422": "def find_Average_Of_Cube(n):\n    sum_cubes = 0\n\n    for i in range(1, n+1):\n        sum_cubes += i ** 3\n\n    return sum_cubes / n\n",
    "MbppEval/424": "def extract_rear(test_tuple):\n    rear_elements = []\n    for string in test_tuple:\n        rear_elements.append(string[-1])\n    return rear_elements\n",
    "MbppEval/425": "def count_element_in_list(list1, x): \n    count = 0\n    \n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    \n    return count\n",
    "MbppEval/426": "def filter_oddnumbers(nums):\n    filtered_odd_numbers = []\n    \n    for num in nums:\n        if num % 2 != 0:\n            filtered_odd_numbers.append(num)\n    \n    return filtered_odd_numbers\n",
    "MbppEval/427": "import re\ndef change_date_format(dt):\n    date_parts = dt.split('-')\n    day, month, year = date_parts[2], date_parts[1], date_parts[0]\n    return f'{day}-{month}-{year}'\n",
    "MbppEval/428": "def calculate_gap_sequence(n):\n    h = 1\n    gap_sequence = []\n    while h < n / 3:\n        h = 3 * h + 1\n        gap_sequence.append(h)\n    return gap_sequence\n\ndef shell_sort(my_list):\n    gap_sequence = calculate_gap_sequence(len(my_list))\n    \n    for h in gap_sequence:\n        for i in range(h, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= h and my_list[j - h] > temp:\n                my_list[j] = my_list[j - h]\n                j -= h\n            my_list[j] = temp\n    \n    return my_list\n",
    "MbppEval/429": "def and_tuples(test_tup1, test_tup2):\n    result = []\n    \n    for elem1, elem2 in zip(test_tup1, test_tup2):\n        result.append(elem1 & elem2)\n    \n    return tuple(result)\n",
    "MbppEval/430": "def parabola_directrix(a, b, c): \n    directrix = c - (b**2 / (4*a))\n    return directrix\n",
    "MbppEval/431": "def common_element(list1, list2):\n    set_list1 = set(list1)\n    \n    for elem in list2:\n        if elem in set_list1:\n            return True\n    \n    return False\n",
    "MbppEval/432": "def median_trapezium(base1, base2, height):\n    # Step 0: Calculate the sum of the two bases\n    bases_sum = base1 + base2\n    \n    # Step 1: Calculate the average of the bases\n    median = bases_sum / 2\n    \n    # Step 2: Return the average as the median length of the trapezium\n    return median\n",
    "MbppEval/433": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n\n    Examples:\n    check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n    check_greater([2, 3, 4, 5, 6], 8) == 'Yes, the entered number is greater than those in the array'\n    check_greater([9, 7, 4, 8, 6, 1], 11) == 'Yes, the entered number is greater than those in the array'\n    '''\n    is_greater = False\n\n    for num in arr:\n        if num >= number:\n            is_greater = True\n            break\n\n    if is_greater:\n        return 'No, entered number is less than those in the array'\n    else:\n        return 'Yes, the entered number is greater than those in the array'\n",
    "MbppEval/434": "import re\n\ndef text_match_one(text):\n    if re.search(r'ab+', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
    "MbppEval/435": "def last_digit(n):\n    # Step 1\n    str_n = str(n)\n    # Step 2\n    return int(str_n[-1])\n",
    "MbppEval/436": "def neg_nos(list1):\n    neg_nums = []\n    \n    for num in list1:\n        if num < 0:\n            neg_nums.append(num)\n    \n    return neg_nums\n",
    "MbppEval/437": "def remove_odd(str1):\n    result = \"\"\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            result += str1[i]\n    return result\n",
    "MbppEval/438": "def count_bidirectional(test_list):\n    count = 0\n    seen_pairs = set()\n    \n    for pair in test_list:\n        if (pair[1], pair[0]) in seen_pairs:\n            count += 1\n            seen_pairs.remove((pair[1], pair[0]))\n        else:\n            seen_pairs.add(pair)\n    \n    return str(count)\n",
    "MbppEval/439": "def multiple_to_single(L):\n    # Step 1: Convert each integer to a string\n    str_list = [str(num) for num in L]\n\n    # Step 2: Join the strings together\n    concatenated_str = ''.join(str_list)\n\n    # Step 3: Convert the concatenated string back to an integer\n    single_int = int(concatenated_str)\n    return single_int\n",
    "MbppEval/440": "import re\n\ndef find_adverb_position(text):\n    words = re.findall(r'\\b\\w+\\b', text)\n    \n    for i, word in enumerate(words):\n        if (word.endswith('ly') or word.endswith('ily')) and len(word) == text.index(word) + len(word):\n            return (text.index(word), text.index(word) + len(word) - 1, word)\n            break\n",
    "MbppEval/441": "def surfacearea_cube(l):\n    surface_area = 6 * l ** 2\n    return surface_area\n",
    "MbppEval/442": "from array import array\n\ndef positive_count(nums):\n    total_elements = len(nums)\n    positive_elements = sum(1 for num in nums if num > 0)\n    positive_ratio = positive_elements / total_elements if total_elements > 0 else 0\n    return round(positive_ratio, 2)\n",
    "MbppEval/443": "def largest_neg(list1): \n    largest_neg_num = None\n    \n    for num in list1:\n        if num < 0:\n            if largest_neg_num is None or num < largest_neg_num:\n                largest_neg_num = num\n                \n    return largest_neg_num\n",
    "MbppEval/444": "def trim_tuple(test_list, K):\n    trimmed_tuples = []\n\n    for tup in test_list:\n        trimmed_tup = tup[:K]  # Extract elements up to index K\n        trimmed_tuples.append(trimmed_tup)  # Append the trimmed tuple to the list\n    \n    return str(trimmed_tuples)\n",
    "MbppEval/445": "def index_multiplication(test_tup1, test_tup2):\n    result = []\n    \n    for tup1, tup2 in zip(test_tup1, test_tup2):\n        new_tup = tuple()\n        \n        for index in range(len(tup1)):\n            prod = tup1[index] * tup2[index]\n            new_tup += (prod,)\n        \n        result.append(new_tup)\n        \n    return tuple(result)\n",
    "MbppEval/446": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    tuple_elements_count = Counter(tup)\n    total_count = sum(tuple_elements_count[element] for element in lst)\n    return total_count\n",
    "MbppEval/447": "def cube_nums(nums):\n    result = [num ** 3 for num in nums]\n    return result\n",
    "MbppEval/448": "def perrin(n):\n    if n == 0:\n        return 3\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    return perrin(n-2) + perrin(n-3)\n\ndef cal_sum(n):\n    total_sum = 0\n    for i in range(n + 1):\n        total_sum += perrin(i)\n    return total_sum\n",
    "MbppEval/450": "def extract_string(str_list, length):\n    extracted_strings = []\n\n    for string in str_list:\n        if len(string) >= length:\n            extracted_strings.append(string)\n    \n    return extracted_strings\n",
    "MbppEval/451": "import re\n\ndef remove_whitespaces(text1):\n    regex_pattern = r'\\s+'\n    text_without_spaces = re.sub(regex_pattern, '', text1)\n    return text_without_spaces\n",
    "MbppEval/452": "def loss_amount(actual_cost, sale_amount):\n    profit_loss = sale_amount - actual_cost\n    \n    if profit_loss < 0:  # Check for loss\n        return abs(profit_loss)\n    else:  # No loss\n        return 0\n",
    "MbppEval/453": "def sumofFactors(n):\n    even_factors_sum = 0\n    \n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i % 2 == 0:\n                even_factors_sum += i\n            if i != n // i and (n // i) % 2 == 0:\n                even_factors_sum += n // i\n    \n    return even_factors_sum\n",
    "MbppEval/454": "import re\n\ndef text_match_wordz(text):\n    if re.search(r'\\b\\w*z\\w*\\b', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
    "MbppEval/455": "def check_monthnumb_number(monthnum2):\n    if monthnum2 < 1 or monthnum2 > 12:\n        return False\n    \n    months_with_31_days = {1, 3, 5, 7, 8, 10, 12}\n\n    if monthnum2 in months_with_31_days:\n        return True\n    else:\n        return False\n",
    "MbppEval/456": "def reverse_string_list(stringlist):\n    reversed_strings = []\n    \n    for string in stringlist:\n        reversed_strings.append(string[::-1])\n        \n    return reversed_strings\n",
    "MbppEval/457": "def find_min(lst): \n    min_length = float('inf')\n    min_sublist = []\n    \n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    \n    return min_sublist\n",
    "MbppEval/458": "def rectangle_area(l, b):\n    # Step 1: Define the function rectangle_area with parameters l and b\n    area = l * b  # Step 2: Calculate the area of the rectangle\n    return area  # Step 3: Return the calculated area\n",
    "MbppEval/459": "import re\n\ndef remove_uppercase(str1):\n    result = \"\"\n    previous_char_upper = False\n    for char in str1:\n        if char.isupper() and previous_char_upper:\n            pass\n        else:\n            result += char\n            previous_char_upper = char.isupper()\n    \n    # Remove consecutive uppercase characters\n    result = re.sub(r'([A-Z])\\1+', r'\\1', result)\n    \n    return result\n",
    "MbppEval/460": "def Extract(lst):\n    first_elements = []\n    \n    for sublist in lst:\n        if sublist:  # Check if sublist is not empty\n            first_elements.append(sublist[0])\n        \n    return first_elements\n",
    "MbppEval/461": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n",
    "MbppEval/462": "import itertools\n\ndef combinations_list(list1):\n    result = []\n    \n    for r in range(len(list1)+1):\n        for combination in itertools.combinations(list1, r):\n            result.append(list(combination))\n    \n    return result\n",
    "MbppEval/463": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n\n    max_prod = arr[0]\n    min_prod = arr[0]\n    max_so_far = arr[0]\n\n    for num in arr[1:]:\n        max_prod, min_prod = max(num, num * max_prod, num * min_prod), min(num, num * max_prod, num * min_prod)\n\n        max_so_far = max(max_so_far, max_prod)\n\n    return max_so_far\n",
    "MbppEval/464": "def check_value(dict, n):\n    for value in dict.values():\n        if value != n:\n            return False\n    return True\n",
    "MbppEval/465": "def drop_empty(dict1):\n    result_dict = {}\n    for key, value in dict1.items():\n        if value is not None:\n            result_dict[key] = value\n    return result_dict\n",
    "MbppEval/468": "def max_product(arr):   \n    arr.sort()\n    \n    max_prod = 1\n\n    for num in arr:\n        max_prod *= num\n\n    increasing_subsequence = []\n    for num in arr:\n        if not increasing_subsequence or num > increasing_subsequence[-1]:\n            increasing_subsequence.append(num)\n\n    temp_prod = 1\n    for num in increasing_subsequence:\n        temp_prod *= num\n        max_prod = max(max_prod, temp_prod)\n\n    return max_prod\n",
    "MbppEval/470": "def add_pairwise(test_tup):\n    result = []\n    \n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    \n    result_tuple = tuple(result)\n    \n    return result_tuple\n",
    "MbppEval/471": "def find_remainder(arr, n): \n    product = 1\n    \n    for num in arr:\n        product *= num\n        product %= n\n    \n    return product % n\n",
    "MbppEval/472": "def has_duplicates(lst):\n    seen = set()\n    for x in lst:\n        if x in seen:\n            return True\n        seen.add(x)\n    return False\n\ndef check_Consecutive(l):\n    if len(l) < 2:\n        return True\n    for i in range(len(l) - 1):\n        if l[i] + 1 != l[i + 1]:\n            return False\n    if has_duplicates(l):\n        return False\n    return True\n",
    "MbppEval/473": "def tuple_intersection(test_list1, test_list2):\n    set1 = set([tuple(sorted(t)) for t in test_list1])\n    set2 = set([tuple(sorted(t)) for t in test_list2])\n    \n    intersection_set = set1.intersection(set2)\n    \n    result_set = set([tuple(sorted(t)) for t in intersection_set])\n    \n    return result_set\n",
    "MbppEval/474": "def replace_char(str1, ch, newch):\n    modified_str = ''\n\n    # Loop through each character in the input string\n    for char in str1:\n        # Check if the character matches the specific character 'ch' that needs to be replaced\n        if char == ch:\n            # If the character matches, replace it with the new character 'newch'\n            modified_str += newch\n        else:\n            modified_str += char\n    \n    return modified_str\n\n# Test the function\nprint(replace_char(\"polygon\", 'y', 'l'))\n",
    "MbppEval/475": "from collections import Counter\n\ndef sort_counter(dict1):\n    sorted_counter = Counter(dict1)\n    sorted_list = sorted_counter.items()\n    return sorted_list\n",
    "MbppEval/476": "def big_sum(nums):\n    if not nums:\n        return 0\n    elif len(nums) == 1:\n        return nums[0]\n\n    max_val = max(nums)\n    min_val = min(nums)\n    return max_val + min_val\n",
    "MbppEval/477": "def is_lower(string):\n    return string.lower()\n",
    "MbppEval/478": "import re\n\ndef remove_lowercase(str1):\n    pattern = '[a-z]'\n    return re.sub(pattern, '', str1)\n",
    "MbppEval/479": "def first_Digit(n):\n    # Step 0: Convert the number to a string\n    n_str = str(n)\n    \n    # Step 1: Get the first character of the string\n    first_char = n_str[0]\n    \n    # Step 2: Convert the first character back to an integer\n    first_digit = int(first_char)\n    \n    # Step 3: Return the integer value\n    return first_digit\n",
    "MbppEval/554": "def Split(list): \n    odd_numbers = []\n    for num in list:\n        if num % 2 != 0:\n            odd_numbers.append(num)\n    return odd_numbers\n",
    "MbppEval/555": "def difference(n):\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_numbers = sum(range(1, n+1))\n    result = sum_of_cubes - sum_of_numbers\n    return result\n",
    "MbppEval/556": "def find_Odd_Pair(A, N):\n    count = 0\n\n    for i in range(N):\n        for j in range(i + 1, N):\n            xor_val = A[i] ^ A[j]\n            if xor_val % 2 == 1:\n                count += 1\n\n    return count\n",
    "MbppEval/557": "def toggle_string(string):\n    toggled_string = \"\"\n    \n    for char in string:\n        toggled_char = char.lower() if char.isupper() else char.upper()\n        toggled_string += toggled_char\n        \n    return toggled_string\n",
    "MbppEval/558": "def digit_distance_nums(n1, n2):\n    sum_diff = 0\n    n1_str = str(n1)\n    n2_str = str(n2)\n    \n    min_len = min(len(n1_str), len(n2_str))\n    \n    sum_diff = 0\n    \n    for i in range(min_len):\n        digit_diff = abs(int(n1_str[i]) - int(n2_str[i]))\n        sum_diff += digit_diff\n        \n    if len(n1_str) > len(n2_str):\n        for i in range(min_len, len(n1_str)):\n            sum_diff += int(n1_str[i])\n    elif len(n2_str) > len(n1_str):\n        for i in range(min_len, len(n2_str)):\n            sum_diff += int(n2_str[i])\n    \n    return sum_diff\n",
    "MbppEval/559": "def max_sub_array_sum(a, size):\n    max_so_far = a[0]\n    max_ending_here = a[0]\n\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far\n",
    "MbppEval/560": "def union_elements(test_tup1, test_tup2):\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    union_set = set1.union(set2)\n    union_tuple = tuple(union_set)\n    \n    sorted_union_tuple = tuple(sorted(union_tuple))\n    \n    return sorted_union_tuple\n",
    "MbppEval/562": "def Find_Max_Length(lst):\n    max_length = 0\n    \n    for sublist in lst:\n        length = len(sublist)\n        if length >= max_length:\n            max_length = length\n            \n    return max_length\n",
    "MbppEval/563": "import re\n\ndef extract_values(text):\n    return re.findall(r'\"(.*?)\"', text)\n",
    "MbppEval/564": "def count_Pairs(arr, n):\n    count = 0\n    \n    for i in range(n):  # Loop through each element in the list\n        for j in range(i + 1, n):  # Iterate over the remaining elements\n            if arr[i] != arr[j]:  # Check if the elements are unequal\n                count += 1  # Increment count by 1\n                \n    return count  # Return the final count\n",
    "MbppEval/565": "def split(word):\n    characters = []  # Initialize an empty list to store the individual characters.\n    \n    for char in word:  # Iterate through each character in the input string.\n        characters.append(char)  # Append each character to the list.\n\n    return characters  # Return the list containing the individual characters.\n",
    "MbppEval/566": "def sum_digits(n):\n    total_sum = 0\n    n_str = str(n)\n    for digit in n_str:\n        total_sum += int(digit)\n    return total_sum\n",
    "MbppEval/567": "def issort_list(list1):\n    if len(list1) < 2:\n        return True\n    \n    for i in range(1, len(list1)):\n        if list1[i] < list1[i-1]:\n            return False\n        \n    return True\n",
    "MbppEval/568": "def empty_list(length):\n    result = []\n    empty_dict = {}\n    for _ in range(length):\n        result.append(empty_dict.copy())\n    return result\n",
    "MbppEval/569": "def sort_sublists(list1):\n    sorted_list = []\n    \n    for sublist in list1:\n        sorted_list.append(sorted(sublist))\n    \n    return sorted_list\n",
    "MbppEval/572": "def two_unique_nums(nums):\n    unique_nums = []\n\n    for num in nums:\n        if nums.count(num) == 1:\n            unique_nums.append(num)\n\n    return unique_nums  \n",
    "MbppEval/573": "return product\n",
    "MbppEval/574": "import math\n\ndef surfacearea_cylinder(r, h):\n    base_area = 2 * math.pi * r**2\n    lateral_area = 2 * math.pi * r * h\n    return base_area + lateral_area\n",
    "MbppEval/576": "def is_Sub_Array(A, B):\n    for i in range(len(A) - len(B) + 1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False\n",
    "MbppEval/577": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in the factorial of a given number.\n    \n    Examples:\n    last_Digit_Factorial(4) == 4\n    last_Digit_Factorial(21) == 0\n    last_Digit_Factorial(30) == 0\n    '''\n    fact = 1\n    \n    for i in range(1, n+1):\n        fact *= i\n    \n    last_digit = fact % 10\n    \n    return last_digit\n",
    "MbppEval/578": "def interleave_lists(list1, list2, list3):\n    interleaved_list = []\n    \n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    \n    return interleaved_list\n",
    "MbppEval/579": "def find_dissimilar(test_tup1, test_tup2):\n    dissimilar = []\n    for element in test_tup1:\n        if element not in test_tup2:\n            dissimilar.append(element)\n    for element in test_tup2:\n        if element not in test_tup1:\n            dissimilar.append(element)\n    return tuple(dissimilar)\n",
    "MbppEval/580": "def even_ele(test_tuple, even_fnc):\n    if not test_tuple:\n        return ()\n    \n    even_elements = []\n    \n    for elem in test_tuple:\n        if isinstance(elem, tuple):\n            even_elements.append(even_ele(elem, even_fnc))\n        elif even_fnc(elem):\n            even_elements.append(elem)\n    \n    return tuple(even_elements)\n",
    "MbppEval/581": "import math\n\ndef surface_Area(b, s):\n    l = math.sqrt(b**2 + s**2)\n    \n    area = b**2 + 2*b*l\n    \n    return area\n",
    "MbppEval/582": "def my_dict(dict1):\n    if not bool(dict1):\n        return True\n    else:\n        return False\n",
    "MbppEval/583": "def catalan_number(num):\n    if num < 0:\n        return \"Please provide a non-negative number for calculating Catalan number.\"\n\n    if num == 0:\n        return 1\n    else:\n        c = [0] * (num+1)\n        c[0] = 1\n\n        def calculate_catalan(n):\n            if c[n] != 0:\n                return c[n]\n\n            res = 0\n            for i in range(n):\n                res += calculate_catalan(i) * calculate_catalan(n - i - 1)\n            c[n] = res\n            return res\n\n        return calculate_catalan(num)\n",
    "MbppEval/584": "import re\n\ndef find_adverbs(text):\n    adverbs = re.finditer(r'\\b\\w+ly\\b', text)\n    \n    for adverb in adverbs:\n        return f\"{adverb.start()}-{adverb.end()}: {adverb.group()}\"\n",
    "MbppEval/585": "import heapq\n\ndef expensive_items(items, n):\n    heap = [(-item['price'], item) for item in items]\n    heapq.heapify(heap)\n    most_expensive = [heapq.heappop(heap)[1] for _ in range(n)]\n    return most_expensive\n",
    "MbppEval/586": "def split_Arr(l, n, k):\n    first_part = l[k:]\n    second_part = l[:k]\n    result = first_part + second_part\n    return result\n",
    "MbppEval/587": "def list_tuple(listx):\n    return tuple(listx)\n",
    "MbppEval/588": "def big_diff(nums):\n    max_value = max(nums)\n    min_value = min(nums)\n    diff = max_value - min_value\n    return diff\n",
    "MbppEval/589": "import math\n\ndef perfect_squares(a, b):\n    result = []\n    \n    for num in range(a, b+1):\n        if math.isqrt(num) ** 2 == num:\n            result.append(num)\n    \n    return result\n",
    "MbppEval/590": "import cmath\n\ndef polar_rect(r, theta):\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (abs(complex(x, y)), cmath.phase(complex(x, y))), complex(x, y)\n",
    "MbppEval/591": "def swap_List(newList):\n    if len(newList) > 1:\n        new_list = newList.copy()\n        new_list[0], new_list[-1] = new_list[-1], new_list[0]\n        return new_list\n    else:\n        return newList\n",
    "MbppEval/592": "import math\n\ndef binomial_coeff(n, k):\n    return math.factorial(n) // (math.factorial(k) * math.factorial(n - k))\n\ndef sum_of_product(n):\n    result = sum(binomial_coeff(n, k) * binomial_coeff(n, k + 1) for k in range(1, n + 1))\n    return result\n",
    "MbppEval/593": "import re\n\ndef removezero_ip(ip):\n    octets = ip.split('.')\n    octets = [re.sub(r'^0+', '', octet) for octet in octets]\n    modified_ip = '.'.join(octets)\n    return modified_ip\n",
    "MbppEval/594": "def diff_even_odd(list1):\n    first_even = None\n    first_odd = None\n    \n    for num in list1:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n    \n    if first_even is not None and first_odd is not None:\n        return abs(first_even - first_odd)\n    else:\n        return 0\n",
    "MbppEval/595": "def min_Swaps(str1, str2):\n    swap_count = 0\n    \n    for bit1, bit2 in zip(str1, str2):\n        if bit1 != bit2:\n            swap_count += 1\n            \n    if str1.count('1') != str2.count('1'):\n        return \"Not Possible\"\n    \n    return swap_count\n",
    "MbppEval/596": "import sys\n\ndef tuple_size(tuple_list):\n    return sys.getsizeof(tuple_list)\n    \n# Test examples\nprint(tuple_size((\"A\", 1, \"B\", 2, \"C\", 3)))\nprint(tuple_size((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\")))\nprint(tuple_size(((1, \"Lion\"), (2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\")))\n",
    "MbppEval/597": "def merge_sorted_arrays(arr1, arr2):\n    merged = []\n    i = 0\n    j = 0\n\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            merged.append(arr1[i])\n            i += 1\n        else:\n            merged.append(arr2[j])\n            j += 1\n\n    while i < len(arr1):\n        merged.append(arr1[i])\n        i += 1\n\n    while j < len(arr2):\n        merged.append(arr2[j])\n        j += 1\n\n    return merged\n",
    "MbppEval/598": "def armstrong_number(number):\n    num_str = str(number)\n    num_digits = len(num_str)\n    \n    sum_powered_digits = sum(int(digit)**num_digits for digit in num_str)\n    \n    return sum_powered_digits == number\n",
    "MbppEval/599": "def sum_average(number):\n    total_sum = 0\n    average = 0\n\n    total_sum = (number * (number + 1)) // 2\n    average = total_sum / number\n\n    return total_sum, average\n",
    "MbppEval/600": "def is_Even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n",
    "MbppEval/602": "def first_repeated_char(str1):\n    seen_chars = set()\n\n    for char in str1:\n        if char in seen_chars:\n            return char\n        seen_chars.add(char)\n\n    return \"None\"\n",
    "MbppEval/603": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef get_ludic(n):\n    ludic_numbers = []\n    \n    for num in range(1, n+1):\n        if is_prime(num):\n            if num <= n:\n                ludic_numbers.append(num)\n    \n    return ludic_numbers\n",
    "MbppEval/604": "def reverse_words(s):\n    '''\n    Write a function to reverse words separated by spaces in a given string.\n\n    Examples:\n    reverse_words(\"python program\") == (\"program python\")\n    reverse_words(\"java language\") == (\"language java\")\n    reverse_words(\"indian man\") == (\"man indian\")\n    '''\n    \n    if not s:\n        return \"\"\n    \n    words = s.split()\n    reversed_words = words[::-1]\n    reversed_string = \" \".join(reversed_words)\n    \n    return reversed_string\n",
    "MbppEval/605": "import math\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    \n    if num == 2:\n        return True\n    \n    for i in range(2, math.isqrt(num) + 1):\n        if num % i == 0:\n            return False\n    \n    return True\n",
    "MbppEval/606": "import math\n\ndef radian_degree(degree):\n    radians = degree * (math.pi / 180)\n    return radians\n",
    "MbppEval/607": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    \n    return None\n",
    "MbppEval/608": "def generate_bell_triangle(rows):\n    bell_triangle = [[1]]\n    for i in range(1, rows):\n        prev_row = bell_triangle[-1]\n        current_row = [prev_row[-1]]\n        for j in range(i):\n            current_row.append(current_row[j] + prev_row[j])\n        bell_triangle.append(current_row)\n    return bell_triangle\n\ndef bell_Number(n):\n    triangle = generate_bell_triangle(n)\n    return triangle[n - 1][0]\n",
    "MbppEval/610": "def remove_kth_element(list1, k):\n    return list1[:k] + list1[k+1:]\n",
    "MbppEval/611": "def max_of_nth(test_list, N):\n    col_values = [row[N-1] for row in test_list]\n    max_val = max(col_values)\n    return max_val\n",
    "MbppEval/612": "def merge(lst):\n    list1 = []\n    list2 = []\n    \n    for sub_lst in lst:\n        list1.append(sub_lst[0])\n        list2.append(sub_lst[1])\n    \n    return [list1, list2]\n",
    "MbppEval/614": "def cumulative_sum(test_list):\n    total_sum = 0\n    \n    for tuple_values in test_list:\n        for value in tuple_values:\n            total_sum += value\n    \n    return total_sum\n",
    "MbppEval/615": "def average_tuple(nums):\n    avg_list = []\n    for tup in nums:\n        total = sum(tup)\n        avg = round(total / len(tup), 2)\n        avg_list.append(avg)\n    return avg_list\n",
    "MbppEval/616": "def tuple_modulo(test_tup1, test_tup2):\n    if len(test_tup1) != len(test_tup2):\n        return \"Error: Input tuples must be of the same length.\"\n    \n    result = []\n    for ele1, ele2 in zip(test_tup1, test_tup2):\n        result.append(ele1 % ele2)\n    \n    return tuple(result)\n",
    "MbppEval/617": "import math\n\ndef min_Jumps(steps, d):\n    total_distance = math.sqrt(d**2)\n    jumps = total_distance / steps\n    return jumps\n",
    "MbppEval/618": "def div_list(nums1, nums2):\n    result = []\n    \n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    \n    return result\n",
    "MbppEval/619": "def move_num(test_str):\n    non_numbers = []\n    numbers = []\n    \n    for char in test_str:\n        if char.isnumeric():\n            numbers.append(char)\n        else:\n            non_numbers.append(char)\n    \n    return ''.join(non_numbers) + ''.join(numbers)\n",
    "MbppEval/620": "def largest_subset(a):\n    max_subset = 0\n    \n    for i in range(len(a)):\n        subset = set()\n        \n        subset.add(a[i])\n        \n        for j in range(i+1, len(a)):\n            if a[j] % a[i] == 0 or a[i] % a[j] == 0:\n                subset.add(a[j])\n        \n        max_subset = max(max_subset, len(subset))\n    \n    return max_subset\n",
    "MbppEval/622": "def get_median(arr1, arr2, n):\n    combined_arr = arr1 + arr2\n    combined_arr.sort()\n    \n    if n % 2 == 0:\n        mid1 = combined_arr[n // 2]\n        mid2 = combined_arr[n // 2 - 1]\n        median = (mid1 + mid2) / 2\n    else:\n        median = combined_arr[n // 2]\n    \n    return median\n",
    "MbppEval/623": "def nth_nums(nums, n):\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result\n",
    "MbppEval/624": "def is_upper(string):\n    return string.upper()\n",
    "MbppEval/625": "def swap_List(newList):\n    if len(newList) > 1:\n        new_list = newList[:]  # Create a copy of the original list to avoid modifying the input list directly\n        new_list[0], new_list[-1] = new_list[-1], new_list[0]  # Swap the first and last elements\n        return new_list\n    return newList  # Return the original list if its length is 0 or 1\n",
    "MbppEval/626": "import math\n\ndef triangle_area(r):\n    # Step 0: Find the height of the triangle inscribed in the semicircle\n    h = r\n    \n    # Step 1: Calculate the base of the triangle using the Pythagorean theorem\n    b = 2 * math.sqrt(r**2 - h**2)\n    \n    # Step 2: Calculate the area of the triangle\n    area = 0.5 * b * h\n    \n    return area\n",
    "MbppEval/627": "def find_First_Missing(array, start=0, end=None):\n    missing_num = 0\n\n    for i in range(start, end):\n        if array[i] != missing_num:\n            return missing_num\n        \n        missing_num += 1\n    \n    return missing_num\n",
    "MbppEval/628": "def replace_spaces(string):\n    new_string = \"\"\n    for char in string:\n        if char == ' ':\n            new_string += '%20'\n        else:\n            new_string += char\n            \n    return new_string\n",
    "MbppEval/629": "def split(lst):\n    even_numbers = []\n    for num in lst:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers\n",
    "MbppEval/630": "def adjac(ele, sub=[]): \n    x, y = ele\n    coordinates = []\n    \n    for i in range(x-1, x+2):\n        for j in range(y-1, y+2):\n            if (i, j) != (x, y):\n                coordinates.append([i, j])\n    \n    return coordinates\n\n# Testing the function\nprint(adjac((3, 4)))\n",
    "MbppEval/631": "def replace_spaces(text):\n    result = ''\n    \n    for char in text:\n        if char == ' ':\n            result += '_'\n        elif char == '_':\n            result += ' '\n        else:\n            result += char\n    \n    return result\n",
    "MbppEval/632": "def move_zero(num_list):\n    zeros = []\n    non_zeros = []\n    \n    for num in num_list:\n        if num == 0:\n            zeros.append(num)\n        else:\n            non_zeros.append(num)\n    \n    return non_zeros + zeros\n",
    "MbppEval/633": "def pair_xor_Sum(arr, n):\n    result = 0\n\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_val = arr[i] ^ arr[j]\n            result += xor_val\n\n    return result\n",
    "MbppEval/635": "import heapq as hq\n\ndef heap_sort(iterable):\n    heap = list(iterable)\n    hq.heapify(heap)\n    \n    sorted_list = []\n    \n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    \n    return sorted_list\n",
    "MbppEval/637": "def noprofit_noloss(actual_cost, sale_amount):\n    return actual_cost == sale_amount\n",
    "MbppEval/638": "import math\ndef wind_chill(v,t):\n    wind_chill_index = 13.12 + 0.6215*t - 11.37*v**0.16 + 0.3965*t*v**0.16\n    rounded_wind_chill_index = math.ceil(wind_chill_index)\n    return rounded_wind_chill_index\n",
    "MbppEval/639": "def sample_nam(sample_names):\n    filtered_names = [name for name in sample_names if not name[0].islower()]\n    \n    total_length = 0\n    for name in filtered_names:\n        total_length += len(name)\n        \n    return total_length\n",
    "MbppEval/640": "import re\n\ndef remove_parenthesis(items):\n    pattern = r\"\\(.*?\\)\"\n    result = re.sub(pattern, \"\", items[0])\n    return result\n",
    "MbppEval/641": "def is_nonagonal(n): \n    return n * (7*n - 5) / 2\n",
    "MbppEval/643": "import re\n\ndef text_match_wordz_middle(text):\n    return re.search(r'\\Bz\\B', text) is not None and 'Found a match!' or 'Not matched!'\n",
    "MbppEval/644": "    return reversed_array\n",
    "MbppEval/720": "def add_dict_to_tuple(test_tup, test_dict):\n    return test_tup + tuple(test_dict.items())\n",
    "MbppEval/721": "def maxAverageOfPath(cost):\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    \n    dp[0][0] = cost[0][0]\n    \n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n    \n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    \n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    \n    return dp[-1][-1] / (2 * n - 1)\n",
    "MbppEval/722": "def filter_data(students, h, w):\n    filtered_students = {}\n    \n    for student, data in students.items():\n        if data[0] > h and data[1] > w:\n            filtered_students[student] = data\n\n    return filtered_students\n",
    "MbppEval/723": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    \n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    \n    return count\n",
    "MbppEval/724": "def power_base_sum(base, power):\n    result = base ** power\n    result_str = str(result)\n    digit_sum = sum(int(digit) for digit in result_str)\n    return digit_sum\n",
    "MbppEval/725": "import re\n\ndef extract_quotation(text):\n    substrings = re.findall(r'\"(.*?)\"', text)\n    extracted_values = [substring.replace('\"', '') for substring in substrings]\n    return extracted_values\n",
    "MbppEval/726": "def multiply_elements(test_tup):\n    result = []\n    \n    for i in range(len(test_tup) - 1):\n        result.append(test_tup[i] * test_tup[i + 1])\n    \n    result_tuple = tuple(result)\n    \n    return result_tuple\n",
    "MbppEval/728": "def sum_list(lst1, lst2):\n    result = []\n    for a, b in zip(lst1, lst2):\n        result.append(a + b)\n    return result\n",
    "MbppEval/730": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    result = []\n    \n    for index, num in enumerate(nums):        \n        if index == 0 or num != nums[index - 1]:\n            result.append(num)\n    \n    return result\n",
    "MbppEval/731": "import math\n\ndef calculate_slant_height(r, h):\n    return math.sqrt(r**2 + h**2)\n\ndef lateralsurface_cone(r, h):\n    l = calculate_slant_height(r, h)\n    return math.pi * r * l\n",
    "MbppEval/732": "import re\n\ndef replace_specialchar(text):\n    return re.sub(r'[\\s,.]', ':', text)\n",
    "MbppEval/733": "def find_first_occurrence(A, x):\n    if not is_sorted(A):\n        raise ValueError(\"Input array must be sorted.\")\n    \n    low = 0\n    high = len(A) - 1\n    result = -1\n    \n    while low <= high:\n        mid = low + (high - low) // 2\n        \n        if A[mid] == x:\n            result = mid\n            high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    return result\n",
    "MbppEval/734": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. \n    Examples:\n    sum_Of_Subarray_Prod([1,2,3],3) == 20\n    sum_Of_Subarray_Prod([1,2],2) == 5\n    sum_Of_Subarray_Prod([1,2,3,4],4) == 84\n    '''\n    def generate_subarrays(arr):\n        subarrays = []\n        for i in range(len(arr)):\n            for j in range(i + 1, len(arr) + 1):\n                subarrays.append(arr[i:j])\n        return subarrays\n\n    subarrays = generate_subarrays(arr)\n    products = [1]  # Initialize with 1 to avoid multiplying by 0\n    for subarray in subarrays:\n        product = 1\n        for num in subarray:\n            product *= num\n        products.append(product)\n\n    return sum(products)\n",
    "MbppEval/735": "def set_middle_bits(n):\n    mask = 0\n    num_bits = n.bit_length()\n    mask = (1 << (num_bits - 1)) | 1\n    \n    result = n ^ mask\n    return result\n",
    "MbppEval/736": "import bisect\n\ndef left_insertion(a, x):\n    if not a:\n        return 0\n    return bisect.bisect_left(a, x) - 1 if bisect.bisect_left(a, x) > 0 else 0\n",
    "MbppEval/737": "import re\n\ndef check_str(string): \n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    \n    if re.match(regex, string):\n        return 'Valid'\n    else:\n        return 'Invalid'\n",
    "MbppEval/738": "def geometric_sum(n):\n    total = 0\n    term = 1\n\n    for i in range(n-1):\n        total += term\n        term /= 2\n\n    return total\n",
    "MbppEval/739": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    Examples:\n    find_Index(2) == 4\n    find_Index(3) == 14\n    find_Index(4) == 45\n    '''\n    index = 1\n    num = 1\n    triangular_number = 0\n\n    while True:\n        triangular_number += num\n        num += 1\n        if len(str(triangular_number)) >= n:\n            return index\n        index += 1\n",
    "MbppEval/740": "def tuple_to_dict(test_tup):\n    result_dict = {}\n    \n    for i in range(0, len(test_tup)-1, 2):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    \n    return result_dict\n",
    "MbppEval/741": "def all_Characters_Same(s):\n    if len(s) <= 1:\n        return True\n    else:\n        first_char = s[0]\n        for char in s[1:]:\n            if char != first_char:\n                return False\n        return True\n",
    "MbppEval/742": "import math\n\ndef area_tetrahedron(side):\n    h = side * math.sqrt(6) / 3\n    area_triangle = (side ** 2) * math.sqrt(3) / 4\n    total_area = area_triangle * 4\n    return total_area\n",
    "MbppEval/743": "def rotate_right(lst, items, positions):\n    effective_positions = positions % len(lst)\n    rotated_elements = lst[-effective_positions - items : -effective_positions]\n    rotated_elements = rotated_elements[-items:] + rotated_elements[:-items]\n    \n    final_rotated_list = lst[:-effective_positions - items] + rotated_elements + lst[-effective_positions:]\n    \n    return final_rotated_list\n",
    "MbppEval/744": "def check_none(test_tup):\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False\n\n# Testing the function with examples\nprint(check_none((10, 4, 5, 6, None)))  # True\nprint(check_none((7, 8, 9, 11, 14)))    # False\nprint(check_none((1, 2, 3, 4, None)))   # True\n",
    "MbppEval/745": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        is_divisible = all(int(digit_char) != 0 and num % int(digit_char) == 0 for digit_char in str(num))\n        if is_divisible:\n            result.append(num)\n    return result\n",
    "MbppEval/746": "import math\ndef sector_area(r,a):\n    if a > 360:\n        return None\n    area = (r**2 * a * math.pi) / 360\n    return area\n",
    "MbppEval/747": "def lcs_of_three(X, Y, Z):\n    dp = [[[0 for _ in range(len(Z) + 1)] for _ in range(len(Y) + 1)] for _ in range(len(X) + 1)]\n\n    for i in range(1, len(X) + 1):\n        for j in range(1, len(Y) + 1):\n            for k in range(1, len(Z) + 1):\n                if X[i - 1] == Y[j - 1] == Z[k - 1]:\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i - 1][j][k], dp[i][j - 1][k], dp[i][j][k - 1])\n    \n    return dp[len(X)][len(Y)][len(Z)]\n",
    "MbppEval/748": "import re\ndef capital_words_spaces(str1):\n    output_str = \"\"\n    \n    for i in range(len(str1)):\n        if str1[i].isupper() and i != 0:\n            output_str += \" \"\n        \n        output_str += str1[i]\n\n    return output_str\n",
    "MbppEval/749": "def sort_numeric_strings(nums_str):\n    sorted_nums = sorted(nums_str, key=int)\n    return [int(num) for num in sorted_nums]\n",
    "MbppEval/750": "def add_tuple(test_list, test_tup):\n    if not isinstance(test_list, list) or not isinstance(test_tup, tuple):\n        raise TypeError(\"The first argument should be a list and the second argument should be a tuple.\")\n\n    tuple_list = list(test_tup)\n    test_list.extend(tuple_list)\n    return test_list\n",
    "MbppEval/751": "def check_min_heap_helper(arr, i):\n    if i >= len(arr):\n        return True\n    \n    left = 2*i + 1\n    if left >= len(arr):\n        return True\n    \n    right = 2*i + 2\n    if right >= len(arr):\n        return True\n    \n    left_child_valid = check_min_heap_helper(arr, left)\n    right_child_valid = check_min_heap_helper(arr, right)\n    \n    if not left_child_valid or not right_child_valid:\n        return False\n    \n    if arr[i] > arr[left] or (right < len(arr) and arr[i] > arr[right]):\n        return False\n    \n    return True\n",
    "MbppEval/752": "def jacobsthal_num(n):\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)\n",
    "MbppEval/753": "def min_k(test_list, K):\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    return sorted_list[:K]\n",
    "MbppEval/754": "def extract_index_list(l1, l2, l3):\n    result = []\n    \n    for i in range(min(len(l1), len(l2), len(l3))):\n        if l1[i] == l2[i] == l3[i]:\n            result.append(l1[i])\n    \n    return result\n",
    "MbppEval/755": "def second_smallest(numbers):\n    numbers = list(set(numbers))  # Removing duplicates\n    if len(numbers) < 2:\n        return None\n    numbers.sort()  # Sorting the list in ascending order\n    return numbers[1]  # Returning the second element (index 1) as the second smallest number\n",
    "MbppEval/756": "import re\n\ndef text_match_zero_one(text):\n    if re.search('ab+', text) is not None:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
    "MbppEval/757": "def count_reverse_pairs(test_list):\n    count = 0\n    \n    for string in test_list:\n        reverse_string = string[::-1]\n        if reverse_string in test_list:\n            count += 1\n\n    return str(count)\n",
    "MbppEval/758": "# Let's implement step 6\ndef unique_sublists(list1):\n    unique_dict = {}\n    for sublist in list1:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in unique_dict:\n            unique_dict[tuple_sublist] += 1\n        else:\n            unique_dict[tuple_sublist] = 1\n    return unique_dict\n",
    "MbppEval/759": "def is_decimal(num):\n    if num.count('.') == 1:\n        integer_part, decimal_part = num.split('.')\n        if integer_part.isdigit() and decimal_part.isdigit() and len(decimal_part) == 2:\n            return True\n    return False\n",
    "MbppEval/760": "def unique_Element(arr):\n    unique_elements = set(arr)\n    \n    if len(unique_elements) == 1:\n        return 'YES'\n    else:\n        return 'NO'\n",
    "MbppEval/762": "def check_monthnumber_number(monthnum):\n    if monthnum < 1 or monthnum > 12:\n        return False\n    \n    if monthnum in [4, 6, 9, 11]:\n        return True\n    \n    return False\n",
    "MbppEval/763": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    \n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    \n    return min_diff\n",
    "MbppEval/764": "def number_ctr(s):\n    count = 0\n    \n    for char in s:\n        if char.isdigit():\n            count += 1\n    \n    return count\n",
    "MbppEval/765": "import math\n\ndef is_polite(n):\n    highest_power_of_2 = int(math.log(n, 2))\n    polite_number = 2**highest_power_of_2 + 1\n    return polite_number\n",
    "MbppEval/766": "def pair_wise(l1):\n    pairs = [(l1[i], l1[i+1]) for i in range(len(l1)-1)]\n    return pairs\n",
    "MbppEval/767": "def get_pairs_count(arr, sum):\n    freq_map = {}\n    pairs_count = 0\n    \n    for num in arr:\n        complement = sum - num\n        if complement in freq_map:\n            pairs_count += freq_map[complement]\n        freq_map[num] = freq_map.get(num, 0) + 1\n\n    return pairs_count\n",
    "MbppEval/769": "def Diff(li1, li2):\n    return [x for x in li1 if x not in li2] + [x for x in li2 if x not in li1]\n",
    "MbppEval/770": "def generate_odd_numbers(n):\n    odd_numbers = []\n    num = 1\n    count = 0\n    while count < n:\n        odd_numbers.append(num)\n        num += 2\n        count += 1\n    return odd_numbers\n\ndef calculate_fourth_power(odd_numbers):\n    fourth_powers = [num**4 for num in odd_numbers]\n    return fourth_powers\n\ndef find_sum(fourth_powers):\n    return sum(fourth_powers)\n\ndef odd_num_sum(n):\n    odd_numbers = generate_odd_numbers(n)\n    fourth_powers = calculate_fourth_power(odd_numbers)\n    result = find_sum(fourth_powers)\n    return result\n",
    "MbppEval/771": "    return not stack\n",
    "MbppEval/772": "def remove_length(test_str, K):\n    words = test_str.split()\n    filtered_words = [word for word in words if len(word) != K]\n    result_str = ' '.join(filtered_words)\n    return result_str\n",
    "MbppEval/773": "import re\n\ndef occurance_substring(text, pattern):\n    matches = re.finditer(pattern, text)\n    result = []\n    for match in matches:\n        result.append((match.group(0), match.start(), match.end()-1))\n\n    if not result:\n        return None\n    \n    return result\n",
    "MbppEval/775": "def odd_position(nums):\n    for i in range(len(nums)):\n        if i % 2 != 0:\n            if nums[i] % 2 == 0:\n                return False\n    return True\n",
    "MbppEval/776": "def count_vowels(test_str):\n    vowel_count = 0\n    # Step 1: Iterate through each character in the string.\n    for i in range(len(test_str)):\n        char = test_str[i]\n        # Step 2: Check if the current character and its neighboring characters (if they exist) are vowels.\n        if i > 0 and i < len(test_str) - 1 and char.lower() in 'aeiou' and test_str[i-1].lower() in 'aeiou' and test_str[i+1].lower() in 'aeiou':\n            # Step 3: If the condition is met, increment the count.\n            vowel_count += 1\n    return vowel_count\n",
    "MbppEval/777": "def find_sum(arr):\n    unique_elements = set()\n    seen = set()\n\n    for element in arr:\n        if element not in seen:\n            if arr.count(element) == 1:\n                unique_elements.add(element)\n            seen.add(element)\n\n    sum_of_unique = sum(unique_elements)\n    return sum_of_unique\n",
    "MbppEval/778": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    result = []\n    # Step 0\n    for key, group in groupby(list1):\n        # Step 1\n        group_list = list(group)\n        \n        # Step 2\n        result.append(group_list)\n    \n    # Step 3\n    return result\n",
    "MbppEval/779": "def unique_sublists(list1):\n    unique_dict = {}\n    \n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        \n        if sublist_tuple in unique_dict:\n            unique_dict[sublist_tuple] += 1\n        else:\n            unique_dict[sublist_tuple] = 1\n    \n    return unique_dict\n",
    "MbppEval/780": "from itertools import combinations\n\ndef find_combinations(test_list):\n    result = []\n    \n    for tup in test_list:\n        result.append(sum(tup))\n    \n    sums = [sum(tup) for tup in test_list]\n    sum_combinations = list(combinations(sums, 2))\n    \n    return sum_combinations\n",
    "MbppEval/781": "import math\n\ndef count_divisors(n):\n    divisors = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if n / i != i:\n                divisors.append(int(n / i))\n    \n    count = len(divisors)\n    if count % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n",
    "MbppEval/782": "def odd_length_sum(arr):\n    def generate_subarrays(arr, length):\n        subarrays = []\n        for i in range(len(arr) - length + 1):\n            subarrays.append(arr[i:i+length])\n        return subarrays\n    \n    total_sum = 0\n    for length in range(1, len(arr)+1, 2):\n        subarrays = generate_subarrays(arr, length)\n        for subarray in subarrays:\n            total_sum += sum(subarray)\n    \n    return total_sum\n",
    "MbppEval/783": "def rgb_to_hsv(r, g, b):\n    r /= 255.0\n    g /= 255.0\n    b /= 255.0\n    \n    min_val = min(r, g, b)\n    max_val = max(r, g, b)\n    \n    v = max_val * 100\n    \n    if max_val == 0:\n        s = 0\n    else:\n        s = (max_val - min_val) / max_val * 100  # Saturation (S)\n    \n    if max_val == min_val:\n        h = 0\n    elif max_val == r:\n        h = 60 * ((g - b) / (max_val - min_val))\n    elif max_val == g:\n        h = 60 * ((b - r) / (max_val - min_val)) + 120\n    else:\n        h = 60 * ((r - g) / (max_val - min_val)) + 240\n    \n    if h < 0:\n        h += 360\n    \n    return h, s, v\n",
    "MbppEval/784": "def mul_even_odd(list1):\n    even_prod = None\n    odd_prod = None\n    \n    for num in list1:\n        if num % 2 == 0 and even_prod is None:\n            even_prod = num\n        elif num % 2 != 0 and odd_prod is None:\n            odd_prod = num\n        \n        if even_prod is not None and odd_prod is not None:\n            break\n            \n    return even_prod * odd_prod\n",
    "MbppEval/785": "def tuple_str_int(test_str):\n    clean_str = test_str.replace(\"(\", \"\").replace(\")\", \"\").replace(\",\", \"\")\n    int_str_list = clean_str.split(',')\n    int_list = [int(num) for num in int_str_list]\n    int_tuple = tuple(int_list)\n    \n    return int_tuple\n",
    "MbppEval/786": "import bisect\n\ndef right_insertion(a, x):\n    insertion_point = bisect.bisect_right(a, x)\n    return insertion_point\n",
    "MbppEval/787": "import re\n\ndef text_match_three(text):\n    pattern = \"ab{3}\"\n    result = re.search(pattern, text)\n    if result:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
    "MbppEval/788": "def new_tuple(test_list, test_str):\n    new_tuple = tuple(test_list + [test_str])\n    return new_tuple\n",
    "MbppEval/790": "def even_position(nums):\n    result = True\n    for index, value in enumerate(nums):\n        if index % 2 == 0 and value % 2 != 0:\n            result = False\n            break\n    return result\n",
    "MbppEval/791": "def remove_nested(test_tup):\n    non_nested_elements = []\n    \n    for elem in test_tup:\n        if not isinstance(elem, tuple):\n            non_nested_elements.append(elem)\n    \n    return tuple(non_nested_elements)\n",
    "MbppEval/792": "def count_list(input_list): \n    count = 0   # Step 0: Initialize count variable to keep track of number of sublists\n    \n    # Rest of the steps in the plan\n    \n    return count\n",
    "MbppEval/793": "def last(arr, x, n):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n\n    Examples:\n    last([1,2,3],1,3) == 0\n    last([1,1,1,2,3,4],1,6) == 2\n    last([2,3,2,3,6,8,9],3,8) == 3\n\n    Parameters:\n    arr (list): A sorted list of integers.\n    x (int): The element to search for in the list.\n    n (int): The number of elements in the list.\n\n    Returns:\n    int: The last position of the element in the list. If the element is not found, return -1.\n    '''\n    index = -1\n\n    for i in range(n - 1, -1, -1):\n        if arr[i] == x:\n            index = i\n            break\n\n    return index\n",
    "MbppEval/794": "import re\n\ndef text_starta_endb(text):\n    match = re.search(r'a.*b', text)\n    if match:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
    "MbppEval/796": "def return_sum(dict):\n    total_sum = 0\n    \n    for value in dict.values():\n        total_sum += value\n    \n    return total_sum\n",
    "MbppEval/797": "def sum_odd(n):\n    sum_odd = 0\n    \n    for num in range(1, n+1):\n        if num % 2 != 0:\n            sum_odd += num\n    \n    return sum_odd\n",
    "MbppEval/798": "def _sum(arr):\n    total_sum = 0\n    for num in arr:\n        total_sum += num\n    return total_sum\n\n# Test cases\nprint(_sum([1, 2, 3]))  # Expected output: 6\nprint(_sum([15, 12, 13, 10]))  # Expected output: 50\nprint(_sum([0, 1, 2]))  # Expected output: 3\n",
    "MbppEval/799": "def left_rotate(n, d):\n    binary = bin(n)[2:].zfill(32)  # Pad with zeros to make it 32-bit\n    rotated_binary = binary[d:] + binary[:d]\n    return int(rotated_binary, 2)\n\n# Test the function\nprint(left_rotate(16, 2))  # Output should be 64\nprint(left_rotate(10, 2))  # Output should be 40\nprint(left_rotate(99, 3))  # Output should be 792\n",
    "MbppEval/800": "import re\n\ndef remove_all_spaces(text):\n    if not isinstance(text, str):\n        return \"Input is not a string\"\n    else:\n        return re.sub(r'\\s+', '', text)\n",
    "MbppEval/801": "def test_three_equal(x, y, z):\n    if x == y == z:\n        return 3\n    elif x == y or y == z or x == z:\n        return 2\n    else:\n        return 0\n",
    "MbppEval/802": "def count_rotation(arr):\n    min_index = arr.index(min(arr))\n    return min_index\n",
    "MbppEval/803": "import math\n\ndef is_perfect_square(n):\n    sqrt_n = math.sqrt(n)\n    return sqrt_n.is_integer() and sqrt_n ** 2 == n\n",
    "MbppEval/804": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n\n    Examples:\n    is_product_even([1,2,3]) == True\n    is_product_even([1,2,1,4]) == True\n    is_product_even([1,1]) == False\n    '''\n    \n    product = 1\n    \n    for num in arr:\n        product *= num\n    \n    return product % 2 == 0\n",
    "MbppEval/805": "def max_sum_list(lists):\n    max_sum_list = []\n    max_sum = 0\n    \n    for lst in lists:\n        sum_lst = sum(lst)\n        if sum_lst > max_sum:\n            max_sum = sum_lst\n            max_sum_list = lst\n    \n    return max_sum_list\n",
    "MbppEval/806": "def max_run_uppercase(test_str):\n    max_count = 0\n    count = 0\n\n    for char in test_str:\n        if char.isupper():\n            count += 1\n        else:\n            if count > max_count:\n                max_count = count\n            count = 0\n\n    if count > max_count:\n        max_count = count\n\n    return max_count\n",
    "MbppEval/807": "def first_odd(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\n",
    "MbppEval/808": "def check_K(test_tup, K):\n    return K in test_tup\n",
    "MbppEval/809": "def check_smaller(test_tup1, test_tup2):\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True\n"
}