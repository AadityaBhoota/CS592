{
    "MbppEval/8": "def square_nums(nums):\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums\n",
    "MbppEval/59": "def is_octagonal(n):\n    octagonal_num = n * (3 * n - 2)\n    return octagonal_num\n",
    "MbppEval/79": "def word_len(s):\n    return len(s) % 2 != 0\n",
    "MbppEval/85": "import math\n\ndef surfacearea_sphere(r):\n    return 4 * math.pi * r**2\n",
    "MbppEval/89": "def closest_num(N):\n    closest_smaller = N - 1\n    return closest_smaller\n",
    "MbppEval/69": "def is_sublist(l, s):\n    if len(s) == 0:\n        return True\n\n    for i in range(len(l)):\n        if l[i:i+len(s)] == s:\n            return True\n\n    return False\n",
    "MbppEval/82": "import math\n\ndef volume_sphere(r):\n    return (4/3) * math.pi * r**3\n",
    "MbppEval/92": "def is_undulating(n): \n    n = str(n)\n    if len(n) < 3:\n        return False\n    \n    for i in range(2, len(n)):\n        if n[i] == n[i-1] or n[i] == n[i-2]:\n            return False\n        \n    return True\n",
    "MbppEval/77": "def is_Diff(n): \n    if n % 11 == 0:\n        return True\n    else:\n        return False\n",
    "MbppEval/93": "def power(a, b):\n    return a ** b\n\nprint(power(3, 4))  # Expected output: 81\nprint(power(2, 3))  # Expected output: 8\nprint(power(5, 5))  # Expected output: 3125\n",
    "MbppEval/80": "def tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) / 6\n",
    "MbppEval/86": "def centered_hexagonal_number(n):\n    return 2 * n**2 - n\n",
    "MbppEval/6": "def count_set_bits(num):\n    count = 0\n    while num:\n        count += num & 1\n        num >>= 1\n    return count\n\ndef differ_At_One_Bit_Pos(a, b):\n    return count_set_bits(a ^ b) == 1\n\n# Test the function with the given examples\nprint(differ_At_One_Bit_Pos(13, 9))  # Output: True\nprint(differ_At_One_Bit_Pos(15, 8))  # Output: False\nprint(differ_At_One_Bit_Pos(2, 4))   # Output: False\n",
    "MbppEval/3": "import math\ndef is_not_prime(n):\n    if n < 2:\n        return True\n    \n    if n == 2:\n        return False\n    \n    if n % 2 == 0:\n        return True\n    \n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return True\n\n    return False\n",
    "MbppEval/98": "def multiply_num(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)\n",
    "MbppEval/75": "def find_tuples(test_list, K):\n    divisible_tuples = []\n    for tup in test_list:\n        if all(elem % K == 0 for elem in tup):\n            divisible_tuples.append(tup)\n    \n    return str(divisible_tuples)\n",
    "MbppEval/17": "def square_perimeter(a):\n    return 4 * a\n",
    "MbppEval/101": "def kth_element(arr, k):\n    k -= 1\n    return arr[k]\n",
    "MbppEval/91": "def find_substring(str1, sub_str):\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False\n",
    "MbppEval/104": "def sort_sublists(input_list):\n    result = []\n\n    for sublist in input_list:\n        sorted_sublist = sorted(sublist)\n        result.append(sorted_sublist)\n\n    return result\n",
    "MbppEval/99": "def decimal_to_binary(n):\n    binary_num = bin(n)[2:]  # Remove '0b' prefix\n    binary_num = binary_num.lstrip('0') if n != 0 else '0'  # Remove leading zeros for non-zero values\n    return binary_num\n",
    "MbppEval/96": "def divisor(n):\n    count = 0\n    \n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n            \n    return count\n",
    "MbppEval/105": "return count\n",
    "MbppEval/68": "def is_Monotonic(A):\n    increasing = all(A[i] <= A[i + 1] for i in range(len(A) - 1))\n    decreasing = all(A[i] >= A[i + 1] for i in range(len(A) - 1))\n    \n    if not (increasing or decreasing):\n        return False\n    \n    return True\n",
    "MbppEval/106": "def add_lists(test_list, test_tup):\n    new_list = list(test_tup)\n    new_list.extend(test_list)\n    return tuple(new_list)\n",
    "MbppEval/109": "def odd_Equivalent(s, n):\n    count = 0\n    for i in range(n):\n        new_s = s[-1] + s[:-1]  # Rotate the binary string by moving the last character to the front\n        s = new_s\n        \n        # Count the number of odd values in the rotated binary string\n        count += sum(int(digit) % 2 != 0 for digit in s)\n        \n    return count\n",
    "MbppEval/84": "def newman_conway_sequence(n):\n    if n == 0:\n        return [0]\n    if n == 1:\n        return [0, 1]\n\n    sequence = [0, 1, 1]  # Initialize the sequence with the first two numbers\n\n    for i in range(3, n + 1):\n        sequence.append(sequence[sequence[i - 1]] + sequence[i - sequence[i - 1]])\n    \n    return sequence[1:]  # Exclude the first element (0) when returning\n\ndef sequence(n):\n    sequence = newman_conway_sequence(n)\n    \n    if n <= 0 or n > len(sequence):\n        return None\n    \n    return sequence[n - 1]\n",
    "MbppEval/113": "def check_integer(text):\n    if not text:\n        return False\n\n    for char in text:\n        if not char.isdigit():\n            return False\n\n    return True\n",
    "MbppEval/115": "def empty_dit(list1):\n    for d in list1:\n        if not isinstance(d, dict):\n            return False\n        if d:\n            return False\n    return True\n",
    "MbppEval/118": "def string_to_list(string):\n    return string.split(' ')\n",
    "MbppEval/87": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    \n    return merged_dict\n",
    "MbppEval/111": "def common_in_nested_lists(nestedlist):\n    common_elements = set(nestedlist[0])  # Step 0\n    \n    for nested_list in nestedlist:  # Step 1 corrected\n        common_elements = common_elements.intersection(set(nested_list))  # Step 2\n        \n    return list(common_elements)  # Step 3\n",
    "MbppEval/20": "def is_woodall(x):\n    k = 1\n    while k * (2 ** k) - 1 < x:\n        k += 1\n    return k * (2 ** k) - 1 == x\n",
    "MbppEval/124": "import cmath\ndef angle_complex(a, b):\n    complex_number = complex(a, b)\n    phase = cmath.phase(complex_number)\n    return phase\n",
    "MbppEval/7": "import re\n\ndef find_char_long(text):\n    words = text.split()\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words\n",
    "MbppEval/119": "def search(arr):\n    if len(arr) == 1:\n        return arr[0]\n    \n    for i in range(0, len(arr)-1, 2):\n        if arr[i] != arr[i+1]:\n            return arr[i]\n    \n    return arr[-1]\n",
    "MbppEval/127": "def multiply_int(x, y):\n    result = x * y\n    return result\n",
    "MbppEval/126": "def sum(a, b):\n    def common_divisors(a, b):\n        divisors_a = [i for i in range(1, a+1) if a % i == 0]\n        divisors_b = [i for i in range(1, b+1) if b % i == 0]\n        \n        common_divisors = set(divisors_a) & set(divisors_b)\n        \n        return list(common_divisors)\n    \n    common_div = common_divisors(a, b)\n    return sum(common_div)\n",
    "MbppEval/90": "def len_log(list1):\n    max_length = 0\n\n    for word in list1:\n        word_length = len(word)\n        \n        if word_length > max_length:\n            max_length = word_length\n    \n    return max_length\n",
    "MbppEval/125": "def find_length(string):\n    max_diff = 0\n    count = 0\n\n    for char in string:\n        if char == '0':\n            count -= 1\n        else:\n            count += 1\n\n        max_diff = max(max_diff, abs(count))\n\n    return max_diff\n",
    "MbppEval/128": "def long_words(n, s):\n    words = s.split()\n    long_words_list = [word for word in words if len(word) > n]\n    return long_words_list\n",
    "MbppEval/9": "def find_Rotations(str): \n    if len(str) <= 1:\n        return 0\n    \n    rotations = [str[i:] + str[:i] for i in range(len(str))]\n    \n    for idx, rotation in enumerate(rotations):\n        if rotation == str:\n            return idx + 1\n\n    return 0\n",
    "MbppEval/56": "def check(num):\n    rev_num = int(str(num)[::-1])  # reversing the number\n    rev_times_2 = rev_num * 2  # multiplying the reversed number by 2\n    \n    is_condition_met = num == rev_times_2 - 1\n    return is_condition_met\n",
    "MbppEval/135": "def hexagonal_num(n):\n    if not isinstance(n, int) or n <= 0:\n        return \"Input must be a positive integer.\"\n\n    return n * (2 * n - 1)\n",
    "MbppEval/133": "def sum_negativenum(nums):\n    neg_sum = 0\n    \n    for num in nums:\n        if num < 0:\n            neg_sum += num\n            \n    return neg_sum\n",
    "MbppEval/131": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    str_list = list(str1)\n    \n    left_ptr, right_ptr = 0, len(str_list) - 1\n    \n    while left_ptr < right_ptr:\n        if str_list[left_ptr] in vowels and str_list[right_ptr] in vowels:\n            str_list[left_ptr], str_list[right_ptr] = str_list[right_ptr], str_list[left_ptr]\n            left_ptr += 1\n            right_ptr -= 1\n        elif str_list[left_ptr] not in vowels:\n            left_ptr += 1\n        elif str_list[right_ptr] not in vowels:\n            right_ptr -= 1\n\n    return ''.join(str_list)\n",
    "MbppEval/94": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    min_tuple = None\n    min_second_val = float('inf')\n    for item in test_list:\n        name, value = item\n        if value < min_second_val:\n            min_second_val = value\n            min_tuple = item\n\n    return min_tuple[0]\n\n# Test the function\nprint(index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]))\nprint(index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)])\nprint(index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)])\n",
    "MbppEval/139": "import math\n\ndef circle_circumference(r):\n    return 2 * math.pi * r\n",
    "MbppEval/137": "from array import array\n\ndef zero_count(nums):\n    zero_count = 0\n    \n    # Step 0: Count the number of zeroes in the array\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n    \n    # Step 1: Calculate the ratio of zeroes to the total number of elements in the array\n    total_count = zero_count + len(nums)\n    ratio = float(zero_count) / total_count\n    \n    # Step 2: Return the ratio as a float\n    return round(ratio, 2)\n",
    "MbppEval/130": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    freq_dict = defaultdict(int)\n    \n    # Count the frequency of each item in the list\n    for item in nums:\n        freq_dict[item] += 1\n        \n    # Find the item with the maximum frequency\n    max_item = max(freq_dict, key=freq_dict.get)\n    \n    return max_item, freq_dict[max_item]\n",
    "MbppEval/138": "def is_Sum_Of_Powers_Of_Two(n): \n    if n < 1:\n        return False\n    \n    while n > 1:\n        if n % 2 != 0:\n            return False\n        n = n / 2\n    \n    return n == 1\n",
    "MbppEval/145": "def max_Abs_Diff(arr): \n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n",
    "MbppEval/143": "def find_lists(Input): \n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    \n    return count\n",
    "MbppEval/140": "def extract_singly(test_list):\n    unique_numbers = set()\n    for tup in test_list:\n        for num in tup:\n            unique_numbers.add(num)\n    \n    return list(unique_numbers)\n",
    "MbppEval/102": "def snake_to_camel(word):\n    words = word.split('_')\n    camel_words = [words[0]] + [word.capitalize() for word in words[1:]]\n    camel_case_word = ''.join(camel_words)\n    return camel_case_word\n",
    "MbppEval/162": "def sum_series(n):\n    result = 0\n    for i in range(n // 2 + 1):\n        result += n - 2*i\n    return result\n",
    "MbppEval/163": "from math import tan, pi\n\ndef area_polygon(s, l):\n    if s <= 0 or l < 3:\n        raise ValueError(\"Invalid input values. Side length should be positive and number of sides should be at least 3.\")\n    \n    a = s / (2 * tan(pi / l))\n    area = (l * s * a) / 2\n    \n    return area\n",
    "MbppEval/58": "def opposite_Signs(x, y):\n    if (x < 0 and y > 0) or (x > 0 and y < 0):\n        return True\n    else:\n        return False\n",
    "MbppEval/164": "import math \n\ndef div_sum(n): \n    sum_divisors = sum(get_divisors(n))\n    return sum_divisors\n\ndef get_divisors(n):\n    divisors = [1]  # Include 1 as a divisor\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != n // i:  # Avoid duplicate square root divisor\n                divisors.append(n // i)\n    return divisors\n\ndef are_equivalent(m, n):\n    return div_sum(m) == div_sum(n)\n\n# Test cases\nassert are_equivalent(36, 57) == False\nassert are_equivalent(2, 4) == False\nassert are_equivalent(23, 47) == True\n",
    "MbppEval/167": "def next_power_of_2(n):\n    if n <= 1:\n        return 1\n\n    power = 1\n    while power < n:\n        power *= 2\n\n    return power\n",
    "MbppEval/165": "def count_char_position(str1):\n    count = 0\n    str1 = str1.lower()\n\n    for char in str1:\n        if char.isalpha() and ord(char) - 96 == ord(char.lower()) - ord('a') + 1:\n            count += 1\n\n    return count\n",
    "MbppEval/123": "def sum_divisors(num):\n    divisors_sum = 0\n    for i in range(1, num):\n        if num % i == 0:\n            divisors_sum += i\n    return divisors_sum\n\ndef amicable_numbers_sum(limit):\n    total_sum = 0\n    for num in range(1, limit + 1):\n        sum_of_divisors = sum_divisors(num)\n        if sum_of_divisors != num and sum_divisors(sum_of_divisors) == num:\n            total_sum += num\n    return total_sum\n",
    "MbppEval/4": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    largest_n = []\n    \n    hq.heapify(nums)\n    \n    for _ in range(n):\n        largest_n.append(hq.heappop(nums))\n    \n    largest_n.reverse()\n    \n    return largest_n\n",
    "MbppEval/171": "import math\n\ndef perimeter_pentagon(a):\n    perimeter = 5 * a\n    return perimeter\n",
    "MbppEval/168": "def frequency(a, x): \n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count\n",
    "MbppEval/170": "def sum_range_list(list1, m, n):\n    sublist = list1[m:n+1]\n    sum_sublist = sum(sublist)\n    return sum_sublist\n",
    "MbppEval/222": "def check_type(test_tuple):\n    data_type = type(test_tuple[0])\n    \n    for elem in test_tuple:\n        if type(elem) != data_type:\n            return False\n    \n    return True\n",
    "MbppEval/18": "NO_OF_CHARS = 256\n\ndef remove_dirty_chars(string1, string2): \n    result = []\n    \n    # Create a set from string2 for faster lookup\n    set_string2 = set(string2)\n    \n    # Loop through each character in string1\n    for char in string1:\n        if char not in set_string2:\n            result.append(char)\n            \n    return ''.join(result)\n",
    "MbppEval/224": "def count_Set_Bits(n):\n    binary = bin(n)[2:]\n    count = binary.count('1')\n    return count\n",
    "MbppEval/226": "def odd_values_string(input_str):\n    result = \"\"\n    \n    for index, char in enumerate(input_str):\n        if index % 2 == 0:\n            result += char\n    \n    return result\n",
    "MbppEval/227": "def min_of_three(a, b, c):\n    return min(a, b, c)\n",
    "MbppEval/223": "def is_majority(arr, n, x):\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    if count > n / 2:\n        return True\n    else:\n        return False\n",
    "MbppEval/232": "import heapq\n\ndef larg_nnum(list1, n):\n    return heapq.nlargest(n, list1)\n",
    "MbppEval/230": "def replace_blank(str1, char):\n    # Step 2: Replace blank spaces in the string with the character\n    replaced_str = str1.replace(' ', char)\n    return replaced_str\n",
    "MbppEval/228": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    binary_n = bin(n)[2:]\n    \n    for i in range(l-1, r):\n        if i < len(binary_n) and binary_n[-i-1] == '1':\n            return False\n    \n    return True\n",
    "MbppEval/233": "import math\n\ndef lateralsurface_cylinder(r, h):\n    lateral_surface_area = 2 * math.pi * r * h\n    return lateral_surface_area\n",
    "MbppEval/234": "def volume_cube(l):\n    volume = l ** 3\n    return volume\n",
    "MbppEval/229": "def re_arrange_array(arr, n):\n    neg_nums = []\n    pos_nums = []\n\n    for i in range(n):\n        if arr[i] < 0:\n            neg_nums.append(arr[i])\n        else:\n            pos_nums.append(arr[i])\n\n    rearranged_arr = neg_nums + pos_nums\n\n    return rearranged_arr\n",
    "MbppEval/238": "def number_of_substrings(str): \n    count = 0\n    n = len(str)\n    for i in range(n):\n        count += n - i\n    return count\n",
    "MbppEval/235": "def even_bit_set_number(n):\n    # Using a 32-bit integer mask to set all even bits to 1\n    even_bits_mask = 0xAAAAAAAA\n    \n    result = n | even_bits_mask\n    return result\n\n# Test cases\nprint(even_bit_set_number(10))  # Output: 10\nprint(even_bit_set_number(20))  # Output: 30\nprint(even_bit_set_number(30))  # Output: 30\n",
    "MbppEval/108": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    combined_list = num1 + num2 + num3\n    heapq.heapify(combined_list)\n    \n    sorted_output = []\n    \n    while combined_list:\n        sorted_output.append(heapq.heappop(combined_list))\n\n    return sorted_output\n",
    "MbppEval/242": "def count_charac(str1):\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n\n# Testing the function with examples\nprint(count_charac(\"python programming\"))  # Expected output: 18\nprint(count_charac(\"language\"))  # Expected output: 8\nprint(count_charac(\"words\"))  # Expected output: 5\n",
    "MbppEval/240": "def replace_list(list1, list2):\n    list1.pop()\n    list1.extend(list2)\n    return list1\n",
    "MbppEval/72": "import math\n\ndef dif_Square(n):\n    for i in range(1, int(math.sqrt(n))+1):\n        difference = i**2 - n\n        if math.sqrt(difference).is_integer():\n            return True\n    return False\n",
    "MbppEval/237": "from collections import Counter \n\ndef check_occurrences(test_list):\n    occurrences = Counter()\n    \n    for tpl in test_list:\n        if tpl in occurrences:\n            occurrences[tpl] += 1\n        else:\n            occurrences[tpl] = 1\n\n    return occurrences\n",
    "MbppEval/244": "import math\n\ndef next_Perfect_Square(N):\n    square_root = math.sqrt(N)\n    next_square_root = square_root + 1\n    next_perfect_square = next_square_root ** 2\n    return next_perfect_square\n",
    "MbppEval/246": "def babylonian_squareroot(number):\n    guess = number / 2.0\n    \n    while True:\n        new_guess = 0.5 * (guess + number / guess)\n        \n        if abs(guess - new_guess) < 1e-9:\n            return new_guess\n        \n        guess = new_guess\n",
    "MbppEval/248": "def harmonic_sum(n):\n    if not isinstance(n, int) or n <= 1:\n        return \"Please provide an integer greater than 1.\"\n    \n    sum_harmonic = 0\n    for i in range(1, n):\n        sum_harmonic += 1 / i\n\n    return sum_harmonic\n",
    "MbppEval/250": "def count_X(tup, x):\n    count = 0\n    \n    for element in tup:\n        if element == x:\n            count += 1\n            \n    return count\n",
    "MbppEval/249": "def intersection_array(array_nums1, array_nums2):\n    intersection = []\n\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n\n    for num in set_nums1:\n        if num in set_nums2:\n            intersection.append(num)\n\n    return intersection\n",
    "MbppEval/247": "def lps(s):\n    n = len(s)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    \n    for i in range(n):\n        dp[i][i] = 1\n    \n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if s[i] == s[j] and length == 2:\n                dp[i][j] = 2\n            elif s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    \n    return dp[0][-1]\n",
    "MbppEval/100": "def next_smallest_palindrome(num):\n    num_str = str(num)\n    \n    n = len(num_str)\n    is_odd = n % 2 != 0\n    left_half = num_str[:n//2]\n    middle_char = num_str[n//2] if is_odd else ''\n    \n    new_palindrome = left_half + middle_char + left_half[::-1]\n    \n    return int(new_palindrome)\n\n# Testing the function with examples\nprint(next_smallest_palindrome(99))  # Output: 101\nprint(next_smallest_palindrome(1221))  # Output: 1331\nprint(next_smallest_palindrome(120))  # Output: 121\n",
    "MbppEval/251": "def insert_element(lst, elem):\n    result = []\n    for item in lst:\n        result.append(elem)\n        result.append(item)\n    \n    return result\n",
    "MbppEval/257": "def swap_numbers(a, b):\n    return (b, a)\n\n# Test cases\nprint(swap_numbers(10, 20))  # Expected output: (20, 10)\nprint(swap_numbers(15, 17))  # Expected output: (17, 15)\nprint(swap_numbers(100, 200))  # Expected output: (200, 100)\n",
    "MbppEval/255": "from itertools import product\n\ndef combinations_colors(l, n):\n    if not l:\n        raise ValueError(\"Input list is empty\")\n    \n    return list(product(l, repeat=n))\n",
    "MbppEval/253": "def count_integer(list1):\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count\n",
    "MbppEval/256": "def count_Primes_nums(n):\n    count = 0\n    \n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    for num in range(2, n):\n        if is_prime(num):\n            count += 1\n    \n    return count\n",
    "MbppEval/262": "def split_two_parts(list1, L):\n    part1 = list1[:L]\n    part2 = list1[L:]\n    \n    return (part1, part2)\n",
    "MbppEval/264": "def dog_age(h_age):\n    return h_age * 5.25\n",
    "MbppEval/57": "def find_Max_Num(arr):\n    arr_str = [str(num) for num in arr]\n    arr_str.sort(key=lambda x: x*3, reverse=True)\n    max_num_str = ''.join(arr_str)\n    return int(max_num_str)\n",
    "MbppEval/266": "def lateralsurface_cube(l):\n    # Step 1: Define the function lateralsurface_cube with parameter l for side length\n    lateral_surface_area = 4 * l * l  # Calculate lateral surface area of cube\n\n    return lateral_surface_area\n\n# Test the function with examples\nprint(lateralsurface_cube(5))  # Expected output: 100\nprint(lateralsurface_cube(9))  # Expected output: 324\nprint(lateralsurface_cube(10))  # Expected output: 400\n",
    "MbppEval/261": "def division_elements(test_tup1, test_tup2):\n    if len(test_tup1) != len(test_tup2):\n        return \"Error: Tuples must be of the same length.\"\n\n    result = []\n\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n\n    return tuple(result)\n",
    "MbppEval/265": "def list_split(S, step):\n    result = []\n    for i in range(step):\n        sublist = S[i::step]\n        result.append(sublist)\n    return result\n",
    "MbppEval/74": "def is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n    \n    color_pattern_mapping = {}\n    for color, pattern in zip(colors, patterns):\n        if color not in color_pattern_mapping:\n            color_pattern_mapping[color] = pattern\n        else:\n            if color_pattern_mapping[color] != pattern:\n                return False\n    \n    return True\n",
    "MbppEval/252": "import cmath\n\ndef convert(numbers):\n    numbers = complex(numbers, 0)\n    polar_coordinates = cmath.polar(numbers)\n    magnitude, phase = polar_coordinates\n    return magnitude, phase\n",
    "MbppEval/268": "def find_star_num(n):\n    return n**3 + 6*n**2 + 11*n + 6\n",
    "MbppEval/269": "def ascii_value(k):\n    return ord(k)\n",
    "MbppEval/272": "def rear_extract(test_list):\n    rear_elements = []\n    \n    for item in test_list:\n        rear_element = item[-1]\n        rear_elements.append(rear_element)\n    \n    return rear_elements\n",
    "MbppEval/271": "    return sum_result\n",
    "MbppEval/273": "def substract_elements(test_tup1, test_tup2):\n    result = []\n    for elem1, elem2 in zip(test_tup1, test_tup2):\n        result.append(elem1 - elem2)\n    return tuple(result)\n",
    "MbppEval/270": "def sum_even_and_even_index(arr):\n    sum_even = 0\n\n    for i, num in enumerate(arr):\n        if i % 2 == 0 and num % 2 == 0:\n            sum_even += num\n\n    return sum_even\n",
    "MbppEval/19": "def test_duplicate(arraynums):\n    unique_set = set(arraynums)\n    \n    if len(arraynums) != len(unique_set):\n        return True\n    else:\n        return False\n",
    "MbppEval/279": "def is_num_decagonal(n): \n    decagonal_number = n * (7*n - 5)\n    return decagonal_number\n",
    "MbppEval/276": "import math\n\ndef volume_cylinder(r, h):\n    volume = math.pi * (r**2) * h\n    return volume\n",
    "MbppEval/278": "def count_first_elements(test_tup):\n    count = 0\n    for elem in test_tup:\n        if isinstance(elem, tuple):\n            break\n        count += 1\n    return count\n",
    "MbppEval/277": "def dict_filter(d, n):\n    filtered_dict = {}  # Empty dictionary to store filtered entries\n\n    for key, value in d.items():\n        if value >= n:\n            filtered_dict[key] = value\n\n    return filtered_dict\n",
    "MbppEval/281": "def all_unique(test_list):\n    unique_set = set()\n    \n    for elem in test_list:\n        if elem in unique_set:\n            return False\n        unique_set.add(elem)\n    \n    return True\n",
    "MbppEval/282": "def sub_list(nums1, nums2):\n    return [nums1[i] - nums2[i] for i in range(min(len(nums1), len(nums2))]\n",
    "MbppEval/283": "def validate(n): \n    digits = str(n)\n    freq = {}\n    for digit in digits:\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n\n    for digit in digits:\n        if freq[digit] > int(digit):\n            return False\n    \n    return True\n",
    "MbppEval/285": "import re\n\ndef text_match_two_three(text):\n    if re.search(r'a[b]{2,3}', text) is not None:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
    "MbppEval/16": "import re\n\ndef text_lowercase_underscore(text):\n    match = re.search(r'\\b[a-z]+_[a-z]+\\b', text)\n    if match:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
    "MbppEval/284": "def check_element(list, element):\n    for item in list:\n        if item != element:\n            return False\n\n    return True\n",
    "MbppEval/267": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n\n    Examples:\n    square_Sum(2) == 10\n    square_Sum(3) == 35\n    square_Sum(4) == 84\n    '''\n    sum_squares = 0\n    \n    for i in range(1, 2*n, 2):\n        sum_squares += i*i\n\n    return sum_squares\n",
    "MbppEval/290": "def max_length(list1):\n    max_len = 0\n    max_list = []\n    \n    for sublist in list1:\n        sublist_length = len(sublist)\n        \n        if sublist_length > max_len:\n            max_len = sublist_length\n            max_list = sublist\n            \n    return max_len, max_list\n",
    "MbppEval/287": "def square_Sum(n):\n    sum_squares = 0\n\n    for i in range(1, n+1):\n        even_number = 2*i\n        \n        square = even_number ** 2\n        sum_squares += square\n    \n    return sum_squares\n",
    "MbppEval/292": "import math\n\ndef find(n, m):\n    quotient = n // m\n    rounded_down_quotient = math.floor(quotient)\n    return rounded_down_quotient\n",
    "MbppEval/293": "import math\n\ndef otherside_rightangle(w, h):\n    c = math.sqrt(w**2 + h**2)\n    return c\n",
    "MbppEval/14": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n\n    Examples:\n    find_Volume(10,8,6) == 240\n    find_Volume(3,2,2) == 6\n    find_Volume(1,2,1) == 1\n    '''\n    area = 0.5 * b * h\n    volume = area * l\n    return volume\n",
    "MbppEval/294": "def max_val(listval):\n    max_value = None\n\n    for val in listval:\n        if isinstance(val, (int, float)):\n            if max_value is None or val > max_value:\n                max_value = val\n\n    return max_value\n",
    "MbppEval/299": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    aggregate_scores = defaultdict(int)\n    \n    for name, score in stdata:\n        aggregate_scores[name] += score\n    \n    max_name = max(aggregate_scores, key=aggregate_scores.get)\n    max_aggregate_score = aggregate_scores[max_name]\n    \n    return max_name, max_aggregate_score\n",
    "MbppEval/296": "def get_Inv_Count(arr): \n    inv_count = 0\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n\n    return inv_count\n",
    "MbppEval/297": "def flatten_list(list1):\n    flattened_list = []\n    for element in list1:\n        if isinstance(element, list):\n            flattened_list.extend(flatten_list(element))\n        else:\n            flattened_list.append(element)\n    return flattened_list\n",
    "MbppEval/88": "import collections\ndef freq_count(list1):\n    freq_dict = {}\n    \n    for elem in list1:\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        else:\n            freq_dict[elem] = 1\n\n    return freq_dict\n",
    "MbppEval/304": "def find_Element(arr, ranges, rotations, index):\n    cur_index = index\n    \n    for rotation in rotations:\n        actual_rotation = rotation % len(arr)\n        cur_index = (cur_index + actual_rotation) % len(arr)\n    \n    return arr[cur_index]\n",
    "MbppEval/305": "import re\n\ndef start_withp(words):\n    p_words = []\n\n    for word in words:\n        split_words = word.split()\n\n        for w in split_words:\n            if w.lower().startswith('p'):\n                p_words.append(w)\n\n    return tuple(p_words[:2])\n",
    "MbppEval/120": "def max_product_tuple(list1):\n    max_product = 0\n    \n    for tuple_pair in list1:\n        product = abs(tuple_pair[0] * tuple_pair[1])\n        if product > max_product:\n            max_product = product\n    \n    return max_product\n",
    "MbppEval/300": "import math\n\ndef count_binary_seq(n):\n    total_count = 2**(2*n)  # Total number of possible binary sequences of length 2n\n    valid_count = 0\n    \n    for i in range(n+1):\n        count_first_n_bits = i\n        count_last_n_bits = n - i\n        valid_count += math.comb(n, count_first_n_bits) * (2 ** count_last_n_bits)  # Count valid sequences for each case\n    \n    return valid_count\n",
    "MbppEval/95": "def Find_Min_Length(lst):\n    min_length = float('inf')\n    \n    for l in lst:\n        length = len(l)\n        \n        if length < min_length:\n            min_length = length\n\n    return min_length\n",
    "MbppEval/308": "def large_product(nums1, nums2, N):\n    product_list = []\n\n    for num1 in nums1:\n        for num2 in nums2:\n            product_list.append(num1 * num2)\n\n    product_list.sort(reverse=True)\n\n    return product_list[:N]\n",
    "MbppEval/309": "def maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b\n",
    "MbppEval/307": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    updated_tuple = deepcopy(tuplex)\n    \n    if m < len(updated_tuple):\n        updated_tuple_lst = list(updated_tuple)\n        updated_tuple_lst[m].append(n)\n        return tuple(updated_tuple_lst)\n    else:\n        return updated_tuple\n",
    "MbppEval/64": "def subject_marks(subjectmarks):\n    return sorted(subjectmarks, key=lambda x: x[1])\n",
    "MbppEval/312": "import math\n\ndef volume_cone(r, h):\n    return (1/3) * math.pi * r**2 * h\n",
    "MbppEval/388": "def highest_Power_of_2(n): \n    power_of_2 = 1\n\n    while power_of_2 * 2 <= n:\n        power_of_2 *= 2\n\n    return power_of_2\n",
    "MbppEval/389": "def find_lucas(n): \n    lucas_0 = 2\n    lucas_1 = 1\n",
    "MbppEval/390": "def add_string(list_, string):\n    formatted_list = []\n    \n    for element in list_:\n        formatted_list.append(string.format(element))\n    \n    return formatted_list\n",
    "MbppEval/391": "def convert_list_dictionary(l1, l2, l3):\n    result = []\n    \n    for i in range(len(l1)):\n        dict_item = {l1[i]: {l2[i]: l3[i]}}\n        result.append(dict_item)\n    \n    return result\n",
    "MbppEval/2": "def similar_elements(test_tup1, test_tup2):\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    shared_elements = set1.intersection(set2)\n    result = tuple(shared_elements)\n    \n    return result\n",
    "MbppEval/394": "def check_distinct(test_tup):\n    return len(set(test_tup)) == len(test_tup)\n",
    "MbppEval/396": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string): \n    if re.match(regex, string):\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n",
    "MbppEval/393": "def max_length_list(input_list):\n    max_length = 0\n    max_length_list = None\n    \n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_length_list = lst\n    \n    return max_length, max_length_list\n",
    "MbppEval/395": "def first_non_repeating_character(str1):\n    char_freq = {}\n    \n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    \n    for char in str1:\n        if char_freq[char] == 1:\n            return char\n            \n    return None\n",
    "MbppEval/311": "def set_left_most_unset_bit(n):\n    binary_n = bin(n)[2:]\n    \n    # Find the position of the leftmost unset bit\n    unset_bit_pos = binary_n.rfind('0')\n\n    if unset_bit_pos == -1:\n        return n  # If all bits are set, return the input number\n    \n    # Set the leftmost unset bit to 1\n    new_binary = binary_n[:unset_bit_pos] + '1' + binary_n[unset_bit_pos+1:]\n    \n    return int(new_binary, 2)\n",
    "MbppEval/400": "def extract_freq(test_list):\n    unique_tuples = set()\n\n    for tup in test_list:\n        unique_tuples.add(tup)\n        \n    unique_tuple_count = len(unique_tuples)\n    return unique_tuple_count\n",
    "MbppEval/397": "def median_numbers(a, b, c):\n    nums = [a, b, c]\n    nums.sort()\n    \n    if len(nums) % 2 != 0:\n        return nums[len(nums) // 2]\n    else:\n        mid1 = nums[len(nums) // 2 - 1]\n        mid2 = nums[len(nums) // 2]\n        return (mid1 + mid2) / 2\n",
    "MbppEval/399": "def bitwise_xor(test_tup1, test_tup2):\n    result = [a ^ b for a, b in zip(test_tup1, test_tup2)]\n    return tuple(result)\n",
    "MbppEval/404": "def minimum(a, b):\n    if a < b:\n        return a\n    elif b < a:\n        return b\n    else:\n        return a  # or return b since they are equal\n",
    "MbppEval/405": "def check_tuplex(tuplex, element):\n    return element in tuplex\n",
    "MbppEval/401": "def add_nested_tuples(test_tup1, test_tup2):\n    result = []\n    \n    for tup1, tup2 in zip(test_tup1, test_tup2):\n        added_tuple = [sum(pair) for pair in zip(tup1, tup2)]\n        result.append(tuple(added_tuple))\n    \n    return tuple(result)\n",
    "MbppEval/12": "def sort_matrix(M):\n    row_sums = [sum(row) for row in M]\n    rows_with_sums = list(enumerate(row_sums))\n    rows_with_sums.sort(key=lambda x: x[1])\n    \n    sorted_matrix = [M[row[0]] for row in rows_with_sums]\n    return sorted_matrix\n",
    "MbppEval/406": "def find_Parity(x):\n    if x % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n",
    "MbppEval/398": "def sum_of_digits(nums):\n    total_sum = 0\n\n    for num in nums:\n        if isinstance(num, int):\n            digits = str(num)\n            for digit in digits:\n                if digit.isdigit():\n                    total_sum += int(digit)\n    \n    return total_sum\n",
    "MbppEval/409": "def min_product_tuple(list1):\n    min_product = float('inf')\n    \n    for tup in list1:\n        product = tup[0] * tup[1]\n        if product < min_product:\n            min_product = product\n            \n    return min_product\n",
    "MbppEval/411": "import re\n\ndef snake_to_camel(word):\n    words = word.split('_')\n    camel_words = [words[0]] + [word.capitalize() for word in words[1:]]\n    camel_case = ''.join(camel_words)\n    return camel_case\n",
    "MbppEval/410": "def min_val(listval):\n    for item in listval:\n        if isinstance(item, int):\n            min_value = item\n            break\n    else:\n        return None\n    \n    for item in listval:\n        if isinstance(item, int) and (min_value is None or item < min_value):\n            min_value = item\n    \n    return min_value\n",
    "MbppEval/413": "def extract_nth_element(list1, n):\n    extracted_elements = []\n    for tuple in list1:\n        extracted_elements.append(tuple[n])\n    return extracted_elements\n",
    "MbppEval/392": "def get_max_sum(n):\n    if n <= 1:\n        return n\n    \n    memo = {}  # Memoization dictionary to store calculated values\n    \n    def max_sum_helper(n):\n        if n in memo:\n            return memo[n]\n        \n        max_sum = max(n, max_sum_helper(n//2) + max_sum_helper(n//3) + max_sum_helper(n//4) + max_sum_helper(n//5))\n        memo[n] = max_sum\n        return max_sum\n        \n    return max_sum_helper(n)\n",
    "MbppEval/412": "def remove_odd(l):\n    result = []\n    \n    for num in l:\n        if num % 2 == 0:\n            result.append(num)\n    \n    return result\n",
    "MbppEval/418": "def Find_Max(lst): \n    max_length = 0\n    max_element = None\n    \n    for element in lst:\n        element_length = len(element)\n        \n        if element_length > max_length:\n            max_length = element_length\n            max_element = element\n        \n    return max_element\n",
    "MbppEval/415": "def max_Product(arr): \n    max_product = 0\n    pair = ()\n    num_neg = 0\n    num_zeros = 0\n\n    def max_product_pair(arr):\n        nonlocal max_product, pair, num_neg, num_zeros\n\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                product = arr[i] * arr[j]\n                if product > max_product:\n                    max_product = product\n                    pair = (arr[i], arr[j])\n                if arr[i] < 0 or arr[j] < 0:\n                    num_neg += 1\n                if arr[i] == 0 or arr[j] == 0:\n                    num_zeros += 1\n\n    max_product_pair(arr)\n\n    if num_zeros == len(arr) or (num_neg == 0 and num_zeros > 0):\n        pair = (0, 0)\n    elif num_neg % 2 != 0:\n        max_product = 0\n\n    return pair\n",
    "MbppEval/306": "def max_sum_increasing_subseq(a, n, index, k):\n    max_sum = [0] * (k - index + 1)\n    max_sum[0] = a[index]\n\n    for i in range(index + 1, k + 1):\n        curr_sum = a[i]\n        for j in range(index, i):\n            if a[i] > a[j]:\n                curr_sum = max(curr_sum, a[i] + max_sum[j - index])\n        max_sum[i - index] = curr_sum\n    \n    return max(max_sum)\n",
    "MbppEval/420": "def cube_Sum(n):\n    sum_cubes = 0\n    for i in range(2, 2*n + 1, 2):\n        cube = i ** 3\n        sum_cubes += cube\n    return sum_cubes\n",
    "MbppEval/419": "def round_and_sum(list1):\n    total_sum = 0\n    \n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    \n    return total_sum * len(list1)\n",
    "MbppEval/417": "def group_tuples(Input): \n    groups = {}\n\n    for tup in Input:\n        key = tup[0]\n\n        if key not in groups:\n            groups[key] = [tup]\n        else:\n            groups[key].append(tup)\n\n    return list(groups.values())\n",
    "MbppEval/424": "def extract_rear(test_tuple):\n    rear_elements = []\n    for word in test_tuple:\n        rear_element = word[-1]\n        rear_elements.append(rear_element)\n    return rear_elements\n",
    "MbppEval/425": "def count_element_in_list(list1, x): \n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n",
    "MbppEval/421": "def concatenate_tuple(test_tup):\n    concatenated_str = \"\"\n\n    for idx, elem in enumerate(test_tup):\n        concatenated_str += str(elem)\n        \n        if idx < len(test_tup) - 1:\n            concatenated_str += \"-\"\n    \n    return concatenated_str\n",
    "MbppEval/422": "def find_Average_Of_Cube(n):  \n    total_cubes = 0\n    for i in range(1, n + 1):\n        cube = i ** 3\n        total_cubes += cube\n    avg_cube = total_cubes / n\n    return avg_cube\n",
    "MbppEval/427": "import re\ndef change_date_format(dt):\n    date_parts = dt.split('-')\n    new_format = date_parts[::-1]\n    return '-'.join(new_format)\n",
    "MbppEval/62": "def smallest_num(xs):\n    '''\n    Find the smallest number in a list.\n    \n    Parameters:\n    xs (list): A list of numbers\n    \n    Returns:\n    int: The smallest number in the list\n    '''\n    if not xs:\n        return None\n    \n    smallest = xs[0]\n    \n    for num in xs:\n        if num < smallest:\n            smallest = num\n            \n    return smallest\n",
    "MbppEval/430": "def parabola_directrix(a, b, c):\n    directrix = -1/(4*a) + c\n    return directrix\n",
    "MbppEval/431": "def common_element(list1, list2):\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n",
    "MbppEval/429": "def and_tuples(test_tup1, test_tup2):\n    result = []\n    \n    for i in range(len(test_tup1)):\n        and_value = test_tup1[i] & test_tup2[i]\n        result.append(and_value)\n    \n    return tuple(result)\n",
    "MbppEval/172": "    return count  # Step 5: Return the count of occurrences of the substring 'std'\n",
    "MbppEval/432": "def median_trapezium(base1, base2, height):\n    average_base = (base1 + base2) / 2\n    return average_base\n",
    "MbppEval/435": "def last_Digit(n):\n    return n % 10\n",
    "MbppEval/426": "def filter_oddnumbers(nums):\n    odd_nums = []\n    \n    for num in nums:\n        if num % 2 != 0:\n            odd_nums.append(num)\n    \n    return odd_nums\n",
    "MbppEval/437": "def remove_odd(str1):\n    result = \"\"\n    \n    for index, char in enumerate(str1):\n        if index % 2 == 0:\n            result += char\n    \n    return result\n",
    "MbppEval/436": "def neg_nos(list1):\n    neg_nums = []\n\n    for num in list1:\n        if num < 0:\n            neg_nums.append(num)\n\n    return neg_nums\n",
    "MbppEval/434": "import re\n\ndef text_match_one(text):\n    '''\n    Matches a string that has an 'a' followed by one or more 'b's.\n\n    Args:\n    text (str): Input string to check for the pattern.\n\n    Returns:\n    str: 'Found a match!' if pattern found, 'Not matched!' otherwise.\n    '''\n    if re.search(r'ab+', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
    "MbppEval/440": "import re\n\ndef find_adverb_position(text):\n    adverb_regex = r'\\b\\w+ly\\b'\n    matches = re.search(adverb_regex, text)\n    if matches:\n        adverb = matches.group()\n        start_position = matches.start()\n        end_position = matches.end()\n        return start_position, end_position, adverb\n    return None\n",
    "MbppEval/438": "def count_bidirectional(test_list):\n    bidirectional_pairs = {}\n    \n    for pair in test_list:\n        tuple_pair = tuple(sorted(pair))\n        \n        if tuple_pair in bidirectional_pairs:\n            bidirectional_pairs[tuple_pair] += 1\n        else:\n            bidirectional_pairs[tuple_pair] = 1\n\n    count = 0\n    for pair_count in bidirectional_pairs.values():\n        if pair_count >= 2:\n            count += pair_count // 2\n\n    return str(count)\n",
    "MbppEval/441": "def surfacearea_cube(l):\n    surface_area = 6 * l**2\n    return surface_area\n",
    "MbppEval/443": "def largest_neg(list1): \n    largest_negative = None\n    \n    for num in list1:\n        if num < 0:\n            if largest_negative is None or num < largest_negative:\n                largest_negative = num\n\n    return largest_negative\n",
    "MbppEval/444": "def trim_tuple(test_list, K):\n    trimmed_tuples = []\n    \n    for tpl in test_list:\n        trimmed_tpl = tpl[K:]\n        trimmed_tuples.append(trimmed_tpl)\n    \n    return str(trimmed_tuples)\n",
    "MbppEval/442": "from array import array\n\ndef positive_count(nums):\n    '''Write a function to find the ratio of positive numbers in an array of integers.'''\n    \n    positive_nums = 0\n    total_nums = len(nums)\n    \n    for num in nums:\n        if num > 0:\n            positive_nums += 1\n    \n    positive_ratio = positive_nums / total_nums\n    \n    return round(positive_ratio, 2)\n",
    "MbppEval/439": "def multiple_to_single(L):\n    single_int = \"\".join(str(num) for num in L)\n    return int(single_int)\n",
    "MbppEval/445": "def index_multiplication(test_tup1, test_tup2):\n    result_list = []\n    \n    for i in range(len(test_tup1)):\n        multiplied_tuple = (test_tup1[i][0] * test_tup2[i][0], test_tup1[i][1] * test_tup2[i][1])\n        result_list.append(multiplied_tuple)\n    \n    result_tuple = tuple(result_list)\n    \n    return result_tuple\n",
    "MbppEval/447": "def cube_nums(nums):\n    cubes = []\n    \n    for num in nums:\n        cubes.append(num ** 3)  # Cube of each number\n        \n    return cubes\n",
    "MbppEval/448": "def cal_sum(n):\n    def perrin_number(n):\n        if n == 0:\n            return 3\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 2\n        else:\n            return perrin_number(n-2) + perrin_number(n-3)\n    \n    if n <= 0:\n        return 0\n    \n    perrin_sum = 0\n    for i in range(n):\n        perrin_sum += perrin_number(i)\n    \n    return perrin_sum\n",
    "MbppEval/446": "from collections import Counter\n\ndef count_Occurrence(tup_counter, lst): \n    count = 0\n    for ele in lst:\n        count += tup_counter[ele]\n    return count\n",
    "MbppEval/450": "def extract_string(str, l):\n    result = []\n\n    for s in str:\n        if len(s) == l:\n            result.append(s)\n\n    return result\n\nprint(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8))  # ['practice', 'solution']\nprint(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 6))  # ['Python']\nprint(extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 9))  # ['exercises']\n",
    "MbppEval/452": "def loss_amount(actual_cost, sale_amount):\n    loss = actual_cost - sale_amount\n    if loss > 0:\n        return loss\n    else:\n        return 0\n",
    "MbppEval/63": "def max_difference(test_list):\n    max_diff = 0\n    \n    for pair in test_list:\n        diff = abs(pair[1] - pair[0])\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff\n",
    "MbppEval/454": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    \n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
    "MbppEval/455": "def check_monthnumb_number(monthnum2):\n    days_in_31 = [1, 3, 5, 7, 8, 10, 12]\n    \n    return monthnum2 in days_in_31\n",
    "MbppEval/456": "def reverse_string_list(stringlist):\n    reversed_strings = []\n    \n    for string in stringlist:\n        reversed_string = string[::-1]\n        reversed_strings.append(reversed_string)\n\n    return reversed_strings\n",
    "MbppEval/458": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n\n    Examples:\n    rectangle_area(10, 20) == 200\n    rectangle_area(10, 5) == 50\n    rectangle_area(4, 2) == 8\n    '''\n    return l * b\n",
    "MbppEval/459": "import re\ndef remove_uppercase(str1):\n    result = ''\n    uppercase_substrings = re.findall(r'[A-Z]+', str1)\n\n    for index, char in enumerate(str1):\n        is_upper = False\n        for substr in uppercase_substrings:\n            if str1[index:index+len(substr)].lower() == substr.lower():\n                is_upper = True\n                break\n        if not is_upper:\n            result += char\n    return result\n",
    "MbppEval/460": "def Extract(lst): \n    first_elements = []  # Step 0: Create an empty list to store the first elements of each sublist.\n    \n    for sub_list in lst:\n        first_element = sub_list[0]  # Step 2: Extract the first element of the sublist.\n        first_elements.append(first_element)  # Append the first element to the new list.\n    \n    return first_elements\n",
    "MbppEval/453": "import math\n\ndef sumofFactors(n):\n    sum_factors = 0\n\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum_factors += i\n            if n // i % 2 == 0 and i != n // i:\n                sum_factors += n // i\n\n    return sum_factors\n",
    "MbppEval/451": "import re\n\ndef remove_whitespaces(text1):\n    return re.sub(r'\\s+', '', text1)\n\n# Test the function with the provided examples\nprint(remove_whitespaces(' Google    Flutter '))  # Output: 'GoogleFlutter'\nprint(remove_whitespaces(' Google    Dart '))  # Output: 'GoogleDart'\nprint(remove_whitespaces(' iOS    Swift '))  # Output: 'iOSSwift'\n",
    "MbppEval/463": "def max_subarray_product(arr):\n    if not arr:\n        return None\n    \n    current_max_product = current_min_product = result = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            current_max_product, current_min_product = current_min_product, current_max_product\n        \n        current_max_product = max(arr[i], current_max_product * arr[i])\n        current_min_product = min(arr[i], current_min_product * arr[i])\n        \n        result = max(result, current_max_product)\n    \n    return result\n",
    "MbppEval/462": "import itertools\n\ndef combinations_list(list1):\n    combinations = []\n    \n    for r in range(len(list1)+1):\n        combinations.extend(list(itertools.combinations(list1, r)))\n    \n    return combinations\n",
    "MbppEval/464": "def check_value(dict, n):\n    for val in dict.values():\n        if val != n:\n            return False\n    return True\n",
    "MbppEval/465": "def drop_empty(dict1):\n    non_empty_dict = {}\n    \n    for key, value in dict1.items():\n        if value is not None:\n            non_empty_dict[key] = value\n    \n    return non_empty_dict\n",
    "MbppEval/470": "def add_pairwise(test_tup):\n    result = []\n    \n    for i in range(len(test_tup) - 1):\n        current_sum = test_tup[i] + test_tup[i+1]\n        result.append(current_sum)\n    \n    return tuple(result)\n",
    "MbppEval/471": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product\n",
    "MbppEval/468": "def max_product(arr):\n    dp = [1] * len(arr)  # Initialize the maximum product ending at each index\n    subsequences = []    # List to store increasing subsequences\n\n    for i in range(len(arr)):\n        # Add the element itself as a subsequence\n        subsequences.append([arr[i]])\n\n        for j in range(i):\n            if arr[i] > arr[j]:  # If increasing order, update the product\n                product = dp[j] * arr[i]\n                if product > dp[i]:\n                    dp[i] = product\n                    # Append the current element to the existing subsequence\n                    subsequences[i] = subsequences[j] + [arr[i]]\n\n    max_product = float('-inf')\n    for subsequence in subsequences:\n        product = 1\n        for num in subsequence:\n            product *= num\n        max_product = max(max_product, product)\n\n    return max_product\n",
    "MbppEval/457": "def Find_Min(lst):\n    min_length_sublist = None\n    min_length = float('inf')\n    \n    for sublst in lst:\n        if len(sublst) < min_length:\n            min_length = len(sublst)\n            min_length_sublist = sublst\n    \n    return min_length_sublist\n",
    "MbppEval/473": "def tuple_intersection(test_list1, test_list2):\n    set1 = set(map(tuple, test_list1))\n    set2 = set(map(tuple, test_list2))\n\n    intersection = set1.intersection(set2)\n\n    return intersection\n",
    "MbppEval/472": "def check_Consecutive(l):\n    for i in range(len(l) - 1):\n        if l[i] + 1 != l[i+1]:\n            return False\n    return True\n",
    "MbppEval/475": "from collections import Counter\n\ndef sort_counter(dict1):\n    counter_dict = Counter(dict1)\n    sorted_tuples = counter_dict.most_common()\n    return sorted_tuples\n",
    "MbppEval/477": "def is_lower(string):\n    # Step 1: Define the function is_lower that takes a string as input\n    # Step 2: Use the lower method of strings to convert the given string to lowercase\n    return string.lower()\n",
    "MbppEval/478": "# Step 2: Use the re.sub() function to replace all lowercase substrings with an empty string\ndef remove_lowercase(str1):\n    pattern = '[a-z]'\n    modified_str = re.sub(pattern, '', str1)\n    return modified_str\n",
    "MbppEval/476": "def big_sum(nums):\n    max_val = max(nums)\n    min_val = min(nums)\n    sum_max_min = max_val + min_val\n    return sum_max_min\n",
    "MbppEval/479": "def first_Digit(n):\n    num_str = str(n)\n    return int(num_str[0])\n",
    "MbppEval/474": "def replace_char(str1, ch, newch):\n    modified_str = \"\"\n    \n    for char in str1:\n        if char == ch:\n            modified_str += newch\n        else:\n            modified_str += char\n\n    return modified_str\n\n# Testing the function with examples\nprint(replace_char(\"polygon\", 'y', 'l'))  # Output should be \"pollgon\"\nprint(replace_char(\"character\", 'c', 'a'))  # Output should be \"aharaater\"\nprint(replace_char(\"python\", 'l', 'a'))  # Output should be \"python\"\n",
    "MbppEval/555": "def difference(n):\n    sum_of_cubes = (n * (n + 1) // 2)**2\n    sum_of_numbers = (n * (n + 1)) // 2\n    return sum_of_cubes - sum_of_numbers\n",
    "MbppEval/557": "def toggle_string(string):\n    toggled_string = \"\"\n    \n    for char in string:\n        if char.isupper():\n            toggled_string += char.lower()\n        else:\n            toggled_string += char.upper()\n    \n    return toggled_string\n",
    "MbppEval/554": "def split(lst): \n    result = []\n    for num in lst:\n        if num % 2 != 0:\n            result.append(num)\n    return result\n",
    "MbppEval/556": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2 != 0:\n                count += 1\n    return count\n",
    "MbppEval/559": "def max_sub_array_sum(a, size):\n    max_so_far = float('-inf')\n    max_ending_here = float('-inf')\n\n    for i in range(size):\n        max_ending_here = max(a[i], a[i] + max_ending_here)\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far\n",
    "MbppEval/560": "def union_elements(test_tup1, test_tup2):\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    union_set = set1.union(set2)\n    \n    result_tuple = tuple(union_set)\n    \n    sorted_tuple = tuple(sorted(result_tuple))\n    \n    return sorted_tuple\n",
    "MbppEval/563": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    values = re.findall(pattern, text)\n    return values\n",
    "MbppEval/295": "def sum_div(number):\n    sum_of_divisors = 0\n    \n    for i in range(1, number//2 + 1):\n        if number % i == 0:\n            sum_of_divisors += i\n    \n    return sum_of_divisors\n",
    "MbppEval/562": "def Find_Max_Length(lst):\n    max_length = 0\n    for sublist in lst:\n        sublist_length = len(sublist)\n        if sublist_length > max_length:\n            max_length = sublist_length\n    \n    return max_length\n",
    "MbppEval/567": "def issort_list(list1):\n    if len(list1) == 0 or len(list1) == 1:\n        return True\n\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i+1]:\n            return False\n\n    return True\n",
    "MbppEval/564": "def count_Pairs(arr, n):\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] != arr[j]:\n                count += 1\n                \n    return count\n",
    "MbppEval/565": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n\n    Examples:\n    split('python') == ['p','y','t','h','o','n']\n    split('Name') == ['N','a','m','e']\n    split('program') == ['p','r','o','g','r','a','m']\n    '''\n    characters = []\n    \n    for char in word:\n        characters.append(char)\n\n    return characters\n",
    "MbppEval/568": "def empty_list(length):\n    result = []\n    for _ in range(length):\n        result.append({})\n    return result\n",
    "MbppEval/569": "def sort_sublists(list1):\n    sorted_list = []\n    \n    for sublist in list1:\n        sorted_sublist = sorted(sublist)\n        sorted_list.append(sorted_sublist)\n    \n    return sorted_list\n",
    "MbppEval/572": "def two_unique_nums(nums):\n    result = []\n    for num in nums:\n        if num not in result:\n            result.append(num)\n    return result\n",
    "MbppEval/566": "def sum_digits(n):\n    sum_digits = 0\n    \n    n_str = str(n)\n    \n    sum_digits = 0\n    \n    for digit in n_str:\n        sum_digits += int(digit)\n    \n    return sum_digits\n",
    "MbppEval/574": "def surfacearea_cylinder(r,h):\n    lateral_area = 2 * 3.14159 * r * h\n    base_area = 2 * 3.14159 * r ** 2\n    total_area = lateral_area + base_area\n    return total_area\n",
    "MbppEval/573": "def unique_product(list_data):\n    unique_set = set()\n    \n    # Step 1: Iterate through the list and add unique elements to the set\n    for num in list_data:\n        unique_set.add(num)\n\n    # Step 2: Calculate the product of unique elements\n    unique_product = 1\n    for num in unique_set:\n        unique_product *= num\n\n    return unique_product\n",
    "MbppEval/577": "def last_Digit_Factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    \n    last_digit = result % 10\n    \n    return last_digit\n",
    "MbppEval/579": "def find_dissimilar(test_tup1, test_tup2):\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    dissimilar_elements = set1.symmetric_difference(set2)\n    return tuple(dissimilar_elements)\n",
    "MbppEval/576": "def is_Sub_Array(A, B):\n    if len(B) > len(A):\n        return False\n\n    for i in range(len(A)):\n        if A[i:i+len(B)] == B:\n            return True\n    return False\n",
    "MbppEval/103": "import math\n\ndef eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n\n    Examples:\n    eulerian_num(3, 1) == 4\n    eulerian_num(4, 1) == 11\n    eulerian_num(5, 3) == 26\n    '''\n    def binomial_coefficient(n, k):\n        return math.factorial(n) // (math.factorial(k) * math.factorial(n - k))\n    \n    def eulerian_number(n, m):\n        result = 0\n        for k in range(m + 1):\n            result += ((-1) ** k) * binomial_coefficient(n + 1, k) * ((m + 1 - k) ** n)\n        return result\n    \n    return eulerian_number(n, m)\n",
    "MbppEval/581": "def surface_Area(b, s):\n    base_area = b ** 2\n    lateral_area = 4 * (b * s / 2)\n    total_area = base_area + lateral_area\n    return total_area\n",
    "MbppEval/582": "def my_dict(dict1):\n    return not bool(dict1)\n",
    "MbppEval/584": "import re\n\ndef find_adverbs(text):\n    words = re.findall(r'\\b\\w+\\b', text)\n    \n    for i, word in enumerate(words):\n        if word.endswith('ly') and len(word) > 2:\n            start = sum(len(words[j])+1 for j in range(i))\n            end = start + len(word)\n            return f\"{start}-{end}: {word}\"\n    \n    return \"No adverb ending with 'ly' found.\"\n\n# Testing the function with examples\nprint(find_adverbs(\"Clearly, he has no excuse for such behavior.\"))  # Output: '0-7: Clearly'\nprint(find_adverbs(\"Please handle the situation carefuly\"))          # Output: '28-36: carefuly'\nprint(find_adverbs(\"Complete the task quickly\"))                      # Output: '18-25: quickly'\n",
    "MbppEval/585": "import heapq\n\ndef expensive_items(items, n):\n    neg_prices = [(-item['price'], item) for item in items]\n    heapq.heapify(neg_prices)\n    return [heapq.heappop(neg_prices)[1] for _ in range(n)]\n",
    "MbppEval/583": "def catalan_number(num):\n    result = 1\n\n    if num == 0:\n        return result\n\n    for i in range(1, num + 1):\n        result = result * 2 * (2 * i - 1) // (i + 1)\n\n    return result\n",
    "MbppEval/587": "def list_tuple(listx):\n    return tuple(listx)\n",
    "MbppEval/580": "def even_ele(test_tuple, even_fnc):\n    def extract_even(element):\n        if isinstance(element, tuple):\n            return tuple(extract_even(e) for e in element)\n        elif even_fnc(element):\n            return element\n\n    return extract_even(test_tuple)\n",
    "MbppEval/590": "import cmath\n\ndef polar_rect(r, theta):\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x, y)\n",
    "MbppEval/589": "from math import sqrt\n\ndef perfect_squares(a, b):\n    result = []\n    for i in range(a, b+1):\n        if sqrt(i).is_integer():\n            result.append(i)\n    return result\n",
    "MbppEval/591": "def swap_List(newList):\n    if not newList:\n        return \"Empty list\"\n    \n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList\n",
    "MbppEval/65": "def recursive_list_sum(data_list):\n    total_sum = 0\n    \n    for item in data_list:\n        total_sum += item if isinstance(item, int) else 0\n        \n    for item in data_list:\n        if isinstance(item, list):\n            total_sum += recursive_list_sum(item)\n\n    return total_sum\n",
    "MbppEval/593": "import re\ndef removezero_ip(ip):\n    parts = ip.split('.')\n    \n    # Remove leading zeros from each part\n    parts = [str(int(part)) for part in parts]\n    \n    # Join the parts back together using periods\n    modified_ip = '.'.join(parts)\n    \n    return modified_ip\n",
    "MbppEval/586": "def split_Arr(l, n):\n    if not l:\n        return \"Input list is empty, please provide a non-empty list.\"\n    \n    split_idx = n % len(l)\n    \n    # Split the list at the specified index, reorder, and concatenate\n    reordered_list = l[split_idx:] + l[:split_idx]\n    \n    return reordered_list\n",
    "MbppEval/594": "def diff_even_odd(list1):\n    even_index = None\n    odd_index = None\n\n    for i, num in enumerate(list1):\n        if num % 2 == 0:\n            even_index = i\n            break\n\n    for i, num in enumerate(list1):\n        if num % 2 != 0:\n            odd_index = i\n            break\n\n    if even_index is not None and odd_index is not None:\n        diff = abs(list1[even_index] - list1[odd_index])\n        return diff\n    else:\n        return None\n",
    "MbppEval/597": "def find_kth(arr1, arr2, k):\n    merged = sorted(arr1 + arr2)\n    return merged[k-1]\n",
    "MbppEval/596": "import sys\n\ndef tuple_size(tuple_list):\n    return sys.getsizeof(tuple_list)\n",
    "MbppEval/595": "def min_Swaps(str1, str2):\n    if len(str1) != len(str2):\n        return \"Not Possible\"\n    \n    swap_count = 0\n\n    for char1, char2 in zip(str1, str2):\n        if char1 != char2:\n            swap_count += 1\n    \n    if swap_count % 2 == 0:\n        return swap_count // 2\n    else:\n        return \"Not Possible\"\n",
    "MbppEval/592": "import math\n\ndef binomial_coeff(n, k):\n    return math.factorial(n) // (math.factorial(k) * math.factorial(n - k))\n\ndef sum_of_product(n):\n    result = 0\n    for i in range(n - 1):\n        result += binomial_coeff(n, i) * binomial_coeff(n, i + 1)\n    return result\n",
    "MbppEval/598": "def armstrong_number(number):\n    num_str = str(number)\n    \n    total_digits = len(num_str)\n    armstrong_sum = sum(int(digit)**total_digits for digit in num_str)\n    \n    return armstrong_sum == number\n",
    "MbppEval/600": "def is_Even(n):\n    return n % 2 == 0\n",
    "MbppEval/602": "def first_repeated_char(str1):\n    seen_chars = set()\n    \n    for char in str1:\n        if char in seen_chars:\n            return char\n        \n        seen_chars.add(char)\n    \n    return \"None\"\n",
    "MbppEval/604": "def reverse_words(s):\n    word_list = s.split()\n    reversed_words = ' '.join(word_list[::-1])\n    return reversed_words\n",
    "MbppEval/603": "def get_ludic(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    ludic_numbers = []\n    for i in range(1, n + 1):\n        if is_prime(i):\n            ludic_numbers.append(i)\n\n    return ludic_numbers\n",
    "MbppEval/606": "import math\ndef radian_degree(degree):\n    radians = degree * math.pi / 180\n    return radians\n",
    "MbppEval/280": "def sequential_search(dlist, item):\n    found = False\n    index = -1\n    \n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    \n    return (found, index)\n",
    "MbppEval/607": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Search a string for a regex pattern and return the matching substring, start index, and end index.\n\n    Args:\n    text (str): The input string to search.\n    pattern (str): The regex pattern to search for in the text.\n\n    Returns:\n    tuple: A tuple containing the matching substring, start index, and end index. If no match is found, returns None.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    return None\n",
    "MbppEval/605": "import math\n\ndef is_prime(num):\n    if num < 2:\n        return False\n\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n\n    return True\n",
    "MbppEval/610": "def remove_kth_element(list1, k):\n    list_copy = list1[:]\n    del list_copy[k]\n    return list_copy\n",
    "MbppEval/608": "def bell_Number(n): \n    if n < 0:\n        return -1\n    \n    bell = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    bell[0][0] = 1\n    \n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n\n    return bell[n][n]\n",
    "MbppEval/599": "def sum_average(number):\n    sum_numbers = number * (number + 1) // 2\n    average = sum_numbers / number\n    return (sum_numbers, average)\n",
    "MbppEval/614": "def cummulative_sum(test_list):\n    total_sum = 0\n    for tup in test_list:\n        tuple_sum = sum(tup)\n        total_sum += tuple_sum\n    return total_sum\n",
    "MbppEval/611": "def max_of_nth(test_list, N):\n    max_val = float('-inf')  # Initialize max_val to negative infinity to handle negative values\n    for lst in test_list:\n        extracted_val = lst[N-1]  # Extract the element at index N-1\n        if extracted_val > max_val:\n            max_val = extracted_val\n    return max_val\n",
    "MbppEval/615": "def average_tuple(nums):\n    averages = []\n\n    for num_tuple in nums:\n        avg = sum(num_tuple) / len(num_tuple)\n        averages.append(avg)\n\n    return averages\n",
    "MbppEval/618": "def div_list(nums1, nums2):\n    division_results = []\n    \n    for num1, num2 in zip(nums1, nums2):\n        result = num1 / num2\n        division_results.append(result)\n    \n    return division_results\n",
    "MbppEval/619": "def move_num(test_str):\n    result_letters = ''\n    result_numbers = ''\n    \n    for char in test_str:\n        if char.isdigit():  # Check if the character is a number\n            result_numbers += char\n        else:\n            result_letters += char\n    \n    return result_letters + result_numbers\n",
    "MbppEval/616": "def tuple_modulo(test_tup1, test_tup2):\n    result = []\n    \n    for val1, val2 in zip(test_tup1, test_tup2):\n        result.append(val1 % val2)\n\n    return tuple(result)\n",
    "MbppEval/617": "def min_Jumps(steps, d): \n    total_distance = abs(d)\n    number_of_jumps = total_distance / steps\n    return number_of_jumps\n\n# Test the function\nprint(min_Jumps(3, 4))\n",
    "MbppEval/623": "def nth_nums(nums, n):\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result\n",
    "MbppEval/625": "def swap_List(newList):\n    if len(newList) > 1:\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n",
    "MbppEval/624": "def is_upper(string):\n    if string.isupper():\n        return string\n    else:\n        return string.upper()\n",
    "MbppEval/612": "def merge(lst):\n    result1 = []\n    result2 = []\n    for sublst in lst:\n        result1.append(sublst[0])\n        result2.append(sublst[1])\n    return [result1, result2]\n",
    "MbppEval/627": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array)\n    \n    # Ensure start and end are within bounds\n    start = max(start, 0)\n    end = min(end, len(array)\n    \n    # Find the smallest missing number\n    for i in range(start, end):\n        if array[i] != i:\n            return i\n\n    return end\n",
    "MbppEval/628": "def replace_spaces(string):\n    new_string = ''\n    for char in string:\n        if char == ' ':\n            new_string += '%20'\n        else:\n            new_string += char\n    return new_string\n",
    "MbppEval/626": "import math\n\ndef triangle_area(r):\n    if r < 0:\n        return -1\n    \n    # Height of equilateral triangle (which is the radius of the semicircle) is half the side length\n    side = 2 * r  \n    area = (math.sqrt(3) / 4) * side**2\n\n    return area\n\n# Test cases\nprint(triangle_area(0))  # Expected output: 0\nprint(triangle_area(-1))  # Expected output: -1\nprint(triangle_area(2))  # Expected output: 4\n",
    "MbppEval/630": "def adjac(ele): \n    x, y = ele\n    result = [[x-1, y-1], [x-1, y], [x-1, y+1], [x, y-1], [x, y], [x, y+1], [x+1, y-1], [x+1, y], [x+1, y+1]]\n    return result\n",
    "MbppEval/620": "def largest_subset(a):\n    max_subset_size = 0\n\n    for num in a:\n        subset_size = 1  # At least one element in the subset\n        subset = [num]  # Initialize subset with num\n\n        for i in range(a.index(num) + 1, len(a)):\n            if all(a[i] % ele == 0 for ele in subset):\n                subset.append(a[i])\n                subset_size += 1\n\n        max_subset_size = max(max_subset_size, subset_size)\n\n    return max_subset_size\n",
    "MbppEval/631": "def replace_spaces(text):\n    modified_text = ''\n    for char in text:\n        if char == ' ':\n            modified_text += '_'\n        elif char == '_':\n            modified_text += ' '\n        else:\n            modified_text += char\n    return modified_text\n",
    "MbppEval/632": "def move_zero(num_list):\n    zero_count = 0\n    for num in num_list:\n        if num == 0:\n            zero_count += 1\n    \n    non_zero_list = [num for num in num_list if num != 0]\n    \n    zero_list = [0] * zero_count\n    new_list = non_zero_list + zero_list\n    return new_list\n",
    "MbppEval/629": "def split(lst):\n    result = []\n    \n    for num in lst:\n        if num % 2 == 0:\n            result.append(num)\n    \n    return result\n",
    "MbppEval/638": "import math\n\ndef wind_chill(v, t):\n    wind_chill = 13.12 + 0.6215 * t - 11.37 * v ** 0.16 + 0.3965 * t * v ** 0.16\n    return math.ceil(wind_chill)\n",
    "MbppEval/633": "def pair_xor_Sum(arr, n):\n    sum_xor_pairs = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            xor_pair = arr[i] ^ arr[j]\n            sum_xor_pairs += xor_pair\n    \n    return sum_xor_pairs\n",
    "MbppEval/640": "import re\n\ndef remove_parenthesis(items):\n    result = re.sub(r'\\(.*?\\)', '', items[0])\n    return result\n",
    "MbppEval/637": "def noprofit_noloss(actual_cost, sale_amount):\n    return actual_cost == sale_amount\n",
    "MbppEval/641": "def is_nonagonal(n): \n    return n * (7*n - 5) // 2\n",
    "MbppEval/639": "def sample_nam(sample_names):\n    total_length = 0\n    \n    for name in sample_names:\n        if name[0].islower():\n            continue\n\n        total_length += len(name)  # Implementing step 4\n    \n    return total_length\n",
    "MbppEval/643": "import re\ndef text_match_wordz_middle(text):\n    pattern = r'\\Bz\\B'\n    if re.search(pattern, text):\n        return ('Found a match!')\n    else:\n        return ('Not matched!')\n",
    "MbppEval/644": "def reverse_Array_Upto_K(input, k): \n    if not input:\n        return \"Input array is empty\"\n    \n    if k >= len(input):\n        return \"k should be less than the length of the array\"\n\n    reversed_array = input[:k][::-1]\n\n    result = reversed_array + input[k:]\n\n    return result\n",
    "MbppEval/720": "def add_dict_to_tuple(test_tup, test_dict):\n    new_list = list(test_tup)\n    new_list.append(test_dict)\n    new_tuple = tuple(new_list)\n    return new_tuple\n",
    "MbppEval/722": "def filter_data(students, h, w):\n    filtered_students = {}\n    for student, (height, weight) in students.items():\n        if height >= h and weight >= w:\n            filtered_students[student] = (height, weight)\n    return filtered_students\n",
    "MbppEval/723": "def count_same_pair(nums1, nums2):\n    count = 0\n    for idx, (num1, num2) in enumerate(zip(nums1, nums2)):\n        if num1 == num2:\n            count += 1\n    return count\n",
    "MbppEval/635": "import heapq as hq\n\ndef heap_sort(iterable):\n    sorted_list = []\n    heap = list(iterable)\n    hq.heapify(heap)\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list\n",
    "MbppEval/724": "def power_base_sum(base, power):\n    result = base ** power\n    result_str = str(result)\n    digit_sum = sum(int(digit) for digit in result_str)\n    return digit_sum\n",
    "MbppEval/725": "import re\n\ndef extract_quotation(text1):\n    return re.findall(r'\"(.*?)\"', text1)\n",
    "MbppEval/726": "def multiply_elements(test_tup):\n    result = []\n    \n    for i in range(len(test_tup) - 1):\n        result.append(test_tup[i] * test_tup[i+1])\n    \n    return tuple(result)\n",
    "MbppEval/731": "import math\n\ndef lateralsurface_cone(r, h):\n    # Calculate the slant height of the cone\n    l = math.sqrt(r**2 + h**2)\n    \n    # Calculate the lateral surface area of the cone\n    lateral_surface_area = round(math.pi * r * l, 15)\n    return lateral_surface_area\n\nprint(lateralsurface_cone(5, 12))  # Expected output: 204.20352248333654\nprint(lateralsurface_cone(10, 15))  # Expected output: 566.3586699569488\nprint(lateralsurface_cone(19, 17))  # Expected output: 1521.8090132193388\n",
    "MbppEval/728": "def sum_list(lst1, lst2):\n    sum_lst = []\n    \n    for a, b in zip(lst1, lst2):\n        sum_lst.append(a + b)\n    \n    return sum_lst\n",
    "MbppEval/730": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    result = []\n    \n    for num in nums:\n        if not result or num != result[-1]:\n            result.append(num)\n    \n    return result\n",
    "MbppEval/732": "import re\n\ndef replace_specialchar(text):\n    return re.sub(r'[ ,.]', ':', text)\n",
    "MbppEval/721": "def maxAverageOfPath(cost):\n    n = len(cost)\n    if n == 0:\n        return 0\n    \n    cumulative_cost = [[0 for _ in range(n)] for _ in range(n)]\n    cumulative_cost[0][0] = cost[0][0]\n    \n    for i in range(1, n):\n        cumulative_cost[i][0] = cumulative_cost[i-1][0] + cost[i][0]\n    \n    for j in range(1, n):\n        cumulative_cost[0][j] = cumulative_cost[0][j-1] + cost[0][j]\n    \n    for i in range(1, n):\n        for j in range(1, n):\n            cumulative_cost[i][j] = cost[i][j] + min(cumulative_cost[i-1][j], cumulative_cost[i][j-1])\n    \n    num_cells_visited = [[0 for _ in range(n)] for _ in range(n)]\n    num_cells_visited[0][0] = 1\n    \n    for i in range(1, n):\n        num_cells_visited[i][0] = 1\n    \n    for j in range(1, n):\n        num_cells_visited[0][j] = 1\n    \n    for i in range(1, n):\n        for j in range(1, n):\n            num_cells_visited[i][j] = num_cells_visited[i-1][j] + num_cells_visited[i][j-1]\n    \n    max_average = cumulative_cost[n-1][n-1] / num_cells_visited[n-1][n-1]\n    \n    return max_average\n",
    "MbppEval/734": "def sum_Of_Subarray_Prod(arr):\n    products = []\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            sublist_product = 1\n            \n            for num in arr[i:j]:\n                sublist_product *= num\n            \n            products.append(sublist_product)\n    \n    return sum(products)\n",
    "MbppEval/735": "def set_middle_bits(n):\n    binary_n = bin(n)[2:]\n    \n    toggled_bits = '1' + ''.join('0' if bit == '1' else '1' for bit in binary_n[1:-1]) + '1'\n    \n    return int(toggled_bits, 2)\n",
    "MbppEval/736": "import bisect\n\ndef left_insertion(a, x):\n    left_index = bisect.bisect_left(a, x)\n    return left_index\n\n# Test the function\nprint(left_insertion([1, 2, 4, 5], 6))  # Output should be 4\nprint(left_insertion([1, 2, 4, 5], 3))  # Output should be 2\nprint(left_insertion([1, 2, 4, 5], 7))  # Output should be 4\n",
    "MbppEval/737": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return 'Valid'\n    else:\n        return 'Invalid'\n",
    "MbppEval/738": "def geometric_sum(n):\n    if n <= 0:\n        return 0\n    \n    geometric_sum = 0\n    for i in range(n):\n        geometric_sum += 1 / (2**i)\n    \n    return geometric_sum\n",
    "MbppEval/740": "def tuple_to_dict(test_tup):\n    result_dict = {}\n    \n    for i in range(0, len(test_tup)-1, 2):\n        key = test_tup[i]\n        value = test_tup[i + 1]\n        result_dict[key] = value\n    \n    return result_dict\n",
    "MbppEval/739": "import math\n\ndef find_Index(n):\n    index = 1\n    \n    while True:\n        triangular_number = index * (index + 1) / 2\n        \n        if len(str(triangular_number)) < n:\n            index += 1\n        else:\n            if len(str(triangular_number)) == n:\n                return index\n            else:\n                index += 1\n",
    "MbppEval/741": "def all_Characters_Same(s):\n    if len(s) <= 1:\n        return True\n    \n    first_char = s[0]\n    for char in s[1:]:\n        if char != first_char:\n            return False\n    \n    return True\n",
    "MbppEval/742": "import math\n\ndef area_tetrahedron(side):\n    height = math.sqrt(2/3) * side\n    face_area = (side ** 2) * math.sqrt(3) / 4\n    total_area = 3 * face_area\n    return total_area\n",
    "MbppEval/744": "def check_none(test_tup):\n    for element in test_tup:\n        if element is None:\n            return True\n    return False\n",
    "MbppEval/746": "import math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    else:\n        return (a / 360) * math.pi * r ** 2\n",
    "MbppEval/743": "def rotate_right(lst, m):\n    result = []\n    \n    m = m % len(lst)\n    idx = len(lst) - m\n\n    result += lst[idx:]\n    result += lst[:idx]\n    \n    return result\n",
    "MbppEval/745": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum+1):\n        divisible_by_all_digits = True\n        for digit in str(num):\n            if int(digit) == 0 or num % int(digit) != 0:\n                divisible_by_all_digits = False\n                break\n        if divisible_by_all_digits:\n            result.append(num)\n    return result\n",
    "MbppEval/748": "import re\ndef capital_words_spaces(str1):\n    result = \"\"\n    \n    for i in range(len(str1)):\n        if str1[i].isupper() and i > 0:\n            result += \" \"\n        result += str1[i]\n    \n    return result\n",
    "MbppEval/61": "def get_substrings(s):\n    substrings = []\n    for start in range(len(s)):\n        for end in range(start + 1, len(s) + 1):\n            substrings.append(s[start:end])\n    return substrings\n\ndef get_digit_sum(s):\n    return sum(int(d) for d in s if d.isdigit())\n\ndef count_substrings(s):\n    substrings = get_substrings(s)\n    count = 0\n    for substring in substrings:\n        if len(substring) == get_digit_sum(substring):\n            count += 1\n    return count\n",
    "MbppEval/750": "def add_tuple(test_list, test_tup):\n    new_list = test_list + list(test_tup)\n    return new_list\n",
    "MbppEval/749": "def sort_numeric_strings(nums_str):\n    num_list = [int(num) for num in nums_str]\n    sorted_nums = sorted(num_list)\n    \n    return sorted_nums\n",
    "MbppEval/753": "def min_k(test_list, K):\n    test_list.sort(key=lambda x: x[1])\n    return test_list[:K]\n",
    "MbppEval/751": "def check_min_heap_helper(arr, i):\n    if not arr:\n        return False\n    \n    for i in range(i, len(arr)//2):\n        left_child = 2*i + 1\n        right_child = 2*i + 2\n        \n        if left_child < len(arr) and arr[i] > arr[left_child]:\n            return False\n        \n        if right_child < len(arr) and arr[i] > arr[right_child]:\n            return False\n    \n    return True\n",
    "MbppEval/752": "def jacobsthal_num(n):\n    '''\n    Calculates the nth Jacobsthal number.\n    \n    Parameters:\n    n (int): The position of the Jacobsthal number to calculate.\n    \n    Returns:\n    int: The nth Jacobsthal number.\n    '''\n    if n < 2:\n        return n\n    \n    first = 0\n    second = 1\n    \n    for _ in range(2, n):\n        current = second + 2 * first\n        first, second = second, current\n    \n    return second\n",
    "MbppEval/755": "def second_smallest(numbers):\n    unique_numbers = list(set(numbers))\n    sorted_unique_numbers = sorted(unique_numbers)\n    \n    if len(sorted_unique_numbers) < 2:\n        return None\n    return sorted_unique_numbers[1]\n",
    "MbppEval/756": "import re\n\ndef text_match_zero_one(text):\n    if re.search(r'ab+', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
    "MbppEval/754": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    \n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    \n    return common_elements\n",
    "MbppEval/757": "def count_reverse_pairs(test_list):\n    count = 0\n    reversed_strings = set()\n    \n    for string in test_list:\n        if string[::-1] in reversed_strings:\n            count += 1\n            reversed_strings.remove(string[::-1])\n        else:\n            reversed_strings.add(string)\n    \n    return str(count)\n",
    "MbppEval/758": "def unique_sublists(list1):\n    result_dict = {}\n    \n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        \n        if sublist_tuple not in result_dict:\n            result_dict[sublist_tuple] = 1\n        else:\n            result_dict[sublist_tuple] += 1\n\n    return result_dict\n",
    "MbppEval/759": "def is_decimal(num):\n    if not isinstance(num, str):\n        return False\n    if num.count('.') != 1:\n        return False\n        \n    parts = num.split('.')\n    if not all(part.isdigit() for part in parts):\n        return False\n    \n    if len(parts[1]) != 2:\n        return False\n    \n    return True\n",
    "MbppEval/760": "def unique_Element(arr):\n    unique_elements = set(arr)\n    if len(unique_elements) == 1:\n        return 'YES'\n    else:\n        return 'NO'\n",
    "MbppEval/245": "def max_sum(arr): \n    '''\n    Finds the maximum sum of a bitonic subsequence for the given array.\n    \n    Args:\n    arr (list): Input array\n    \n    Returns:\n    int: Maximum sum of a bitonic subsequence\n    '''\n    n = len(arr)\n    increasing = [0] * n\n    decreasing = [0] * n\n    bitonic = [0] * n\n\n    for i in range(n):\n        increasing[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j]:\n                increasing[i] = max(increasing[i], increasing[j] + arr[i])\n\n    for i in range(n - 1, -1, -1):\n        decreasing[i] = arr[i]\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                decreasing[i] = max(decreasing[i], decreasing[j] + arr[i])\n\n    for i in range(n):\n        bitonic[i] = increasing[i] + decreasing[i] - arr[i]\n\n    max_sum = max(bitonic)\n\n    return max_sum\n",
    "MbppEval/71": "def comb_sort(nums):\n    gap = len(nums)\n    swapped = True\n    \n    while gap > 1 or swapped:\n        gap = max(1, int(gap / 1.3))\n        swapped = False\n        \n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    \n    return nums\n",
    "MbppEval/762": "def check_monthnumber_number(monthnum3):\n    if not isinstance(monthnum3, int) or monthnum3 < 1 or monthnum3 > 12:\n        return False\n    elif monthnum3 in [4, 6, 9, 11]:\n        return True\n    return False\n",
    "MbppEval/764": "def number_ctr(str):\n    count = 0\n    \n    for char in str:\n        if char.isdigit():\n            count += 1\n            \n    return count\n",
    "MbppEval/765": "import math\n\ndef is_polite(n):\n    # Step 0: Check the input\n    if not isinstance(n, int) or n <= 0:\n        return None\n    \n    # Step 1: Calculate the sum of first n natural numbers\n    sum_natural_numbers = n * (n + 1) // 2\n    \n    # Step 2: Calculate the square root of the sum obtained in step 1\n    sqrt_sum = math.sqrt(sum_natural_numbers)\n    \n    # Step 3: Return the smallest integer greater than or equal to the square root as the nth polite number\n    return math.ceil(sqrt_sum)\n",
    "MbppEval/767": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[j] == sum - arr[i]:\n                count += 1\n    return count\n",
    "MbppEval/769": "def Diff(li1, li2):\n    set1 = set(li1)\n    set2 = set(li2)\n    \n    diff_set = set1.difference(set2)\n    \n    diff_list = list(diff_set)\n    \n    return diff_list\n",
    "MbppEval/770": "def odd_num_sum(n):\n    num = 1\n    sum = 0\n    count = 0\n    while count < n:\n        if num % 2 != 0:\n            sum += num ** 4\n            count += 1\n        num += 1\n    return sum\n",
    "MbppEval/766": "def pair_wise(l1):\n    pairs = []\n    \n    # Create pairs of consecutive elements\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    \n    return pairs  # Return the list of pairs\n",
    "MbppEval/763": "def find_min_diff(arr, n): \n    if len(arr) == 0:\n        return \"Array cannot be empty\"\n    if not isinstance(n, int) or n <= 0:\n        return \"n should be a positive integer\"\n    \n    arr.sort()\n    min_diff = float('inf')\n    \n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n        min_diff = min(min_diff, diff)\n    \n    return min_diff\n",
    "MbppEval/773": "import re\n\ndef occurance_substring(text, pattern):\n    matches = re.finditer(pattern, text)\n    \n    for match in matches:\n        return (match.group(), match.start(), match.end())\n    \n    return None\n",
    "MbppEval/772": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = []\n    \n    for word in words:\n        if len(word) != K:\n            new_words.append(word)\n    \n    return ' '.join(new_words)\n",
    "MbppEval/777": "def find_sum(arr):\n    unique_elements = set()\n\n    # Step 1: Add unique elements to the set\n    for num in arr:\n        unique_elements.add(num)\n\n    # Step 2: Calculate the sum of unique elements\n    sum_unique = sum(unique_elements)\n\n    return sum_unique\n",
    "MbppEval/776": "def count_vowels(test_str):\n    count = 0\n    if len(test_str) < 3:\n        return 0\n\n    vowels = set('aeiouAEIOU')\n\n    for i in range(1, len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i-1] in vowels and test_str[i+1] in vowels:\n            count += 1\n\n    return count\n",
    "MbppEval/778": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    result = []\n    \n    for key, group in groupby(list1):\n        result.append(list(group))\n\n    return result\n",
    "MbppEval/780": "from itertools import combinations\n\ndef find_combinations(test_list):\n    result = []\n    \n    for pair in combinations(test_list, 2):\n        sum_tuple = tuple(sum(x) for x in zip(*pair))\n        result.append(sum_tuple)\n\n    return result\n",
    "MbppEval/779": "def unique_sublists(list1):\n    unique_counts = {}\n    \n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        \n        if sublist_tuple in unique_counts:\n            unique_counts[sublist_tuple] += 1\n        else:\n            unique_counts[sublist_tuple] = 1\n    \n    return unique_counts\n",
    "MbppEval/775": "def odd_position(nums):\n    result = True  # Step 2\n    for i in range(1, len(nums), 2):  # Step 3\n        if nums[i] % 2 == 0:\n            result = False\n            break  # Step 4\n    return result  # Step 5\n",
    "MbppEval/781": "import math\n\ndef count_divisors(n):\n    sqrt_n = math.ceil(math.sqrt(n))\n    count = 0\n\n    count += 1  # counting 1 as a divisor\n\n    for i in range(2, sqrt_n + 1):\n        if n % i == 0:\n            count += 2\n\n    if sqrt_n * sqrt_n == n:\n        count -= 1  # correcting as sqrt(n) should not be counted twice\n\n    return \"Even\" if count % 2 == 0 else \"Odd\"\n",
    "MbppEval/784": "def mul_even_odd(list1):\n    even_num = None\n    odd_num = None\n    \n    for num in list1:\n        if num % 2 == 0 and even_num is None:\n            even_num = num\n        elif num % 2 != 0 and odd_num is None:\n            odd_num = num\n    \n    if even_num is not None and odd_num is not None:\n        return even_num * odd_num\n    else:\n        return None\n",
    "MbppEval/785": "def tuple_str_int(test_str):\n    str_elements = test_str.replace('(', '').replace(')', '').split(',')\n    int_elements = tuple(int(elem.strip()) for elem in str_elements)\n    return int_elements\n",
    "MbppEval/782": "def odd_length_sum(arr):\n    result = 0\n    n = len(arr)\n    for start in range(n):\n        for end in range(start, n):\n            sub_arr = arr[start:end+1]\n            if len(sub_arr) % 2 == 1:\n                sub_arr_sum = sum(sub_arr)\n                result += sub_arr_sum\n    return result\n",
    "MbppEval/786": "import bisect\n\ndef right_insertion(a, x):\n    if not a:\n        return 0\n    \n    return bisect.bisect_right(a, x)\n",
    "MbppEval/787": "import re\n\ndef text_match_three(text):\n    pattern = r'ab{3}'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
    "MbppEval/788": "def new_tuple(test_list, test_str):\n    new_list = test_list.copy()\n    new_list.append(test_str)\n    return tuple(new_list)\n",
    "MbppEval/791": "def remove_nested(test_tup):\n    new_tup = ()\n    \n    for element in test_tup:\n        if not isinstance(element, tuple):\n            new_tup += (element,)\n    \n    return new_tup\n",
    "MbppEval/792": "def count_list(input_list): \n    count = 0\n    \n    for element in input_list:\n        if isinstance(element, list):\n            count += 1\n            \n    return count\n",
    "MbppEval/747": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. \n    Examples:\n    lcs_of_three('AGGT12', '12TXAYB', '12XBA', 6, 7, 5) == 2\n    lcs_of_three('Reels', 'Reelsfor', 'ReelsforReels', 5, 8, 13) == 5\n    lcs_of_three('abcd1e2', 'bc12ea', 'bd1ea', 7, 6, 5) == 3\n    '''\n    \n    def lcs(X, Y, Z, m, n, o):\n        dp = [[[0 for _ in range(o+1)] for _ in range(n+1)] for _ in range(m+1)]\n        \n        for i in range(1, m+1):\n            for j in range(1, n+1):\n                for k in range(1, o+1):\n                    if X[i-1] == Y[j-1] == Z[k-1]:\n                        dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                    else:\n                        dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n        \n        return dp[m][n][o]\n    \n    return lcs(X, Y, Z, len(X), len(Y), len(Z))\n",
    "MbppEval/790": "def even_position(nums):\n    even_position_all_even = True\n    \n    for index, num in enumerate(nums):\n        if index % 2 == 0:\n            if num % 2 != 0:\n                even_position_all_even = False\n                break\n                \n    return even_position_all_even\n\n# Test the function\nprint(even_position([3, 2, 1]))\nprint(even_position([1, 2, 3]))\nprint(even_position([2, 1, 4]))\n",
    "MbppEval/793": "def last(arr, x, n):\n    idx = -1\n    for i in range(n):\n        if arr[i] == x:\n            idx = i\n    return idx\n",
    "MbppEval/794": "import re\ndef text_starta_endb(text):\n    pattern = r'a.*b$'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
    "MbppEval/796": "def return_sum(dict):\n    total_sum = sum(dict.values())\n    \n    return total_sum\n",
    "MbppEval/800": "import re\n\ndef remove_all_spaces(text):\n    return re.sub(r'\\s+', '', text)\n",
    "MbppEval/799": "def left_rotate(n, d):\n    binary_n = bin(n)[2:].zfill(32)\n    rotated_binary = binary_n[d:] + binary_n[:d]\n    result = int(rotated_binary, 2)\n    return result\n\nprint(left_rotate(16, 2))\nprint(left_rotate(10, 2))\nprint(left_rotate(99, 3))\n",
    "MbppEval/797": "def sum_odd(n): \n    sum_odd_numbers = 0\n\n    for i in range(1, n+1):\n        if i % 2 != 0:  # Check if the number is odd\n            sum_odd_numbers += i\n    \n    return sum_odd_numbers\n",
    "MbppEval/798": "def _sum(arr):\n    total_sum = 0\n\n    for elem in arr:\n        total_sum += elem\n\n    return total_sum\n",
    "MbppEval/803": "import math\n\ndef is_perfect_square(n):\n    square_root = math.sqrt(n)\n    if square_root.is_integer():\n        return True\n    else:\n        return False\n",
    "MbppEval/802": "def count_rotation(arr):   \n    # Step 0: Check if the array is empty\n    if not arr:\n        return 0\n    \n    # Step 1: Find the index of the minimum element in the array\n    min_index = arr.index(min(arr))\n    \n    # Step 2: Return the number of rotations required\n    return len(arr) - min_index\n\n# Test the function with given examples\nprint(count_rotation([3, 2, 1]))  # Expected output: 1\nprint(count_rotation([4, 5, 1, 2, 3]))  # Expected output: 2\nprint(count_rotation([7, 8, 9, 1, 2, 3]))  # Expected output: 3\n",
    "MbppEval/801": "def test_three_equal(x, y, z):\n    if x == y == z:\n        return 3\n    elif x == y or x == z or y == z:\n        return 2\n    else:\n        return 0\n",
    "MbppEval/804": "def is_product_even(arr): \n    product = 1\n    for num in arr:\n        product *= num\n    \n    return product % 2 == 0\n",
    "MbppEval/807": "def first_odd(nums):\n    if not nums:\n        return None\n    \n    for num in nums:\n        if num % 2 != 0:\n            return num\n",
    "MbppEval/808": "def check_K(test_tup, K):\n    if K in test_tup:\n        return True\n    return False\n",
    "MbppEval/809": "def check_smaller(test_tup1, test_tup2):\n    for i in range(len(test_tup1)):\n        if test_tup1[i] <= test_tup2[i]:\n            return False\n    return True\n",
    "MbppEval/806": "def max_run_uppercase(test_str):\n    max_run = 0\n    current_run = 0\n    \n    for char in test_str:\n        if char.isupper():  \n            current_run += 1  \n        else:\n            max_run = max(max_run, current_run)\n            current_run = 0\n            \n    max_run = max(max_run, current_run)\n    \n    return max_run\n",
    "MbppEval/805": "def max_sum_list(lists):\n    max_sum = 0\n    max_list = []\n\n    for lst in lists:\n        list_sum = sum(lst)\n        \n        if list_sum > max_sum:\n            max_sum = list_sum\n            max_list = lst\n\n    return max_list\n",
    "MbppEval/783": "def rgb_to_hsv(r, g, b):\n    # Step 0: Convert RGB values to the range 0 to 1\n    r /= 255.0\n    g /= 255.0\n    b /= 255.0\n\n    # Step 1: Find the maximum and minimum values among the normalized RGB values\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n\n    # Step 2: Calculate the value (V) as the maximum among the normalized RGB values\n    V = max_value\n\n    # Step 3: Calculate the saturation (S)\n    S = 0 if V == 0 else (V - min_value) / V\n\n    # Step 4: Calculate the hue (H) depending on which color component is the maximum\n    if V == min_value:\n        H = 0\n    elif V == r:\n        H = 60 * ((g - b) / (V - min_value)) % 360\n    elif V == g:\n        H = 60 * (2 + (b - r) / (V - min_value)) % 360\n    else:\n        H = 60 * (4 + (r - g) / (V - min_value)) % 360\n\n    # Step 6: Adjust hue if it is negative, add 360 to make it fall within the range of 0 to 360\n    if H < 0:\n        H += 360\n\n    return H, S, V\n",
    "MbppEval/160": "def find_solution(a, b, n):\n    if a == 0:\n        if b != 0 and n % b == 0:\n            return (0, n // b)\n        else:\n            return None\n    if b == 0:\n        if a != 0 and n % a == 0:\n            return (n // a, 0)\n        else:\n            return None\n",
    "MbppEval/588": "def big_diff(nums):\n    max_val = max(nums)\n    min_val = min(nums)\n    return max_val - min_val\n",
    "MbppEval/414": "def overlapping(list1, list2):\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False\n",
    "MbppEval/132": "def tup_string(tup1):\n    return ''.join(tup1)\n",
    "MbppEval/310": "def string_to_tuple(str1):\n    return tuple(str1)\n",
    "MbppEval/67": "def bell_number(n):   \n    bell_triangle = [[1]]\n\n    for i in range(1, n):\n        row = [bell_triangle[i - 1][0]]\n\n        for j in range(1, i + 1):\n            row.append(row[j - 1] + bell_triangle[i - 1][j - 1])\n\n        bell_triangle.append(row)\n\n    return bell_triangle[-1][-1]\n",
    "MbppEval/70": "def find_equal_tuple(Input, length):\n    for tuple_ in Input:\n        if len(tuple_) != length:\n            return 'All tuples do not have same length'\n    return 'All tuples have same length'\n",
    "MbppEval/274": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    sum_even = 0\n    for i in range(0, n+1, 2):\n        sum_even += math.comb(n, i)\n    return sum_even\n",
    "MbppEval/558": "def digit_distance_nums(n1, n2):\n    str_n1 = str(n1)\n    str_n2 = str(n2)\n    \n    total_distance = 0\n    \n    for digit1, digit2 in zip(str_n1, str_n2):\n        total_distance += abs(int(digit1) - int(digit2))\n    \n    return total_distance\n",
    "MbppEval/116": "def tuple_to_int(nums):\n    result_str = ''\n\n    for num in nums:\n        result_str += str(num)\n        \n    int_val = int(result_str)\n    \n    return int_val\n",
    "MbppEval/733": "def find_first_occurrence(A, x):\n    index = -1  # Initializing index to -1\n    \n    for i, num in enumerate(A):\n        if num == x and index == -1:\n            index = i  # Updating the index to the current index\n    \n    return index\n",
    "MbppEval/433": "def check_greater(arr, number):\n    is_greater = False\n    \n    for elem in arr:\n        if number > elem:\n            is_greater = True\n    \n    if is_greater:\n        return 'Yes, the entered number is greater than those in the array'\n    else:\n        return 'No, entered number is less than those in the array'\n",
    "MbppEval/83": "def get_Char(strr):\n    total_sum = 0\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\n    for char in strr:\n        total_sum += ord(char)\n    \n    index = total_sum % 26\n    return alphabet[index]\n",
    "MbppEval/286": "def max_sub_array_sum_repeated(a, n, k):\n    # Step 1: Concatenate the given array a k times to form the modified array\n    modified_array = a * k\n    \n    # Step 2: Find the largest sum of a contiguous subarray\n    max_sum = current_sum = modified_array[0]\n    \n    for num in modified_array[1:]:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum\n\n# Test the function\nprint(max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3))  # Output: 30\n",
    "MbppEval/622": "def get_median(arr1, arr2, n):\n    merged_list = arr1 + arr2\n    sorted_merged_list = sorted(merged_list)\n    middle_index = n // 2\n    if n % 2 == 1:\n        return sorted_merged_list[middle_index]\n    else:\n        return (sorted_merged_list[middle_index - 1] + sorted_merged_list[middle_index]) / 2\n",
    "MbppEval/97": "def frequency_lists(list1):\n    frequency_dict = {}\n\n    for sublist in list1:\n        for element in sublist:\n            if element in frequency_dict:\n                frequency_dict[element] += 1\n            else:\n                frequency_dict[element] = 1\n    \n    return frequency_dict\n",
    "MbppEval/461": "def upper_ctr(input_str):\n    count = 0\n    for char in input_str:\n        if char.isupper():\n            count += 1\n    return count\n",
    "MbppEval/141": "def pancake_sort(nums):\n    def flip(nums, k):\n        start = 0\n        while start < k:\n            nums[start], nums[k] = nums[k], nums[start]\n            start += 1\n            k -= 1\n\n    n = len(nums)\n    for i in range(n - 1, 0, -1):\n        max_index = nums.index(max(nums[:i + 1]))\n        if max_index != i:\n            flip(nums, max_index)\n            flip(nums, i)\n\n    return nums\n",
    "MbppEval/161": "def remove_elements(list1, list2):\n    result = []\n    \n    for elem in list1:\n        if elem not in list2:\n            result.append(elem)\n    \n    return result\n",
    "MbppEval/408": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    result = []\n    \n    pairs = [[num1, num2] for num1 in nums1 for num2 in nums2]\n    \n    heap = []\n    for pair in pairs:\n        heapq.heappush(heap, (pair[0] + pair[1], pair))\n        if len(heap) > k:\n            heapq.heappop(heap)\n    \n    result = [pair[1] for pair in heap]\n    \n    return result\n",
    "MbppEval/117": "def list_to_float(test_list):\n    converted_list = []\n\n    for tup in test_list:\n        converted_tup = []\n\n        for elem in tup:\n            try:\n                converted_elem = float(elem)\n            except ValueError:\n                converted_elem = elem\n            converted_tup.append(converted_elem)\n\n        converted_list.append(tuple(converted_tup))\n\n    return converted_list\n",
    "MbppEval/291": "def count_no_of_ways(n, k): \n    total_ways = k * k\n    dp_same = k\n    dp_diff = k\n    \n    for i in range(3, n+1):\n        new_dp_same = dp_diff\n        new_dp_diff = (dp_same + dp_diff) * (k-1)\n        dp_same = new_dp_same\n        dp_diff = new_dp_diff\n        \n    return dp_same + dp_diff\n",
    "MbppEval/166": "def find_even_pair(A): \n    count = 0\n    \n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_result = A[i] ^ A[j]  # XOR operation\n            if xor_result % 2 == 0:\n                count += 1\n                \n    return count\n",
    "MbppEval/428": "def shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n",
    "MbppEval/771": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    \n    for char in exp:\n        if char in \"([{\":\n            stack.append(char)\n    \n    for char in exp:\n        if char in \")]}\":\n            if not stack:\n                return False\n            \n            if char == \")\" and stack[-1] == \"(\":\n                stack.pop()\n            elif char == \"}\" and stack[-1] == \"{\":\n                stack.pop()\n            elif char == \"]\" and stack[-1] == \"[\":\n                stack.pop()\n    \n    return not stack\n",
    "MbppEval/578": "def interleave_lists(list1, list2, list3):\n    if len(list1) == len(list2) == len(list3):\n        result = []\n        for i in range(len(list1)):\n            result.append(list1[i])\n            result.append(list2[i])\n            result.append(list3[i])\n        return result\n    else:\n        return \"Error: All lists must be of the same length.\"\n",
    "MbppEval/239": "def generate_sequences(m, n, sequence=[], start=1):\n    if len(sequence) == n:\n        return [sequence]\n    sequences = []\n    for i in range(start, m+1):\n        sequences.extend(generate_sequences(m, n, sequence + [i], 2*i))\n    return sequences\n\ndef get_total_number_of_sequences(m, n):\n    def helper(m, n, sequence=[], start=1):\n        if len(sequence) == n:\n            return [sequence]\n        sequences = []\n        for i in range(start, m+1):\n            sequences.extend(helper(m, n, sequence + [i], 2 * i))\n        return sequences\n    \n    valid_sequences = [sequence for sequence in helper(m, n) if all(sequence[i] >= 2 * sequence[i-1] for i in range(1, len(sequence)))]\n    return len(valid_sequences)\n",
    "MbppEval/301": "def dict_depth(d, depth=1):\n    if isinstance(d, dict):\n        max_depth = 0\n        for value in d.values():\n            if isinstance(value, dict):\n                max_depth = max(max_depth, dict_depth(value, depth + 1))\n        return max_depth + depth\n    return depth\n",
    "MbppEval/66": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n",
    "MbppEval/142": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(min(len(list1), len(list2), len(list3))):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n",
    "MbppEval/260": "def newman_prime(n): \n    coefficients = expand_expression(n)\n    return coefficients[2**n]\n\ndef expand_expression(n):\n    coefficients = [1]  # Initial coefficient\n    for _ in range(2**n):\n        new_coefficients = [0] * (len(coefficients) + 2)\n        for i in range(len(coefficients)):\n            new_coefficients[i] += coefficients[i]  # Coefficient for x^0\n            new_coefficients[i+1] += coefficients[i]  # Coefficient for x^1\n            new_coefficients[i+2] += coefficients[i]  # Coefficient for x^2\n        coefficients = new_coefficients\n    return coefficients\n",
    "MbppEval/11": "def remove_Occ(s, ch): \n    '''\n    Remove the first and last occurrence of a given character from the string.\n\n    Parameters:\n    s (str): Input string\n    ch (str): Character to be removed\n\n    Returns:\n    str: Updated string after removing first and last occurrences of specified character\n    '''\n    first_occurrence = s.find(ch)\n    last_occurrence = s.rfind(ch)\n\n    if first_occurrence != -1:\n        s = s[:first_occurrence] + s[first_occurrence+1:]\n\n        if last_occurrence != first_occurrence:\n            s = s[:last_occurrence] + s[last_occurrence+1:]\n\n    return s\n",
    "MbppEval/259": "def maximize_elements(test_tup1, test_tup2):\n    result = []\n    for i in range(len(test_tup1)):\n        tuple_max = ()\n        for j in range(len(test_tup1[i])):\n            tuple_max += (max(test_tup1[i][j], test_tup2[i][j]),)\n        result.append(tuple_max)\n    return tuple(result)\n",
    "MbppEval/407": "def rearrange_bigger(n):\n    digits = [int(d) for d in str(n)]\n    for i in range(len(digits)-1, 0, -1):\n        if digits[i-1] < digits[i]:\n            smaller_digit_index = i - 1\n            break\n    else:\n        return False\n    for j in range(len(digits)-1, smaller_digit_index, -1):\n        if digits[j] > digits[smaller_digit_index]:\n            bigger_digit_index = j\n            break\n    digits[smaller_digit_index], digits[bigger_digit_index] = digits[bigger_digit_index], digits[smaller_digit_index]\n    digits[smaller_digit_index+1:] = sorted(digits[smaller_digit_index+1:])\n    result = int(''.join(map(str, digits)))\n    return result\n",
    "MbppEval/129": "def magic_square_test(my_matrix):\n    num_rows = len(my_matrix)\n    num_cols = len(my_matrix[0]) if num_rows > 0 else 0\n    if num_rows != num_cols:\n        return False\n\n    expected_sum = sum(my_matrix[0])\n\n    for row in my_matrix:\n        if len(row) != num_cols:\n            return False\n\n        row_sum = sum(row)\n        if row_sum != expected_sum:\n            return False\n\n    for col_idx in range(num_cols):\n        col_sum = sum(row[col_idx] for row in my_matrix)\n        if col_sum != expected_sum:\n            return False\n\n    diagonal_sum = sum(my_matrix[i][i] for i in range(num_cols))\n    if diagonal_sum != expected_sum:\n        return False\n\n    secondary_diagonal_sum = sum(my_matrix[i][num_cols - 1 - i] for i in range(num_cols))\n    if secondary_diagonal_sum != expected_sum:\n        return False\n\n    return True\n"
}