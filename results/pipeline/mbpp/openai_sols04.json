{
    "MbppEval/64": "",
    "MbppEval/77": "def is_Diff(n):\n    even_sum = 0\n    odd_sum = 0\n    str_n = str(n)\n    \n    for i in range(len(str_n)):\n        if i % 2 == 0:\n            even_sum += int(str_n[i])\n        else:\n            odd_sum += int(str_n[i])\n    \n    return abs(even_sum - odd_sum) % 11 == 0\n",
    "MbppEval/19": "def test_duplicate(arraynums):\n    unique_nums = set()\n\n    for num in arraynums:\n        if num in unique_nums:\n            return True\n        unique_nums.add(num)\n\n    return False\n",
    "MbppEval/17": "def square_perimeter(a):\n    return 4 * a\n",
    "MbppEval/58": "def opposite_signs(x, y):\n    if x * y < 0:\n        return True\n    return False\n",
    "MbppEval/82": "import math\n\ndef volume_sphere(r):\n    return (4/3) * math.pi * r**3\n",
    "MbppEval/59": "def is_octagonal(n):\n    octagonal_number = 2 * n**2 - n\n    return octagonal_number\n",
    "MbppEval/89": "def closest_num(N):\n    closest_smaller_num = N - 1\n    return closest_smaller_num\n",
    "MbppEval/84": "def sequence(n):\n    dp = [0, 1, 1] + [0] * (n - 2)\n    \n    for i in range(3, n + 1):\n        dp[i] = dp[dp[i-1]] + dp[i - dp[i-1]]\n    \n    return dp[n]\n",
    "MbppEval/20": "def is_woodall(x): \n    if x <= 1:\n        return False\n    \n    n = 1\n    while n * (2 ** n - 1) < x:\n        n += 1\n    \n    if x == n * (2 ** n - 1):\n        return True\n    else:\n        return False\n",
    "MbppEval/86": "def centered_hexagonal_number(n):\n    return n * (2*n - 1)\n",
    "MbppEval/85": "import math\n\ndef surfacearea_sphere(r):\n    sa = 4 * math.pi * r**2\n    return sa\n",
    "MbppEval/57": "def find_Max_Num(arr):\n    arr.sort(reverse=True)\n    return int(''.join(map(str, arr)))\n",
    "MbppEval/79": "def word_len(s):\n    length = len(s)\n    is_odd = length % 2 != 0\n    return is_odd\n",
    "MbppEval/9": "def find_Rotations(str): \n    n = len(str)\n    for i in range(1, n):\n        rotated_str = str[i:] + str[:i]\n        if rotated_str == str:\n            return i\n    return -1\n",
    "MbppEval/2": "def similar_elements(test_tup1, test_tup2):\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    shared_elements = tuple(set1 & set2)\n    return shared_elements\n",
    "MbppEval/101": "def kth_element(arr, k):\n    if k < 1 or k > len(arr):\n        return None\n    \n    return arr[k-1]\n",
    "MbppEval/7": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w+\\b', text)\n    filtered_words = [word for word in words if len(word) >= 4]\n    return filtered_words\n",
    "MbppEval/66": "def pos_count(lst):\n    count = 0\n\n    for num in lst:\n        if num > 0:\n            count += 1\n\n    return count\n",
    "MbppEval/67": "def bell_number(n):\n    bell_numbers = [0] * (n + 1)  # Initialize a list to store the Bell numbers\n    bell_numbers[0] = 1  # Set the first Bell number as 1\n    \n    for i in range(1, n + 1):\n        bell_numbers[i] = 0  # Initialize each Bell number as 0\n    \n    return bell_numbers[n]\n",
    "MbppEval/105": "    return count\n",
    "MbppEval/56": "def check(num):    \n    num_str = str(num)\n    \n    # Reverse the string\n    reversed_num_str = num_str[::-1]\n    \n    # Convert the reversed string back to an integer\n    reversed_num = int(reversed_num_str)\n    \n    # Check if the given number is one less than twice its reverse\n    if num == 2*reversed_num + 1:\n        return True\n    else:\n        return False\n",
    "MbppEval/106": "def add_lists(test_list, test_tup):\n    new_list = list(test_tup) + test_list\n    new_tuple = tuple(new_list)\n    return new_tuple\n",
    "MbppEval/68": "def is_Monotonic(A):\n    return all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or all(A[i] >= A[i + 1] for i in range(len(A) - 1))\n",
    "MbppEval/62": "def smallest_num(xs):\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    \n    return smallest\n",
    "MbppEval/113": "def check_integer(text):\n    if not text:\n        return False\n\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
    "MbppEval/98": "def multiply_num(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result\n",
    "MbppEval/80": "def tetrahedral_number(n):\n    tn = (n * (n + 1) * (n + 2)) / 6\n    return float(tn)\n",
    "MbppEval/70": "def find_equal_tuple(Input, length):\n    all_lengths = [len(t) for t in Input]\n    \n    if all(length == l for l in all_lengths):\n        return 'All tuples have same length'\n    else:\n        return 'All tuples do not have same length'\n",
    "MbppEval/115": "def empty_dit(list1):\n    for dictionary in list1:\n        if not isinstance(dictionary, dict):\n            return False\n        if len(dictionary) != 0:\n            return False\n    return True\n",
    "MbppEval/119": "def search(arr):\n    index = 0\n    n = len(arr)\n    \n    while index < n:\n        if index == n - 1 or arr[index] != arr[index + 1]:\n            return arr[index]\n        \n        index += 2\n",
    "MbppEval/118": "def string_to_list(string):\n    return string.split()\n",
    "MbppEval/116": "def tuple_to_int(nums):\n    num_str = [str(num) for num in nums]\n    combined_str = ''.join(num_str)\n    final_int = int(combined_str)\n    return final_int\n",
    "MbppEval/74": "def is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n\n    color_to_pattern = {}\n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            if pattern in color_to_pattern.values():\n                return False\n            color_to_pattern[color] = pattern\n\n    return True\n",
    "MbppEval/124": "import cmath\n\ndef angle_complex(a, b):\n    return cmath.phase(complex(a, b))\n",
    "MbppEval/18": "    return ''.join(new_list)\n",
    "MbppEval/95": "def Find_Min_Length(lst):\n    min_length = float('inf')\n    \n    for sub_list in lst:\n        if len(sub_list) < min_length:\n            min_length = len(sub_list)\n    \n    return min_length\n",
    "MbppEval/127": "def multiply_int(x, y):\n    result = x * y\n    return result\n",
    "MbppEval/63": "def max_difference(test_list):\n    max_diff = 0\n\n    for pair in test_list:\n        diff = abs(pair[0] - pair[1])\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff\n",
    "MbppEval/128": "def long_words(n, s):\n    words = s.split()\n    long_words_list = [word for word in words if len(word) > n]\n    return long_words_list\n",
    "MbppEval/69": "def is_sublist(l, s):\n    if len(s) > len(l):\n        return False\n\n    for i in range(len(l) - len(s) + 1):\n        sublist = l[i:i+len(s)]\n        \n        if sublist == s:\n            return True\n    \n    return False\n",
    "MbppEval/4": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num)  # Using negative values for max heap\n\n    while len(heap) > n:\n        hq.heappop(heap)\n\n    return [-hq.heappop(heap) for _ in range(n)]\n",
    "MbppEval/87": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n\n    for d in (dict1, dict2, dict3):\n        merged_dict.update(d)\n    \n    return merged_dict\n",
    "MbppEval/130": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    freq_dict = defaultdict(int)\n    \n    for num in nums:\n        freq_dict[num] += 1\n    \n    max_element = max(freq_dict, key=freq_dict.get)\n    max_freq = freq_dict[max_element]\n    \n    return (max_element, max_freq)\n",
    "MbppEval/132": "def tup_string(tup1):\n    return ''.join(map(str, tup1))\n",
    "MbppEval/135": "def hexagonal_num(n): \n    if not isinstance(n, int) or n <= 0:\n        return \"Input must be a positive integer\"\n    else:\n        hexagonal_number = n * (2 * n - 1)\n        return hexagonal_number\n",
    "MbppEval/104": "def sort_sublists(input_list):\n    sorted_sublists = []\n    for sublist in input_list:\n        sorted_sublist = sorted(sublist)\n        sorted_sublists.append(sorted_sublist)\n    \n    return sorted_sublists\n",
    "MbppEval/133": "def sum_negativenum(nums):\n    neg_sum = 0\n    \n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    \n    return neg_sum\n",
    "MbppEval/139": "import math\n\ndef circle_circumference(r):\n    pi = math.pi\n    circumference = 2 * pi * r\n    return circumference\n",
    "MbppEval/138": "def is_Sum_Of_Powers_Of_Two(n):\n    power_of_2 = 0\n    \n    while 2**power_of_2 <= n:\n        power_of_2 += 1\n    \n    power_of_2 -= 1  # Move back to the last valid power of 2\n\n    while power_of_2 >= 0:\n        if n >= 2**power_of_2:\n            n -= 2**power_of_2\n            if n == 0:\n                return True\n        power_of_2 -= 1\n\n    return False\n",
    "MbppEval/129": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n    if n == 0:\n        return False  # Empty matrix is not a magic square\n        \n    # Calculate sum of the first row\n    sum_row = sum(my_matrix[0])\n    \n    # Check sum of the rows\n    for i in range(1, n):\n        if sum(my_matrix[i]) != sum_row:\n            return False  # Rows don't have the same sum\n            \n    # Check sum of the columns\n    for i in range(n):\n        col_sum = sum(row[i] for row in my_matrix)\n        if col_sum != sum_row:\n            return False  # Columns don't have the same sum\n    \n    # Check sum of the diagonals\n    diag_sum1 = sum(my_matrix[i][i] for i in range(n))\n    diag_sum2 = sum(my_matrix[i][n-1-i] for i in range(n))\n    if diag_sum1 != sum_row or diag_sum2 != sum_row:\n        return False  # Diagonals don't have the same sum\n        \n    # Check if all sums are equal\n    if sum_row != diag_sum1 or sum_row != diag_sum2:\n        return False  # Sums are not equal\n        \n    return True  # Matrix is a magic square\n",
    "MbppEval/16": "import re\n\ndef text_lowercase_underscore(text):\n    if re.search(r'\\b[a-z]+_[a-z]+\\b', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
    "MbppEval/145": "def max_Abs_Diff(arr): \n    max_val = max(arr)\n    min_val = min(arr)\n    return abs(max_val - min_val)\n",
    "MbppEval/143": "def find_lists(Input):\n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    \n    return count\n",
    "MbppEval/137": "from array import array\n\ndef zero_count(nums):\n    zero_count = 0\n    non_zero_count = 0\n\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n\n    ratio = round(zero_count / non_zero_count, 2) if non_zero_count > 0 else 0.00\n\n    return ratio\n",
    "MbppEval/163": "from math import tan, pi\n\ndef area_polygon(s, n):\n    a = s / (2 * tan(pi / n))\n    area = 0.5 * n * s * a\n    return area\n",
    "MbppEval/90": "def len_log(list1):\n    max_length = 0\n    \n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    \n    return max_length\n",
    "MbppEval/162": "def sum_series(n):\n    total_sum = 0\n    for i in range(n // 2):\n        value = n - 2*i\n        total_sum += value\n        \n    return total_sum\n\n# Test the function with some example inputs\nprint(sum_series(6))  # Expected output: 12\nprint(sum_series(10))  # Expected output: 30\nprint(sum_series(9))  # Expected output: 25\n",
    "MbppEval/8": "def square_nums(nums):\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result\n",
    "MbppEval/125": "def find_length(string):\n    max_diff = 0\n    \n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            count_0 = 0\n            count_1 = 0\n            for k in range(i, j+1):\n                if string[k] == '0':\n                    count_0 += 1\n                else:\n                    count_1 += 1\n            diff = abs(count_0 - count_1)\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff\n",
    "MbppEval/166": "",
    "MbppEval/167": "def next_power_of_2(n): \n    power_of_2 = 1\n    \n    if n > 0:\n        while power_of_2 < n:\n            power_of_2 *= 2\n    \n    return power_of_2\n",
    "MbppEval/142": "def count_samepair(list1, list2, list3):\n    count = 0\n    if len(list1) != len(list2) or len(list1) != len(list3):\n        raise ValueError(\"Input lists must be of the same length\")\n    \n    for item1, item2, item3 in zip(list1, list2, list3):\n        if item1 == item2 == item3:\n            count += 1\n    \n    return count\n",
    "MbppEval/168": "def frequency(a, x):\n    count = 0\n    \n    for num in a:\n        if num == x:\n            count += 1\n            \n    return count\n",
    "MbppEval/171": "import math\ndef perimeter_pentagon(a):\n    # Calculate the perimeter of a regular pentagon\n    perimeter = 5 * a\n    return perimeter\n",
    "MbppEval/170": "def sum_range_list(list1, m, n):\n    if m < 0 or n > len(list1):\n        return \"Indices are out of range\"\n\n    sublist = list1[m:n + 1]\n    sublist_sum = sum(sublist)\n\n    return sublist_sum\n",
    "MbppEval/223": "from collections import Counter\n\ndef is_majority(arr, n, x):\n    if n % 2 == 0:\n        return False\n    \n    count_x = arr.count(x)\n    if count_x > n // 2:\n        return True\n    return False\n\n# Test the function\nprint(is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3))  # Expected output: True\n",
    "MbppEval/224": "def count_Set_Bits(n):\n    count = 0\n\n    while n > 0:\n        if n & 1:\n            count += 1\n        \n        n = n >> 1\n\n    return count\n",
    "MbppEval/14": "def find_Volume(l, b, h):\n    base_area = 0.5 * l * b\n    volume = base_area * h\n    return volume\n",
    "MbppEval/227": "def min_of_three(a, b, c):\n    min_num = a if a < b else b\n    min_num = c if c < min_num else min_num\n    return min_num\n",
    "MbppEval/12": "def sort_matrix(M):\n    row_sums = []\n    row_to_sum = {}\n    for row in M:\n        row_sum = sum(row)\n        row_sums.append(row_sum)\n        row_to_sum[row_sum] = row\n\n    sorted_keys = sorted(row_to_sum.keys())\n    sorted_matrix = [row_to_sum[key] for key in sorted_keys]\n\n    return sorted_matrix\n",
    "MbppEval/228": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    bits_in_range = get_bits_in_range(n, l, r)\n    return bits_in_range == 0\n",
    "MbppEval/226": "def odd_values_string(str):\n    result = ''  # Step 2: Create an empty string variable to store the result\n    \n    for i in range(len(str)):  # Step 3: Iterate over the characters in the input string using a loop\n        if i % 2 == 0:  # Step 4: Check if the index of the character is even\n            result += str[i]  # Step 5: Add the character to the result string\n    \n    return result  # Step 5: Finally, return the result string\n",
    "MbppEval/230": "def replace_blank(str1, char):\n    return str1.replace(' ', char)\n",
    "MbppEval/233": "import math\n\ndef lateralsuface_cylinder(r, h):\n    return 2 * math.pi * r * h\n",
    "MbppEval/232": "import heapq\n\ndef larg_nnum(list1, n):\n    n_largest = []\n    heap = []\n\n    for ele in list1:\n        heapq.heappush(heap, ele)\n        if len(heap) > n:\n            heapq.heappop(heap)\n\n    return heap\n",
    "MbppEval/234": "def volume_cube(l):\n    volume = l ** 3\n    return volume\n",
    "MbppEval/229": "def re_arrange_array(arr, n):\n    rearranged_arr = []\n    \n    # Step 1: Traverse the array from the beginning to n\n    for i in range(n):\n        # Step 2: Check for negative elements and append them to the new list\n        if arr[i] < 0:\n            rearranged_arr.append(arr[i])\n    \n    # Step 3: Traverse the array from the beginning to n again\n    for i in range(n):\n        # Step 4: Check for positive elements and append them to the new list\n        if arr[i] >= 0:\n            rearranged_arr.append(arr[i])\n    \n    return rearranged_arr\n",
    "MbppEval/235": "def even_bit_set_number(n): \n    input_number = n\n    mask = 0b1010101010101010\n    result = input_number | mask\n    return result\n",
    "MbppEval/237": "def check_occurrences(test_list):\n    occurrences = {}\n    \n    for item in test_list:\n        key = tuple(sorted(item))\n        if key in occurrences:\n            occurrences[key] += 1\n        else:\n            occurrences[key] = 1\n\n    return occurrences\n",
    "MbppEval/240": "def replace_list(list1, list2):\n    last_element_list1 = list1[-1]\n    list1.pop()\n    list1.extend(list2)\n    return list1\n",
    "MbppEval/238": "def number_of_substrings(s):\n    count = 0\n    n = len(s)\n    count = n * (n + 1) // 2\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            count += 1\n    return count\n",
    "MbppEval/65": "def recursive_list_sum(data_list):\n    total_sum = 0\n    for element in data_list:\n        if isinstance(element, int):\n            total_sum += element\n        elif isinstance(element, list):\n            total_sum += recursive_list_sum(element)\n    return total_sum\n",
    "MbppEval/244": "import math\n\ndef next_Perfect_Square(N):\n    square_root = math.sqrt(N)\n    next_int = int(square_root) + 1\n    next_square = next_int ** 2\n    return next_square\n",
    "MbppEval/242": "def count_charac(str1):\n    count = 0  # Step 2: Initialize a variable count to 0 to keep track of the count of characters\n\n    for char in str1:\n        count += 1\n        # Step 3: Loop through each character in the input string\n\n    # Step 4: For each character, increment the count by 1\n\n    return count\n",
    "MbppEval/246": "def babylonian_squareroot(number):\n    guess = 1\n    tolerance = 0.000001\n    diff = tolerance + 1\n    \n    while diff > tolerance:\n        new_guess = 0.5 * (guess + number / guess)\n        diff = abs(guess - new_guess)\n        guess = new_guess\n        \n    return guess\n",
    "MbppEval/245": "import numpy as np\n\ndef max_sum(arr):\n    dp = np.zeros(len(arr))\n    increasing_dp = np.zeros(len(arr))\n    decreasing_dp = np.zeros(len(arr))\n\n    for i in range(len(arr)):\n        dp[i] = arr[i]  # Initialize the value with the element itself\n        for j in range(i):\n            if arr[j] < arr[i]:  # If the element at j can be appended to the subsequence ending at i\n                dp[i] = max(dp[i], dp[j] + arr[i])  # Update to the maximum sum\n\n    return dp\n",
    "MbppEval/249": "    return sorted(list(intersection_set))\n",
    "MbppEval/248": "def harmonic_sum(n):\n    if n <= 1:\n        return 0\n    \n    total = 0\n    for i in range(1, n):\n        total += 1 / i\n        \n    return total\n",
    "MbppEval/247": "def lps(s):\n    n = len(s)\n    if n == 0:\n        return 0\n    \n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    \n    for i in range(n):\n        dp[i][i] = 1\n    \n    for l in range(2, n+1):\n        for i in range(n-l+1):\n            j = i + l - 1\n            if s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    \n    return dp[0][n-1]\n",
    "MbppEval/251": "def insert_element(list, element):\n    result = []\n    for item in list:\n        result.append(element + item)\n    return result\n",
    "MbppEval/252": "import cmath\n\ndef convert(numbers):\n    if isinstance(numbers, (int, float)):\n        complex_number = complex(numbers)\n    elif isinstance(numbers, complex):\n        complex_number = numbers\n    else:\n        raise ValueError(\"Input must be a real or complex number.\")\n    \n    return cmath.polar(complex_number)\n",
    "MbppEval/161": "def remove_elements(list1, list2):\n    new_list = []\n    \n    for element in list1:\n        if element not in list2:\n            new_list.append(element)\n    \n    return new_list\n",
    "MbppEval/257": "def swap_numbers(a, b):\n    result = (b, a)\n    return result\n",
    "MbppEval/256": "def count_Primes_nums(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n            \n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n                \n        return True\n    \n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n            \n    return count\n",
    "MbppEval/253": "def count_integer(list1):\n    count = 0\n    \n    for num in list1:\n        if isinstance(num, int):\n            count += 1\n    \n    return count\n",
    "MbppEval/259": "def maximize_elements(test_tup1, test_tup2):\n    result = []\n    for tup1, tup2 in zip(test_tup1, test_tup2):\n        max_tup = tuple(max(x, y) for x, y in zip(tup1, tup2))\n        result.append(max_tup)\n    return tuple(result)\n",
    "MbppEval/3": "import math\n\ndef is_not_prime(n):\n    if n < 2:\n        return True\n    for i in range(2, math.isqrt(n) + 1):\n        if n % i == 0:\n            return True\n    return False\n",
    "MbppEval/261": "def division_elements(test_tup1, test_tup2):\n    return tuple(ele1 / ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n",
    "MbppEval/262": "def split_two_parts(list1, L):\n    split_parts = []\n    \n    part1 = list1[:L]\n    part2 = list1[L:]\n    \n    split_parts.append(part1)\n    split_parts.append(part2)\n    \n    return tuple(split_parts)\n",
    "MbppEval/264": "def dog_age(h_age):\n    # Step 1: Convert human age to dog years\n    if h_age <= 2:\n        dog_years = h_age * 10.5\n    else:\n        dog_years = 2 * 10.5 + (h_age - 2) * 4\n        \n    return dog_years\n",
    "MbppEval/172": "def count_occurance(s):\n    count = 0\n    for i in range(len(s) - 2):\n        if s[i:i+3] == 'std':\n            count += 1\n    return count\n",
    "MbppEval/268": "def find_star_num(n):\n    result = 1\n    while n > 0:\n        result += 2\n        n -= 1\n    return result\n",
    "MbppEval/266": "def lateralsurface_cube(l):\n    # Step 4: As there are four lateral faces, the lateral surface area is 4 * l^2\n    return 4 * l**2\n",
    "MbppEval/109": "def odd_Equivalent(s, n):\n    count = 0\n\n    if s.count('1') % 2 != 0:\n        count += 1\n\n    for i in range(n):\n        ones_count = s.count('1')\n        if ones_count % 2 != 0:\n            count += 1\n        s = s[1:] + s[0]\n\n    return count\n",
    "MbppEval/269": "def ascii_value(k):\n    return ord(k)\n",
    "MbppEval/267": "def square_Sum(n):  \n    sum_squares = 0\n    odd_number = 1\n\n    for i in range(n):\n        sum_squares += odd_number ** 2\n        odd_number += 2\n\n    return sum_squares\n",
    "MbppEval/270": "def sum_even_and_even_index(arr):  \n    sum_even = 0\n    \n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum_even += arr[i]\n    \n    return sum_even\n",
    "MbppEval/271": "def even_Power_Sum(n): \n    sum_power = 0\n    \n    for i in range(1, n + 1):\n        even_num = 2 * i\n        power = even_num ** 5\n        sum_power += power\n        \n    return sum_power\n",
    "MbppEval/273": "def substract_elements(test_tup1, test_tup2):\n    result = []\n    for i in range(len(test_tup1)):\n        diff = test_tup1[i] - test_tup2[i]\n        result.append(diff)\n    return tuple(result)\n",
    "MbppEval/274": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    total_sum = 0\n\n    for k in range(n + 1):\n        binomial_coefficient = math.comb(n, k)\n        if k % 2 == 0:  # Check if index k is even\n            total_sum += binomial_coefficient\n\n    return total_sum\n",
    "MbppEval/276": "import math\n\ndef volume_cylinder(r, h):\n    volume = math.pi * (r ** 2) * h\n    return round(volume, 14)\n",
    "MbppEval/265": "def list_split(S, step):\n    result = []\n    \n    for i in range(0, step):\n        result.append([])\n    \n    for i in range(0, len(S), step):\n        sublist = S[i:i+step]\n        \n        for j in range(len(sublist)):\n            result[j].append(sublist[j])\n    \n    return result\n",
    "MbppEval/278": "def count_first_elements(test_tup):\n    for index, element in enumerate(test_tup):\n        if isinstance(element, tuple):\n            return index\n    return 0\n",
    "MbppEval/117": "def list_to_float(test_list):\n    converted_list = []\n    \n    for sublist in test_list:\n        converted_sublist = []\n        for element in sublist:\n            try:\n                converted_element = float(element)\n                converted_sublist.append(converted_element)\n            except ValueError:\n                converted_sublist.append(element)\n        \n        converted_list.append(tuple(converted_sublist))\n    \n    return converted_list\n",
    "MbppEval/279": "def is_num_decagonal(n):\n    if not isinstance(n, int) or n <= 0:\n        return None\n\n    decagonal_number = n * (7*n - 5)\n\n    return decagonal_number\n",
    "MbppEval/277": "def dict_filter(dict, n):\n    filtered_dict = {}\n    \n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    \n    return filtered_dict\n",
    "MbppEval/281": "def all_unique(test_list):\n    unique_set = set()\n    \n    for elem in test_list:\n        if elem in unique_set:\n            return False\n        else:\n            unique_set.add(elem)\n    \n    return True\n",
    "MbppEval/284": "def check_element(lst, element):\n    for item in lst:\n        if item != element:\n            return False\n    return True\n",
    "MbppEval/282": "def sub_list(nums1, nums2):\n    result = []\n    for n1, n2 in zip(nums1, nums2):\n        sub = n1 - n2\n        result.append(sub)\n    return result\n",
    "MbppEval/285": "import re\n\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}'\n    \n    if re.match(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
    "MbppEval/283": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\n    Examples:\n    validate(1234) == True\n    validate(51241) == False\n    validate(321) == True\n    '''\n    n_str = str(n)  # Convert the integer n to a string\n    result = True   # Assume the result is True initially\n    \n    for digit in n_str:  # Iterate through each digit in the string\n        digit_count = n_str.count(digit)  # Count the frequency of each digit\n        if digit_count > int(digit):  # Check if the frequency is greater than the digit itself\n            result = False\n            break  # Exit the loop if a digit violates the condition\n    \n    return result\n",
    "MbppEval/287": "def square_Sum(n):  \n    sum_squares = 0\n    even_number = 2\n\n    for i in range(n):\n        square = even_number ** 2\n        sum_squares += square\n        even_number += 2\n\n    return sum_squares\n",
    "MbppEval/280": "def sequential_search(dlist, item):\n    for index, element in enumerate(dlist):\n        if element == item:\n            return (True, index)\n    \n    return (False, -1)\n",
    "MbppEval/291": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\n    Examples:\n    count_no_of_ways(2, 4) == 16\n    count_no_of_ways(3, 2) == 6\n    count_no_of_ways(4, 4) == 228\n    '''\n    \n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n    \n    same_color = k\n    diff_color = k\n    \n    for i in range(3, n+1):\n        prev_same_color = same_color\n        same_color = diff_color\n        diff_color = (prev_same_color + diff_color) * (k - 1)\n    \n    return same_color + diff_color\n",
    "MbppEval/292": "def find(n, m):\n    quotient = n / m\n    rounded_down_quotient = int(quotient)\n    return rounded_down_quotient\n",
    "MbppEval/286": "def max_sub_array_sum_repeated(a, n, k): \n    modified_array = a * k\n    max_sum = float('-inf')\n    \n    # Iterate over all possible subarrays of length n\n    for i in range(len(modified_array) - n + 1):\n        current_sum = sum(modified_array[i:i+n])\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum\n",
    "MbppEval/294": "def max_val(listval):\n    max_value = float('-inf')  # Step 0\n    \n    for elem in listval:\n        if isinstance(elem, (int, float)):\n            if elem > max_value:\n                max_value = elem  # Update max_value if current element is greater\n\n    return max_value\n",
    "MbppEval/250": "def count_X(tup, x):\n    count = 0\n\n    for element in tup:\n        if element == x:\n            count += 1\n\n    return count\n",
    "MbppEval/293": "import math\n\ndef otherside_rightangle(w, h):\n    # Calculate the length of the hypotenuse\n    c = math.sqrt(w**2 + h**2)\n    return c\n\nprint(otherside_rightangle(7, 8))  # Expected output: approximately 10.63014581273465\nprint(otherside_rightangle(3, 4))  # Expected output: 5.0\nprint(otherside_rightangle(7, 15)) # Expected output: approximately 16.55294535724685\n",
    "MbppEval/296": "def get_Inv_Count(arr): \n    inv_count = 0\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    \n    return inv_count\n",
    "MbppEval/295": "def sum_div(number):\n    sum_divisors = 0\n\n    for i in range(1, number // 2 + 1):\n        if number % i == 0:\n            sum_divisors += i\n\n    return sum_divisors\n",
    "MbppEval/300": "import math\n\ndef count_binary_seq(n): \n    count = math.comb(2*n, n)\n    \n    return count\n",
    "MbppEval/290": "def max_length(list1):\n    max_len = 0\n    max_list = None\n    \n    for sub_list in list1:\n        if len(sub_list) > max_len:\n            max_len = len(sub_list)\n            max_list = sub_list\n\n    return (max_len, max_list)\n",
    "MbppEval/102": "def snake_to_camel(word):\n    words = word.split('_')\n    \n    # Capitalize the first letter of each word except for the first word\n    camel_words = [words[0]] + [word.capitalize() for word in words[1:]]\n    \n    # Step 3: Join the words back together to form the camel case string\n    camel_case_string = ''.join(camel_words)\n    \n    return camel_case_string\n\n# Test the function with examples\nprint(snake_to_camel('python_program'))  # Output should be 'pythonProgram'\nprint(snake_to_camel('python_language'))  # Output should be 'pythonLanguage'\nprint(snake_to_camel('programming_language'))  # Output should be 'programmingLanguage'\n",
    "MbppEval/304": "def rotate(arr, times):\n    n = len(arr)\n    times = times % n\n    \n    return arr[-times:] + arr[:-times]\n\ndef find_Element(arr, ranges, rotations, index):\n    for r in ranges:\n        arr = rotate(arr, r[1] - r[0])\n    \n    rotated_arr = rotate(arr, rotations)\n    \n    return rotated_arr[index]\n",
    "MbppEval/299": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    aggregated_scores = defaultdict(int)\n\n    for student, score in stdata:\n        aggregated_scores[student] += score\n\n    max_student = max(aggregated_scores, key=aggregated_scores.get)\n    \n    return max_student, aggregated_scores[max_student]\n",
    "MbppEval/309": "def maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b\n",
    "MbppEval/307": "from copy import deepcopy\ndef colon_tuplex(tuplex, m, n):\n    if m < 0 or m >= len(tuplex):\n        return \"Index out of range\"\n    \n    tup_copy = deepcopy(tuplex)  # Step 1: Create a deep copy of the input tuple\n    \n    tup_copy = list(tup_copy)  # Step 2: Convert the copied tuple to a list for modification\n    \n    tup_copy[m] = [n]  # Step 3: Modify the m-th element of the copied tuple to include the value n in a list\n    \n    return tuple(tup_copy)  # Convert the list back to a tuple for the final result\n",
    "MbppEval/308": "def large_product(nums1, nums2, N):\n    # Input validation\n    if len(nums1) != len(nums2):\n        return \"Error: Input lists should be of the same length.\"\n    if N <= 0 or N > len(nums1):\n        return \"Error: Specified number N should be within the range [1, length of the lists].\"\n\n    # Generate products\n    products = [nums1[i] * nums2[i] for i in range(len(nums1))]\n\n    # Sort products in descending order\n    sorted_products = sorted(products, reverse=True)\n\n    return sorted_products[:N]\n",
    "MbppEval/93": "def power(a, b):\n    result = 1\n    for i in range(b):\n        result *= a\n    return result\n",
    "MbppEval/310": "def string_to_tuple(str1):\n    chars_list = []\n    \n    for char in str1:\n        chars_list.append(char)\n    \n    return tuple(chars_list)\n",
    "MbppEval/389": "def find_lucas(n): \n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n",
    "MbppEval/71": "def comb_sort(nums):\n    gap = len(nums)\n    shrink = 1.3\n    \n    swapped = True\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / shrink))\n        swapped = False\n        \n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    \n    return nums\n",
    "MbppEval/312": "import math\n\ndef volume_cone(r, h):\n    volume = (1/3) * math.pi * r**2 * h\n    return volume\n",
    "MbppEval/388": "def highest_Power_of_2(n):\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power\n",
    "MbppEval/390": "def add_string(list_, string):\n    formatted_list = []\n\n    for item in list_:\n        formatted_item = string.format(item)\n        formatted_list.append(formatted_item)\n\n    return formatted_list\n",
    "MbppEval/392": "def get_max_sum(n):\n    # Base case\n    if n <= 1:\n        return n\n    \n    # Calculate the maximum possible sum by recursively calling the function for n/2, n/3, n/4, and n/5\n    max_sum = max(get_max_sum(n//2), n//2) + \\\n              max(get_max_sum(n//3), n//3) + \\\n              max(get_max_sum(n//4), n//4) + \\\n              max(get_max_sum(n//5), n//5)\n\n    # Calculate the maximum of the sum obtained in step 2 and n\n    return max(max_sum, n)\n",
    "MbppEval/393": "def max_length_list(input_list):\n    max_sublist = None\n    max_length = 0\n\n    if not input_list:\n        return None\n\n    for sublist in input_list:\n        sublist_length = len(sublist)\n\n        if sublist_length > max_length:\n            max_length = sublist_length\n            max_sublist = sublist\n\n    return max_length, max_sublist\n",
    "MbppEval/391": "def convert_list_dictionary(l1, l2, l3):\n    result = []  \n\n    for i in range(len(l1)):\n        nested_dict = {\n            l1[i]: {\n                l2[i]: l3[i]\n            }\n        }\n        result.append(nested_dict)\n\n    return result\n",
    "MbppEval/394": "def check_distinct(test_tup):\n    test_set = set(test_tup)\n    return len(test_set) == len(test_tup)\n",
    "MbppEval/396": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    if re.match(regex, string):\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n",
    "MbppEval/311": "def set_left_most_unset_bit(n): \n    binary_str = bin(n)[2:]\n    unset_bit_index = None\n    for i in range(len(binary_str)):\n        if binary_str[i] == '1' and (i+1 == len(binary_str) or binary_str[i+1] == '0'):\n            unset_bit_index = i\n            break\n\n    if unset_bit_index is not None:\n        modified_binary = binary_str[:unset_bit_index] + '1' + binary_str[unset_bit_index+1:]\n        modified_decimal = int(modified_binary, 2)\n        return modified_decimal\n    else:\n        return n\n",
    "MbppEval/397": "def median_numbers(a, b, c):\n    numbers = [a, b, c]\n    numbers.sort()\n    \n    if len(numbers) % 2 == 1:\n        return numbers[len(numbers)//2]\n    else:\n        mid = len(numbers)//2\n        return (numbers[mid-1] + numbers[mid]) / 2\n",
    "MbppEval/399": "def bitwise_xor(test_tup1, test_tup2):\n    result = []\n    \n    for x, y in zip(test_tup1, test_tup2):\n        result.append(x ^ y)\n    \n    return tuple(result)\n",
    "MbppEval/400": "def extract_freq(test_list):\n    unique_tuples = set()\n    \n    for tpl in test_list:\n        unique_tuples.add(tpl)\n    \n    return len(unique_tuples)\n",
    "MbppEval/164": "import math \n\ndef div_sum(n1, n2): \n    def sum_of_divisors(num):\n        div_sum = 0\n        for i in range(1, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                div_sum += i\n                if i != num // i:\n                    div_sum += num // i\n        return div_sum\n    \n    sum1 = sum_of_divisors(n1)\n    sum2 = sum_of_divisors(n2)\n    \n    return sum1 == sum2\n",
    "MbppEval/404": "def minimum(a, b):\n    if a < b:\n        return a\n    else:\n        return b\n",
    "MbppEval/405": "def check_tuplex(tuplex, tuple1): \n    found = False\n    for i in tuplex:\n        if i == tuple1:\n            found = True\n            break\n    return found\n",
    "MbppEval/406": "def find_Parity(x): \n    if x % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n",
    "MbppEval/398": "def sum_of_digits(nums):\n    total_sum = 0\n    for num in nums:\n        if isinstance(num, int):\n            num_str = str(num)\n            total_sum = 0\n            for digit in num_str:\n                if digit.isdigit():\n                    total_sum += int(digit)\n    return total_sum\n",
    "MbppEval/409": "def min_product_tuple(list1):\n    min_product = float('inf')\n    for tuple in list1:\n        product = tuple[0] * tuple[1]\n        if product < min_product:\n            min_product = product\n    return min_product\n",
    "MbppEval/401": "def add_nested_tuples(test_tup1, test_tup2):\n    result = []\n    for tup1, tup2 in zip(test_tup1, test_tup2):\n        temp = []\n        for elem1, elem2 in zip(tup1, tup2):\n            temp.append(elem1 + elem2)\n        result.append(tuple(temp))\n    return tuple(result)\n",
    "MbppEval/411": "import re\n\ndef snake_to_camel(word):\n    if not re.match(r'^[a-z]+(_[a-z]+)*$', word):\n        return \"Input word is not in snake case format\"\n\n    words = word.split('_')\n    camel_case_words = [words[0].capitalize()] + [word.capitalize() for word in words[1:]]\n    return ''.join(camel_case_words)\n\n# Test the function\nprint(snake_to_camel('android_tv'))  # 'AndroidTv'\nprint(snake_to_camel('google_pixel'))  # 'GooglePixel'\nprint(snake_to_camel('apple_watch'))  # 'AppleWatch'\n",
    "MbppEval/72": "def dif_Square(n): \n    if n < 0:\n        return False\n    \n    a = 1\n    b = 1\n    \n    while a**2 - b**2 <= n:\n        if a**2 - b**2 == n:\n            return True\n        elif a**2 - b**2 < n:\n            a += 1\n        else:\n            b += 1\n            a = b + 1\n    \n    return False\n",
    "MbppEval/413": "def extract_nth_element(list1, n):\n    extracted_elements = []\n    \n    for tup in list1:\n        extracted_elements.append(tup[n])\n    \n    return extracted_elements\n",
    "MbppEval/412": "def remove_odd(l):\n    even_numbers = []\n    \n    for num in l:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    \n    return even_numbers\n",
    "MbppEval/408": "import heapq\n\ndef calculate_pair_sum(pair):\n    return sum(pair)\n\ndef k_smallest_pairs(nums1, nums2, k):\n    heap = []\n    \n    for n1 in nums1:\n        for n2 in nums2:\n            pair = [n1, n2]\n            pair_sum = calculate_pair_sum(pair)\n            heapq.heappush(heap, (pair_sum, pair))\n            \n    k_smallest = []\n    for _ in range(k):\n        if heap:\n            k_smallest.append(heapq.heappop(heap)[1])\n    \n    return k_smallest\n",
    "MbppEval/407": "def rearrange_bigger(n):\n    digits = [int(d) for d in str(n)]\n    \n    for i in range(len(digits) - 1, 0, -1):\n        if digits[i - 1] < digits[i]:\n            break\n\n    if i == 1 and digits[i] <= digits[i - 1]:\n        return False\n\n    pivot = i - 1\n\n    for j in range(len(digits) - 1, pivot, -1):\n        if digits[j] > digits[pivot]:\n            break\n            \n    digits[pivot], digits[j] = digits[j], digits[pivot]\n    \n    digits[pivot+1:] = sorted(digits[pivot+1:])\n    \n    return int(''.join(map(str, digits)))\n",
    "MbppEval/419": "def round_and_sum(list1):\n    rounded_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        rounded_sum += rounded_num\n    \n    total = rounded_sum * len(list1)\n    \n    return total\n",
    "MbppEval/414": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in another sequence or not.\n\n    Examples:\n    overlapping([1,2,3,4,5],[6,7,8,9]) == False\n    overlapping([1,2,3],[4,5,6]) == False\n    overlapping([1,4,5],[1,4,5]) == True\n    '''\n    found_overlap = False\n    for elem1 in list1:\n        if elem1 in list2:\n            found_overlap = True\n            break\n    return found_overlap\n",
    "MbppEval/103": "def eulerian_num(n, m):\n    def eulerian_recursive(n, m):\n        if m > n:\n            return 0\n        if m == 0:\n            return 1 if n == 0 else 0\n        \n        return (n - m) * eulerian_recursive(n - 1, m) + (m + 1) * eulerian_recursive(n - 1, m - 1)\n    \n    return eulerian_recursive(n, m)\n",
    "MbppEval/420": "def cube_Sum(n):\n    sum_cubes = 0\n    \n    for i in range(2, 2*n+1, 2):\n        sum_cubes += i**3\n    \n    return sum_cubes\n",
    "MbppEval/421": "def concatenate_tuple(test_tup):\n    result = \"\"\n    for element in test_tup:\n        result += str(element) + '-'\n    result = result[:-1]  # Remove the last '-' from the result string\n    return result\n",
    "MbppEval/422": "def find_Average_Of_Cube(n):\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    average = sum_of_cubes / n\n    return average\n",
    "MbppEval/418": "def Find_Max(lst): \n    max_length = 0\n    slashed_str = None\n    \n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            slashed_str = element\u00a0\n    \n    return slashed_str\n",
    "MbppEval/424": "def extract_rear(test_tuple):\n    rear_elements = []\n    for string in test_tuple:\n        rear_elements.append(string[-1])\n    return rear_elements\n",
    "MbppEval/425": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n",
    "MbppEval/426": "def filter_oddnumbers(nums):\n    odd_numbers = []\n\n    for num in nums:\n        if num % 2 != 0:\n            odd_numbers.append(num)\n\n    return odd_numbers\n",
    "MbppEval/427": "import re\n\ndef change_date_format(dt):\n    # Step 1: Use regex to match year, month, and day from input date\n    match = re.match(r\"(\\d{4})-(\\d{2})-(\\d{2})\", dt)\n    if match:\n        year, month, day = match.groups()\n        \n        # Step 2: Rearrange matched elements to form the desired format 'dd-mm-yyyy'\n        new_date = f\"{day}-{month}-{year}\"\n        \n        # Step 3: Return the converted date\n        return new_date\n",
    "MbppEval/429": "def and_tuples(test_tup1, test_tup2):\n    result = []\n    \n    for ele1, ele2 in zip(test_tup1, test_tup2):\n        result.append(ele1 & ele2)\n        \n    return tuple(result)\n",
    "MbppEval/432": "def median_trapezium(base1, base2, height):\n    median = (base1 + base2) / 2\n    return median\n",
    "MbppEval/431": "def common_element(list1, list2):\n    for element in list1:\n        if element in list2:\n            return True\n    \n    return False\n",
    "MbppEval/434": "import re\n\ndef text_match_one(text):\n    pattern = r'ab+'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
    "MbppEval/428": "import math\n\ndef shell_sort(my_list):\n    gap_sequence = []\n    k = math.floor(math.log2(len(my_list)))\n    while k > 0:\n        gap = 2**k - 1\n        gap_sequence.append(gap)\n        k -= 1\n    gap_sequence.append(1)\n\n    for gap in gap_sequence:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n    \n    return my_list\n",
    "MbppEval/430": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n\n    Examples:\n    parabola_directrix(5,3,2) == -198\n    parabola_directrix(9,8,4) == -2336\n    parabola_directrix(2,4,6) == -130\n    '''\n    directrix = (c - (b**2 - 1)) / (4*a)\n    return directrix\n",
    "MbppEval/415": "def max_product(arr):\n    if len(arr) < 2:\n        return None\n    \n    max_pair = None\n    max_product = float('-inf')\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            pair_product = arr[i] * arr[j]\n            if pair_product > max_product:\n                max_product = pair_product\n                max_pair = (arr[i], arr[j])\n    \n    return max_pair\n",
    "MbppEval/435": "def last_digit(n):\n    return n % 10\n",
    "MbppEval/436": "def neg_nos(list1):\n    neg_numbers = []\n    for num in list1:\n        if num < 0:\n            neg_numbers.append(num)\n    return neg_numbers\n",
    "MbppEval/439": "def multiple_to_single(L):\n    result = ''\n    \n    for num in L:\n        result += str(num)  # Step 2\n\n    return int(result)  # Steps 3 and 4\n",
    "MbppEval/438": "def count_bidirectional(test_list):\n    bidirectional_counts = {}\n    \n    for pair in test_list:\n        pair = tuple(sorted(pair))  # Sort the pair to ensure consistent comparison\n        \n        if pair not in bidirectional_counts:\n            bidirectional_counts[pair] = 1\n        else:\n            bidirectional_counts[pair] += 1\n    \n    bidirectional_pairs = sum(count for count in bidirectional_counts.values() if count >= 2)\n    \n    return str(bidirectional_pairs)\n",
    "MbppEval/437": "def remove_odd(str1):\n    result = \"\"\n    \n    for index, char in enumerate(str1):\n        if index % 2 == 0:\n            result += char\n            \n    return result\n",
    "MbppEval/441": "def surfacearea_cube(l):\n    return 6 * l**2\n",
    "MbppEval/442": "from array import array\n\ndef positive_count(nums):\n    total_count = len(nums)\n    if total_count == 0:\n        return 0\n    positive_nums = sum(1 for num in nums if num > 0)\n    ratio = positive_nums / total_count\n    return round(ratio, 2)\n",
    "MbppEval/443": "def largest_neg(list1): \n    negative_numbers = [num for num in list1 if num < 0]\n    \n    if not negative_numbers:\n        return None\n    \n    largest_neg_num = max(negative_numbers)\n    return largest_neg_num\n",
    "MbppEval/444": "def trim_tuple(test_list, K):\n    result = []\n    for tup in test_list:\n        new_tup = tuple(tup[:K])\n        result.append(new_tup)\n    return result\n",
    "MbppEval/446": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    count_dict = Counter(tup)\n    \n    total_count = 0\n    for elem in lst:\n        total_count += count_dict.get(elem, 0)\n    \n    return total_count\n",
    "MbppEval/447": "def cube_nums(nums):\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes\n",
    "MbppEval/445": "def index_multiplication(test_tup1, test_tup2):\n    result = []\n    \n    for i in range(len(test_tup1)):\n        result.append((test_tup1[i][0]*test_tup2[i][0], test_tup1[i][1]*test_tup2[i][1]))\n    \n    return tuple(result)\n",
    "MbppEval/448": "def calculate_perrin_number(n):\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    \n    perrin = [3, 0, 2]\n    \n    for i in range(3, n+1):\n        next_perrin = perrin[-2] + perrin[-3]\n        perrin.append(next_perrin)\n    \n    return perrin[n]\n\ndef cal_sum(n):\n    total_sum = sum(calculate_perrin_number(i) for i in range(n))  # Calculate the sum of first n Perrin numbers\n    return total_sum\n\n# Test the function\nprint(cal_sum(9))  # Expected output: 49\nprint(cal_sum(10))  # Expected output: 66\nprint(cal_sum(11))  # Expected output: 88\n",
    "MbppEval/94": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    min_value = float('inf')  # Initialize to a large value\n    min_element = None\n    \n    for item in test_list:\n        if item[1] < min_value:\n            min_value = item[1]\n            min_element = item[0]\n    \n    return min_element\n",
    "MbppEval/440": "import re\n\ndef find_adverb_position(text):\n    adverb_pattern = r'\\b\\w+ly\\b'\n    match = re.search(adverb_pattern, text)\n\n    if match:\n        adverb = match.group()\n        start_position = match.start()\n        end_position = match.end()\n        return (start_position, end_position, adverb)\n    \n    return None\n",
    "MbppEval/451": "import re\n\ndef remove_whitespaces(text1):\n    return re.sub(r'\\s+', '', text1)\n",
    "MbppEval/452": "def loss_amount(actual_cost, sale_amount): \n    difference = actual_cost - sale_amount\n    if difference > 0:\n        return difference\n    else:\n        return 0\n",
    "MbppEval/456": "def reverse_string_list(stringlist):\n    reversed_strings = []\n    \n    for string in stringlist:\n        reversed_string = string[::-1]\n        reversed_strings.append(reversed_string)\n\n    return reversed_strings\n",
    "MbppEval/11": "def remove_Occ(s, ch):\n    first_occurrence = s.find(ch)\n    last_occurrence = s.rfind(ch)\n    \n    if first_occurrence != -1 and last_occurrence != -1:\n        modified_string = s[:first_occurrence] + s[first_occurrence+1:last_occurrence] + s[last_occurrence+1:]\n        return modified_string\n    else:\n        return s\n",
    "MbppEval/455": "def check_monthnumb_number(monthnum2):\n    if monthnum2 < 1 or monthnum2 > 12:\n        return False\n\n    days_in_month = {1: 31, 3: 31, 5: 31, 7: 31, 8: 31, 10: 31, 12: 31}\n\n    if monthnum2 in days_in_month.keys() and days_in_month[monthnum2] == 31:\n        return True\n    else:\n        return False\n",
    "MbppEval/454": "import re\n\ndef text_match_wordz(text):\n    match = re.search(r'\\b\\w*z\\w*\\b', text)\n    if match:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
    "MbppEval/459": "import re\n\ndef remove_uppercase(str1):\n    return re.sub(r'[A-Z]', '', str1)\n",
    "MbppEval/458": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n\n    Examples:\n    rectangle_area(10,20) == 200\n    rectangle_area(10,5) == 50\n    rectangle_area(4,2) == 8\n    '''\n\n    area = l * b\n    return area\n",
    "MbppEval/460": "def Extract(lst):\n    first_elements = [sub_list[0] for sub_list in lst]\n    return first_elements\n",
    "MbppEval/111": "def common_in_nested_lists(nestedlist):\n    common_elements = set()\n    \n    # Step 0: Initialize a set to store the common elements\n    \n    # Step 1: Iterate through the first list and add all elements to the set\n    common_elements.update(nestedlist[0])\n    \n    # Step 2: Iterate through the rest of the lists\n    for sublist in nestedlist[1:]:\n        common_elements.intersection_update(set(sublist))\n\n    return list(common_elements)\n",
    "MbppEval/464": "def check_value(dict, n):\n    all_same = True\n    \n    for value in dict.values():\n        if value != n:\n            all_same = False\n            break\n    \n    return all_same\n",
    "MbppEval/453": "import math \n\ndef sumofFactors(n):\n    sum_factors = 0\n\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum_factors += i\n\n            if i != n // i and (n // i) % 2 == 0:\n                sum_factors += n // i\n\n    return sum_factors\n",
    "MbppEval/465": "def drop_empty(dict1):\n    non_empty_dict = {}\n\n    for key, value in dict1.items():\n        if value is not None:\n            non_empty_dict[key] = value\n\n    return non_empty_dict\n",
    "MbppEval/461": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    \n    Args:\n    str (str): Input string\n    \n    Returns:\n    int: Count of uppercase characters in the input string\n    '''\n    count = 0  # Initialize count to 0\n    \n    for char in str:\n        if char.isupper():\n            count += 1  # Increment count if character is uppercase\n    \n    return count  # Return the count of uppercase characters\n\n# Test the upper_ctr function\nprint(upper_ctr('PYthon')) # Output should be 1\nprint(upper_ctr('BigData')) # Output should be 1\nprint(upper_ctr('program')) # Output should be 0\n",
    "MbppEval/468": "def max_product(arr):\n    arr = sorted(arr)\n    max_product = 1\n    current_product = 1\n    \n    for num in arr:\n        current_product = max(current_product * num, num)\n        max_product = max(max_product, current_product)\n\n    return max_product\n",
    "MbppEval/457": "def Find_Min(lst):\n    min_len = float('inf')\n    min_sublist = []\n    \n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist\n",
    "MbppEval/470": "def add_pairwise(test_tup):\n    result = []\n    for i in range(len(test_tup)-1):  # Loop through indexes from 0 to length-1\n        sum_pair = test_tup[i] + test_tup[i+1]  # Add current element with the next element\n        result.append(sum_pair)  # Append the result to the result list\n\n    return tuple(result)  # Return the result as a tuple\n",
    "MbppEval/472": "def check_Consecutive(l): \n    l.sort()\n    \n    for i in range(1, len(l)):\n        if l[i] != l[i-1] + 1:\n            return False\n    \n    return True\n",
    "MbppEval/473": "def tuple_intersection(test_list1, test_list2):\n    set_list1 = {tuple(item) for item in test_list1}\n    set_list2 = {tuple(item) for item in test_list2}\n\n    intersection_set = set_list1.intersection(set_list2)\n\n    result = {tuple(item) for item in intersection_set}\n\n    return result\n",
    "MbppEval/463": "def max_subarray_product(arr):\n    if not arr:\n        return None\n    \n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    \n    for i in range(1, len(arr)):\n        temp_max = max(arr[i], max_product * arr[i], min_product * arr[i])\n        temp_min = min(arr[i], max_product * arr[i], min_product * arr[i])\n        \n        max_product = temp_max\n        min_product = temp_min\n        \n        result = max(result, max_product)\n        \n    return result\n",
    "MbppEval/476": "def big_sum(nums):\n    sorted_nums = sorted(nums)\n    return sorted_nums[0] + sorted_nums[-1]\n",
    "MbppEval/475": "def sort_counter(dict1):\n    dict_items = list(dict1.items())\n    sorted_items = sorted(dict_items, key=lambda x: x[1], reverse=True)\n    return sorted_items\n",
    "MbppEval/478": "import re\n\ndef remove_lowercase(str1):\n    return re.sub('[a-z]', '', str1)\n",
    "MbppEval/477": "def is_lower(string):\n    return string.lower()\n\n# Test cases\nprint(is_lower(\"InValid\"))   # Output should be \"invalid\"\nprint(is_lower(\"TruE\"))      # Output should be \"true\"\nprint(is_lower(\"SenTenCE\"))  # Output should be \"sentence\"\n",
    "MbppEval/479": "def first_Digit(n):\n    num_as_str = str(n)\n    return num_as_str[0]\n",
    "MbppEval/555": "def difference(n):\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    sum_of_numbers = (n*(n+1)) // 2\n\n    return sum_of_cubes - sum_of_numbers\n",
    "MbppEval/554": "def Split(numbers): \n    odd_numbers = []\n    for num in numbers:\n        if num % 2 != 0:\n            odd_numbers.append(num)\n    return odd_numbers\n",
    "MbppEval/474": "def replace_char(str1, ch, newch):\n    modified_str = \"\"\n    for char in str1:\n        if char == ch:\n            modified_str += newch\n        else:\n            modified_str += char\n    return modified_str\n",
    "MbppEval/559": "def max_sub_array_sum(a, size):\n    max_so_far = 0\n    max_ending_here = 0\n    \n    for i in range(size):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    \n    return max_so_far\n",
    "MbppEval/556": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):  # Start from i+1 to avoid repeated pairs\n            xor_val = A[i] ^ A[j]\n            for k in range(j + 1, N):\n                if (xor_val ^ A[k]) % 2 != 0:\n                    count += 1\n    return count\n",
    "MbppEval/558": "def digit_distance_nums(n1, n2):\n    num_str1 = str(n1)\n    num_str2 = str(n2)\n    \n    total_distance = 0\n    for digit1, digit2 in zip(num_str1, num_str2):\n        total_distance += abs(int(digit1) - int(digit2))\n    \n    return total_distance\n",
    "MbppEval/563": "import re\n\ndef extract_values(text):\n    return re.findall(r'\"([^\"]*)\"', text)\n",
    "MbppEval/560": "def union_elements(test_tup1, test_tup2):\n    unique_elements = set(test_tup1 + test_tup2)\n    sorted_elements = sorted(unique_elements)\n    return tuple(sorted_elements)\n",
    "MbppEval/557": "def toggle_string(string):\n    toggled_string = []\n    for char in string:\n        if char.isupper():\n            toggled_string.append(char.lower())\n        else:\n            toggled_string.append(char.upper())\n    \n    return ''.join(toggled_string)\n",
    "MbppEval/562": "def Find_Max_Length(lst):\n    max_length = 0\n    \n    for sublst in lst:\n        length = len(sublst)\n        \n        if length > max_length:\n            max_length = length\n            \n    return max_length\n",
    "MbppEval/565": "def split(word):\n    characters = []\n    \n    for char in word:\n        characters.append(char)\n    \n    return characters\n",
    "MbppEval/564": "def count_Pairs(arr, n):\n    count = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] != arr[j]:\n                count += 1\n                \n    return count\n",
    "MbppEval/566": "def sum_digits(n):\n    sum_digits = 0\n    n_str = str(n)\n    \n    for digit in n_str:\n        sum_digits += int(digit)\n    \n    return sum_digits\n",
    "MbppEval/568": "def empty_list(length):\n    return [{} for _ in range(length)]\n\n# Testing the function\nprint(empty_list(5))  # Expected output: [{},{},{},{},{}]\n",
    "MbppEval/572": "def two_unique_nums(nums):\n    unique_nums = []\n    \n    for num in nums:\n        if nums.count(num) == 1:\n            unique_nums.append(num)\n    \n    return unique_nums\n",
    "MbppEval/569": "def sort_sublists(list1):\n    for sublist in list1:\n        sublist.sort()\n    return list1\n\n# Test the function with examples\nprint(sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]))  # [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nprint(sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']]))  # [['green', 'orange'], ['black'], ['green', 'orange'], ['white']]\nprint(sort_sublists([['a','b'],['d','c'],['g','h'] , ['f','e']]))  # [['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]\n",
    "MbppEval/567": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    \n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    \n    return True\n",
    "MbppEval/573": "def unique_product(list_data):\n    unique_numbers = set()\n    \n    for num in list_data:\n        if num not in unique_numbers:\n            unique_numbers.add(num)\n    \n    product = 1\n    for unique_num in unique_numbers:\n        product *= unique_num\n    \n    return product\n",
    "MbppEval/577": "def last_Digit_Factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    \n    last_digit = result % 10\n    return last_digit\n",
    "MbppEval/395": "def first_non_repeating_character(str1):\n    char_count = {}\n    \n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return None\n\n# Testing the function with the provided examples\nprint(first_non_repeating_character(\"abcabc\"))  # Expected: None\nprint(first_non_repeating_character(\"abc\"))     # Expected: 'a'\nprint(first_non_repeating_character(\"ababc\"))   # Expected: 'c'\n",
    "MbppEval/578": "def interleave_lists(list1, list2, list3):\n    interleaved_list = []\n    \n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    \n    return interleaved_list\n",
    "MbppEval/574": "import math\n\ndef surfacearea_cylinder(r, h):\n    # Step 1: Calculate the surface area of the two circular ends of the cylinder\n    circular_end_area = 2 * math.pi * (r ** 2)\n    \n    # Step 2: Calculate the lateral surface area of the cylinder\n    lateral_area = 2 * math.pi * r * h\n    \n    # Step 3: Add the two calculated surface areas to get the total surface area of the cylinder\n    total_surface_area = circular_end_area + lateral_area\n    \n    return total_surface_area\n",
    "MbppEval/576": "def is_Sub_Array(A, B):\n    if len(B) > len(A):\n        return False\n\n    for i in range(len(A) - len(B) + 1):\n        if A[i:i+len(B)] == B:\n            return True\n\n    return False\n",
    "MbppEval/582": "def my_dict(dict1):\n    return len(dict1) == 0\n",
    "MbppEval/579": "    return result_tuple\n",
    "MbppEval/584": "import re\n\ndef find_adverbs(text):\n    adverb_regex = r'\\b\\w+ly\\b'\n    matches = re.finditer(adverb_regex, text)\n    \n    for match in matches:\n        position = f\"{match.start()}-{match.end()}\"\n        adverb = match.group()\n        \n        return f\"{position}: {adverb}\"\n",
    "MbppEval/583": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef catalan_number(num):\n    result = 1\n    for i in range(1, num+1):\n        result = result * (2 * (2 * i - 1)) // (i + 1)\n    \n    return result\n",
    "MbppEval/585": "import heapq\n\ndef expensive_items(items, n):\n    most_expensive = []\n    heap = []\n\n    for item in items:\n        heapq.heappush(heap, (-item['price'], item))\n\n    for _ in range(n):\n        if heap:\n            most_expensive.append(heapq.heappop(heap)[1])\n    \n    most_expensive.reverse()\n\n    return most_expensive\n",
    "MbppEval/587": "def list_tuple(listx):\n    return tuple(listx)\n",
    "MbppEval/586": "def split_Arr(l, n):\n    if len(l) > n:\n        first_part = l[:n]\n        second_part = l[n:]\n        \n        new_list = second_part + first_part\n        return new_list\n",
    "MbppEval/581": "def surface_Area(b, s):\n    # Calculate the area of the base of the pyramid\n    base_area = b**2\n\n    # Calculate the lateral surface area of the pyramid\n    lateral_area = 2 * b * s\n\n    # Calculate the total surface area of the pyramid\n    total_area = base_area + lateral_area\n    return total_area\n",
    "MbppEval/588": "def big_diff(nums):\n    max_val = max(nums)\n    min_val = min(nums)\n    diff = max_val - min_val\n    return diff\n",
    "MbppEval/580": "def even_ele(test_tuple, even_fnc): \n    even_elements = []\n    for element in test_tuple:\n        if isinstance(element, tuple):\n            even_tuple = even_ele(element, even_fnc)\n            if even_tuple:\n                even_elements.append(even_tuple)\n        else:\n            if even_fnc(element):\n                even_elements.append(element)\n    return tuple(even_elements)\n",
    "MbppEval/591": "def swap_List(newList): \n    if len(newList) < 2:  \n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n",
    "MbppEval/589": "def perfect_squares(a, b):\n    perfect_squares_list = []\n\n    for i in range(a, b+1):\n        if (i ** 0.5) % 1 == 0:\n            perfect_squares_list.append(i)\n    \n    return perfect_squares_list\n",
    "MbppEval/590": "import cmath\n\ndef polar_rect(r, theta):\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    \n    return ((r, theta), (x, y))\n\n# Testing the function with examples\nprint(polar_rect(3, 4))  # ((3, 4), (-2-3.6739403974420594e-16j))\nprint(polar_rect(4, 7))  # ((4, 7), (-3.439856491652281-2.0750995803878355j))\nprint(polar_rect(15, 17))  # ((15, 17), (-5.814682372662819-14.332079676810504j))\n",
    "MbppEval/596": "import sys \n\ndef tuple_size(tuple_list):\n    return sys.getsizeof(tuple_list)\n",
    "MbppEval/592": "def binomial_coeff(n, k):\n    if k == 0 or k == n:\n        return 1\n    if k > n - k:\n        k = n - k\n    res = 1\n    for i in range(k):\n        res = res * (n - i) // (i + 1)\n    return res\n\ndef sum_of_product(n):\n    total_sum = 0\n    if n < 2:\n        return n\n    for k in range(n - 1):\n        total_sum += binomial_coeff(n, k) + binomial_coeff(n, k + 1)\n    return total_sum\n",
    "MbppEval/594": "def diff_even_odd(list1):\n    even_index = None\n    odd_index = None\n    \n    for i in range(len(list1)):\n        if list1[i] % 2 == 0 and even_index is None:\n            even_index = i\n        elif list1[i] % 2 != 0 and odd_index is None:\n            odd_index = i\n            \n        if even_index is not None and odd_index is not None:\n            break\n    \n    if even_index is not None and odd_index is not None:\n        return abs(list1[even_index] - list1[odd_index])\n",
    "MbppEval/595": "def min_Swaps(str1, str2):\n    if len(str1) != len(str2):\n        return \"Not Possible\"\n    \n    swap_count = 0\n    \n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            swap_count += 1\n    \n    if swap_count % 2 != 0:\n        return \"Not Possible\"\n    \n    return swap_count // 2\n",
    "MbppEval/597": "def find_kth(arr1, arr2, k):\n    merged_arr = sorted(arr1 + arr2)\n    return merged_arr[k-1]\n",
    "MbppEval/600": "def is_Even(n):\n    return n % 2 == 0\n",
    "MbppEval/602": "def first_repeated_char(str1):\n    seen_chars = set()\n\n    for char in str1:\n        if char in seen_chars:\n            return char\n        \n        seen_chars.add(char)\n    \n    return \"None\"\n",
    "MbppEval/599": "def sum_average(number):\n    sum_of_numbers = (number * (number + 1)) // 2\n    average_of_numbers = sum_of_numbers / number\n    return sum_of_numbers, average_of_numbers\n",
    "MbppEval/598": "def armstrong_number(number):\n    num_str = str(number)  # Convert number to a string\n\n    total = 0\n    for digit in num_str:\n        digit_int = int(digit)\n        total += digit_int ** len(num_str)\n\n    if total == number:\n        return True\n    else:\n        return False\n\n# Testing the function\nprint(armstrong_number(153))\nprint(armstrong_number(259))\nprint(armstrong_number(4458))\n",
    "MbppEval/604": "def reverse_words(s):\n    words = s.split()\n    reversed_words = words[::-1]\n    reversed_str = ' '.join(reversed_words)\n    return reversed_str\n",
    "MbppEval/606": "import math\n\ndef radian_degree(degree):\n    radians = degree * (math.pi / 180)\n    return radians\n",
    "MbppEval/605": "import math\n\ndef prime_num(num):\n    if num < 2:\n        return False\n\n    if num == 2:\n        return True\n",
    "MbppEval/603": "def get_ludic(n):\n    ludic_numbers = []\n    \n    for num in range(1, n+1):\n        is_lucid = True\n        for ludic_num in ludic_numbers:\n            if num % ludic_num == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            ludic_numbers.append(num)\n    \n    return ludic_numbers\n",
    "MbppEval/607": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        start_index = match.start()\n        end_index = match.end()\n        matched_substring = match.group()\n        return matched_substring, start_index, end_index\n",
    "MbppEval/610": "def remove_kth_element(list1, k):\n    if k >= 0 and k < len(list1):\n        return list1[:k] + list1[k+1:]\n    else:\n        return list1\n",
    "MbppEval/612": "def merge(lst):\n    first_elements = []\n    second_elements = []\n    \n    for sublist in lst:\n        first_elements.append(sublist[0])\n        second_elements.append(sublist[1])\n    \n    return [first_elements, second_elements]\n",
    "MbppEval/608": "from math import comb\n\ndef stirling_second(n, k):\n    if n == 0 and k == 0:\n        return 1\n    if n == 0 or k == 0:\n        return 0\n    return k*stirling_second(n-1, k) + stirling_second(n-1, k-1)\n\ndef bell_Number(n):\n    bell_numbers = [1, 1]  # Initializing Bell numbers for n = 0, 1\n    if n <= 1:\n        return bell_numbers[n]\n    \n    for i in range(2, n+1):\n        bell_numbers.append(sum(stirling_second(i-1, j)*bell_numbers[j] for j in range(i)))\n    \n    return bell_numbers[n]\n",
    "MbppEval/611": "def max_of_nth(test_list, N):\n    max_val = float('-inf')\n    for sublist in test_list:\n        if sublist[N] > max_val:\n            max_val = sublist[N]\n    return max_val\n",
    "MbppEval/614": "def cummulative_sum(test_list):\n    return sum(sum(tpl) for tpl in test_list)\n",
    "MbppEval/615": "def average_tuple(nums):\n    average_values = []\n\n    for tpl in nums:\n        avg = sum(tpl) / len(tpl)\n        average_values.append(avg)\n\n    return average_values\n",
    "MbppEval/471": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n\n    Examples:\n    find_remainder([100, 10, 5, 25, 35, 14], 6) == 9\n    find_remainder([1, 1, 1], 3) == 0\n    find_remainder([1, 2, 1], 3) == 0\n    '''\n    \n    result = 1\n    \n    for num in arr:\n        result *= num\n\n    return result % n\n",
    "MbppEval/617": "import math\n\ndef min_Jumps(steps, x, y):\n    x_distance = abs(x)\n    y_distance = abs(y)\n\n    total_distance = math.sqrt(x_distance**2 + y_distance**2)\n\n    jumps = total_distance / steps\n\n    if total_distance % steps == 0:\n        return jumps\n    else:\n        return jumps + 0.5\n",
    "MbppEval/616": "def tuple_modulo(test_tup1, test_tup2):\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Input tuples must have the same length\")\n    \n    result_list = []\n    \n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] % test_tup2[i])\n\n    return tuple(result_list)\n",
    "MbppEval/618": "def div_list(nums1, nums2):\n    return [num1 / num2 for num1, num2 in zip(nums1, nums2)]\n",
    "MbppEval/624": "def is_upper(string):\n    return string.upper()\n",
    "MbppEval/622": "def get_median(arr1, arr2, n):\n    combined_arr = sorted(arr1 + arr2)\n    if n % 2 == 0:\n        median = (combined_arr[n//2 - 1] + combined_arr[n//2]) / 2\n    else:\n        median = combined_arr[n//2]\n        \n    return median\n",
    "MbppEval/165": "def count_char_position(str1): \n    count = 0\n    str1 = str1.lower()\n    \n    for char in str1:\n        if char.isalpha():\n            char_position = ord(char) - ord('a') + 1\n            if char_position == str1.index(char) + 1:\n                count += 1\n\n    return count\n",
    "MbppEval/626": "import math\n\ndef triangle_area(r):\n    diameter = 2 * r\n    base = diameter\n    height = r\n    return 0.5 * base * height\n",
    "MbppEval/623": "def nth_nums(nums, n):\n    result = []\n\n    for num in nums:\n        result.append(num**n)\n\n    return result\n",
    "MbppEval/126": "def sum_of_common_divisors(a, b):\n    common_divisors = []\n    \n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    \n    return sum(common_divisors)\n\n# Test the function with examples\nprint(sum_of_common_divisors(10, 15))  # Output should be 6\nprint(sum_of_common_divisors(100, 150))  # Output should be 93\nprint(sum_of_common_divisors(4, 6))  # Output should be 3\n",
    "MbppEval/625": "def swap_List(newList):\n    total_elements = len(newList)\n    \n    if total_elements >= 2:\n        newList[0], newList[-1] = newList[-1], newList[0]\n\n    return newList\n",
    "MbppEval/628": "def replace_spaces(string):\n    result = ''\n    for char in string:\n        if char == ' ':\n            result += '%20'\n        else:\n            result += char\n    return result\n",
    "MbppEval/629": "def Split(input_list): \n    even_numbers = []\n    for number in input_list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers\n",
    "MbppEval/632": "def move_zero(num_list):\n    zero_count = 0\n    non_zero_nums = []\n    \n    for num in num_list:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_nums.append(num)\n    \n    return non_zero_nums + [0] * zero_count\n\n# Test the function with examples\nprint(move_zero([1, 0, 2, 0, 3, 4]))  # Output: [1, 2, 3, 4, 0, 0]\nprint(move_zero([2, 3, 2, 0, 0, 4, 0, 5, 0]))  # Output: [2, 3, 2, 4, 5, 0, 0, 0, 0]\nprint(move_zero([0, 1, 0, 1, 1]))  # Output: [1, 1, 1, 0, 0]\n",
    "MbppEval/450": "def extract_string(str, l):\n    extracted_strings = []  \n  \n    for s in str: \n        if len(s) == l:  \n            extracted_strings.append(s)  \n    \n    return extracted_strings  \n",
    "MbppEval/631": "def replace_spaces(text):\n    result = ''\n    \n    for char in text:\n        if char == ' ':\n            result += '_'\n        else:\n            result += char\n            \n    return result\n",
    "MbppEval/633": "def pair_xor_Sum(arr, n):\n    result = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            result += arr[i] ^ arr[j]\n    return result\n",
    "MbppEval/637": "def noprofit_noloss(actual_cost, sale_amount): \n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n",
    "MbppEval/627": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array)\n    \n    for index in range(end):\n        expected_value = start + index\n        if array[index] != expected_value:\n            return expected_value\n        \n    return 0\n",
    "MbppEval/638": "import math\n\ndef wind_chill(v, t):\n    celsius_to_fahrenheit = (t * 9/5) + 32\n    wind_chill_index = 13.12 + 0.6215 * celsius_to_fahrenheit - 11.37 * v**0.16 + 0.3965 * celsius_to_fahrenheit * v**0.16\n    rounded_wind_chill_index = round(wind_chill_index)\n    return rounded_wind_chill_index\n",
    "MbppEval/639": "def sample_nam(sample_names):\n    total_length = 0\n\n    for name in sample_names:\n        if not name[0].islower():\n            total_length += len(name)\n    \n    return total_length\n",
    "MbppEval/643": "import re\n\ndef text_match_wordz_middle(text):\n    match_result = re.findall(r'\\Bz\\B', text)\n    if match_result:\n        return ('Found a match!')\n    else:\n        return ('Not matched!')\n",
    "MbppEval/641": "def is_nonagonal(n):\n    if not isinstance(n, int) or n <= 0:\n        return \"Input must be a positive integer.\"\n    \n    nonagonal_number = n * (7*n - 5) // 2\n    return nonagonal_number\n",
    "MbppEval/635": "import heapq as hq\ndef heap_sort(iterable):\n    if not isinstance(iterable, list):\n        raise TypeError(\"Input must be a list\")\n    \n    heap = list(iterable)\n    hq.heapify(heap)\n    \n    sorted_list = []\n    \n    for _ in range(len(heap)):\n        sorted_list.append(hq.heappop(heap))\n    \n    return sorted_list\n",
    "MbppEval/644": "def reverse_Array_Upto_K(input, k): \n    reversed_array = input[:]\n    reversed_array[:k] = reversed_array[:k][::-1]\n    return reversed_array\n",
    "MbppEval/640": "import re\n\ndef remove_parenthesis(items):\n    result = []\n    \n    for item in items:\n        modified_item = re.sub(r'\\(.*?\\)', '', item)  # Remove text within parenthesis\n        result.append(modified_item)\n    \n    return tuple(result)\n",
    "MbppEval/722": "def filter_data(students, h, w):\n    filtered_students = {}\n    for student, (height, weight) in students.items():\n        if height >= h and weight >= w:\n            filtered_students[student] = (height, weight)\n    return filtered_students\n",
    "MbppEval/724": "def power_base_sum(base, power):\n    result = str(base ** power)\n    digit_sum = sum(int(digit) for digit in result)\n    return digit_sum\n",
    "MbppEval/720": "def add_dict_to_tuple(test_tup, test_dict):\n    new_tuple = test_tup + tuple(test_dict.items())\n    return new_tuple\n",
    "MbppEval/725": "import re\n\ndef extract_quotation(text1):\n    text1 = r'' + text1\n    extracted_values = re.findall(r'\"(.*?)\"', text1)\n    return extracted_values\n",
    "MbppEval/726": "def multiply_elements(test_tup):\n    result = []\n    \n    for i in range(len(test_tup) - 1):\n        result.append(test_tup[i] * test_tup[i+1])\n        \n    return tuple(result)\n",
    "MbppEval/730": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    result = []\n    \n    for num in nums:\n        if not result or num != result[-1]:\n            result.append(num)\n    \n    return result\n",
    "MbppEval/731": "import math\n\ndef lateralsurface_cone(r, h):\n    slant_height = math.sqrt(r**2 + h**2)\n    lateral_area = math.pi * r * slant_height\n    return lateral_area\n",
    "MbppEval/728": "def sum_list(lst1, lst2):\n    result = []\n    \n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    \n    return result\n",
    "MbppEval/732": "import re\n\ndef replace_specialchar(text):\n    modified_text = re.sub(r'[ ,.]', ':', text)\n    return modified_text\n",
    "MbppEval/723": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for num1, num2 in zip(nums1, nums2):\n        if eq(num1, num2):\n            count += 1\n    \n    return count\n",
    "MbppEval/733": "            # Step 3: Return Index\n            return mid\n",
    "MbppEval/736": "import bisect\n\ndef left_insertion(a, x):\n    if not a:\n        return 0\n    insertion_point = bisect.bisect_left(a, x)\n    return insertion_point\n",
    "MbppEval/735": "def set_middle_bits(n):\n    binary_num = bin(n)[2:]\n    toggled_num = '1' + ''.join('0' if bit == '1' else '1' for bit in binary_num[1:-1]) + '1'\n    return int(toggled_num, 2)\n",
    "MbppEval/260": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n\n    Examples:\n    newman_prime(3) == 7\n    newman_prime(4) == 17\n    newman_prime(5) == 41\n    '''\n\n    def calculate_nswn(x):\n        if x == 0:\n            return 1\n        if x == 1:\n            return 2\n        return 2 * calculate_nswn(x - 1) - calculate_nswn(x - 2)\n\n    return calculate_nswn(n)\n",
    "MbppEval/737": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    if re.match(regex, string):\n        return 'Valid'\n    else:\n        return 'Invalid'\n\n# Testing the function\nprint(check_str(\"annie\"))  # Output: Valid\nprint(check_str(\"dawood\"))  # Output: Invalid\nprint(check_str(\"Else\"))  # Output: Valid\n",
    "MbppEval/738": "def geometric_sum(n):\n    result = 0\n    for i in range(1, n):\n        result += 1 / (2 ** i)\n    return result\n",
    "MbppEval/741": "def all_Characters_Same(s):\n    if len(s) == 0:\n        return True\n    \n    first_char = s[0]\n    \n    for char in s[1:]:\n        if char != first_char:\n            return False\n    \n    return True\n",
    "MbppEval/742": "import math\n\ndef area_tetrahedron(side):\n    # Step 1: Calculate the height of the tetrahedron\n    height = (side * math.sqrt(6)) / 3\n\n    # Step 2: Calculate the area of an equilateral triangle\n    area_triangle = (math.sqrt(3) * side**2) / 4\n\n    # Step 3: Calculate the total surface area of the tetrahedron\n    total_area = 4 * area_triangle\n\n    return total_area\n",
    "MbppEval/630": "def get_coordinates(coord):\n    adj_coords = []\n    \n    for i in range(max(0, coord[0] - 1), min(8, coord[0] + 2)):\n        for j in range(max(0, coord[1] - 1), min(8, coord[1] + 2)):\n            if (i, j) != coord:  # Exclude the center coordinate\n                adj_coords.append([i, j])\n    \n    return adj_coords\n",
    "MbppEval/739": "import math\n\ndef find_Index(n):\n    num = 0\n    index = 0\n\n    while True:\n        num += 1\n        index += 1\n        triangular_number = (num * (num + 1)) // 2\n        \n        if int(math.log10(triangular_number) + 1) >= n:\n            return index\n",
    "MbppEval/744": "def check_none(test_tup):\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False\n",
    "MbppEval/746": "import math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    area = (a / 360) * math.pi * r**2\n    return area\n",
    "MbppEval/745": "def divisible_by_digits(startnum, endnum):\n    result = []\n    \n    for num in range(startnum, endnum+1):\n        digits = str(num)\n        divisible = all(num % int(digit) == 0 for digit in digits if int(digit) != 0)\n        \n        if divisible:\n            result.append(num)\n    \n    return result\n",
    "MbppEval/743": "def rotate_right(lst, m):\n    rotation_amt = m % len(lst)\n    \n    rotated_lst = lst[-rotation_amt:][::-1] + lst[:-rotation_amt][::-1]\n\n    return rotated_lst\n",
    "MbppEval/749": "def sort_numeric_strings(nums_str):\n    nums_int = [int(num) for num in nums_str]\n    nums_sorted = sorted(nums_int)\n    return nums_sorted\n",
    "MbppEval/748": "import re\ndef capital_words_spaces(str1):\n    result = \"\"\n    for char in str1:\n        if char.isupper():\n            if result and result[-1] != \" \":\n                result += \" \"\n            result += char\n        else:\n            result += char\n    return result\n",
    "MbppEval/750": "def add_tuple(test_list, test_tup):\n    new_list = list(test_list)\n    new_list.extend(test_tup)\n    return new_list\n",
    "MbppEval/747": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    dp = [[[0 for _ in range(o + 1)] for _ in range(n + 1)] for _ in range(m + 1)]\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, o + 1):\n                if X[i - 1] == Y[j - 1] == Z[k - 1]:\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i - 1][j][k], dp[i][j - 1][k], dp[i][j][k - 1])\n\n    return dp[m][n][o]\n",
    "MbppEval/751": "def check_min_heap_helper(arr, i):\n    if i >= len(arr):\n        return True\n    \n    left_child = 2 * i + 1\n    right_child = 2 * i + 2\n    \n    if left_child >= len(arr):\n        return True\n    \n    if arr[i] > arr[left_child] or (right_child < len(arr) and arr[i] > arr[right_child]):\n        return False\n    \n    return True\n",
    "MbppEval/753": "def min_k(test_list, K):\n    test_list.sort(key=lambda x: x[1])\n    return test_list[:K]\n",
    "MbppEval/96": "import math\n\ndef divisor(n):\n    count = 0\n    sqrt_n = int(math.sqrt(n))\n    \n    for i in range(1, sqrt_n + 1):\n        if n % i == 0:\n            count += 2  # Increment count for both 'i' and 'n // i'\n    \n    if sqrt_n * sqrt_n == n:\n        count -= 1  # Decrement count if sqrt(n) is a divisor\n    \n    return count\n",
    "MbppEval/756": "import re\n\ndef text_match_zero_one(text):\n    if re.search(r'ab+', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
    "MbppEval/755": "def second_smallest(numbers):\n    unique_numbers = list(set(numbers))\n    unique_numbers.sort()\n\n    if len(unique_numbers) < 2:\n        return None\n\n    smallest = unique_numbers[0]\n    unique_numbers.remove(smallest)\n\n    second_smallest = unique_numbers[0]\n    \n    return second_smallest\n",
    "MbppEval/754": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    \n    for el1, el2, el3 in zip(l1, l2, l3):\n        if el1 == el2 == el3:\n            common_elements.append(el1)\n    \n    return common_elements\n",
    "MbppEval/757": "def count_reverse_pairs(test_list):\n    count = 0  # Initialize the count variable\n\n    for i in range(len(test_list)):  # Iterate through the list of strings\n        for j in range(i+1, len(test_list)):  # Check if one string is the reverse of the other\n            if test_list[i][::-1] == test_list[j]:\n                count += 1  # Increment the count by 1\n\n    return str(count)  # Return the count as a string\n",
    "MbppEval/759": "def is_decimal(num):\n    try:\n        float_num = float(num)\n        if '.' in num:\n            integer_part, decimal_part = num.split('.')\n            if len(decimal_part) == 2:\n                return True\n    except ValueError:\n        pass\n    return False\n",
    "MbppEval/760": "def unique_Element(arr):\n    unique_set = set(arr)\n\n    if len(unique_set) == 1:\n        return 'YES'\n    else:\n        return 'NO'\n",
    "MbppEval/752": "def jacobsthal_num(n): \n    if n <= 0:  \n        return None\n    \n    a, b = 0, 1  \n    \n    if n == 1 or n == 2:  \n        return a if n == 1 else b\n    \n    for _ in range(3, n + 1):  \n        c = a + 2 * b  \n        a, b = b, c  \n        \n    return c  \n",
    "MbppEval/762": "def check_monthnumber_number(monthnum3):\n    if 1 <= monthnum3 <= 12:\n        if monthnum3 in [4, 6, 9, 11]:\n            return True\n        else:\n            return False\n    return False\n",
    "MbppEval/764": "def number_ctr(input_str):\n    digit_count = 0\n    for char in input_str:\n        if char.isdigit():\n            digit_count += 1\n    return digit_count\n",
    "MbppEval/765": "import math\n\ndef is_polite(n):\n    count = 0\n    number = 1\n    \n    # Step 1: Initialize a variable `count` to 0 to keep track of the number of polite numbers found.\n    while count < n:\n        number += math.floor(number / 2)  # Step 2: Increment number using the polite formula\n        \n        # Step 3: Check if the incremented number is a polite number\n        if number % 2 == 1:\n            count += 1  # Step 4: Increment count if the number is a polite number\n            \n    return number  # Step 5: Return the nth polite number\n",
    "MbppEval/767": "def get_pairs_count(arr, sum):\n    pair_count = 0\n\n    for i in range(len(arr)):\n        diff = sum - arr[i]\n\n        for j in range(i + 1, len(arr)):\n            if arr[j] == diff:\n                pair_count += 1\n\n    return pair_count\n",
    "MbppEval/766": "def pair_wise(l1):\n    pairs = []\n    for i in range(len(l1) - 1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs\n",
    "MbppEval/769": "def Diff(li1, li2):\n    diff_list = []\n    for elem in li1:\n        if elem not in li2:\n            diff_list.append(elem)\n    return diff_list\n",
    "MbppEval/770": "def odd_num_sum(n):\n    result = 0\n    count = 0\n    \n    for i in range(1, n*2, 2):\n        result += i**4\n        count += 1\n        if count == n:\n            break\n        \n    return result\n",
    "MbppEval/763": "if diff < min_diff:\n    min_diff = diff\nreturn min_diff\n",
    "MbppEval/740": "def tuple_to_dict(test_tup):\n    result_dict = {}  # Step 1: Create an empty dictionary to store the key-value pairs\n    \n    # Step 3: Iterate over the tuple using a for loop\n    for i in range(0, len(test_tup), 2):\n        result_dict[test_tup[i]] = test_tup[i + 1]  # Step 4: Add key-value pair to the dictionary\n\n    return result_dict\n",
    "MbppEval/772": "def remove_length(test_str, K):\n    words = test_str.split()\n    filtered_words = [word for word in words if len(word) != K]\n    new_str = ' '.join(filtered_words)\n    return new_str\n",
    "MbppEval/775": "def odd_position(nums):\n    for index, num in enumerate(nums):\n        if index % 2 == 1:\n            if num % 2 == 0:\n                return False\n    return True\n",
    "MbppEval/777": "def find_sum(arr):\n    unique_elements = []\n    for element in arr:\n        if element not in unique_elements:\n            unique_elements.append(element)\n    \n    sum_elements = sum(unique_elements)\n    \n    return sum_elements\n",
    "MbppEval/75": "def find_tuples(test_list, K):\n    result = []\n    for tup in test_list:\n        if all(elem % K == 0 for elem in tup):\n            result.append(tup)\n    \n    return result\n",
    "MbppEval/778": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    packed_list = []\n    \n    grouped_elements = groupby(list1)\n    for key, group in grouped_elements:\n        packed_list.append(list(group))\n    \n    return packed_list\n",
    "MbppEval/779": "def unique_sublists(list1):\n    counts = {}\n    \n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        \n        if sublist_tuple in counts:\n            counts[sublist_tuple] += 1\n        else:\n            counts[sublist_tuple] = 1\n            \n    return counts\n",
    "MbppEval/780": "from itertools import combinations\n\ndef find_combinations(test_list):\n    sums = []\n    pairs = combinations(test_list, 2)\n    for pair in pairs:\n        sum_pair = tuple(sum(x) for x in zip(*pair))\n        sums.extend([sum_pair, sum_pair[::-1]])\n    return sums\n",
    "MbppEval/776": "def count_vowels(test_str):\n    count = 0\n    vowels = 'aeiouAEIOU'\n    for i in range(1, len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i - 1] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    return count\n",
    "MbppEval/781": "import math \n\ndef count_divisors(n):\n    divisors = []\n    \n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if n//i != i:\n                divisors.append(n//i)\n                \n    count = len(divisors)\n    \n    if count % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n",
    "MbppEval/785": "def tuple_str_int(test_str):\n    test_str = test_str.strip(\"()\")\n    str_elements = test_str.split(\",\")\n    int_elements = [int(element.strip()) for element in str_elements]\n    int_tuple = tuple(int_elements)\n    return int_tuple\n",
    "MbppEval/782": "def odd_length_sum(arr):\n    total_sum = 0\n    \n    for start in range(len(arr)):\n        for end in range(start, len(arr)):\n            subarray_length = end - start + 1\n            \n            if subarray_length % 2 != 0:\n                total_sum += sum(arr[start:end+1])\n    \n    return total_sum\n",
    "MbppEval/784": "def mul_even_odd(list1):\n    first_even = None\n    first_odd = None\n\n    for num in list1:\n        if first_even and first_odd:\n            break\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n\n    return first_even * first_odd\n",
    "MbppEval/786": "import bisect\n\ndef right_insertion(a, x):\n    if not a:\n        return 0\n    return bisect.bisect_right(a, x)\n",
    "MbppEval/788": "def new_tuple(test_list, test_str):\n    new_tuple = tuple(test_list) + (test_str,)\n    return new_tuple\n",
    "MbppEval/787": "import re\ndef text_match_three(text):\n    pattern = 'ab{3}'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
    "MbppEval/783": "def rgb_to_hsv(r, g, b):\n    if not all(0 <= x <= 255 for x in (r, g, b)):\n        raise ValueError(\"RGB values must be in range 0-255\")\n    \n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    \n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n    \n    # Calculate hue\n    if delta == 0:\n        hue = 0\n    elif max_val == r:\n        hue = 60 * (((g - b) / delta) % 6)\n    elif max_val == g:\n        hue = 60 * (((b - r) / delta) + 2)\n    else:\n        hue = 60 * (((r - g) / delta) + 4)\n    \n    # Calculate saturation\n    saturation = 0 if max_val == 0 else delta / max_val\n    \n    # Calculate value\n    value = max_val\n    \n    return round(hue, 8), round(saturation * 100, 8), round(value * 100, 8)\n",
    "MbppEval/790": "def even_position(nums):\n    all_even_index_even = True\n\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 != 0:\n                all_even_index_even = False\n                break\n\n    return all_even_index_even\n",
    "MbppEval/791": "def remove_nested(test_tup):\n    non_nested_elements = []\n    for element in test_tup:\n        if not isinstance(element, tuple):\n            non_nested_elements.append(element)\n    return tuple(non_nested_elements)\n",
    "MbppEval/794": "import re\n\ndef text_starta_endb(text):\n    pattern = 'a.*b'\n    return 'Found a match!' if re.match(pattern, text) else 'Not matched!'\n",
    "MbppEval/796": "def return_sum(dict):\n    total_sum = 0\n\n    for value in dict.values():\n        total_sum += value\n\n    return total_sum\n",
    "MbppEval/792": "def count_list(input_list): \n    count = 0\n    for element in input_list:\n        if isinstance(element, list):\n            count += 1\n\n    return count\n",
    "MbppEval/793": "def last(arr, x):\n    index = -1\n    \n    start = 0\n    end = len(arr) - 1\n    \n    while start <= end:\n        mid = start + (end - start) // 2\n        if arr[mid] == x:\n            index = mid\n            start = mid + 1\n        elif arr[mid] < x:\n            start = mid + 1\n        else:\n            end = mid - 1\n    \n    return index\n",
    "MbppEval/799": "def left_rotate(n, d):\n    def decimal_to_binary_32bit(num):\n        return bin(num & 0xFFFFFFFF)[2:].zfill(32)\n    \n    binary_str = decimal_to_binary_32bit(n)\n    rotated_str = binary_str[d:] + binary_str[:d]\n    \n    return int(rotated_str, 2)\n",
    "MbppEval/798": "def _sum(arr):\n    sum_arr = 0\n    for num in arr:\n        sum_arr += num\n    return sum_arr\n",
    "MbppEval/797": "def sum_odd(n): \n    result = 0\n    \n    for i in range(1, n+1):\n        if i % 2 != 0:  # Check if the number is odd\n            result += i\n    \n    return result\n",
    "MbppEval/800": "import re\ndef remove_all_spaces(text):\n    text_without_spaces = re.sub(r'\\s+', '', text)\n    return text_without_spaces\n",
    "MbppEval/801": "def test_three_equal(x, y, z):\n    if x == y == z:\n        return 3\n    elif x == y or y == z or x == z:\n        return 2\n    else:\n        return 0\n",
    "MbppEval/803": "def is_perfect_square(n):\n    root = n ** 0.5\n    return root.is_integer()\n",
    "MbppEval/297": "def flatten_list(list1):\n    def flatten_recursive(nested_list):\n        result = []\n        for element in nested_list:\n            if isinstance(element, list):\n                result.extend(flatten_recursive(element))\n            else:\n                result.append(element)\n        return result\n\n    return flatten_recursive(list1)\n",
    "MbppEval/804": "def is_product_even(arr): \n    product = 1\n\n    for num in arr:\n        product *= num\n\n    return product % 2 == 0\n",
    "MbppEval/807": "def first_odd(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return num\n",
    "MbppEval/806": "def max_run_uppercase(test_str):\n    max_count = 0\n    count = 0\n\n    for char in test_str:\n        if char.isupper():\n            count += 1\n        else:\n            max_count = max(max_count, count)\n            count = 0\n\n    return max_count\n",
    "MbppEval/802": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. \n    Examples:\n    count_Rotation([3,2,1],3) == 1\n    count_Rotation([4,5,1,2,3],5) == 2\n    count_Rotation([7,8,9,1,2,3],6) == 3\n    '''\n    \n    # Implementing Step 0\n    def count_rotation(arr):\n        return len(arr)\n\n    length = count_rotation(arr)\n    \n    # Implementing Step 2\n    copied_arr = arr.copy()\n    \n    # Implementing Step 3\n    copied_arr.sort()\n    \n    # Implementing Step 4\n    for i in range(length):\n        if arr[i] == copied_arr[0]:\n            return i\n",
    "MbppEval/120": "def max_product_tuple(list1):\n    max_product = 0\n\n    for tuple1 in list1:\n        product = abs(tuple1[0] * tuple1[1])\n        if product > max_product:\n            max_product = product\n\n    return max_product\n",
    "MbppEval/808": "def check_K(test_tup, K):\n    for element in test_tup:\n        if element == K:\n            return True\n    return False\n",
    "MbppEval/809": "def check_smaller(test_tup1, test_tup2):\n    is_smaller = True\n    for index in range(len(test_tup1)):\n        if test_tup2[index] >= test_tup1[index]:\n            is_smaller = False\n            break\n    return is_smaller\n",
    "MbppEval/805": "def max_sum_list(lists):\n    max_sum_list = None\n    max_sum = float('-inf')\n    \n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_sum_list = lst\n        \n    return max_sum_list\n",
    "MbppEval/305": "import re\ndef start_withp(words):\n    p_words = []\n    \n    for word in words:\n        word_list = word.split()\n        for w in word_list:\n            if re.match('p', w, re.I):\n                p_words.append(w)\n    \n    return tuple(p_words[:2])\n",
    "MbppEval/773": "import re\n\ndef occurance_substring(text, pattern):\n    matches = re.finditer(pattern, text)\n    match = next(matches, None)  # Get the first match or None if no match\n    if match:\n        substring = match.group()\n        start = match.start()\n        end = match.end()\n        return (substring, start, end)\n    return None\n",
    "MbppEval/734": "def sum_Of_Subarray_Prod(arr):\n    def subarray_product(arr):\n        product = 1\n        for num in arr:\n            product *= num\n        return product\n\n    result = 0\n    n = len(arr)\n    \n    for length in range(1, n+1):\n        for i in range(n-length+1):\n            sublist = arr[i:i+length]\n            product = subarray_product(sublist)\n            result += product\n\n    return result\n",
    "MbppEval/771": "from collections import deque\n\ndef check_expression(exp):\n    brackets = {\"(\": \")\", \"[\": \"]\", \"{\": \"}\"}\n    stack = deque()\n    \n    for char in exp:\n        if char in brackets.keys():\n            stack.append(char)\n        elif char in brackets.values():\n            if not stack or brackets[stack.pop()] != char:\n                return False\n\n    return not stack\n",
    "MbppEval/620": "import itertools\n\ndef largest_subset(numbers):\n    def is_divisible(a, b):\n        if a % b == 0 or b % a == 0:\n            return True\n        return False\n\n    subset_size = 0\n\n    for i in range(1, len(numbers)+1):\n        for subset in itertools.combinations(numbers, i):\n            valid_subset = all(is_divisible(x, y) for x, y in itertools.combinations(subset, 2))\n            if valid_subset and len(subset) > subset_size:\n                subset_size = len(subset)\n\n    return subset_size\n\n# Test the function\nprint(largest_subset([1, 3, 6, 13, 17, 18]))  # should return 4\n",
    "MbppEval/758": "def unique_sublists(list1):\n    unique_counts = {}\n    \n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        \n        if sublist_tuple in unique_counts:\n            unique_counts[sublist_tuple] += 1\n        else:\n            unique_counts[sublist_tuple] = 1\n            \n    return unique_counts\n",
    "MbppEval/593": "import re\n\ndef removezero_ip(ip):\n    octets = ip.split('.')\n    \n    cleaned_octets = [re.sub(r'^0+', '', octet) for octet in octets]\n    \n    new_ip = '.'.join(cleaned_octets)\n    \n    return new_ip\n",
    "MbppEval/306": "def max_sum_increasing_subseq(a, n, index, k):\n    if index == 0:\n        return a[0]\n    \n    dp = [0] * n\n    dp[0] = a[0]\n    \n    for i in range(1, index + 1):\n        dp[i] = a[i]\n        for j in range(i):\n            if a[i] > a[j]:\n                dp[i] = max(dp[i], dp[j] + a[i])\n    \n    max_sum = dp[index]\n    \n    for i in range(index+1, k):\n        if a[i] > a[index]:\n            max_sum = max(max_sum, dp[index] + a[i])\n\n    return max_sum\n",
    "MbppEval/108": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    merged_list = num1 + num2 + num3\n    heapq.heapify(merged_list)\n\n    sorted_result = []\n    while merged_list:\n        sorted_result.append(heapq.heappop(merged_list))\n\n    return sorted_result\n",
    "MbppEval/433": "def check_greater(arr, number):\n    for element in arr:\n        if element > number:\n            return 'No, entered number is less than those in the array'\n    \n    return 'Yes, the entered number is greater than those in the array'\n",
    "MbppEval/721": "def maxAverageOfPath(cost):\n    n = len(cost)\n    if n == 0:\n        return 0\n    \n    dp = [[0] * n for _ in range(n)]\n    \n    dp[0][0] = cost[0][0]\n    \n    # Fill the first row\n    for i in range(1, n):\n        dp[0][i] = (dp[0][i-1] + cost[0][i]) / (2+i)\n    \n    # Fill the first column\n    for j in range(1, n):\n        dp[j][0] = (dp[j-1][0] + cost[j][0]) / (2+j)\n    \n    # Fill remaining cells\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j] / (2+i+j)\n    \n    return dp[n-1][n-1]\n",
    "MbppEval/141": "def pancake_sort(nums):\n    n = len(nums)\n    sorted_flag = False\n    while not sorted_flag:\n        sorted_flag = True\n        for i in range(n-1, 0, -1):\n            if nums[i] < nums[i-1]:\n                max_index = nums.index(max(nums[:i+1]))\n                nums[:max_index+1] = nums[:max_index+1][::-1]\n                nums[:i+1] = nums[:i+1][::-1]\n                sorted_flag = False\n                break\n                \n    return nums\n",
    "MbppEval/88": "import collections\ndef freq_count(list1):\n    frequency_dict = {}\n    for elem in list1:\n        if elem in frequency_dict:\n            frequency_dict[elem] += 1\n        else:\n            frequency_dict[elem] = 1\n    return frequency_dict\n",
    "MbppEval/255": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l, n))\n",
    "MbppEval/301": "def dict_depth(d):\n    if not d:\n        return 0\n    \n    max_depth = 0\n    \n    for value in d.values():\n        if isinstance(value, dict):\n            max_depth = max(max_depth, dict_depth(value) + 1)\n\n    return max_depth\n",
    "MbppEval/410": "def min_val(listval):\n    min_int = None\n    for val in listval:\n        if isinstance(val, int):\n            if min_int is None or val < min_int:\n                min_int = val\n    return min_int\n",
    "MbppEval/140": "def extract_singly(test_list):\n    unique_numbers = set()\n    \n    for sub_list in test_list:\n        for num in sub_list:\n            unique_numbers.add(num)\n    \n    return list(unique_numbers)\n",
    "MbppEval/99": "def decimal_to_binary(n): \n    if n == 0:\n        return '0'\n    \n    binary_representation = ''\n    while n > 0:\n        binary_representation = str(n % 2) + binary_representation\n        n = n // 2\n    \n    return binary_representation.lstrip('0')\n",
    "MbppEval/91": "def find_substring(str1, sub_str):\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False\n",
    "MbppEval/131": "def reverse_vowels(str1):\n    vowels = set(\"aeiouAEIOU\")\n    vowels_found = []\n    \n    for char in str1:\n        if char in vowels:\n            vowels_found.append(char)\n    \n    reversed_vowels = vowels_found[::-1]\n\n    modified_str = \"\"\n    for char in str1:\n        if char in vowels:\n            modified_str += reversed_vowels.pop()\n        else:\n            modified_str += char\n    \n    return modified_str\n",
    "MbppEval/97": "def frequency_lists(list1):\n    frequency_dict = {}\n    flattened_list = [elem for sublist in list1 for elem in sublist]\n    \n    for elem in flattened_list:\n        if elem in frequency_dict:\n            frequency_dict[elem] += 1\n        else:\n            frequency_dict[elem] = 1\n    \n    return frequency_dict\n",
    "MbppEval/619": "def move_num(test_str):\n    alphabets = \"\"\n    numbers = \"\"\n    \n    for char in test_str:\n        if char.isnumeric():\n            numbers += char\n        else:\n            alphabets += char\n\n    return alphabets + numbers\n",
    "MbppEval/92": "def is_undulating(n):\n    if len(str(n)) < 3 or not str(n).isdigit():\n        return False\n\n    n_str = str(n)\n    for i in range(len(n_str) - 2):\n        if not (n_str[i] != n_str[i + 1] and n_str[i + 1] != n_str[i + 2] and n_str[i] != n_str[i + 2]):\n            return False\n    return True\n",
    "MbppEval/6": "def is_Power_Of_Two(x, y):\n    binary_x = bin(x)[2:]\n    binary_y = bin(y)[2:]\n    \n    differing_bit_count = 0\n    differing_bit_position = -1\n    \n    for i, (bit_x, bit_y) in enumerate(zip(binary_x[::-1], binary_y[::-1])):\n        if bit_x != bit_y:\n            differing_bit_count += 1\n            differing_bit_position = i\n    \n    return differing_bit_count == 1\n",
    "MbppEval/61": "def count_substrings(s):\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(num))\n    \n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            if sum_of_digits(int(substring)) == len(substring):\n                count += 1\n                \n    return count\n",
    "MbppEval/83": "def get_Char(strr):\n    sum_ascii = 0\n    for char in strr:\n        ascii_val = ord(char)\n        sum_ascii += ascii_val\n    sum_mod_26 = sum_ascii % 26\n    result_char = chr(sum_mod_26)\n    return result_char\n",
    "MbppEval/272": "def rear_extract(test_list):\n    rear_elements = []\n\n    for tup in test_list:\n        rear_elements.append(tup[-1])\n\n    return rear_elements\n",
    "MbppEval/160": "from math import gcd\n\ndef find_solution(a, b, n):\n    if a == 0 or b == 0:\n        return None\n    \n    if n % gcd(a, b) != 0:\n        return 'No solution'\n\n    def extended_gcd(a, b):\n        if a == 0:\n            return b, 0, 1\n        else:\n            gcd, x, y = extended_gcd(b % a, a)\n            return gcd, y - (b // a) * x, x\n\n    gcd_val, x0, y0 = extended_gcd(a, b)\n\n    multiplier = n // gcd(a, b)\n    x = x0 * multiplier\n    y = y0 * multiplier\n    \n    return ('x =', x, ', y =', y)\n",
    "MbppEval/222": "def check_type(test_tuple):\n    if not test_tuple:\n        return False\n    \n    first_type = type(test_tuple[0])\n    \n    for element in test_tuple:\n        if type(element) != first_type:\n            return False\n    \n    return True\n",
    "MbppEval/123": "def amicable_numbers_sum(limit):\n    def sum_proper_divisors(num):\n        divisors_sum = 0\n        for i in range(1, num):\n            if num % i == 0:\n                divisors_sum += i\n        return divisors_sum\n\n    total_sum = 0\n    for i in range(1, limit + 1):\n        divisors_sum_i = sum_proper_divisors(i)\n        \n        if divisors_sum_i != i and divisors_sum_i <= limit:\n            if i == sum_proper_divisors(divisors_sum_i):\n                total_sum += i\n\n    return total_sum\n",
    "MbppEval/239": "def get_total_number_of_sequences(m, n): \n    count = 0\n    \n    def generate_sequence(current_seq, m, previous_value, n):\n        nonlocal count\n        \n        if len(current_seq) == n:\n            valid = all(prev * 2 <= curr <= m for prev, curr in zip(current_seq, current_seq[1:]))\n            if valid:\n                count += 1\n        else:\n            for num in range(previous_value*2, m+1):\n                generate_sequence(current_seq + [num], m, num, n)\n    \n    generate_sequence([], m, 0, n)\n    \n    return count\n",
    "MbppEval/100": "def next_smallest_palindrome(num):\n    def is_smallest_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    if is_smallest_palindrome(num):\n        return num\n    else:\n        num_str = str(num)\n        n = len(num_str)\n        mid = n // 2\n\n        left_half = num_str[:mid]\n        right_half = num_str[mid + n % 2:]\n\n        # Include the middle digit if the original number has an odd number of digits\n        potential_palindrome = int(left_half + num_str[mid] + left_half[::-1])\n        return potential_palindrome\n\n# Testing next_smallest_palindrome function with example cases\nprint(next_smallest_palindrome(99))  # Expected output: 99 (Already a palindrome)\nprint(next_smallest_palindrome(1221))  # Expected output: 1221 (Smallest palindrome created by mirroring)\n",
    "MbppEval/417": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n\n    Examples:\n    group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n    group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]\n    group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]\n    '''\n\n    group_dict = {}\n\n    for tup in Input:\n        key = tup[0]\n        value = tup[1:]\n\n        if key in group_dict:\n            group_dict[key].append(tup)\n        else:\n            group_dict[key] = [tup]\n\n    return [tuple(sum(values, ())) for values in group_dict.values()]\n",
    "MbppEval/462": "def combinations_list(list1):\n    import itertools\n    combs = []\n\n    for r in range(len(list1) + 1):\n        for subset in itertools.combinations(list1, r):\n            combs.append(list(subset))\n    \n    return combs\n"
}