{
    "MbppEval/80": "def tetrahedral_number(n):\n    tetrahedral_num = n*(n+1)*(n+2) / 6\n    return tetrahedral_num\n",
    "MbppEval/67": "def bell_number(n):\n    bell = [[0 for _ in range(n)] for _ in range(n)]\n    bell[0][0] = 1\n    \n    return bell\n",
    "MbppEval/85": "import math\n\ndef surfacearea_sphere(r):\n    surface_area = 4 * math.pi * r**2\n    return surface_area\n",
    "MbppEval/79": "def word_len(s):\n    word_length = len(s)\n    \n    if word_length % 2 == 0:\n        return False\n    else:\n        return True\n",
    "MbppEval/58": "def opposite_Signs(x, y):\n    if (x < 0 and y > 0) or (x > 0 and y < 0):\n        return True\n    else:\n        return False\n",
    "MbppEval/68": "def is_Monotonic(A):\n    increasing = all(A[i] <= A[i + 1] for i in range(len(A) - 1))\n    decreasing = all(A[i] >= A[i + 1] for i in range(len(A) - 1))\n    \n    return increasing or decreasing\n",
    "MbppEval/86": "def centered_hexagonal_number(n):\n    return n*(2*n-1)*3\n",
    "MbppEval/59": "def is_octagonal(n):\n    octagonal_number = 3 * n * (n - 1) + 1\n    return octagonal_number\n",
    "MbppEval/89": "def closest_num(N):\n    if not isinstance(N, int):\n        return 'Invalid input. Please enter an integer.'\n    \n    return N - 1\n\nprint(closest_num(11))\n",
    "MbppEval/93": "def power(a, b):\n    result = a ** b\n    return result\n",
    "MbppEval/17": "def square_perimeter(a):\n    perimeter = 4 * a\n    return perimeter\n",
    "MbppEval/56": "def check(num):\n    num_str = str(num)\n    reversed_num = int(num_str[::-1])\n    \n    twice_reversed = 2 * reversed_num\n    \n    return num == twice_reversed - 1\n",
    "MbppEval/96": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n",
    "MbppEval/14": "def find_Volume(l, b, h):\n    area_base = 0.5 * b * h\n    volume = area_base * l\n    return volume\n",
    "MbppEval/77": "    return absolute_difference % 11 == 0\n",
    "MbppEval/6": "def differ_At_One_Bit_Pos(num1, num2):\n    xor_result = num1 ^ num2\n    set_bits_count = bin(xor_result).count('1')\n\n    return set_bits_count == 1\n",
    "MbppEval/66": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n",
    "MbppEval/101": "def kth_element(arr, k):\n    if k <= 0 or k > len(arr):\n        return \"Invalid value of k\"\n    \n    return arr[k-1]\n",
    "MbppEval/8": "def square_nums(nums):\n    squared_nums = []\n    \n    for num in nums:\n        squared_num = num ** 2\n        squared_nums.append(squared_num)\n    \n    return squared_nums\n",
    "MbppEval/98": "def multiply_num(numbers):\n    product = 1\n    \n    for num in numbers:\n        product *= num\n        \n    result = product / len(numbers)\n    \n    return result\n",
    "MbppEval/16": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z]+_[a-z]+'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
    "MbppEval/91": "def find_substring(str1, sub_str):\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False\n",
    "MbppEval/82": "import math\n\ndef volume_sphere(r):\n    volume = (4/3) * math.pi * (r ** 3)\n    return volume\n",
    "MbppEval/106": "def add_lists(test_list, test_tup):\n    new_tuple = (*test_tup, *test_list)\n    return new_tuple\n",
    "MbppEval/105": "def count(lst):\n    count = 0\n    for elem in lst:\n        if elem is True:\n            count += 1\n    return count\n",
    "MbppEval/108": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    merged_list = num1 + num2 + num3\n    heapq.heapify(merged_list)\n    sorted_list = []\n    while merged_list:\n        sorted_list.append(heapq.heappop(merged_list))\n    return sorted_list\n",
    "MbppEval/102": "def snake_to_camel(word):\n    words = word.split('_')\n    camel_case_string = words[0] + ''.join([word.capitalize() for word in words[1:]])\n    return camel_case_string\n",
    "MbppEval/64": "def subject_marks(subjectmarks):\n    return sorted(subjectmarks, key=lambda x: x[1])\n",
    "MbppEval/113": "def check_integer(text):\n    if text.isdigit():\n        return True\n    else:\n        return False\n",
    "MbppEval/2": "def similar_elements(test_tup1, test_tup2):\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    shared_elements = set1.intersection(set2)\n\n    return tuple(shared_elements)\n",
    "MbppEval/116": "def tuple_to_int(nums):\n    int_str = ''\n    \n    for num in nums:\n        int_str += str(num)\n    \n    return int(int_str)\n",
    "MbppEval/118": "def string_to_list(string): \n    return string.split()\n",
    "MbppEval/12": "def sort_matrix(M):\n    row_sums = []\n    for row in M:\n        row_sums.append(sum(row))\n\n    sorted_indices = sorted(range(len(M)), key=lambda x: row_sums[x])\n    sorted_matrix = [M[i] for i in sorted_indices]\n\n    return sorted_matrix\n",
    "MbppEval/119": "def search(arr):\n    # Check if the array is empty\n    if not arr:\n        return None\n    \n    for i in range(0, len(arr), 2):\n        # Check if the next element is out of bounds or current element is not equal to next element\n        if i == len(arr)-1 or arr[i] != arr[i+1]:\n            return arr[i]\n",
    "MbppEval/124": "import cmath\n\ndef angle_complex(a, b):\n    complex_num = a + b * 1j\n    angle = cmath.phase(complex_num)\n    return angle\n",
    "MbppEval/71": "def comb_sort(nums):\n    gap = len(nums)\n    swapped = True\n\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / 1.3))\n        swapped = False\n\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n    return nums\n",
    "MbppEval/126": "def sum(a,b):\n    common_divisors = []\n    for i in range(1, min(a,b)+1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    return sum_common_divisors(common_divisors)\n\ndef sum_common_divisors(common_divisors):\n    return sum(common_divisors)\n\n# Testing the function\nprint(sum(10, 15))  # Output should be 6\n",
    "MbppEval/127": "def multiply_int(x, y):\n    result = x * y\n    return result\n",
    "MbppEval/120": "def max_product_tuple(list1):\n    max_product = float('-inf')\n    \n    for tup in list1:\n        absolute_product = abs(tup[0]) * abs(tup[1])\n        if absolute_product > max_product:\n            max_product = absolute_product\n    \n    return max_product\n",
    "MbppEval/95": "def Find_Min_Length(lst):\n    min_length = float('inf')\n\n    for sub_lst in lst:\n        if len(sub_lst) < min_length:\n            min_length = len(sub_lst)\n\n    return min_length\n",
    "MbppEval/128": "def long_words(n, str):\n    words = str.split()\n    long_words_list = [word for word in words if len(word) > n]\n    return long_words_list\n",
    "MbppEval/130": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    counts = defaultdict(int)\n    \n    for num in nums:\n        counts[num] += 1\n\n    max_num = max(counts, key=counts.get)\n    \n    return (max_num, counts[max_num])\n",
    "MbppEval/75": "def find_tuples(test_list, K):\n    result_tuples = []\n    if not test_list:\n        return '[]'\n    \n    for tpl in test_list:\n        if all(elem % K == 0 for elem in tpl):\n            result_tuples.append(tpl)\n    \n    return str(result_tuples)\n",
    "MbppEval/132": "def tup_string(tup1):\n    result = \"\"  # Step 0: Create an empty string\n    \n    for char in tup1:  # Step 1: Loop through each element in the input tuple\n        result += char  # Step 2: Add each element to the string\n    \n    return result  # Step 3: Return the final string\n",
    "MbppEval/19": "def test_duplicate(arraynums):\n    unique_set = set()\n    for num in arraynums:\n        if num in unique_set:\n            return True\n        unique_set.add(num)\n    return False\n",
    "MbppEval/133": "def sum_negativenum(nums):\n    negative_sum = 0\n    \n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    \n    return negative_sum\n",
    "MbppEval/135": "def hexagonal_num(n): \n    if n <= 0:\n        return None\n    return n * (2*n - 1)\n",
    "MbppEval/125": "def find_length(string):\n    max_diff = 0\n    \n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            substr = string[i:j+1]\n            count_0 = substr.count('0')\n            count_1 = len(substr) - count_0\n            diff = abs(count_0 - count_1)\n            max_diff = max(max_diff, diff)\n\n    return max_diff\n",
    "MbppEval/139": "import math\n\ndef circle_circumference(r):\n    circumference = 2 * math.pi * r\n    return circumference\n",
    "MbppEval/140": "def extract_singly(test_list):\n    extracted_numbers = []\n    \n    for sublist in test_list:\n        for num in sublist:\n            extracted_numbers.append(num)\n    \n    return extracted_numbers\n",
    "MbppEval/137": "from array import array\n\ndef zero_count(nums):\n    zero_count = nums.count(0)\n    non_zero_count = len(nums) - zero_count\n    \n    if non_zero_count == 0:\n        return 0.00\n    \n    ratio = zero_count / non_zero_count\n    return round(ratio, 2)\n\n# Test the function with examples\nprint(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8))\nprint(zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8))\nprint(zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17]))\n",
    "MbppEval/138": "def is_Sum_Of_Powers_Of_Two(n): \n    if n < 1:\n        return False\n    \n    for i in range(n, 0, -1):\n        if 2**i <= n:\n            n -= 2**i\n            if n == 0:\n                return True\n    \n    return False\n",
    "MbppEval/131": "def reverse_vowels(str1):\n    left = 0\n    right = len(str1) - 1\n    \n    str_list = list(str1)\n    \n    vowels = set(\"aeiouAEIOU\")\n    \n    while left < right:\n        if str_list[left] not in vowels:\n            left += 1\n        elif str_list[right] not in vowels:\n            right -= 1\n        else:\n            str_list[left], str_list[right] = str_list[right], str_list[left]\n            left += 1\n            right -= 1\n    \n    return \"\".join(str_list)\n",
    "MbppEval/92": "def is_undulating(n):\n    if len(n) < 3:\n        return False\n    \n    if not n.isdigit():\n        return False\n    \n    if n[0] == n[1]:\n        return False\n\n    for i in range(2, len(n)):\n        if n[i] == n[i - 1] or n[i] != n[i - 2]:\n            return False\n    \n    return True\n",
    "MbppEval/57": "def find_Max_Num(arr):\n    result = \"\"\n    \n    arr.sort(reverse=True)\n    \n    result = ''.join(map(str, arr))\n    \n    result = int(result)\n    return result\n",
    "MbppEval/90": "def len_log(list1):\n    max_length = 0\n    for word in list1:\n        word_length = len(word)\n        if word_length > max_length:\n            max_length = word_length\n\n    return max_length\n",
    "MbppEval/160": "def find_solution(a, b, n):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def extended_gcd(a, b):\n        if a == 0:\n            return (b, 0, 1)\n        else:\n            g, y, x = extended_gcd(b % a, a)\n            return (g, x - (b // a) * y, y)\n\n    g = gcd(a, b)\n    if n % g != 0:\n        return 'No solution'\n\n    x, y = extended_gcd(a, b)[1:]\n    \n    return 'x = ', x * (n // g), ', y = ', y * (n // g)\n",
    "MbppEval/142": "def count_samepair(list1, list2, list3):\n    count = 0\n    \n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    \n    return count\n",
    "MbppEval/9": "def find_Rotations(input_str):\n    str_len = len(input_str)\n\n    if str_len < 2:\n        return 0\n    \n    for i in range(1, str_len):\n        rotated_str = input_str[i:] + input_str[:i]\n        if input_str == rotated_str:\n            return i\n",
    "MbppEval/84": "def sequence(n): \n    '''\n    Find the nth number in the Newman-Conway sequence.\n\n    Examples:\n    sequence(10) == 6\n    sequence(2) == 1\n    sequence(3) == 2\n    '''\n    if n <= 0:\n        return \"Invalid input\"\n    if n == 1 or n == 2:\n        return 1\n\n    sequence = [0, 1, 1]  # Initialize with the first two elements of the sequence\n\n    for i in range(3, n+1):\n        sequence.append(sequence[sequence[i - 1]] + sequence[i - sequence[i - 1]])\n\n    return sequence[n]\n",
    "MbppEval/167": "def next_power_of_2(n): \n    power = 1\n",
    "MbppEval/166": "def find_even_pair(A): \n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2 == 0:\n                count += 1\n    return count\n",
    "MbppEval/170": "def sum_range_list(list1, m, n):\n    if m < 0 or n >= len(list1) or m > n:\n        return \"Invalid range indices\"\n    \n    sum_range = sum(list1[m:(n+1)])\n    \n    return sum_range\n",
    "MbppEval/168": "def frequency(a, x): \n    count = 0\n    \n    for num in a:\n        if num == x:\n            count += 1\n            \n    return count\n",
    "MbppEval/171": "import math\n\ndef perimeter_pentagon(a):\n    perimeter = 5 * a\n    return perimeter\n",
    "MbppEval/3": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n\n    Examples:\n    is_not_prime(2) == False\n    is_not_prime(10) == True\n    is_not_prime(35) == True\n    '''\n    if n < 2:\n        return True\n    \n    limit = math.isqrt(n)\n    \n    for i in range(2, limit + 1):\n        if n % i == 0:\n            return True\n            \n    return False\n",
    "MbppEval/222": "def check_type(test_tuple):\n    if not test_tuple:\n        return False\n    \n    reference_type = type(test_tuple[0])\n    \n    for element in test_tuple:\n        if type(element) != reference_type:\n            return False\n    \n    return True\n",
    "MbppEval/224": "def count_Set_Bits(n): \n    count = 0\n    \n    while n:\n        count += n & 1\n        n >>= 1\n\n    return count\n",
    "MbppEval/70": "def find_equal_tuple(Input, expected_length):\n    for tup in Input:\n        if len(tup) != expected_length:\n            return 'All tuples do not have same length'\n    return 'All tuples have same length'\n",
    "MbppEval/227": "def min_of_three(a, b, c):\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\n",
    "MbppEval/172": "def count_occurrence(s):\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] == 'std':\n            count += 1\n    return count\n",
    "MbppEval/228": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    mask = ~(2 ** (r - l + 1) - 1) << l\n    return n & mask == 0\n",
    "MbppEval/230": "def replace_blank(str1, char):\n    return str1.replace(\" \", char)\n",
    "MbppEval/232": "import heapq\n\ndef larg_nnum(list1, n):\n    return heapq.nlargest(n, list1)\n",
    "MbppEval/20": "import math\n\ndef is_woodall(x):\n    if x <= 0:\n        return False\n\n    n = 1\n    woodall_num = n * x - 1\n\n    while woodall_num < x:\n        n += 1\n        woodall_num = n * x - 1\n\n    if woodall_num == x:\n        return True\n\n    return False\n",
    "MbppEval/4": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    heap = []\n    \n    for num in nums:\n        hq.heappush(heap, -num)\n        \n    result = []\n    for _ in range(n):\n        result.append(-hq.heappop(heap))\n        \n    return result\n",
    "MbppEval/234": "def volume_cube(l):\n    '''\n    This function calculates the volume of a cube given its side length.\n    \n    :param l: side length of the cube\n    :return: volume of the cube\n    '''\n    volume = l**3\n    return volume\n",
    "MbppEval/233": "import math\n\ndef lateralsuface_cylinder(r, h):\n    return 2 * math.pi * r * h\n",
    "MbppEval/229": "def re_arrange_array(arr, n):\n    neg_elements = []\n    pos_elements = []\n    \n    for num in arr[:n]:\n        if num < 0:\n            neg_elements.append(num)\n        else:\n            pos_elements.append(num)\n    \n    re_arranged_arr = neg_elements + pos_elements\n    \n    return re_arranged_arr\n",
    "MbppEval/237": "from collections import Counter\n\ndef check_occurrences(test_list):\n    tuple_counter = Counter(test_list)\n    return dict(tuple_counter)\n",
    "MbppEval/235": "def even_bit_set_number(n):\n    # Step 0: Convert the given number to binary\n    binary_n = bin(n)[2:]\n\n    # Step 1: Initialize a mask to set all even bits to 1 in binary (10 in binary)\n    mask = int(''.join(['10' * (len(binary_n)//2)]), 2)\n\n    # Step 2: Perform a bitwise OR operation between the number and the mask to set all even bits\n    result = n | mask\n\n    return result\n\n# Test the function\nprint(even_bit_set_number(10))  # Expected output: 10\nprint(even_bit_set_number(20))  # Expected output: 30\nprint(even_bit_set_number(30))  # Expected output: 30\n",
    "MbppEval/240": "def replace_list(list1, list2):\n    new_list = list(list1)  # Create a new list by copying all elements from list1\n    if len(new_list) > 0:\n        new_list[-1:] = list2  # Replace the last element of new_list with elements from list2\n    return new_list\n",
    "MbppEval/244": "import math\n\ndef next_Perfect_Square(N):\n    square_root = math.sqrt(N)\n    if square_root.is_integer():\n        next_square = (int(square_root) + 1) ** 2\n    else:\n        next_square = math.ceil(square_root) ** 2\n\n    return next_square\n",
    "MbppEval/242": "def count_charac(str1):\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n\n# Let's test the function with some examples\nprint(count_charac(\"python programming\"))  # Output should be 18\nprint(count_charac(\"language\"))  # Output should be 8\nprint(count_charac(\"words\"))  # Output should be 5\n",
    "MbppEval/163": "from math import tan, pi\n\ndef area_polygon(s, l):\n    a = l / (2 * tan(pi/s))\n    area = (s * l * a) / 2\n    \n    return area\n",
    "MbppEval/246": "def babylonian_squareroot(number):\n    guess = number / 2\n    \n    while True:\n        improved_guess = (guess + number / guess) / 2\n        if abs(improved_guess - guess) < 0.00001:  # Check if the guess is close enough to the actual square root\n            return improved_guess\n        guess = improved_guess\n",
    "MbppEval/248": "def harmonic_sum(n):\n    sum = 0\n    \n    for i in range(1, n):\n        sum += 1/i\n    \n    return sum\n",
    "MbppEval/11": "def remove_Occ(s, ch):\n    if s.count(ch) < 2:\n        return s\n    \n    first_occ = s.index(ch)\n    last_occ = s.rindex(ch)\n    \n    new_str = s[:first_occ] + s[first_occ+1:last_occ] + s[last_occ+1:]\n    \n    return new_str\n",
    "MbppEval/165": "def count_char_position(str1): \n    count = 0\n    str1 = str1.lower()\n\n    for index, char in enumerate(str1):\n        if char.isalpha():\n            char_index = ord(char) - ord('a') + 1\n            if char_index == index + 1:\n                count += 1\n\n    return count\n",
    "MbppEval/250": "def count_X(tup, x): \n    countght = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count\n",
    "MbppEval/251": "def insert_element(lst, element):\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result\n",
    "MbppEval/123": "def amicable_numbers_sum(limit):\n    def sum_divisors(n):\n        divisors_sum = 1\n        for i in range(2, n):\n            if n % i == 0:\n                divisors_sum += i\n        return divisors_sum\n\n    total_sum = 0\n    for n in range(1, limit + 1):\n        sum_div_n = sum_divisors(n)\n        sum_div_sum_div_n = sum_divisors(sum_div_n)\n\n        if n != sum_div_n and n == sum_div_sum_div_n:\n            total_sum += n\n\n    return total_sum\n",
    "MbppEval/249": "def intersection_array(array_nums1, array_nums2):\n    intersection = []\n\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.append(num)\n\n    return intersection\n",
    "MbppEval/257": "def swap_numbers(a, b):\n    return (b, a)\n",
    "MbppEval/83": "def get_Char(strr):\n    total_ascii = 0\n    for char in strr:\n        total_ascii += ord(char)\n    \n    char_val = chr((total_ascii % 26) + ord('a'))\n    \n    return char_val\n",
    "MbppEval/253": "def count_integer(list1):\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count\n",
    "MbppEval/260": "def newman_prime(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def generate_prime_numbers(n):\n        prime_numbers = []\n        num = 2\n        \n        while len(prime_numbers) < n:\n            if is_prime(num):\n                prime_numbers.append(num)\n            num += 1\n            \n        return prime_numbers\n\n    def newman_shanks_williams_prime(k, previous_nsw_primes):\n        if k == 0:\n            return 1\n        elif k == 1:\n            return 1\n        else:\n            return 2**k * previous_nsw_primes[k-1] - previous_nsw_primes[k-2] + 1\n\n    prime_numbers = generate_prime_numbers(n)\n    nsw_primes = [newman_shanks_williams_prime(k, nsw_primes) for k, nsw_primes in enumerate([1] + prime_numbers)]\n    \n    return nsw_primes[n-1]\n",
    "MbppEval/261": "def division_elements(test_tup1, test_tup2):\n    result = []\n    \n    for elem1, elem2 in zip(test_tup1, test_tup2):\n        result.append(elem1 / elem2)\n    \n    return tuple(result)\n",
    "MbppEval/259": "def maximize_elements(test_tup1, test_tup2):\n    res = []\n    \n    for tup1, tup2 in zip(test_tup1, test_tup2):\n        max_values = [max(val1, val2) for val1, val2 in zip(tup1, tup2)]\n        \n        res.append(tuple(max_values))\n    \n    return tuple(res)\n",
    "MbppEval/262": "def split_two_parts(list1, L):\n    if len(list1) < L:\n        return \"Error: Length of list is less than L.\"\n    \n    part1 = list1[:L]\n    part2 = list1[L:]\n    \n    return (part1, part2)\n",
    "MbppEval/74": "def is_samepatterns(colors, patterns):\n    color_to_pattern = {}\n    \n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n    \n    return True\n",
    "MbppEval/265": "def list_split(S, step):\n    result_lists = []\n    for i in range(step):\n        sublist = S[i::step]\n        result_lists.append(sublist)\n    return result_lists\n",
    "MbppEval/264": "import math\n\ndef dog_age(h_age):\n    ''' \n    Calculate a dog's age in dog's years.\n\n    Examples:\n    dog_age(12) == 61\n    dog_age(15) == 73\n    dog_age(24) == 109\n    '''\n    human_years = h_age * 7\n    \n    dog_years = 16 * math.log(human_years) + 31\n    \n    return dog_years\n",
    "MbppEval/266": "def lateralsurface_cube(l):\n    return 4 * l**2\n",
    "MbppEval/268": "def find_star_num(n): \n    star_number = 6 * n * (n - 1) + 1\n    return star_number\n",
    "MbppEval/269": "def ascii_value(k):\n    ascii_val = ord(k)\n    return ascii_val\n",
    "MbppEval/267": "def square_Sum(n):\n    sum_squares = 0\n\n    for i in range(1, 2*n+1, 2):\n        square = i * i\n        sum_squares += square\n\n    return sum_squares\n",
    "MbppEval/256": "def count_Primes_nums(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n\n    return count\n",
    "MbppEval/270": "def sum_even_and_even_index(arr):\n    even_sum = 0\n    for index, num in enumerate(arr):\n        if num % 2 == 0 and index % 2 == 0:\n            even_sum += num\n    \n    return even_sum\n",
    "MbppEval/274": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    result = 0\n    for i in range(n+1):\n        if i % 2 == 0:\n            result += math.comb(n, i)\n    return result\n",
    "MbppEval/276": "import math\n\ndef volume_cylinder(r, h):\n    '''\n    Calculates the volume of a cylinder given its radius and height.\n    \n    :param r: radius of the cylinder\n    :param h: height of the cylinder\n    :return: calculated volume of the cylinder\n    '''\n    pi = math.pi\n    volume = pi * r**2 * h\n    \n    return volume\n",
    "MbppEval/271": "def even_Power_Sum(n): \n    if not isinstance(n, int) or n <= 0:\n        return \"Please enter a positive integer value for n.\"\n    \n    even_numbers = [2*i for i in range(1, n+1)]\n    \n    fifth_powers = [num**5 for num in even_numbers]\n    \n    sum_fifth_powers = sum(fifth_powers)\n\n    return sum_fifth_powers\n",
    "MbppEval/272": "def rear_extract(test_list):\n    rear_elements = []  # Step 0: Create an empty list to store the rear elements of the tuples.\n    \n    for tup in test_list:  # Step 1: Iterate through each tuple in the input list.\n        rear_element = tup[-1]  # Step 2: Get the last element (rear element) of the tuple.\n        rear_elements.append(rear_element)  # Step 3: Append the rear element to the list.\n        \n    return rear_elements  # Step 4: Return the list containing the rear elements.\n",
    "MbppEval/279": "def is_num_decagonal(n): \n    return n * (7*n - 5)\n",
    "MbppEval/278": "def count_first_elements(test_tup):\n    count = 0\n    for elem in test_tup:\n        if elem == test_tup:\n            return count\n        count += 1\n    return count\n",
    "MbppEval/280": "def sequential_search(dlist, item):\n    for index, element in enumerate(dlist):\n        if element == item:\n            return True, index\n    return False, -1\n",
    "MbppEval/252": "import cmath\n\ndef convert(complex_number):\n    return cmath.polar(complex_number)\n\nnumbers = [1, 4, 5]\npolar_coords = []\n\nfor number in numbers:\n    polar_coords.append(convert(complex(number)))\n\nprint(polar_coords)\n",
    "MbppEval/281": "def all_unique(test_list):\n    unique_set = set()\n\n    for elem in test_list:\n        if elem in unique_set:\n            return False\n        unique_set.add(elem)\n    \n    return True\n",
    "MbppEval/273": "def substract_elements(test_tup1, test_tup2):\n    result = []\n    \n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    \n    return tuple(result)\n",
    "MbppEval/282": "def sub_list(nums1, nums2):\n    if len(nums1) != len(nums2):\n        return \"Error: Lists must be of equal length\"\n    \n    result = []\n    for n1, n2 in zip(nums1, nums2):\n        result.append(n1 - n2)\n    return result\n",
    "MbppEval/284": "def check_element(list, element):\n    for item in list:\n        if item != element:\n            return False\n    return True\n",
    "MbppEval/285": "import re\n\ndef text_match_two_three(text):\n    pattern = 'ab{2,3}'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
    "MbppEval/283": "def validate(n):\n    # Step 1: Define a dictionary to store the frequency of each digit\n    digit_freq = {}\n    \n    # Step 2: Convert the integer 'n' to a string\n    n_str = str(n)\n    \n    # Step 3: Iterate over each digit in the string representation of 'n'\n    for digit in n_str:\n        # Step 3a: Check if digit is in the dictionary, if yes, increment its frequency\n        if digit in digit_freq:\n            digit_freq[digit] += 1\n        else:\n            digit_freq[digit] = 1\n        \n        # Step 3b: Check if the frequency of digit is greater than the digit itself\n        if digit_freq[digit] > int(digit):\n            return False\n    \n    return True\n",
    "MbppEval/292": "def find(n, m):\n    result = n // m\n    return result\n",
    "MbppEval/291": "def count_no_of_ways(n, k):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return k\n    else:\n        total_ways_two_posts = k * k\n        same_color, diff_color = k, k * (k - 1)\n\n        for _ in range(2, n):\n            same_color, diff_color = diff_color, (same_color + diff_color) * (k - 1)\n\n        return same_color + diff_color\n",
    "MbppEval/287": "def square_Sum(n):\n    return n * (2 * n + 2) * (n + 1) // 2\n",
    "MbppEval/87": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n\n    # Plan step 1 - Update the empty dictionary with key-value pairs from each dictionary\n    for d in [dict1, dict2, dict3]:\n        merged_dict.update(d)\n\n    return merged_dict\n\n# Testing the implementation\ndict1 = { \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }\ndict2 = { \"G\": \"Green\", \"W\": \"White\" }\ndict3 = { \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" }\nprint(merge_dictionaries_three(dict1, dict2, dict3))\n",
    "MbppEval/290": "def max_length(list1):\n    max_len = 0\n    max_list = None\n    \n    for lst in list1:\n        length = len(lst)\n        \n        if length > max_len:\n            max_len = length\n            max_list = lst\n            \n    return max_len, max_list\n",
    "MbppEval/255": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l, n))\n",
    "MbppEval/293": "import math\n\ndef otherside_rightangle(w, h):\n    if w <= 0 or h <= 0:\n        return \"Invalid input. Sides of a triangle must be positive numbers.\"\n    else:\n        third_side = math.sqrt(w**2 + h**2)\n        return third_side\n",
    "MbppEval/295": "def sum_div(number):\n    total_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            total_sum += i\n    \n    return total_sum\n",
    "MbppEval/294": "def max_val(listval):\n    maximum = None\n    for val in listval:\n        if isinstance(val, (int, float)):\n            if maximum is None or val > maximum:\n                maximum = val\n    return maximum\n",
    "MbppEval/297": "def flatten_list(list1):\n    flattened_list = []\n\n    for elem in list1:\n        if isinstance(elem, list):\n            flattened_list.extend(flatten_list(elem))\n        else:\n            flattened_list.append(elem)\n\n    return flattened_list\n",
    "MbppEval/296": "def get_Inv_Count(arr): \n    inv_count = 0\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n                \n    return inv_count\n",
    "MbppEval/300": "def count_binary_seq(n): \n    count = 0  # Variable to count sequences where sums are equal\n    \n    for i in range(2**(2*n)):\n        seq = format(i, f'0{2*n}b')  # Get the binary sequence for current number\n        first_n_sum = sum(int(bit) for bit in seq[:n])  # Sum of first n bits\n        last_n_sum = sum(int(bit) for bit in seq[n:])  # Sum of last n bits\n        \n        if first_n_sum == last_n_sum:\n            count += 1\n    \n    return count\n",
    "MbppEval/305": "import re\n\ndef start_withp(words):\n    p_words = []\n    for word in words:\n        p_words.extend(re.findall(r'\\b[pP]\\w+', word))\n        \n    return tuple(p_words[:2]) if len(p_words) >= 2 else None\n",
    "MbppEval/306": "def max_sum_increasing_subseq(a, n, index, k):\n    max_sum = [0] * n\n    \n    for i in range(index):\n        max_sum[i] = a[i]\n        for j in range(i):\n            if a[i] > a[j] and max_sum[i] < max_sum[j] + a[i]:\n                max_sum[i] = max_sum[j] + a[i]\n    \n    max_sum_ik = max_sum[index]\n    \n    for i in range(index+1, k):\n        for j in range(index):\n            if a[i] > a[j] and max_sum[i] < max_sum[j] + a[i]:\n                max_sum[i] = max_sum[j] + a[i]\n        max_sum_ik = max(max_sum_ik, max_sum[i])\n    \n    return max_sum_ik\n",
    "MbppEval/304": "def find_element(arr, ranges, rotations, index):\n    \n    def rotate_array(arr, rotations):\n        rotations = rotations % len(arr)\n        return arr[-rotations:] + arr[:-rotations]\n\n    rotated_arr = rotate_array(arr, rotations)\n    \n    for start, end in ranges:\n        subarray = rotated_arr[start:end+1]\n        \n        if index < len(subarray):\n            return subarray[index]\n    \n    return None\n",
    "MbppEval/299": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    aggregate_scores = defaultdict(int)\n    \n    for student, score in stdata:\n        aggregate_scores[student] += score\n\n    max_student = max(aggregate_scores, key=aggregate_scores.get)\n    \n    return (max_student, aggregate_scores[max_student])\n",
    "MbppEval/307": "",
    "MbppEval/309": "def maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b\n",
    "MbppEval/311": "def set_left_most_unset_bit(n):\n    position = 0\n    while n & (1 << position):\n        position += 1\n    return n | (1 << position)\n",
    "MbppEval/388": "def highest_Power_of_2(n):\n    power_2 = 1\n    \n    while 2 * power_2 <= n:\n        power_2 *= 2\n        \n    return power_2\n",
    "MbppEval/310": "    return tuple_result  # Return the tuple\n",
    "MbppEval/312": "import math\n\ndef volume_cone(r, h):\n    return (1/3) * math.pi * r**2 * h\n",
    "MbppEval/238": "def number_of_substrings(str):\n    count = 0\n    \n    n = len(str)\n    \n    for i in range(n):\n        for j in range(i, n):\n            count += 1\n    \n    return count\n",
    "MbppEval/392": "def get_max_sum(n):\n    # Base case\n    if n <= 1:\n        return n\n\n    # Calculate and return the maximum sum\n    max_sum = max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n    return max_sum\n",
    "MbppEval/389": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        lucas_n_1 = 1\n        lucas_n_2 = 2\n",
    "MbppEval/393": "def max_length_list(input_list):\n    max_length = 0\n    max_list = None\n    \n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    \n    return max_length, max_list\n",
    "MbppEval/391": "def convert_list_dictionary(l1, l2, l3):\n    result = []\n    \n    for i in range(len(l1)):\n        nested_dict = { l1[i]: { l2[i]: l3[i] } }\n        result.append(nested_dict)\n    \n    return result\n",
    "MbppEval/390": "    return result\n",
    "MbppEval/94": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    min_second_value = float('inf')  # Initialize with positive infinity to find the smallest value\n    min_first_value = None\n    \n    for first_value, second_value in test_list:\n        if second_value < min_second_value:\n            min_second_value = second_value\n            min_first_value = first_value\n    \n    return min_first_value\n",
    "MbppEval/394": "def check_distinct(test_tup):\n    test_set = set(test_tup)\n    return len(test_set) == len(test_tup)\n",
    "MbppEval/397": "def median_numbers(a, b, c):\n    numbers = [a, b, c]\n    numbers.sort()\n    median = numbers[1]\n    \n    return median\n",
    "MbppEval/395": "def first_non_repeating_character(str1):\n    char_count = {}\n    for char in str1:\n        char_count[char] = char_count.get(char, 0) + 1\n\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n\n    return None\n",
    "MbppEval/400": "def extract_freq(test_list):\n    unique_tuples = set()\n    \n    for t in test_list:\n        unique_tuples.add(frozenset(t))\n    \n    return len(unique_tuples)\n",
    "MbppEval/404": "def minimum(a, b):\n    if a < b:\n        return a\n    else:\n        return b\n",
    "MbppEval/401": "def add_nested_tuples(test_tup1, test_tup2):\n    if len(test_tup1) != len(test_tup2):\n        return \"Error: The lengths of the input tuples are not the same.\"\n    \n    result = []\n    \n    for tup1, tup2 in zip(test_tup1, test_tup2):\n        added_tup = tuple(a + b for a, b in zip(tup1, tup2))\n        result.append(added_tup)\n    \n    return tuple(result)\n",
    "MbppEval/399": "def bitwise_xor(test_tup1, test_tup2):\n    result = []\n    \n    for i in range(len(test_tup1)):\n        xor_result = test_tup1[i] ^ test_tup2[i]\n        result.append(xor_result)\n    \n    return tuple(result)\n",
    "MbppEval/406": "def find_Parity(x):\n    if x % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n",
    "MbppEval/405": "def check_tuplex(tuplex, element):\n    return element in tuplex\n\n# Testing the function\nprint(check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), 'r'))  # True\nprint(check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), '5'))  # False\nprint(check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), 3))  # True\n",
    "MbppEval/396": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    if re.match(regex, string):\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n",
    "MbppEval/410": "def min_val(listval):\n    min_value = float('inf')\n    \n    for item in listval:\n        if isinstance(item, (int, float)) and item < min_value:  # Step 3\n            min_value = item\n    \n    return min_value  # Step 4\n",
    "MbppEval/411": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n\n    Examples:\n    snake_to_camel('android_tv') == 'AndroidTv'\n    snake_to_camel('google_pixel') == 'GooglePixel'\n    snake_to_camel('apple_watch') == 'AppleWatch'\n    '''\n    \n    words = word.split('_')\n    camel_case = words[0] + ''.join(w.title() for w in words[1:])\n    return camel_case\n",
    "MbppEval/409": "def min_product_tuple(list1):\n    min_product = float('inf')\n\n    for i in range(len(list1)):\n        product = list1[i][0] * list1[i][1]\n        min_product = min(min_product, product)\n    \n    return min_product\n",
    "MbppEval/412": "def remove_odd(l):\n    even_numbers = []  \n    \n    for num in l:\n        if num % 2 == 0:\n            even_numbers.append(num)  \n            \n    return even_numbers  \n",
    "MbppEval/413": "def extract_nth_element(list1, n):\n    element_list = []\n    for tpl in list1:\n        element_list.append(tpl[n])\n\n    return element_list\n",
    "MbppEval/164": "import math \n\ndef areEquivalent(num1, num2): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n\n    Examples:\n    areEquivalent(36, 57) == False\n    areEquivalent(2, 4) == False\n    areEquivalent(23, 47) == True\n    '''\n    def divisor_sum(n): \n        sum_divisors = 1\n        for i in range(2, int(math.sqrt(n)) + 1): \n            if n % i == 0: \n                if i == (n / i): \n                    sum_divisors += i \n                else : \n                    sum_divisors += (i + n // i) \n        return sum_divisors\n    \n    sum_divisors_num1 = divisor_sum(num1) \n    sum_divisors_num2 = divisor_sum(num2) \n    \n    return sum_divisors_num1 == sum_divisors_num2\n",
    "MbppEval/414": "def overlapping(list1, list2):\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False\n",
    "MbppEval/407": "def rearrange_bigger(n):\n    digits = [int(d) for d in str(n)]  # Convert the number to a list of digits\n    i = len(digits) - 2\n    while i >= 0 and digits[i] >= digits[i + 1]:  \n        i -= 1\n\n    if i == -1:\n        return False  # If no such index i exists, return False\n\n    j = len(digits) - 1\n    while digits[j] <= digits[i]:  \n        j -= 1\n\n    digits[i], digits[j] = digits[j], digits[i]  # Swap the digits at index i and index j\n    digits[i+1:] = digits[i+1:][::-1]  # Reverse the digits from index i+1 till the end\n\n    return int(''.join(map(str, digits)))  # Convert the list of digits back to a number and return it\n",
    "MbppEval/419": "def round_and_sum(list1):\n    rounded_list = [round(num) for num in list1]\n    total_sum = sum(rounded_list)\n    result = total_sum * len(list1)\n    return result\n",
    "MbppEval/421": "def concatenate_tuple(test_tup):\n    result = \"\"\n    \n    for idx, val in enumerate(test_tup):\n        if idx != 0:\n            result += '-' + str(val)\n        else:\n            result += str(val)\n    \n    return result\n",
    "MbppEval/162": "def sum_series(n):\n    total = 0\n\n    for i in range(n // 2 + 1):\n        total += n - 2*i\n\n    return total\n",
    "MbppEval/420": "def cube_Sum(n):\n    sum_cube = 0\n    \n    for i in range(1, 2*n+1, 2):\n        cube = i**3\n        sum_cube += cube\n        \n    return sum_cube\n",
    "MbppEval/424": "def extract_rear(test_tuple):\n    return [string[-1] for string in test_tuple]\n",
    "MbppEval/422": "def find_Average_Of_Cube(n):\n    sum_cubes = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n    average = sum_cubes / n\n    return average\n",
    "MbppEval/425": "def count_element_in_list(list1, x):\n    count = 0\n\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n\n    return count\n",
    "MbppEval/417": "from itertools import chain\n\ndef group_tuples(Input): \n    grouped_dict = {}\n    \n    for tup in Input:\n        if tup[0] in grouped_dict:\n            grouped_dict[tup[0]].append(tup)\n        else:\n            grouped_dict[tup[0]] = [tup]\n    \n    return [tuple(chain.from_iterable(grouped_dict_val)) for grouped_dict_val in grouped_dict.values()]\n",
    "MbppEval/426": "def filter_oddnumbers(nums):\n    odd_nums = []\n\n    for num in nums:\n        if num % 2 != 0:\n            odd_nums.append(num)\n\n    return odd_nums\n",
    "MbppEval/430": "def parabola_directrix(a, b, c):\n    return (b ** 2 - 4 * a * c) / (4 * a)\n",
    "MbppEval/429": "def and_tuples(test_tup1, test_tup2):\n    result = ()\n    \n    for elem1, elem2 in zip(test_tup1, test_tup2):\n        result += (elem1 & elem2,)\n    \n    return result\n",
    "MbppEval/431": "def common_element(list1, list2):\n    for element1 in list1:\n        if element1 in list2:\n            return True\n    return False\n",
    "MbppEval/427": "import re\n\ndef change_date_format(dt):\n    if not re.match(r'\\d{4}-\\d{2}-\\d{2}', dt):\n        return \"Invalid date format. Please enter date in yyyy-mm-dd format.\"\n    \n    match = re.match(r'(\\d{4})-(\\d{2})-(\\d{2})', dt)\n    year, month, day = match.groups()\n    \n    new_date = f\"{day}-{month}-{year}\"\n    \n    return new_date\n",
    "MbppEval/428": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            current_value = my_list[i]\n            position = i\n            \n            while position >= gap and my_list[position - gap] > current_value:\n                my_list[position] = my_list[position - gap]\n                position -= gap\n                \n            my_list[position] = current_value\n                \n        gap = gap // 2\n        \n    return my_list\n",
    "MbppEval/99": "def decimal_to_binary(n):\n    if n < 0:\n        return 'Error: Input number should be a non-negative integer.'\n    elif n == 0:\n        return '0'\n    \n    binary_digits = []\n    \n    while n > 0:\n        remainder = n % 2\n        binary_digits.append(str(remainder))\n        n = n // 2\n    \n    binary_digits.reverse()\n\n    return ''.join(binary_digits)\n\nprint(decimal_to_binary(8))\n",
    "MbppEval/435": "def last_Digit(n):\n    return int(str(n)[-1])\n",
    "MbppEval/432": "def median_trapezium(base1, base2, height):\n    average_bases = (base1 + base2) / 2\n    median_length = (average_bases * height) / (base1 + base2)\n    return median_length\n",
    "MbppEval/437": "def remove_odd(str1):\n    result = \"\"\n    \n    for i in range(len(str1)):\n        char = str1[i]\n        if i % 2 == 0:\n            result += char\n\n    return result\n",
    "MbppEval/436": "def neg_nos(list1):\n    neg_nums = []\n    \n    for num in list1:\n        if num < 0:\n            neg_nums.append(num)\n    \n    return neg_nums\n",
    "MbppEval/433": "def check_greater(arr, number):\n    for elem in arr:\n        if number < elem:\n            return 'No, the entered number is less than those in the array'\n    return 'Yes, the entered number is greater than those in the array'\n",
    "MbppEval/439": "def multiple_to_single(L):\n    result = \"\"\n    \n    for num in L:\n        result += str(num)\n        \n    final_integer = int(result)\n    \n    return final_integer\n",
    "MbppEval/440": "import re\n\ndef find_adverb_position(text):\n    words = re.findall(r'\\w+|\\S', text)\n    \n    for idx, word in enumerate(words):\n        if word.endswith(\"ly\"):\n            return (text.find(word), text.find(word) + len(word) - 1, word)\n\n# Testing all steps\nprint(find_adverb_position(\"clearly!! we can see the sky\"))  # (0, 6, 'clearly')\nprint(find_adverb_position(\"seriously!! there are many roses\"))  # (0, 9, 'seriously')\nprint(find_adverb_position(\"unfortunately!! sita is going to home\"))  # (0, 13, 'unfortunately')\n",
    "MbppEval/441": "def surfacearea_cube(l):\n    return 6 * l * l\n",
    "MbppEval/438": "def count_bidirectional(test_list):\n    bidirectional_pairs = {}\n    \n    for pair in test_list:\n        sorted_pair = tuple(sorted(pair))\n        tuple_list = list(sorted_pair)\n        \n        if tuple_list in bidirectional_pairs:\n            bidirectional_pairs[tuple_list] += 1\n        else:\n            bidirectional_pairs[tuple_list] = 1\n    \n    count = 0\n    for pair_count in bidirectional_pairs.values():\n        if pair_count == 2:\n            count += 1\n    \n    return str(count)\n",
    "MbppEval/442": "from array import array\n\ndef positive_count(nums):\n    positive_nums_count = 0  # Step 0: Initialize a variable to count positive numbers\n    \n    # Step 1: Iterate through each number in nums\n    for num in nums:\n        if num > 0:\n            positive_nums_count += 1  # Step 2: Count positive numbers\n    \n    ratio = positive_nums_count / len(nums)  # Step 3: Calculate ratio of positive numbers\n    \n    return round(ratio, 2)  # Step 4: Return the ratio rounded to 2 decimal places\n",
    "MbppEval/444": "def trim_tuple(test_list, K):\n    trimmed_tuples = []\n    for tpl in test_list:\n        trimmed_tuples.append(tpl[K:])\n    return '[' + ', '.join([str(tuple(t)) for t in trimmed_tuples]) + ']'\n",
    "MbppEval/443": "def largest_neg(list1):\n    if not list1:\n        return None\n    \n    largest_neg = None\n    \n    for num in list1:\n        if num < 0:\n            if largest_neg is None or num > largest_neg:\n                largest_neg = num\n    \n    return largest_neg\n",
    "MbppEval/445": "def index_multiplication(test_tup1, test_tup2):\n    result = []\n    \n    for tup1, tup2 in zip(test_tup1, test_tup2):\n        multiplied = tuple(x * y for x, y in zip(tup1, tup2))\n        result.append(multiplied)\n    \n    return tuple(result)\n",
    "MbppEval/223": "def is_majority(arr, n, x):\n    if n % 2 != 0:\n        return False\n\n    index_x = arr.index(x)\n\n    if len(arr) - index_x > len(arr) / 2:\n        return True\n    else:\n        return False\n",
    "MbppEval/448": "def cal_sum(n): \n    def perrin_number(n):\n        if n == 0:\n            return 3\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 2\n        else:\n            return perrin_number(n-2) + perrin_number(n-3)\n\n    sum_perrin = 0\n    for i in range(n + 1):\n        sum_perrin += perrin_number(i)\n\n    return sum_perrin\n",
    "MbppEval/450": "def extract_string(str, l):\n    result = []\n    for string in str:\n        if len(string) == l:\n            result.append(string)\n    return result\n",
    "MbppEval/447": "def cube_nums(nums):\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes\n",
    "MbppEval/451": "import re\n\ndef remove_whitespaces(text1):\n    whitespace_pattern = r'\\s+'\n    whitespaces = re.findall(whitespace_pattern, text1)\n    for space in whitespaces:\n        text1 = text1.replace(space, '')\n    return text1\n",
    "MbppEval/454": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
    "MbppEval/455": "def check_monthnumb_number(monthnum2):\n    thirty_one_days_months = [1, 3, 5, 7, 8, 10, 12]\n\n    if monthnum2 in thirty_one_days_months:\n        return True\n    else:\n        return False\n",
    "MbppEval/452": "def loss_amount(actual_cost, sale_amount):\n    difference = sale_amount - actual_cost\n    if difference < 0:\n        return abs(difference)\n    else:\n        return 0\n",
    "MbppEval/458": "def rectangle_area(l, b):\n    area = l * b\n    return area\n",
    "MbppEval/456": "def reverse_string_list(stringlist):\n    reversed_list = []\n    for string in stringlist:\n        reversed_string = ''\n        for char in string:\n            reversed_string = char + reversed_string\n        reversed_list.append(reversed_string)\n    return reversed_list\n",
    "MbppEval/446": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    tup_counter = Counter(tup)\n    \n    total_count = sum(tup_counter[element] for element in lst)\n    \n    return total_count\n",
    "MbppEval/460": "def Extract(lst):\n    result = []\n    for sub_list in lst:\n        result.append(sub_list[0])\n\n    return result\n",
    "MbppEval/453": "import math \n\ndef sumofFactors(n): \n    sum_of_factors = 0\n    \n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum_of_factors += i\n                \n            if n//i != i and (n//i) % 2 == 0:\n                sum_of_factors += n // i\n                \n    return sum_of_factors\n",
    "MbppEval/459": "def remove_uppercase(str1):\n    result = ''\n    for char in str1:\n        if not char.isupper():\n            result += char\n    return result\n",
    "MbppEval/461": "def upper_ctr(s):\n    count = 0\n    for char in s:\n        if char.isupper():\n            count += 1\n    return count\n",
    "MbppEval/457": "def Find_Min(lst):\n    min_length = float('inf)\n    min_sublist = []\n\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist\n",
    "MbppEval/463": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n\n    max_product_so_far = arr[0]\n    current_max_product = arr[0]\n    current_min_product = arr[0]\n\n    for num in arr[1:]:\n        temp_max = current_max_product\n        current_max_product = max(num, num * current_max_product, num * current_min_product)\n        current_min_product = min(num, num * temp_max, num * current_min_product)\n        max_product_so_far = max(max_product_so_far, current_max_product)\n\n    return max_product_so_far\n",
    "MbppEval/464": "def check_value(dict, n):\n    if not dict:\n        return False\n\n    for value in dict.values():\n        if value != n:\n            return False\n    \n    return True\n",
    "MbppEval/470": "def add_pairwise(test_tup):\n    pairwise_sum = []\n\n    for i in range(len(test_tup) - 1):\n        pair_sum = test_tup[i] + test_tup[i + 1]\n        pairwise_sum.append(pair_sum)\n\n    return tuple(pairwise_sum)\n",
    "MbppEval/471": "def find_remainder(arr, n):\n    result = 1\n\n    for num in arr:\n        result *= num\n        result %= n\n\n    return result % n\n",
    "MbppEval/277": "def dict_filter(dict, n):\n    filtered_dict = {}\n    \n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n            \n    return filtered_dict\n",
    "MbppEval/115": "def empty_dit(list1):\n    result = True\n    \n    for dictionary in list1:\n        if dictionary:\n            result = False\n            break\n    \n    return result\n",
    "MbppEval/472": "def check_Consecutive(l): \n    l.sort()\n    for i in range(len(l) - 1):\n        if l[i+1] != l[i] + 1:\n            return False\n    return True\n",
    "MbppEval/475": "def sort_counter(dict1):\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n",
    "MbppEval/473": "test_list1 = [(3, 4), (5, 6), (9, 10), (4, 5)]\ntest_list2 = [(5, 4), (3, 4), (6, 5), (9, 11)]\n\nset1 = set(test_list1)\nset2 = set(test_list2)\n\nintersection_set = set(map(tuple, set1.intersection(set2)))\n\nreturn intersection_set\n",
    "MbppEval/476": "def big_sum(nums):\n    largest = max(nums)\n    smallest = min(nums)\n    return largest + smallest\n",
    "MbppEval/477": "def is_lower(string):\n    return string.lower()\n",
    "MbppEval/474": "def replace_char(str1, ch, newch):\n    if ch in str1:\n        modified_str = str1.replace(ch, newch)\n        return modified_str\n    else:\n        return str1\n\n# Testing the function with example cases\nprint(replace_char(\"polygon\", 'y', 'l'))  # Expected output: \"pollgon\"\nprint(replace_char(\"character\", 'c', 'a'))  # Expected output: \"aharaater\"\nprint(replace_char(\"python\", 'l', 'a'))  # Expected output: \"python\"\n",
    "MbppEval/479": "def first_Digit(n):\n    n_str = str(n)\n    return int(n_str[0])\n",
    "MbppEval/478": "import re\n\ndef remove_lowercase(str1):\n    pattern = \"[a-z]\"\n    \n    return re.sub(pattern, '', str1)\n",
    "MbppEval/554": "def Split(list): \n    odd_integers = []\n    \n    for num in list:\n        if num % 2 != 0:\n            odd_integers.append(num)\n    \n    return odd_integers\n",
    "MbppEval/555": "def difference(n):\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_natural_numbers = (n*(n+1)) // 2\n    difference = sum_of_cubes - sum_of_natural_numbers\n    return difference\n\n# Test the function with examples\nprint(difference(3))  # Output should be 30\nprint(difference(5))  # Output should be 210\nprint(difference(2))  # Output should be 6\n",
    "MbppEval/308": "def large_product(nums1, nums2, N):\n    products = []\n    \n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1*num2)\n    \n    products.sort(reverse=True)\n    \n    return products[:N]\n",
    "MbppEval/556": "def find_Odd_Pair(A, N):\n    count = 0\n\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n\n    return count\n",
    "MbppEval/558": "def digit_distance_nums(n1, n2):\n    absolute_diff = abs(n1 - n2)\n    sum_diff = sum(abs(int(digit1) - int(digit2)) for digit1, digit2 in zip(str(n1), str(n2)))\n    \n    return sum_diff\n",
    "MbppEval/557": "def toggle_string(string):\n    toggled_string = \"\"\n    \n    for char in string:\n        if char.isupper():\n            toggled_string += char.lower()\n        else:\n            toggled_string += char.upper()\n        \n    return toggled_string\n",
    "MbppEval/559": "def max_sub_array_sum(a, size):\n    max_so_far = a[0]\n    max_ending_here = a[0]\n\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far\n",
    "MbppEval/562": "def Find_Max_Length(lst):  \n    max_length = 0\n    \n    for sublist in lst:\n        sublist_length = len(sublist)\n        if sublist_length > max_length:\n            max_length = sublist_length\n\n    return max_length\n",
    "MbppEval/565": "def split(word): \n    characters = []\n    for char in word:\n        characters.append(char)\n    return characters\n",
    "MbppEval/563": "import re\n\ndef extract_values(text):\n    values = re.findall(r'\"(.*?)\"', text)\n    return values\n",
    "MbppEval/560": "def union_elements(test_tup1, test_tup2):\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    union_set = set1.union(set2)\n    result_tuple = tuple(union_set)\n    sorted_tuple = tuple(sorted(result_tuple))\n    return sorted_tuple\n",
    "MbppEval/568": "def empty_list(length):\n    result = []\n    for _ in range(length):\n        result.append({})\n    return result\n",
    "MbppEval/418": "def Find_Max(lst): \n    max_element = []\n    \n    for element in lst:\n        if len(element) > len(max_element):\n            max_element = element\n            \n    return max_element\n",
    "MbppEval/566": "def sum_digits(n):\n    total = 0\n    n_str = str(n)\n    for digit in n_str:\n        total += int(digit)\n    \n    return total\n",
    "MbppEval/569": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n\n    Examples:\n    sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']]) == [['green', 'orange'], ['black'], ['green', 'orange'], ['white']]\n    sort_sublists([['a','b'],['d','c'],['g','h'] , ['f','e']]) == [['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]\n    '''\n    return [sorted(sublist) for sublist in list1]\n",
    "MbppEval/567": "def issort_list(list1):\n    for i in range(1, len(list1)):\n        if list1[i] < list1[i-1]:\n            return False\n    return True\n",
    "MbppEval/574": "def surfacearea_cylinder(r, h):\n    top_bottom_area = 2 * 3.14159 * r**2\n    side_area = 2 * 3.14159 * r * h\n    total_area = top_bottom_area + side_area\n    return total_area\n",
    "MbppEval/573": "def unique_product(list_data):\n    unique_numbers = set()\n    product = 1\n    \n    for num in list_data:\n        unique_numbers.add(num)\n    \n    for unique_num in unique_numbers:\n        product *= unique_num\n    \n    return product\n",
    "MbppEval/577": "    return last_digit\n",
    "MbppEval/572": "def two_unique_nums(nums):\n    unique_nums = []\n    \n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n\n    for num in nums:\n        if num in unique_nums and unique_nums.count(num) > 1:\n            unique_nums.remove(num)\n\n    return unique_nums\n",
    "MbppEval/579": "def find_dissimilar(test_tup1, test_tup2):\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    dissimilar_elements = set1.symmetric_difference(set2)\n    return tuple(dissimilar_elements)\n",
    "MbppEval/578": "def interleave_lists(list1, list2, list3):\n    result = []\n    \n    for i in range(len(list1)):\n        for lst in [list1, list2, list3]:\n            result.append(lst[i])\n    \n    return result\n",
    "MbppEval/582": "def my_dict(dict1):\n    if not dict1:\n        return True\n    else:\n        return False\n",
    "MbppEval/581": "def surface_Area(b, s):\n    base_area = b**2\n    lateral_area = 0.5 * b * s\n    return base_area + lateral_area\n",
    "MbppEval/580": "def even_ele(test_tuple, even_fnc):\n    result_tuple = ()\n    \n    for element in test_tuple:\n        if isinstance(element, tuple):\n            result_tuple += (even_ele(element, even_fnc),)\n        elif even_fnc(element):\n            result_tuple += (element,)\n    \n    return result_tuple\n",
    "MbppEval/576": "def is_Sub_Array(A, B):\n    if not A or not B:\n        return False\n\n    if len(A) == 0 or len(B) == 0:\n        return False\n\n    if len(B) > len(A):\n        return False\n\n    for i in range(len(A)):\n        if A[i:i+len(B)] == B:\n            return True\n\n    return False\n",
    "MbppEval/583": "import math\n\ndef catalan_number(num):\n    return math.factorial(2*num) // (math.factorial(num + 1) * math.factorial(num))\n\nn = 10\ncatalan_10 = catalan_number(n)\nprint(f\"The {n}th Catalan number is: {catalan_10}\")\n",
    "MbppEval/564": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n",
    "MbppEval/587": "def list_tuple(listx):\n    return tuple(listx)\n",
    "MbppEval/586": "def split_Arr(l, n):\n    part_to_move = l[:n]\n    remaining_part = l[n:]\n    result = remaining_part + part_to_move\n    return result\n",
    "MbppEval/588": "def big_diff(nums):\n    max_value = max(nums)\n    min_value = min(nums)\n    return max_value - min_value\n",
    "MbppEval/584": "import re\ndef find_adverbs(text):\n    adverbs = re.finditer(r'\\b\\w+ly\\b', text)\n    first_adverb = next((adverb for adverb in adverbs), None)\n    if first_adverb:\n        return f'{first_adverb.start()}-{first_adverb.end()}: {first_adverb.group()}'\n    else:\n        return \"No adverbs ending with 'ly' found in the text.\"\n",
    "MbppEval/591": "def swap_List(newList):\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n",
    "MbppEval/590": "import cmath\nimport math\n\ndef polar_rect(r, theta_degrees):\n    # Convert angle from degrees to radians\n    theta = math.radians(theta_degrees)\n    \n    # Calculate the rectangular coordinates\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    \n    return ((r, theta), complex(x, y))\n",
    "MbppEval/593": "def removezero_ip(ip):\n    parts = ip.split('.')\n    updated_parts = [str(int(part)) for part in parts]\n    updated_ip = '.'.join(updated_parts)\n    return updated_ip\n",
    "MbppEval/592": "def sum_of_product(n):\n    def calculate_binomial_coeff(n, k):\n        if k == 0 or k == n:\n            return 1\n        else:\n            return calculate_binomial_coeff(n-1, k-1) + calculate_binomial_coeff(n-1, k)\n\n    if n == 0:\n        return 0\n\n    total_sum = 0\n    for i in range(n):\n        total_sum += calculate_binomial_coeff(n-1, i) * calculate_binomial_coeff(n-1, i+1)\n\n    return total_sum\n",
    "MbppEval/596": "import sys\n\ndef tuple_size(tuple_list):\n    total_size = 0\n    for item in tuple_list:\n        total_size += sys.getsizeof(item)\n    return total_size\n\n# Test the function\nprint(tuple_size((\"A\", 1, \"B\", 2, \"C\", 3)))  # Output should be the total size of elements in this tuple in bytes\n",
    "MbppEval/597": "def find_kth(arr1, arr2, k):\n    if k > len(arr1) + len(arr2) or k < 1:\n        return None\n    \n    i = 0  # Pointer for arr1\n    j = 0  # Pointer for arr2\n    \n    for _ in range(k):\n        if i < len(arr1) and (j >= len(arr2) or arr1[i] < arr2[j]):\n            kth = arr1[i]\n            i += 1\n        else:\n            kth = arr2[j]\n            j += 1\n    \n    return kth\n",
    "MbppEval/595": "def min_Swaps(str1, str2):\n    if len(str1) != len(str2):\n        return \"Not Possible\"\n    \n    swap_count = 0\n\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            swap_count += 1\n    \n    return swap_count\n",
    "MbppEval/594": "def diff_even_odd(list1):\n    even = None\n    odd = None\n\n    for num in list1:\n        if num % 2 == 0 and even is None:\n            even = num\n        elif num % 2 != 0 and odd is None:\n            odd = num\n\n        if even is not None and odd is not None:\n            break\n    \n    if even is not None and odd is not None:\n        return abs(even - odd)\n    else:\n        return None\n",
    "MbppEval/600": "def is_Even(n):\n    return n % 2 == 0\n",
    "MbppEval/599": "def sum_average(number):\n    sum_natural_numbers = (number * (number + 1)) // 2\n    average = sum_natural_numbers / number\n    return sum_natural_numbers, average\n",
    "MbppEval/602": "def first_repeated_char(str1):\n    seen_chars = set()\n    \n    for char in str1:\n        if char in seen_chars:\n            return char\n        seen_chars.add(char)\n    \n    return None\n",
    "MbppEval/589": "import math\n\ndef perfect_squares(a, b):\n    squares_list = []\n    \n    for i in range(a, b+1):\n        if math.isqrt(i) ** 2 == i:\n            squares_list.append(i)\n    \n    return squares_list\n",
    "MbppEval/603": "def get_ludic(n):\n    ludic_numbers = []\n\n    for num in range(1, n+1):\n        lucid = True\n\n        if num != 1:\n            for i in ludic_numbers[1:]:\n                if num % i == 0:\n                    lucid = False\n                    break\n\n        if lucid:\n            ludic_numbers.append(num)\n\n    return ludic_numbers\n",
    "MbppEval/606": "import math\n\ndef radian_degree(degree):\n    radians = degree * (math.pi / 180)\n    return radians\n",
    "MbppEval/604": "def reverse_words(s):\n    words = s.split(' ')\n    reversed_words = list(reversed(words))\n    reversed_string = ' '.join(reversed_words)\n    return reversed_string\n",
    "MbppEval/598": "def armstrong_number(number):\n    total = 0\n    num_str = str(number)\n    \n    num_digits = len(num_str)\n    \n    for digit in num_str:\n        total += int(digit) ** num_digits\n    \n    return total == number\n",
    "MbppEval/607": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        start_index = match.start()\n        end_index = match.end()\n        matching_substring = match.group()\n        return matching_substring, start_index, end_index\n",
    "MbppEval/610": "def remove_kth_element(list1, k):\n    modified_list = []\n    \n    for i in range(len(list1)):\n        if i != k - 1:\n            modified_list.append(list1[i])\n    \n    return modified_list\n",
    "MbppEval/611": "def max_of_nth(test_list, N):\n    column_values = []\n    for row in test_list:\n        column_values.append(row[N])\n    max_value = max(column_values)\n    return max_value\n",
    "MbppEval/608": "    return bell_triangle[n][-1]\n",
    "MbppEval/614": "def cummulative_sum(test_list):\n    total_sum = 0\n    for tup in test_list:\n        for val in tup:\n            total_sum += val\n    return total_sum\n",
    "MbppEval/612": "def merge(lst):  \n    first_list = []\n    second_list = []\n    \n    for sub_list in lst:\n        first_list.append(sub_list[0])\n        second_list.append(sub_list[1])\n    \n    return [first_list, second_list]\n",
    "MbppEval/617": "import math\n\ndef min_Jumps(steps, d): \n    distance = abs(d) # Calculate the distance from origin to point (d, 0)\n    jumps_required = distance / steps # Calculate the number of jumps required to cover that distance\n    return jumps_required\n",
    "MbppEval/605": "import math\n\ndef is_prime_num(num):\n    if num <= 1:\n        return False\n    \n    num = abs(num)\n\n    if num in (2, 3):\n        return True\n    \n    for i in range(2, math.isqrt(num) + 1):\n        if num % i == 0:\n            return False\n    \n    return True\n",
    "MbppEval/616": "def tuple_modulo(test_tup1, test_tup2):\n    if len(test_tup1) != len(test_tup2):\n        return \"Error: Input tuples must be of the same length.\"\n\n    result = []\n\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n\n    return tuple(result)\n",
    "MbppEval/615": "def average_tuple(nums):\n    average_values = []\n    \n    for tuple in nums:\n        avg = sum(tuple) / len(tuple)\n        average_values.append(avg)\n    \n    return average_values\n",
    "MbppEval/622": "def get_median(arr1, arr2, n):\n    combined_list = sorted(arr1 + arr2)\n    return combined_list\n",
    "MbppEval/618": "def div_list(nums1, nums2):\n    result = []\n    \n    for num1, num2 in zip(nums1, nums2):\n        result.append(num1 / num2)\n    \n    return result\n",
    "MbppEval/624": "def is_upper(string):\n    return string.upper()\n",
    "MbppEval/623": "def nth_nums(nums, n):\n    result = []\n\n    for num in nums:\n        result.append(num**n)\n\n    return result\n",
    "MbppEval/625": "def swap_List(newList):\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList\n",
    "MbppEval/627": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n\n    missing_num = 0\n\n    for num in range(start, end + 1):\n        if array[num] != missing_num:\n            return missing_num\n        missing_num += 1\n\n    return missing_num\n",
    "MbppEval/141": "def pancake_sort(nums):\n    def find_max_index(lst):\n        return max(range(len(lst)), key=lst.__getitem__)\n    \n    def flip(lst, k):\n        return lst[:k+1][::-1] + lst[k+1:]\n    \n    n = len(nums)\n    for size in range(n, 1, -1):\n        max_index = find_max_index(nums[:size])\n        if max_index != size - 1:\n            nums = flip(nums, max_index)\n            nums = flip(nums, size - 1)\n    \n    return nums\n",
    "MbppEval/628": "def replace_spaces(string):\n    return ''.join(['%20' if char == ' ' else char for char in string])\n\n# Testing the function\nprint(replace_spaces(\"My Name is Dawood\"))  # Expected: 'My%20Name%20is%20Dawood'\nprint(replace_spaces(\"I am a Programmer\"))  # Expected: 'I%20am%20a%20Programmer'\nprint(replace_spaces(\"I love Coding\"))      # Expected: 'I%20love%20Coding'\n",
    "MbppEval/626": "def triangle_area(r):\n    base = 2 * r\n    height = r\n    area = (base * height) / 2\n    return area\n",
    "MbppEval/629": "def Split(lst):\n    even_numbers = []\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    \n    return even_numbers\n",
    "MbppEval/631": "def replace_spaces(text):\n    modified_text = ''\n    for char in text:\n        if char == ' ':\n            modified_text += '_'\n        elif char == '_':\n            modified_text += ' '\n        else:\n            modified_text += char\n    return modified_text\n",
    "MbppEval/630": "def get_coordinates(coord):\n    row, col = coord[0], coord[1]\n\n    adjacent_coords = []\n\n    for r in range(row - 1, row + 2):\n        for c in range(col - 1, col + 2):\n            adjacent_coords.append([r, c])\n\n    return adjacent_coords\n",
    "MbppEval/633": "def pair_xor_Sum(arr, n):\n    result = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            result += arr[i] ^ arr[j]\n    \n    return result\n",
    "MbppEval/635": "import heapq as hq\ndef heap_sort(iterable):\n    if not isinstance(iterable, list):\n        raise ValueError(\"Input must be a list\")\n    \n    heap = list(iterable)\n    hq.heapify(heap)\n    \n    sorted_list = [hq.heappop(heap) for _ in range(len(heap))]\n    \n    return sorted_list\n",
    "MbppEval/632": "def move_zero(num_list):\n    non_zero_list = []\n    zero_count = 0\n\n    for num in num_list:\n        if num != 0:\n            non_zero_list.append(num)\n        else:\n            zero_count += 1\n\n    non_zero_list += [0] * zero_count\n\n    return non_zero_list\n",
    "MbppEval/637": "def noprofit_noloss(actual_cost, sale_amount): \n    profit = sale_amount - actual_cost\n    \n    if profit == 0:\n        return True\n    else:\n        return False\n",
    "MbppEval/639": "def sample_nam(sample_names):\n    total_length = 0\n    for name in sample_names:\n        if not name[0].islower():\n            total_length += len(name)\n    return total_length\n",
    "MbppEval/638": "import math\n\ndef wind_chill(v, t):\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16)\n    rounded_wind_chill = math.ceil(wind_chill_index)\n    return rounded_wind_chill\n",
    "MbppEval/104": "def sort_sublists(input_list):\n    # Step 0: Define a function named sort_sublists that takes one parameter, input_list\n    sorted_list = []\n    \n    # Step 1: Create an empty list sorted_list to store the sorted sublists\n    for sublist in input_list:\n        sorted_sublist = sorted(sublist)\n        sorted_list.append(sorted_sublist)\n    \n    return sorted_list\n",
    "MbppEval/62": "def smallest_num(xs):\n    if not xs:\n        return None\n    \n    smallest = xs[0]\n    \n    for num in xs[1:]:\n        if num < smallest:\n            smallest = num\n    \n    return smallest\n",
    "MbppEval/641": "def is_nonagonal(n): \n    return n * (7 * n - 5) // 2\n",
    "MbppEval/720": "def add_dict_to_tuple(test_tup, test_dict):\n    return test_tup + (test_dict,)\n",
    "MbppEval/723": "def count_same_pair(nums1, nums2):\n    count = 0\n    for idx1, idx2 in zip(range(len(nums1)), range(len(nums2))):\n        if nums1[idx1] == nums2[idx2]:\n            count += 1\n    return count\n",
    "MbppEval/644": "def reverse_Array_Upto_K(input, k):\n    reversed_list = input[:k]\n    reversed_list = reversed_list[::-1] + input[k:]\n    return reversed_list\n",
    "MbppEval/725": "import re\n\ndef extract_quotation(text1):\n    return re.findall(r'\"([^\"]*)\"', text1)\n",
    "MbppEval/724": "def power_base_sum(base, power):\n    result = base ** power\n    sum_of_digits = sum(int(digit) for digit in str(result))\n    return sum_of_digits\n",
    "MbppEval/643": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b\\w*z\\w*\\b'  # Regular expression pattern to match entire words containing 'z' not at the start or end\n    \n    matches = re.findall(pattern, text)\n    \n    if matches:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
    "MbppEval/726": "def multiply_elements(test_tup):\n    multiplied_elements = []\n    for i in range(len(test_tup) - 1):\n        multiplied_elements.append(test_tup[i] * test_tup[i + 1])\n    return tuple(multiplied_elements)\n",
    "MbppEval/226": "def odd_values_string(str):\n    result = \"\"\n    \n    for index, char in enumerate(str):\n        if index % 2 == 0:\n            result += char\n            \n    return result\n",
    "MbppEval/730": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    result = []\n    \n    for num in nums:\n        if not result or num != result[-1]:\n            result.append(num)\n    \n    return result\n",
    "MbppEval/722": "def filter_data(students, h, w):\n    filtered_students = {}\n    \n    for student, (height, weight) in students.items():\n        if height >= h and weight >= w:\n            filtered_students[student] = (height, weight)\n    \n    return filtered_students\n",
    "MbppEval/728": "def sum_list(lst1, lst2):\n    result = []\n    \n    if len(lst1) != len(lst2):\n        return \"Input lists must be of the same length\"\n    \n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    \n    return result\n",
    "MbppEval/731": "import math\n\ndef lateralsurface_cone(r, h):\n    slant_height = math.sqrt(r**2 + h**2)\n    lateral_surface_area = math.pi * r * slant_height\n    return lateral_surface_area\n",
    "MbppEval/732": "import re\ndef replace_specialchar(text):\n    modified_text = re.sub(r'[ ,.]', ':', text)\n    return modified_text\n",
    "MbppEval/735": "def set_middle_bits(n):\n    binary_str = bin(n)[2:]  # Convert the given number into a binary string\n    \n    first_bit = binary_str[0]\n    last_bit = binary_str[-1]\n    \n    middle_bits = ''.join(['0' if bit == '1' else '1' for bit in binary_str[1:-1]])  # Toggle the middle bits\n    \n    return int(first_bit + middle_bits + last_bit, 2)  # Convert binary back to integer\n",
    "MbppEval/734": "def sum_Of_Subarray_Prod(arr):\n    result = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            sublist = arr[i:j+1]\n            product = 1\n            for num in sublist:\n                product *= num\n            result += product\n    return result\n",
    "MbppEval/737": "import re \n\ndef check_str(string): \n\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    \n    if re.match(regex, string):\n        return 'Valid'\n    else:\n        return 'Invalid'\n",
    "MbppEval/736": "import bisect\n\ndef left_insertion(a, x):\n    return bisect.bisect_left(a, x)\n",
    "MbppEval/738": "def geometric_sum(n):\n    sum = 0\n    for i in range(n):\n        sum += 1 / (2**i)\n    return sum\n",
    "MbppEval/740": "def tuple_to_dict(test_tup):\n    result_dict = {}\n    for i in range(0, len(test_tup)-1, 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        result_dict[key] = value\n    return result_dict\n",
    "MbppEval/739": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of the smallest triangular number with n digits. \n\n    Parameters:\n    n (int): Number of digits in the triangular number.\n\n    Returns:\n    int: Index of the smallest triangular number with n digits.\n    '''\n    triangular_num = lambda x: x * (x + 1) // 2\n    index = 1\n    while len(str(triangular_num(index))) < n:\n        index += 1\n\n    return index\n",
    "MbppEval/742": "import math\n\ndef area_tetrahedron(side):\n    area_triangle = (side**2 * math.sqrt(3)) / 4\n    total_area = area_triangle * 4\n    return total_area\n\n# Testing the tetrahedron area calculation\nprint(area_tetrahedron(3))  # Expected output: 15.588457268119894\nprint(area_tetrahedron(20))  # Expected output: 692.8203230275509\nprint(area_tetrahedron(10))  # Expected output: 173.20508075688772\n",
    "MbppEval/743": "def rotate_right(lst, m):\n    if not lst:\n        return lst\n    \n    if m % len(lst) == 0:\n        return lst\n    \n    effective_rotation = m % len(lst)\n    rotated_lst = lst[-effective_rotation:] + lst[:-effective_rotation]\n    \n    return rotated_lst\n",
    "MbppEval/746": "import math\ndef sector_area(r,a):\n    if a > 360:\n        return None\n    else:\n        area = (a / 360) * math.pi * r**2\n        return area\n",
    "MbppEval/744": "def check_none(test_tup):\n    for element in test_tup:\n        if element is None:\n            return True\n    return False\n",
    "MbppEval/745": "def divisible_by_digits(startnum, endnum):\n    result = []\n\n    for num in range(startnum, endnum+1):\n        digits = str(num)\n        is_divisible = True\n        for digit in digits:\n            if int(digit) != 0 and num % int(digit) != 0:\n                is_divisible = False\n                break\n        \n        if is_divisible:\n            result.append(num)\n        \n    return result\n",
    "MbppEval/465": "def drop_empty(dict1):\n    non_empty_dict = {}\n    \n    for key, value in dict1.items():\n        if value is not None and value != '':\n            non_empty_dict[key] = value\n            \n    return non_empty_dict\n",
    "MbppEval/748": "import re\n\ndef capital_words_spaces(str1):\n    capital_pattern = r'(?<!\\s)([A-Z][a-z]+)'\n    words_with_capitals = re.findall(capital_pattern, str1)\n\n    for word in words_with_capitals:\n        str1 = str1.replace(word, ' ' + word)\n\n    return str1\n",
    "MbppEval/747": "def lcs_of_three(X, Y, Z): \n    if not X or not Y or not Z:\n        return 0\n\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    L = [[[0 for _ in range(o+1)] for _ in range(n+1)] for _ in range(m+1)]\n\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n\n    return L[m][n][o]\n",
    "MbppEval/749": "def sort_numeric_strings(nums_str):\n    nums = [int(num_str) for num_str in nums_str]\n    nums_sorted = sorted(nums)\n    return nums_sorted\n",
    "MbppEval/750": "def add_tuple(test_list, test_tup):\n    new_list = test_list + list(test_tup)\n    return new_list\n",
    "MbppEval/245": "def max_sum(arr): \n    inc_sum = [0] * len(arr)\n    dec_sum = [0] * len(arr)\n    \n    # Calculate the maximum increasing subsequence sum ending at each index\n    for i in range(len(arr)):\n        inc_sum[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j]:\n                inc_sum[i] = max(inc_sum[i], inc_sum[j] + arr[i])\n    \n    # Calculate the maximum decreasing subsequence sum starting at each index\n    for i in range(len(arr) - 1, -1, -1):\n        dec_sum[i] = arr[i]\n        for j in range(i + 1, len(arr)):\n            if arr[i] > arr[j]:\n                dec_sum[i] = max(dec_sum[i], dec_sum[j] + arr[i])\n    \n    max_sum_bitonic = 0\n    for i in range(len(arr)):\n        max_sum_bitonic = max(max_sum_bitonic, inc_sum[i] + dec_sum[i] - arr[i])\n    \n    return max_sum_bitonic\n",
    "MbppEval/753": "def min_k(test_list, K):\n    test_list.sort(key=lambda x: x[1])\n    return test_list[:K]\n",
    "MbppEval/756": "import re\n\ndef text_match_zero_one(text):\n    if re.search(r'ab+', text):\n        return ('Found a match!')\n    else:\n        return ('Not matched!')\n\n# Testing the function with sample inputs\nprint(text_match_zero_one(\"ac\"))  # ('Not matched!')\nprint(text_match_zero_one(\"dc\"))  # ('Not matched!')\nprint(text_match_zero_one(\"abbbba\"))  # ('Found a match!')\n",
    "MbppEval/755": "def second_smallest(numbers):\n    unique_numbers = list(set(numbers))\n    sorted_unique_numbers = sorted(unique_numbers)\n    numbers.sort()\n    if len(numbers) < 2:\n        return None\n    return numbers[1]\n",
    "MbppEval/752": "def jacobsthal_num(n):\n    if n <= 0:\n        return None\n    \n    if n == 1:\n        return 0\n    \n    if n == 2:\n        return 1\n    \n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2)\n",
    "MbppEval/754": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    \n    for i, (elem1, elem2, elem3) in enumerate(zip(l1, l2, l3)):\n        if elem1 == elem2 == elem3:\n            common_elements.append(elem1)\n    \n    return common_elements\n",
    "MbppEval/760": "def unique_Element(arr):\n    unique_set = set(arr)\n    if len(unique_set) == 1:\n        return 'YES'\n    else:\n        return 'NO'\n",
    "MbppEval/758": "def unique_sublists(list1):\n    unique_dict = {}\n    for sublist in list1:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in unique_dict:\n            unique_dict[tuple_sublist] += 1\n        else:\n            unique_dict[tuple_sublist] = 1\n    return unique_dict\n",
    "MbppEval/759": "def is_decimal(num):\n    if not isinstance(num, str):\n        return False\n    \n    if '.' not in num:\n        return False\n\n    parts = num.split('.')\n    \n    if len(parts) != 2:\n        return False\n\n    if not parts[0].isdigit() or not parts[1].isdigit():\n        return False\n\n    if len(parts[1]) != 2:\n        return False\n\n    return True\n",
    "MbppEval/762": "def check_monthnumber_number(monthnum):\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    return False\n",
    "MbppEval/247": "def lps(s):\n    n = len(s)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    \n    for i in range(n):\n        dp[i][i] = 1\n    \n    for end in range(1, n):\n        for start in range(end - 1, -1, -1):\n            if s[start] == s[end]:\n                dp[start][end] = dp[start + 1][end - 1] + 2\n            else:\n                dp[start][end] = max(dp[start + 1][end], dp[start][end - 1])\n    \n    return dp[0][-1]\n",
    "MbppEval/764": "def number_ctr(string):\n    count = 0\n    \n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count\n",
    "MbppEval/757": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n\n    return str(count)\n",
    "MbppEval/766": "def pair_wise(l1):\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs\n",
    "MbppEval/769": "def Diff(li1, li2):\n    diff_list = []\n\n    for num in li1:\n        if num not in li2:\n            diff_list.append(num)\n\n    return diff_list\n",
    "MbppEval/763": "def find_min_diff(arr, n):\n    arr.sort()  # Step 1: Sort the array in ascending order\n    min_diff = float('inf')  # Step 2: Initialize a variable min_diff to store the minimum difference\n    \n    for i in range(1, n):  # Step 3: Iterate through the array from the second element to the last element\n        diff = arr[i] - arr[i-1]  # Step 4: Calculate the difference between the current element and the previous element\n        if diff < min_diff:  # Step 5: If the difference is less than the current minimum difference, update the minimum difference\n            min_diff = diff\n    \n    return min_diff\n",
    "MbppEval/770": "def odd_num_sum(n):\n    total_sum = 0\n    for i in range(1, 2*n+1, 2):\n        total_sum += i**4\n    return total_sum\n",
    "MbppEval/772": "def remove_length(test_str, K):\n    words = test_str.split()\n    filtered_words = [word for word in words if len(word) != K]\n    filtered_str = ' '.join(filtered_words)\n    return filtered_str\n",
    "MbppEval/773": "import re\n\ndef occurance_substring(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        pattern_match = match.group()\n        start_index = match.start()\n        end_index = match.end() - 1\n        return pattern_match, start_index, end_index\n    else:\n        return None\n",
    "MbppEval/775": "def odd_position(nums):\n    result = True\n    for i in range(1, len(nums), 2):  # Loop through odd indices starting from index 1\n        if nums[i] % 2 == 0:  # Check if the number at the odd index is even\n            result = False\n            break\n    return result\n",
    "MbppEval/776": "def count_vowels(test_str):\n    vowel_count = 0\n    vowels = 'aeiouAEIOU'\n    \n    for i in range(1, len(test_str) - 1):\n        char = test_str[i]\n        before = test_str[i - 1]\n        after = test_str[i + 1]\n        \n        if any(c in vowels for c in [char, before, after]):\n            vowel_count += 1\n\n    return vowel_count\n",
    "MbppEval/777": "def find_sum(arr):\n    freq_dict = {}  # Step 0: Create a dictionary to store the frequency of each element\n    \n    for num in arr:  # Step 1: Count the frequency of each element in the dictionary\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    non_repeated_sum = sum(key for key, value in freq_dict.items() if value == 1)  # Step 2: Summing non-repeated elements\n    \n    return non_repeated_sum\n",
    "MbppEval/765": "import math\n\ndef factorize(n):\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n = n // i\n\n    if n > 2:\n        factors.append(n)\n    \n    return factors\n\ndef count_distinct_prime_factors(n):\n    prime_factors = factorize(n)\n    prime_factors_set = set(prime_factors)\n    return len(prime_factors_set)\n\ndef count_total_divisors(prime_factors):\n    total_divisors = 1\n    for factor in set(prime_factors):\n        total_divisors *= prime_factors.count(factor) + 1\n    return total_divisors\n\ndef is_polite(n):\n    while True:\n        prime_factors = factorize(n)\n        total_divisors = count_total_divisors(prime_factors)\n        \n        if total_divisors >= n + 2:\n            break\n        \n        n += 1\n    \n    return n\n",
    "MbppEval/780": "from itertools import combinations\n\ndef find_combinations(test_list):\n    result = []\n    \n    pairs = combinations(test_list, 2)\n    \n    for pair in pairs:\n        sum_pair = tuple(sum(x) for x in zip(*pair))\n        result.append(sum_pair)\n    \n    return result\n",
    "MbppEval/751": "def check_min_heap_helper(arr, i):\n    if i >= len(arr):\n        return True\n        \n    if 2*i + 1 < len(arr) and arr[2*i + 1] < arr[i]:\n        pass\n    else:\n        return False\n        \n    if 2*i + 2 < len(arr) and arr[2*i + 2] < arr[i]:\n        pass\n    else:\n        return False\n        \n    left_child = check_min_heap_helper(arr, 2*i + 1)\n    right_child = check_min_heap_helper(arr, 2*i + 2)\n    \n    return left_child and right_child\n",
    "MbppEval/779": "def unique_sublists(list1):\n    unique_sublists_dict = {}\n    \n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        \n        if sublist_tuple in unique_sublists_dict:\n            unique_sublists_dict[sublist_tuple] += 1\n        else:\n            unique_sublists_dict[sublist_tuple] = 1\n        \n    return unique_sublists_dict\n",
    "MbppEval/63": "def max_difference(test_list):\n    max_diff = 0\n\n    for pair in test_list:\n        a, b = pair\n        diff = abs(a - b)\n        \n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff\n",
    "MbppEval/767": "def get_pairs_count(arr, sum):\n    count = 0\n    num_dict = {}\n    \n    for num in arr:\n        if num in num_dict:\n            num_dict[num] += 1\n        else:\n            num_dict[num] = 1\n    \n    for num in arr:\n        diff = sum - num\n        if diff in num_dict and num_dict[diff] > 0:\n            count += num_dict[diff]\n        \n        if num != diff:\n            num_dict[num] -= 1\n    \n    return count\n",
    "MbppEval/781": "import math \n\ndef count_divisors(n):\n    count = 0\n    \n    # Loop through numbers from 1 to sqrt(n)\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 2 if n/i != i else 1\n    \n    # Check if count of divisors is even or odd\n    if count % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n",
    "MbppEval/782": "def odd_length_sum(arr):\n    total_sum = 0\n\n    for start in range(len(arr)):\n        for end in range(start, len(arr)):\n            subarray = arr[start:end+1]\n            if len(subarray) % 2 == 1:\n                total_sum += sum(subarray)\n    \n    return total_sum\n",
    "MbppEval/785": "def tuple_str_int(test_str):\n    cleaned_str = test_str[1:-1]\n    num_list = cleaned_str.split(', ')\n    int_list = [int(num) for num in num_list]\n    int_tuple = tuple(int_list)\n    return int_tuple\n",
    "MbppEval/787": "import re\n\ndef text_match_three(text):\n    pattern = r'ab{3}'\n    if re.match(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
    "MbppEval/788": "def new_tuple(test_list, test_str):\n    new_tuple = tuple(test_list + [test_str])\n    return new_tuple\n",
    "MbppEval/786": "import bisect\n\ndef right_insertion(a, x):\n    if not a:\n        return 0\n    \n    if x > a[-1]:\n        return len(a)\n    \n    insertion_point = bisect.bisect_right(a, x)\n    \n    return insertion_point\n",
    "MbppEval/790": "def even_position(nums):\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 != 0:\n                return False\n    return True\n",
    "MbppEval/791": "def remove_nested(test_tup):\n    non_nested_elements = []\n\n    for elem in test_tup:\n        if not isinstance(elem, tuple):\n            non_nested_elements.append(elem)\n    \n    return tuple(non_nested_elements)\n",
    "MbppEval/778": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    packed_list = []\n    \n    for key, group in groupby(list1):\n        packed_list.append(list(group))\n\n    return packed_list\n",
    "MbppEval/793": "def last(arr, x):\n    last_index = -1\n    for i in range(len(arr)):\n        if arr[i] == x:\n            last_index = i\n    return last_index\n",
    "MbppEval/783": "def rgb_to_hsv(r, g, b):\n    r /= 255.0\n    g /= 255.0\n    b /= 255.0\n    \n    minimum = min(r, g, b)\n    maximum = max(r, g, b)\n    delta = maximum - minimum\n    \n    if delta == 0:\n        h = 0\n    elif maximum == r:\n        h = 60 * (((g - b) / delta) % 6)\n    elif maximum == g:\n        h = 60 * (((b - r) / delta) + 2)\n    else:  # maximum == b\n        h = 60 * (((r - g) / delta) + 4)\n    \n    if maximum == 0:\n        s = 0\n    else:\n        s = (delta / maximum) * 100\n    \n    v = maximum * 100\n    \n    return h, s, v\n",
    "MbppEval/798": "def _sum(arr):\n    total = 0  # Step 0: Initialize total to 0\n",
    "MbppEval/796": "def return_sum(dict):\n    total_sum = 0\n    for value in dict.values():\n        total_sum += value\n    return total_sum\n",
    "MbppEval/794": "import re\n\ndef text_starta_endb(text):\n    if re.search(r'a.*b', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
    "MbppEval/799": "def left_rotate(n, d):\n    binary_n = format(n, '032b')\n    rotated_binary = binary_n[d:] + binary_n[:d]\n    return int(rotated_binary, 2)\n",
    "MbppEval/801": "def test_three_equal(x, y, z):\n    if x == y == z:\n        return 3\n    elif x == y or y == z or x == z:\n        return 2\n    else:\n        return 0\n",
    "MbppEval/800": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Remove all whitespaces from a string.\n\n    Examples:\n    remove_all_spaces('python  program') == 'pythonprogram'\n    remove_all_spaces('python   programming    language') == 'pythonprogramminglanguage'\n    remove_all_spaces('python                     program') == 'pythonprogram'\n    '''\n    return re.sub(r'\\s+', '', text)\n",
    "MbppEval/797": "def sum_in_range(l, r):\n    total = 0\n    \n    for i in range(l, r + 1):\n        if i % 2 != 0:\n            total += i\n                \n    return total\n",
    "MbppEval/792": "def count_list(input_list):\n    count = 0\n    for element in input_list:\n        if isinstance(element, list):\n            count += 1\n    return count\n",
    "MbppEval/802": "def count_rotation(arr):\n    if not arr:\n        return \"Invalid input. Please provide a non-empty list.\"\n    \n    min_index = arr.index(min(arr))\n    num_rotations = min_index\n    return num_rotations\n",
    "MbppEval/807": "def first_odd(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\n",
    "MbppEval/804": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n\n    return product % 2 == 0\n",
    "MbppEval/803": "import math\n\ndef is_perfect_square(n):\n    square_root = math.sqrt(n)\n    return square_root.is_integer()\n\n# Test the function\nprint(is_perfect_square(9))   # True (3 * 3 = 9)\nprint(is_perfect_square(16))  # True (4 * 4 = 16)\nprint(is_perfect_square(10))  # False\n",
    "MbppEval/805": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_sum_list = None\n    \n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_sum_list = lst\n\n    return max_sum_list\n",
    "MbppEval/808": "def check_K(test_tup, K):\n    return K in test_tup\n\n# Examples\nprint(check_K((10, 4, 5, 6, 8), 6))  # Output: True\nprint(check_K((1, 2, 3, 4, 5, 6), 7))  # Output: False\nprint(check_K((7, 8, 9, 44, 11, 12), 11))  # Output: True\n",
    "MbppEval/784": "def mul_even_odd(list1):\n    first_even = None\n    first_odd = None\n    for num in list1:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n\n    if first_even is not None and first_odd is not None:\n        product = first_even * first_odd\n        return product\n    else:\n        return None\n",
    "MbppEval/809": "def check_smaller(test_tup1, test_tup2):\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True\n",
    "MbppEval/806": "def max_run_uppercase(test_str):\n    max_run = 0\n    current_run = 0\n\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 0\n\n    max_run = max(max_run, current_run)\n\n    return max_run\n",
    "MbppEval/771": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    bracket_map = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    \n    for char in exp:\n        if char in bracket_map.values():\n            stack.append(char)\n        elif char in bracket_map.keys():\n            if not stack or bracket_map[char] != stack.pop():\n                return False\n    \n    return len(stack) == 0\n",
    "MbppEval/18": "NO_OF_CHARS = 256\n\ndef create_char_count_list(s):\n    char_count = [0] * NO_OF_CHARS\n    for char in s:\n        char_count[ord(char)] += 1\n    return char_count\n\ndef str_to_list(string): \n    char_count_list = create_char_count_list(string)\n    dirty_chars = []\n    for i in range(NO_OF_CHARS):\n        if char_count_list[i] > 0:\n            dirty_chars.append(chr(i))\n    result = \"\"\n    for char in string:\n        if char not in dirty_chars:\n            result += char\n    return result\n",
    "MbppEval/585": "import heapq\n\ndef expensive_items(items, n):\n    expensive = []\n    for item in items:\n        heapq.heappush(expensive, (-item['price'], item))\n    \n    most_expensive = [heapq.heappop(expensive)[1] for _ in range(n)]\n    \n    return most_expensive\n",
    "MbppEval/117": "def list_to_float(test_list):\n    converted_list = []\n    \n    for tup in test_list:\n        converted_tuple = []\n        \n        for elem in tup:\n            try:\n                converted_tuple.append(float(elem))\n            except ValueError:\n                converted_tuple.append(elem)\n        \n        converted_list.append(tuple(converted_tuple))\n    \n    return converted_list\n",
    "MbppEval/721": "def maxAverageOfPath(cost):\n    n = len(cost)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    count = [[0 for _ in range(n)] for _ in range(n)]\n\n    dp[0][0] = cost[0][0]\n    count[0][0] = 1\n\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n        count[i][0] = count[i-1][0] + 1\n\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n        count[0][j] = count[0][j-1] + 1\n\n    for i in range(1, n):\n        for j in range(1, n):\n            top = dp[i-1][j] + cost[i][j]\n            left = dp[i][j-1] + cost[i][j]\n            if top >= left:\n                dp[i][j] = top\n                count[i][j] = count[i-1][j] + 1\n            else:\n                dp[i][j] = left\n                count[i][j] = count[i][j-1] + 1\n\n    return dp[n-1][n-1] / count[n-1][n-1]\n",
    "MbppEval/741": "# Final implementation of the all_Characters_Same function\n\ndef all_Characters_Same(s):\n    if len(s) < 2:\n        return True\n    for i in range(1, len(s)):\n        if s[i] != s[0]:\n            return False\n    return True\n\n# Test cases\nprint(all_Characters_Same(\"python\"))  # Expected output: False\nprint(all_Characters_Same(\"aaa\"))     # Expected output: True\nprint(all_Characters_Same(\".data\"))   # Expected output: False\n",
    "MbppEval/640": "import re\n\ndef remove_parenthesis(items):\n    modified_items = []  # Step 0: Initialize an empty list to hold the modified strings.\n    \n    for item in items:\n        modified_item = re.sub(r'\\(.*?\\)', '', item)  # Step 3: Remove text within parentheses\n        modified_items.append(modified_item.strip())  # Removing any leading or trailing whitespace\n        \n    return modified_items\n",
    "MbppEval/111": "def common_in_nested_lists(nestedlist):\n    result = []\n    \n    if nestedlist:\n        result = nestedlist[0]\n    \n    for sublist in nestedlist[1:]:\n        common_elements = [element for element in result if element in sublist]\n        result = common_elements\n    \n    return result\n",
    "MbppEval/434": "import re\n\ndef text_match_one(text):\n    if re.search('ab+', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n",
    "MbppEval/88": "def freq_count(list1):\n    freq_dict = {}  # Step 1: Create an empty dictionary to store frequency count\n    \n    for element in list1:  # Step 2: Loop through each element in the list\n        if element in freq_dict:  # Step 3: Check if element is already in dictionary\n            freq_dict[element] += 1  # Step 4: Increment the count for existing element\n        else:\n            freq_dict[element] = 1  # Step 5: Add element to dictionary with count of 1\n\n    return freq_dict  # Step 6: Return the dictionary with frequency count\n",
    "MbppEval/143": "def find_lists(Input):\n    count = 0  # Step 2: Initialize a variable to count the number of lists in the tuple\n\n    for element in Input:\n        if isinstance(element, list):  # Step 4: Check if the current element is a list\n            count += 1\n\n    return count  # Step 5: Return the count of lists in the tuple\n",
    "MbppEval/145": "def max_Abs_Diff(arr): \n    if len(arr) < 2:\n        return 0\n    \n    min_val = arr[0]\n    max_val = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] < min_val:\n            min_val = arr[i]\n        elif arr[i] > max_val:\n            max_val = arr[i]\n\n    return abs(max_val - min_val)\n",
    "MbppEval/408": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    result = []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        heapq.heappush(heap, (nums1[i], nums2[0], i, 0))\n\n    while k > 0 and heap:\n        pair = heapq.heappop(heap)\n        result.append([pair[0], pair[1]])\n        k -= 1\n\n        if pair[3] < len(nums2) - 1:\n            heapq.heappush(heap, (pair[0], nums2[pair[3]+1], pair[2], pair[3] + 1))\n\n    return result\n",
    "MbppEval/619": "def move_num(test_str):\n    alpha_str = \"\"\n    num_str = \"\"\n\n    for char in test_str:\n        if char.isnumeric():\n            num_str += char\n        else:\n            alpha_str += char\n\n    alpha_num_str = alpha_str + num_str\n    return alpha_num_str\n",
    "MbppEval/620": "def largest_subset(a):\n    max_subset_size = 0\n    \n    for i in range(len(a)):\n        subset = set([a[i])\n        \n        for j in range(i + 1, len(a)):\n            if all([a[j] % num == 0 for num in subset]):\n                subset.add(a[j])\n        \n        max_subset_size = max(max_subset_size, len(subset))\n    \n    return max_subset_size\n",
    "MbppEval/61": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = 0\n    prefix_sums = defaultdict(int)\n    prefix_sum = 0\n    \n    for c in s:\n        num = int(c)\n        prefix_sum += num\n        \n        for i in range(1, prefix_sum + 1):\n            if prefix_sum - i in prefix_sums:\n                count += prefix_sums[prefix_sum - i]\n        \n        prefix_sums[prefix_sum] += 1\n    \n    return count\n",
    "MbppEval/103": "def eulerian_num(n, m): \n    if n == 0:\n        return 1\n    elif m == 0:\n        return 0\n    elif m == 1:\n        return n + 1\n    \n    def eulerian_helper(i, j, memo):\n        if i == 0:\n            return 1\n        elif j == 0:\n            return 0\n        elif memo[i][j] != -1:\n            return memo[i][j]\n        \n        result = (j + 1) * eulerian_helper(i - 1, j, memo) + (i - j) * eulerian_helper(i - 1, j - 1, memo)\n        memo[i][j] = result\n        return result\n    \n    memo = [[-1 for _ in range(m + 1)] for _ in range(n + 1)]\n    \n    return eulerian_helper(n, m, memo)\n",
    "MbppEval/733": "def find_first_occurrence(A, x):\n    first_index = -1\n    \n    for index, element in enumerate(A):\n        if element == x:\n            first_index = index\n            break\n \n        elif element > x:\n            break\n\n    return first_index\n",
    "MbppEval/69": "def is_sublist(l, s):\n    for i in range(len(l)):\n        if l[i] == s[0] and l[i:i+len(s)] == s:\n            return True\n    return False\n",
    "MbppEval/286": "def max_sub_array_sum_repeated(a, n, k): \n    new_array = a * k\n    max_sum = float('-inf')\n    current_sum = float('-inf')\n    \n    for i in range(len(new_array) - n + 1):\n        sub_array = new_array[i:i+n]\n        current_sum = sum(sub_array)\n        \n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum\n",
    "MbppEval/415": "def max_product(arr): \n    max_pair = ()\n    max_product = None\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            \n            if max_product is None or product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n    \n    return max_pair\n",
    "MbppEval/100": "def next_smallest_palindrome(num):\n    def is_palindrome(num_str):\n        return num_str == num_str[::-1]\n\n    if is_palindrome(str(num)):\n        num += 1\n        return num\n    else:\n        num_str = str(num)\n        mid = len(num_str) // 2\n        left_half = num_str[:mid]\n        right_half = num_str[mid + len(num_str) % 2:]\n        if int(right_half) < int(left_half[::-1]):\n            new_num = int(left_half + left_half[-1] + left_half[::-1])\n        else:\n            new_num = int(left_half + left_half[-1::-1])\n\n        return new_num\n",
    "MbppEval/97": "def frequency_lists(list1):\n    freq_dict = {}\n    for sublist in list1:\n        for element in sublist:\n            if element in freq_dict:\n                freq_dict[element] += 1\n            else:\n                freq_dict[element] = 1\n    return freq_dict\n",
    "MbppEval/65": "def recursive_list_sum(data_list):\n    total_sum = 0\n    \n    for element in data_list:\n        if isinstance(element, list):\n            total_sum += recursive_list_sum(element)\n        else:\n            total_sum += element\n    \n    return total_sum\n",
    "MbppEval/72": "import math\n\ndef dif_Square(n): \n    for a in range(1, int(math.sqrt(n)) + 1):\n        b = math.isqrt(a * a - n)\n        if a * a - b * b == n:\n            return True\n    return False\n",
    "MbppEval/301": "def dict_depth(d):\n    depth = 0\n    \n    if not d:\n        return 0\n    \n    max_depth = 0\n    \n    if not isinstance(d, dict):\n        return depth\n    \n    for key, value in d.items():\n        if isinstance(value, dict):\n            curr_depth = dict_depth(value)\n            max_depth = max(max_depth, curr_depth + 1)\n    \n    return max_depth\n",
    "MbppEval/129": "def magic_square_test(my_matrix):\n    def is_square_matrix(matrix):\n        num_rows = len(matrix)\n        for row in matrix:\n            if len(row) != num_rows:\n                return False\n        return True\n\n    if not is_square_matrix(my_matrix):\n        return False\n\n    target_sum = sum(my_matrix[0])\n\n    for row in my_matrix[1:]:\n        if sum(row) != target_sum:\n            return False\n\n    for col in range(len(my_matrix)):\n        col_sum = sum(row[col] for row in my_matrix)\n        if col_sum != target_sum:\n            return False\n\n    diagonal_sum1 = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    diagonal_sum2 = sum(my_matrix[i][len(my_matrix)-1-i] for i in range(len(my_matrix)))\n\n    return diagonal_sum1 == target_sum and diagonal_sum2 == target_sum\n\n# Test the function\nprint(magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]))  # True\nprint(magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]]))  # True\nprint(magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]]))  # False\n",
    "MbppEval/161": "def remove_elements(list1, list2):\n    result = []\n    \n    for elem in list1:\n        if elem not in list2:\n            result.append(elem)\n    \n    return result\n",
    "MbppEval/398": "def sum_of_digits(nums):\n    total_sum = 0\n\n    for num in nums:\n        if isinstance(num, int):\n            digit_sum = 0\n            for digit in str(num):\n                if digit.isdigit():\n                    digit_sum += int(digit)\n            total_sum += digit_sum\n        else:\n            print(f\"Ignoring non-integer element: {num}\")\n\n    return total_sum\n",
    "MbppEval/468": "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    \n    n = len(arr)\n    max_product = arr[0]\n    \n    increasing_subsequences = [[arr[0]]]\n    \n    for i in range(1, n):\n        current = arr[i]\n        new_sequences = []\n        \n        for seq in increasing_subsequences:\n            if current > seq[-1]:\n                new_sequences.append(seq + [current])\n                \n        increasing_subsequences.extend(new_sequences)\n        increasing_subsequences.append([current])\n    \n    max_prod = float('-inf')\n    for seq in increasing_subsequences:\n        product = 1\n        for num in seq:\n            product *= num\n        max_prod = max(max_prod, product)\n    \n    return max_prod\n",
    "MbppEval/109": "def odd_equivalent(s, n):\n    count = 0\n    for _ in range(n):\n        s = s[-1] + s[:-1]  # Rotate the binary string\n        decimal_num = int(s, 2)  # Convert binary string to decimal number\n        if decimal_num % 2 != 0:  # Check if decimal number is odd\n            count += 1\n    return count\n",
    "MbppEval/462": "def combinations_list(list1):\n    all_combinations = [[]]\n    \n    for element in list1:\n        new_combinations = []\n        for combination in all_combinations:\n            new_combinations.append(combination + [element])\n\n        all_combinations.extend(new_combinations)\n\n    return all_combinations\n\n# Testing the implementation with a sample list\nprint(combinations_list(['orange', 'red', 'green', 'blue']))\n",
    "MbppEval/239": "def get_total_number_of_sequences(m, n): \n    count = 0\n\n    def generate_sequences(length, max_val, sequence):\n        nonlocal count\n        if length == n:\n            count += 1\n            return\n        for value in range(max_val * 2, m+1):\n            if all(value >= 2 * elem and value <= m for elem in sequence):\n                generate_sequences(length + 1, value, sequence + [value])\n\n    generate_sequences(0, 1, [])\n\n    return count\n",
    "MbppEval/7": "long_words = [word for word in words if len(word) >= 4]\nreturn long_words\n"
}