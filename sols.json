[
    [
        "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()  # Sort the list of numbers in ascending order\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i+1] - numbers[i]) < threshold:\n            return True\n    return False\n\n\n# Test cases\nprint(has_close_elements([1.0, 2.0, 3.0], 0.5))  # Output: False\nprint(has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3))  # Output: True\n",
        "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False\n\n\n# Test cases\nprint(has_close_elements([1.0, 2.0, 3.0], 0.5))  # Output: False\nprint(has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3))  # Output: True\n",
        "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n\n\n# Testing the function\nif __name__ == \"__main__\":\n    assert has_close_elements([1.0, 2.0, 3.0], 0.5) == False\n    assert has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) == True\n"
    ],
    [
        "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_group = \"\"\n\n    for char in paren_string:\n        if char == '(':\n            current_group += char\n        elif char == ')':\n            current_group += char\n            result.append(current_group)\n            current_group = \"\"\n\n    return result\n\n# Test the function\nif __name__ == \"__main__\":\n    assert separate_paren_groups('( ) (( )) (( )( ))') == ['()', '(())', '(()())']\n",
        "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    count = 0\n    current_group = ''\n    \n    for char in paren_string:\n        if char == '(':\n            count += 1\n            current_group += char\n        elif char == ')':\n            count -= 1\n            current_group += char\n            if count == 0:\n                result.append(current_group.replace(\" \", \"\"))\n                current_group = ''\n    \n    return result\n\n# Test the function\nprint(separate_paren_groups('( ) (( )) (( )( ))'))  # Output: ['()', '(())', '(()())']\n",
        "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    count = 0\n    start = 0\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            count += 1\n        elif char == ')':\n            count -= 1\n            if count == 0:\n                result.append(paren_string[start:i+1].replace(\" \", \"\"))\n                start = i + 1\n    return result\n\n\n# Test the function\nprint(separate_paren_groups('( ) (( )) (( )( ))'))  # Output: ['()', '(())', '(()())']\n"
    ],
    [
        "def truncate_number(number: float) -> float:\n    \"\"\"Return the decimal part of the given positive floating point number.\"\"\"\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part\n\n# Test the function with the example from the docstring\nprint(truncate_number(3.5))  # Output should be 0.5\n",
        "def truncate_number(number: float) -> float:\n    \"\"\"Given a positive floating point number, return the decimal part of the number.\"\"\"\n    \n    return number - int(number)\n\n# Test the function with an example\nprint(truncate_number(3.5))  # Output should be 0.5\n",
        "def truncate_number(number: float) -> float:\n    return number - int(number)\n\n# Test the function with the example from the docstring\nprint(truncate_number(3.5))  # Output: 0.5\n"
    ]
]